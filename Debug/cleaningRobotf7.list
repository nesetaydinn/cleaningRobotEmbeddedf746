
cleaningRobotf7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08009578  08009578  00019578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097c0  080097c0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080097c0  080097c0  000197c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097c8  080097c8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097c8  080097c8  000197c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097cc  080097cc  000197cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080097d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006670  20000078  08009848  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200066e8  08009848  000266e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002195b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f53  00000000  00000000  00041a03  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a38  00000000  00000000  00045958  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001850  00000000  00000000  00047390  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004be6  00000000  00000000  00048be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015d04  00000000  00000000  0004d7c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fe101  00000000  00000000  000634ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001615cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007028  00000000  00000000  00161648  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009560 	.word	0x08009560

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08009560 	.word	0x08009560

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fe17 	bl	80011f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f876 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 fa9a 	bl	8000b04 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005d0:	f000 f906 	bl	80007e0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80005d4:	f000 f9e8 	bl	80009a8 <MX_TIM2_Init>
  MX_ADC3_Init();
 80005d8:	f000 f954 	bl	8000884 <MX_ADC3_Init>
  MX_UART7_Init();
 80005dc:	f000 fa32 	bl	8000a44 <MX_UART7_Init>
  MX_USART6_UART_Init();
 80005e0:	f000 fa60 	bl	8000aa4 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 80005e4:	f000 f9a0 	bl	8000928 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005e8:	f004 fc6c 	bl	8004ec4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sendUart1 */
  sendUart1Handle = osThreadNew(sendUart1Task, NULL, &sendUart1_attributes);
 80005ec:	4a1d      	ldr	r2, [pc, #116]	; (8000664 <main+0xa4>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	481d      	ldr	r0, [pc, #116]	; (8000668 <main+0xa8>)
 80005f2:	f004 fcd1 	bl	8004f98 <osThreadNew>
 80005f6:	4602      	mov	r2, r0
 80005f8:	4b1c      	ldr	r3, [pc, #112]	; (800066c <main+0xac>)
 80005fa:	601a      	str	r2, [r3, #0]

  /* creation of sendUart2 */
  sendUart2Handle = osThreadNew(sendUart2Task, NULL, &sendUart2_attributes);
 80005fc:	4a1c      	ldr	r2, [pc, #112]	; (8000670 <main+0xb0>)
 80005fe:	2100      	movs	r1, #0
 8000600:	481c      	ldr	r0, [pc, #112]	; (8000674 <main+0xb4>)
 8000602:	f004 fcc9 	bl	8004f98 <osThreadNew>
 8000606:	4602      	mov	r2, r0
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <main+0xb8>)
 800060a:	601a      	str	r2, [r3, #0]

  /* creation of getUart1 */
  getUart1Handle = osThreadNew(getUart1Task, NULL, &getUart1_attributes);
 800060c:	4a1b      	ldr	r2, [pc, #108]	; (800067c <main+0xbc>)
 800060e:	2100      	movs	r1, #0
 8000610:	481b      	ldr	r0, [pc, #108]	; (8000680 <main+0xc0>)
 8000612:	f004 fcc1 	bl	8004f98 <osThreadNew>
 8000616:	4602      	mov	r2, r0
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <main+0xc4>)
 800061a:	601a      	str	r2, [r3, #0]

  /* creation of getUart2 */
  getUart2Handle = osThreadNew(getUart2Task, NULL, &getUart2_attributes);
 800061c:	4a1a      	ldr	r2, [pc, #104]	; (8000688 <main+0xc8>)
 800061e:	2100      	movs	r1, #0
 8000620:	481a      	ldr	r0, [pc, #104]	; (800068c <main+0xcc>)
 8000622:	f004 fcb9 	bl	8004f98 <osThreadNew>
 8000626:	4602      	mov	r2, r0
 8000628:	4b19      	ldr	r3, [pc, #100]	; (8000690 <main+0xd0>)
 800062a:	601a      	str	r2, [r3, #0]

  /* creation of readADCval */
  readADCvalHandle = osThreadNew(readADCvalTask, NULL, &readADCval_attributes);
 800062c:	4a19      	ldr	r2, [pc, #100]	; (8000694 <main+0xd4>)
 800062e:	2100      	movs	r1, #0
 8000630:	4819      	ldr	r0, [pc, #100]	; (8000698 <main+0xd8>)
 8000632:	f004 fcb1 	bl	8004f98 <osThreadNew>
 8000636:	4602      	mov	r2, r0
 8000638:	4b18      	ldr	r3, [pc, #96]	; (800069c <main+0xdc>)
 800063a:	601a      	str	r2, [r3, #0]

  /* creation of btnControls */
  btnControlsHandle = osThreadNew(btnControlsTask, NULL, &btnControls_attributes);
 800063c:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <main+0xe0>)
 800063e:	2100      	movs	r1, #0
 8000640:	4818      	ldr	r0, [pc, #96]	; (80006a4 <main+0xe4>)
 8000642:	f004 fca9 	bl	8004f98 <osThreadNew>
 8000646:	4602      	mov	r2, r0
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <main+0xe8>)
 800064a:	601a      	str	r2, [r3, #0]

  /* creation of lcdController */
  lcdControllerHandle = osThreadNew(lcdControllerTask, NULL, &lcdController_attributes);
 800064c:	4a17      	ldr	r2, [pc, #92]	; (80006ac <main+0xec>)
 800064e:	2100      	movs	r1, #0
 8000650:	4817      	ldr	r0, [pc, #92]	; (80006b0 <main+0xf0>)
 8000652:	f004 fca1 	bl	8004f98 <osThreadNew>
 8000656:	4602      	mov	r2, r0
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <main+0xf4>)
 800065a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800065c:	f004 fc66 	bl	8004f2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000660:	e7fe      	b.n	8000660 <main+0xa0>
 8000662:	bf00      	nop
 8000664:	08009658 	.word	0x08009658
 8000668:	08000bf1 	.word	0x08000bf1
 800066c:	2000638c 	.word	0x2000638c
 8000670:	0800967c 	.word	0x0800967c
 8000674:	08000c05 	.word	0x08000c05
 8000678:	200064f4 	.word	0x200064f4
 800067c:	080096a0 	.word	0x080096a0
 8000680:	08000c19 	.word	0x08000c19
 8000684:	200064f8 	.word	0x200064f8
 8000688:	080096c4 	.word	0x080096c4
 800068c:	08000c2d 	.word	0x08000c2d
 8000690:	20006580 	.word	0x20006580
 8000694:	080096e8 	.word	0x080096e8
 8000698:	08000c41 	.word	0x08000c41
 800069c:	20006394 	.word	0x20006394
 80006a0:	0800970c 	.word	0x0800970c
 80006a4:	08000cb5 	.word	0x08000cb5
 80006a8:	20006390 	.word	0x20006390
 80006ac:	08009730 	.word	0x08009730
 80006b0:	08000ccd 	.word	0x08000ccd
 80006b4:	200064fc 	.word	0x200064fc

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b0b4      	sub	sp, #208	; 0xd0
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006c2:	2230      	movs	r2, #48	; 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f008 fb45 	bl	8008d56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2284      	movs	r2, #132	; 0x84
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f008 fb36 	bl	8008d56 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	4b3b      	ldr	r3, [pc, #236]	; (80007d8 <SystemClock_Config+0x120>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	4a3a      	ldr	r2, [pc, #232]	; (80007d8 <SystemClock_Config+0x120>)
 80006f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f4:	6413      	str	r3, [r2, #64]	; 0x40
 80006f6:	4b38      	ldr	r3, [pc, #224]	; (80007d8 <SystemClock_Config+0x120>)
 80006f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000702:	4b36      	ldr	r3, [pc, #216]	; (80007dc <SystemClock_Config+0x124>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a35      	ldr	r2, [pc, #212]	; (80007dc <SystemClock_Config+0x124>)
 8000708:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800070c:	6013      	str	r3, [r2, #0]
 800070e:	4b33      	ldr	r3, [pc, #204]	; (80007dc <SystemClock_Config+0x124>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800071a:	2301      	movs	r3, #1
 800071c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000724:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000728:	2302      	movs	r3, #2
 800072a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000732:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000736:	2319      	movs	r3, #25
 8000738:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 800073c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000740:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800074a:	2302      	movs	r3, #2
 800074c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000754:	4618      	mov	r0, r3
 8000756:	f002 f937 	bl	80029c8 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000760:	f000 fad8 	bl	8000d14 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000764:	f002 f8e0 	bl	8002928 <HAL_PWREx_EnableOverDrive>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800076e:	f000 fad1 	bl	8000d14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000778:	2302      	movs	r3, #2
 800077a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000784:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000788:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000790:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000794:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000798:	2107      	movs	r1, #7
 800079a:	4618      	mov	r0, r3
 800079c:	f002 fbb8 	bl	8002f10 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80007a6:	f000 fab5 	bl	8000d14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_UART7
 80007aa:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 80007ae:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80007b0:	2300      	movs	r3, #0
 80007b2:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	4618      	mov	r0, r3
 80007c2:	f002 fda9 	bl	8003318 <HAL_RCCEx_PeriphCLKConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x118>
  {
    Error_Handler();
 80007cc:	f000 faa2 	bl	8000d14 <Error_Handler>
  }
}
 80007d0:	bf00      	nop
 80007d2:	37d0      	adds	r7, #208	; 0xd0
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40007000 	.word	0x40007000

080007e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007e6:	463b      	mov	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007f2:	4b21      	ldr	r3, [pc, #132]	; (8000878 <MX_ADC1_Init+0x98>)
 80007f4:	4a21      	ldr	r2, [pc, #132]	; (800087c <MX_ADC1_Init+0x9c>)
 80007f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007f8:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <MX_ADC1_Init+0x98>)
 80007fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <MX_ADC1_Init+0x98>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000806:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <MX_ADC1_Init+0x98>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800080c:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_ADC1_Init+0x98>)
 800080e:	2201      	movs	r2, #1
 8000810:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000812:	4b19      	ldr	r3, [pc, #100]	; (8000878 <MX_ADC1_Init+0x98>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_ADC1_Init+0x98>)
 800081c:	2200      	movs	r2, #0
 800081e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <MX_ADC1_Init+0x98>)
 8000822:	4a17      	ldr	r2, [pc, #92]	; (8000880 <MX_ADC1_Init+0xa0>)
 8000824:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_ADC1_Init+0x98>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_ADC1_Init+0x98>)
 800082e:	2201      	movs	r2, #1
 8000830:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_ADC1_Init+0x98>)
 8000834:	2200      	movs	r2, #0
 8000836:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_ADC1_Init+0x98>)
 800083c:	2201      	movs	r2, #1
 800083e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000840:	480d      	ldr	r0, [pc, #52]	; (8000878 <MX_ADC1_Init+0x98>)
 8000842:	f000 fd27 	bl	8001294 <HAL_ADC_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800084c:	f000 fa62 	bl	8000d14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000850:	2300      	movs	r3, #0
 8000852:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000854:	2301      	movs	r3, #1
 8000856:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000858:	2305      	movs	r3, #5
 800085a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	4619      	mov	r1, r3
 8000860:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_ADC1_Init+0x98>)
 8000862:	f000 fee1 	bl	8001628 <HAL_ADC_ConfigChannel>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800086c:	f000 fa52 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20006464 	.word	0x20006464
 800087c:	40012000 	.word	0x40012000
 8000880:	0f000001 	.word	0x0f000001

08000884 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800088a:	463b      	mov	r3, r7
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000896:	4b21      	ldr	r3, [pc, #132]	; (800091c <MX_ADC3_Init+0x98>)
 8000898:	4a21      	ldr	r2, [pc, #132]	; (8000920 <MX_ADC3_Init+0x9c>)
 800089a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800089c:	4b1f      	ldr	r3, [pc, #124]	; (800091c <MX_ADC3_Init+0x98>)
 800089e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008a2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008a4:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_ADC3_Init+0x98>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <MX_ADC3_Init+0x98>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80008b0:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_ADC3_Init+0x98>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_ADC3_Init+0x98>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_ADC3_Init+0x98>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_ADC3_Init+0x98>)
 80008c6:	4a17      	ldr	r2, [pc, #92]	; (8000924 <MX_ADC3_Init+0xa0>)
 80008c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_ADC3_Init+0x98>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_ADC3_Init+0x98>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_ADC3_Init+0x98>)
 80008d8:	2200      	movs	r2, #0
 80008da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_ADC3_Init+0x98>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008e4:	480d      	ldr	r0, [pc, #52]	; (800091c <MX_ADC3_Init+0x98>)
 80008e6:	f000 fcd5 	bl	8001294 <HAL_ADC_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80008f0:	f000 fa10 	bl	8000d14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008f4:	2308      	movs	r3, #8
 80008f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80008fc:	2305      	movs	r3, #5
 80008fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000900:	463b      	mov	r3, r7
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_ADC3_Init+0x98>)
 8000906:	f000 fe8f 	bl	8001628 <HAL_ADC_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000910:	f000 fa00 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200064ac 	.word	0x200064ac
 8000920:	40012200 	.word	0x40012200
 8000924:	0f000001 	.word	0x0f000001

08000928 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <MX_I2C1_Init+0x74>)
 800092e:	4a1c      	ldr	r2, [pc, #112]	; (80009a0 <MX_I2C1_Init+0x78>)
 8000930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_I2C1_Init+0x74>)
 8000934:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <MX_I2C1_Init+0x7c>)
 8000936:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_I2C1_Init+0x74>)
 8000940:	2201      	movs	r2, #1
 8000942:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_I2C1_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_I2C1_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_I2C1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000962:	480e      	ldr	r0, [pc, #56]	; (800099c <MX_I2C1_Init+0x74>)
 8000964:	f001 fb48 	bl	8001ff8 <HAL_I2C_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800096e:	f000 f9d1 	bl	8000d14 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000972:	2100      	movs	r1, #0
 8000974:	4809      	ldr	r0, [pc, #36]	; (800099c <MX_I2C1_Init+0x74>)
 8000976:	f001 ff3f 	bl	80027f8 <HAL_I2CEx_ConfigAnalogFilter>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000980:	f000 f9c8 	bl	8000d14 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000984:	2100      	movs	r1, #0
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_I2C1_Init+0x74>)
 8000988:	f001 ff81 	bl	800288e <HAL_I2CEx_ConfigDigitalFilter>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000992:	f000 f9bf 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20006418 	.word	0x20006418
 80009a0:	40005400 	.word	0x40005400
 80009a4:	20404768 	.word	0x20404768

080009a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009c6:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <MX_TIM2_Init+0x98>)
 80009c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 53999;
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <MX_TIM2_Init+0x98>)
 80009d0:	f24d 22ef 	movw	r2, #53999	; 0xd2ef
 80009d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <MX_TIM2_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80009dc:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <MX_TIM2_Init+0x98>)
 80009de:	2201      	movs	r2, #1
 80009e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <MX_TIM2_Init+0x98>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e8:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <MX_TIM2_Init+0x98>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ee:	4814      	ldr	r0, [pc, #80]	; (8000a40 <MX_TIM2_Init+0x98>)
 80009f0:	f003 f880 	bl	8003af4 <HAL_TIM_Base_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80009fa:	f000 f98b 	bl	8000d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480d      	ldr	r0, [pc, #52]	; (8000a40 <MX_TIM2_Init+0x98>)
 8000a0c:	f003 f9e8 	bl	8003de0 <HAL_TIM_ConfigClockSource>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a16:	f000 f97d 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a1a:	2320      	movs	r3, #32
 8000a1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	4619      	mov	r1, r3
 8000a26:	4806      	ldr	r0, [pc, #24]	; (8000a40 <MX_TIM2_Init+0x98>)
 8000a28:	f003 fbf6 	bl	8004218 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a32:	f000 f96f 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	3720      	adds	r7, #32
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20006584 	.word	0x20006584

08000a44 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_UART7_Init+0x58>)
 8000a4a:	4a15      	ldr	r2, [pc, #84]	; (8000aa0 <MX_UART7_Init+0x5c>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 57600;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_UART7_Init+0x58>)
 8000a50:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000a54:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_UART7_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_UART7_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_UART7_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_UART7_Init+0x58>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_UART7_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_UART7_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_UART7_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_UART7_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_UART7_Init+0x58>)
 8000a88:	f003 fc72 	bl	8004370 <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000a92:	f000 f93f 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20006398 	.word	0x20006398
 8000aa0:	40007800 	.word	0x40007800

08000aa4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_USART6_UART_Init+0x58>)
 8000aaa:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <MX_USART6_UART_Init+0x5c>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57600;
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <MX_USART6_UART_Init+0x58>)
 8000ab0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000ab4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_USART6_UART_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_USART6_UART_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_USART6_UART_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_USART6_UART_Init+0x58>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_USART6_UART_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_USART6_UART_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_USART6_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_USART6_UART_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_USART6_UART_Init+0x58>)
 8000ae8:	f003 fc42 	bl	8004370 <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000af2:	f000 f90f 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20006500 	.word	0x20006500
 8000b00:	40011400 	.word	0x40011400

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08c      	sub	sp, #48	; 0x30
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	4b32      	ldr	r3, [pc, #200]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a31      	ldr	r2, [pc, #196]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b2f      	ldr	r3, [pc, #188]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	61bb      	str	r3, [r7, #24]
 8000b30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	4b2c      	ldr	r3, [pc, #176]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a2b      	ldr	r2, [pc, #172]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b4a:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a25      	ldr	r2, [pc, #148]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b62:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a1f      	ldr	r2, [pc, #124]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a19      	ldr	r2, [pc, #100]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b92:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b98:	f043 0320 	orr.w	r3, r3, #32
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0320 	and.w	r3, r3, #32
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : select_Pin */
  GPIO_InitStruct.Pin = select_Pin;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(select_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480a      	ldr	r0, [pc, #40]	; (8000be8 <MX_GPIO_Init+0xe4>)
 8000bbe:	f001 f859 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : plus_Pin minus_Pin */
  GPIO_InitStruct.Pin = plus_Pin|minus_Pin;
 8000bc2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_GPIO_Init+0xe8>)
 8000bd8:	f001 f84c 	bl	8001c74 <HAL_GPIO_Init>

}
 8000bdc:	bf00      	nop
 8000bde:	3730      	adds	r7, #48	; 0x30
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40022000 	.word	0x40022000
 8000bec:	40020400 	.word	0x40020400

08000bf0 <sendUart1Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_sendUart1Task */
void sendUart1Task(void *argument)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
		  MDI_getDataChannel1();
 8000bf8:	f007 ff04 	bl	8008a04 <MDI_getDataChannel1>
		  osDelay(5);
 8000bfc:	2005      	movs	r0, #5
 8000bfe:	f004 fa71 	bl	80050e4 <osDelay>
		  MDI_getDataChannel1();
 8000c02:	e7f9      	b.n	8000bf8 <sendUart1Task+0x8>

08000c04 <sendUart2Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendUart2Task */
void sendUart2Task(void *argument)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendUart2Task */
  /* Infinite loop */
  for(;;)
  {
		  MDI_getDataChannel2();
 8000c0c:	f007 ffda 	bl	8008bc4 <MDI_getDataChannel2>
		  osDelay(5);
 8000c10:	2005      	movs	r0, #5
 8000c12:	f004 fa67 	bl	80050e4 <osDelay>
		  MDI_getDataChannel2();
 8000c16:	e7f9      	b.n	8000c0c <sendUart2Task+0x8>

08000c18 <getUart1Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getUart1Task */
void getUart1Task(void *argument)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getUart1Task */

  /* Infinite loop */
  for(;;)
  {
		transmissionDriver1();
 8000c20:	f007 f9fc 	bl	800801c <transmissionDriver1>
		osDelay(5);
 8000c24:	2005      	movs	r0, #5
 8000c26:	f004 fa5d 	bl	80050e4 <osDelay>
		transmissionDriver1();
 8000c2a:	e7f9      	b.n	8000c20 <getUart1Task+0x8>

08000c2c <getUart2Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getUart2Task */
void getUart2Task(void *argument)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getUart2Task */

  /* Infinite loop */
  for(;;)
  {
	  transmissionDriver2();
 8000c34:	f007 fa0a 	bl	800804c <transmissionDriver2>
	  osDelay(5);
 8000c38:	2005      	movs	r0, #5
 8000c3a:	f004 fa53 	bl	80050e4 <osDelay>
	  transmissionDriver2();
 8000c3e:	e7f9      	b.n	8000c34 <getUart2Task+0x8>

08000c40 <readADCvalTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readADCvalTask */
void readADCvalTask(void *argument)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readADCvalTask */
	uint16_t val1,val2;
  /* Infinite loop */
  for(;;)
  {
		readAnalog2Values(&hadc1,&hadc3);
 8000c48:	4918      	ldr	r1, [pc, #96]	; (8000cac <readADCvalTask+0x6c>)
 8000c4a:	4819      	ldr	r0, [pc, #100]	; (8000cb0 <readADCvalTask+0x70>)
 8000c4c:	f006 febe 	bl	80079cc <readAnalog2Values>
		val1=valuesMap(getAnalogValue1(),0,4095,0,1000);
 8000c50:	f006 feec 	bl	8007a2c <getAnalogValue1>
 8000c54:	4603      	mov	r3, r0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c64:	2100      	movs	r1, #0
 8000c66:	f006 fef9 	bl	8007a5c <valuesMap>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	81fb      	strh	r3, [r7, #14]
		setDriver1AngleValue(val1);
 8000c6e:	89fb      	ldrh	r3, [r7, #14]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f006 fff5 	bl	8007c60 <setDriver1AngleValue>
		osDelay(5);
 8000c76:	2005      	movs	r0, #5
 8000c78:	f004 fa34 	bl	80050e4 <osDelay>
		val2=valuesMap(getAnalogValue2(),0,4095,0,1000);
 8000c7c:	f006 fee2 	bl	8007a44 <getAnalogValue2>
 8000c80:	4603      	mov	r3, r0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c90:	2100      	movs	r1, #0
 8000c92:	f006 fee3 	bl	8007a5c <valuesMap>
 8000c96:	4603      	mov	r3, r0
 8000c98:	81bb      	strh	r3, [r7, #12]
		setDriver2AngleValue(val2);
 8000c9a:	89bb      	ldrh	r3, [r7, #12]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f006 ffef 	bl	8007c80 <setDriver2AngleValue>
		osDelay(5);
 8000ca2:	2005      	movs	r0, #5
 8000ca4:	f004 fa1e 	bl	80050e4 <osDelay>
		readAnalog2Values(&hadc1,&hadc3);
 8000ca8:	e7ce      	b.n	8000c48 <readADCvalTask+0x8>
 8000caa:	bf00      	nop
 8000cac:	200064ac 	.word	0x200064ac
 8000cb0:	20006464 	.word	0x20006464

08000cb4 <btnControlsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_btnControlsTask */
void btnControlsTask(void *argument)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN btnControlsTask */
	btnParameterInit();
 8000cbc:	f006 ffa4 	bl	8007c08 <btnParameterInit>
  /* Infinite loop */
  for(;;)
  {		  	buttonController();
 8000cc0:	f006 ffee 	bl	8007ca0 <buttonController>
    osDelay(50);
 8000cc4:	2032      	movs	r0, #50	; 0x32
 8000cc6:	f004 fa0d 	bl	80050e4 <osDelay>
  {		  	buttonController();
 8000cca:	e7f9      	b.n	8000cc0 <btnControlsTask+0xc>

08000ccc <lcdControllerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_lcdControllerTask */
void lcdControllerTask(void *argument)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN lcdControllerTask */
	lcd_Init();
 8000cd4:	f007 fa0e 	bl	80080f4 <lcd_Init>
  /* Infinite loop */
  for(;;)
  {
	  	lcdController();
 8000cd8:	f007 faf0 	bl	80082bc <lcdController>
	  		    osDelay(500);
 8000cdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce0:	f004 fa00 	bl	80050e4 <osDelay>
	  			 cleanTheLcd();
 8000ce4:	f007 fae4 	bl	80082b0 <cleanTheLcd>
	  			 osDelay(10);
 8000ce8:	200a      	movs	r0, #10
 8000cea:	f004 f9fb 	bl	80050e4 <osDelay>
	  	lcdController();
 8000cee:	e7f3      	b.n	8000cd8 <lcdControllerTask+0xc>

08000cf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d101      	bne.n	8000d06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d02:	f000 fa85 	bl	8001210 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40010000 	.word	0x40010000

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <Error_Handler+0x6>

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	4a10      	ldr	r2, [pc, #64]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d44:	6453      	str	r3, [r2, #68]	; 0x44
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	210f      	movs	r1, #15
 8000d56:	f06f 0001 	mvn.w	r0, #1
 8000d5a:	f000 ff61 	bl	8001c20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800

08000d6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08c      	sub	sp, #48	; 0x30
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a2a      	ldr	r2, [pc, #168]	; (8000e34 <HAL_ADC_MspInit+0xc8>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d124      	bne.n	8000dd8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d8e:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <HAL_ADC_MspInit+0xcc>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	4a29      	ldr	r2, [pc, #164]	; (8000e38 <HAL_ADC_MspInit+0xcc>)
 8000d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d98:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9a:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <HAL_ADC_MspInit+0xcc>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da2:	61bb      	str	r3, [r7, #24]
 8000da4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <HAL_ADC_MspInit+0xcc>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a23      	ldr	r2, [pc, #140]	; (8000e38 <HAL_ADC_MspInit+0xcc>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <HAL_ADC_MspInit+0xcc>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	481a      	ldr	r0, [pc, #104]	; (8000e3c <HAL_ADC_MspInit+0xd0>)
 8000dd2:	f000 ff4f 	bl	8001c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000dd6:	e029      	b.n	8000e2c <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a18      	ldr	r2, [pc, #96]	; (8000e40 <HAL_ADC_MspInit+0xd4>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d124      	bne.n	8000e2c <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_ADC_MspInit+0xcc>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <HAL_ADC_MspInit+0xcc>)
 8000de8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_ADC_MspInit+0xcc>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <HAL_ADC_MspInit+0xcc>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <HAL_ADC_MspInit+0xcc>)
 8000e00:	f043 0320 	orr.w	r3, r3, #32
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_ADC_MspInit+0xcc>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0320 	and.w	r3, r3, #32
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	4807      	ldr	r0, [pc, #28]	; (8000e44 <HAL_ADC_MspInit+0xd8>)
 8000e28:	f000 ff24 	bl	8001c74 <HAL_GPIO_Init>
}
 8000e2c:	bf00      	nop
 8000e2e:	3730      	adds	r7, #48	; 0x30
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40012000 	.word	0x40012000
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020000 	.word	0x40020000
 8000e40:	40012200 	.word	0x40012200
 8000e44:	40021400 	.word	0x40021400

08000e48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <HAL_I2C_MspInit+0x7c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d128      	bne.n	8000ebc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <HAL_I2C_MspInit+0x80>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a16      	ldr	r2, [pc, #88]	; (8000ec8 <HAL_I2C_MspInit+0x80>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <HAL_I2C_MspInit+0x80>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e88:	2312      	movs	r3, #18
 8000e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e94:	2304      	movs	r3, #4
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480b      	ldr	r0, [pc, #44]	; (8000ecc <HAL_I2C_MspInit+0x84>)
 8000ea0:	f000 fee8 	bl	8001c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <HAL_I2C_MspInit+0x80>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <HAL_I2C_MspInit+0x80>)
 8000eaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eae:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <HAL_I2C_MspInit+0x80>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ebc:	bf00      	nop
 8000ebe:	3728      	adds	r7, #40	; 0x28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40005400 	.word	0x40005400
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020400 	.word	0x40020400

08000ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ee0:	d113      	bne.n	8000f0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <HAL_TIM_Base_MspInit+0x44>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <HAL_TIM_Base_MspInit+0x44>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6413      	str	r3, [r2, #64]	; 0x40
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <HAL_TIM_Base_MspInit+0x44>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2105      	movs	r1, #5
 8000efe:	201c      	movs	r0, #28
 8000f00:	f000 fe8e 	bl	8001c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f04:	201c      	movs	r0, #28
 8000f06:	f000 fea7 	bl	8001c58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800

08000f18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08c      	sub	sp, #48	; 0x30
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a2e      	ldr	r2, [pc, #184]	; (8000ff0 <HAL_UART_MspInit+0xd8>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d128      	bne.n	8000f8c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000f3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <HAL_UART_MspInit+0xdc>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a2d      	ldr	r2, [pc, #180]	; (8000ff4 <HAL_UART_MspInit+0xdc>)
 8000f40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <HAL_UART_MspInit+0xdc>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f52:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <HAL_UART_MspInit+0xdc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a27      	ldr	r2, [pc, #156]	; (8000ff4 <HAL_UART_MspInit+0xdc>)
 8000f58:	f043 0320 	orr.w	r3, r3, #32
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <HAL_UART_MspInit+0xdc>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0320 	and.w	r3, r3, #32
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000f6a:	23c0      	movs	r3, #192	; 0xc0
 8000f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000f7a:	2308      	movs	r3, #8
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	4619      	mov	r1, r3
 8000f84:	481c      	ldr	r0, [pc, #112]	; (8000ff8 <HAL_UART_MspInit+0xe0>)
 8000f86:	f000 fe75 	bl	8001c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000f8a:	e02c      	b.n	8000fe6 <HAL_UART_MspInit+0xce>
  else if(huart->Instance==USART6)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a1a      	ldr	r2, [pc, #104]	; (8000ffc <HAL_UART_MspInit+0xe4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d127      	bne.n	8000fe6 <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <HAL_UART_MspInit+0xdc>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	4a16      	ldr	r2, [pc, #88]	; (8000ff4 <HAL_UART_MspInit+0xdc>)
 8000f9c:	f043 0320 	orr.w	r3, r3, #32
 8000fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <HAL_UART_MspInit+0xdc>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f003 0320 	and.w	r3, r3, #32
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_UART_MspInit+0xdc>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a10      	ldr	r2, [pc, #64]	; (8000ff4 <HAL_UART_MspInit+0xdc>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_UART_MspInit+0xdc>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000fc6:	23c0      	movs	r3, #192	; 0xc0
 8000fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000fd6:	2308      	movs	r3, #8
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4807      	ldr	r0, [pc, #28]	; (8001000 <HAL_UART_MspInit+0xe8>)
 8000fe2:	f000 fe47 	bl	8001c74 <HAL_GPIO_Init>
}
 8000fe6:	bf00      	nop
 8000fe8:	3730      	adds	r7, #48	; 0x30
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40007800 	.word	0x40007800
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40021400 	.word	0x40021400
 8000ffc:	40011400 	.word	0x40011400
 8001000:	40020800 	.word	0x40020800

08001004 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08c      	sub	sp, #48	; 0x30
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	2019      	movs	r0, #25
 800101a:	f000 fe01 	bl	8001c20 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800101e:	2019      	movs	r0, #25
 8001020:	f000 fe1a 	bl	8001c58 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <HAL_InitTick+0xa0>)
 8001026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001028:	4a1e      	ldr	r2, [pc, #120]	; (80010a4 <HAL_InitTick+0xa0>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6453      	str	r3, [r2, #68]	; 0x44
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <HAL_InitTick+0xa0>)
 8001032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800103c:	f107 0210 	add.w	r2, r7, #16
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4611      	mov	r1, r2
 8001046:	4618      	mov	r0, r3
 8001048:	f002 f934 	bl	80032b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800104c:	f002 f91e 	bl	800328c <HAL_RCC_GetPCLK2Freq>
 8001050:	4603      	mov	r3, r0
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001058:	4a13      	ldr	r2, [pc, #76]	; (80010a8 <HAL_InitTick+0xa4>)
 800105a:	fba2 2303 	umull	r2, r3, r2, r3
 800105e:	0c9b      	lsrs	r3, r3, #18
 8001060:	3b01      	subs	r3, #1
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <HAL_InitTick+0xa8>)
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <HAL_InitTick+0xac>)
 8001068:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <HAL_InitTick+0xa8>)
 800106c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001070:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001072:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <HAL_InitTick+0xa8>)
 8001074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001076:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_InitTick+0xa8>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <HAL_InitTick+0xa8>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001084:	4809      	ldr	r0, [pc, #36]	; (80010ac <HAL_InitTick+0xa8>)
 8001086:	f002 fd35 	bl	8003af4 <HAL_TIM_Base_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d104      	bne.n	800109a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001090:	4806      	ldr	r0, [pc, #24]	; (80010ac <HAL_InitTick+0xa8>)
 8001092:	f002 fd5b 	bl	8003b4c <HAL_TIM_Base_Start_IT>
 8001096:	4603      	mov	r3, r0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3730      	adds	r7, #48	; 0x30
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40023800 	.word	0x40023800
 80010a8:	431bde83 	.word	0x431bde83
 80010ac:	200065c4 	.word	0x200065c4
 80010b0:	40010000 	.word	0x40010000

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <NMI_Handler+0x4>

080010ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <HardFault_Handler+0x4>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <MemManage_Handler+0x4>

080010c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <BusFault_Handler+0x4>

080010cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <UsageFault_Handler+0x4>

080010d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010e6:	f002 fd5b 	bl	8003ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200065c4 	.word	0x200065c4

080010f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010f8:	4803      	ldr	r0, [pc, #12]	; (8001108 <TIM2_IRQHandler+0x14>)
 80010fa:	f002 fd51 	bl	8003ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  buttonCounterIncrease();
 80010fe:	f006 fcd3 	bl	8007aa8 <buttonCounterIncrease>

  /* USER CODE END TIM2_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20006584 	.word	0x20006584

0800110c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001114:	4a14      	ldr	r2, [pc, #80]	; (8001168 <_sbrk+0x5c>)
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <_sbrk+0x60>)
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d102      	bne.n	800112e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <_sbrk+0x64>)
 800112a:	4a12      	ldr	r2, [pc, #72]	; (8001174 <_sbrk+0x68>)
 800112c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	429a      	cmp	r2, r3
 800113a:	d207      	bcs.n	800114c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800113c:	f007 fdd6 	bl	8008cec <__errno>
 8001140:	4602      	mov	r2, r0
 8001142:	230c      	movs	r3, #12
 8001144:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800114a:	e009      	b.n	8001160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <_sbrk+0x64>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <_sbrk+0x64>)
 800115c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800115e:	68fb      	ldr	r3, [r7, #12]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20050000 	.word	0x20050000
 800116c:	00000400 	.word	0x00000400
 8001170:	20000094 	.word	0x20000094
 8001174:	200066e8 	.word	0x200066e8

08001178 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <SystemInit+0x28>)
 800117e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001182:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <SystemInit+0x28>)
 8001184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <SystemInit+0x28>)
 800118e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001192:	609a      	str	r2, [r3, #8]
#endif
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011aa:	e003      	b.n	80011b4 <LoopCopyDataInit>

080011ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80011ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011b2:	3104      	adds	r1, #4

080011b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011b4:	480b      	ldr	r0, [pc, #44]	; (80011e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011bc:	d3f6      	bcc.n	80011ac <CopyDataInit>
  ldr  r2, =_sbss
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011c0:	e002      	b.n	80011c8 <LoopFillZerobss>

080011c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011c4:	f842 3b04 	str.w	r3, [r2], #4

080011c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011cc:	d3f9      	bcc.n	80011c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011ce:	f7ff ffd3 	bl	8001178 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011d2:	f007 fd91 	bl	8008cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d6:	f7ff f9f3 	bl	80005c0 <main>
  bx  lr    
 80011da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011dc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80011e0:	080097d0 	.word	0x080097d0
  ldr  r0, =_sdata
 80011e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011e8:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80011ec:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80011f0:	200066e8 	.word	0x200066e8

080011f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC_IRQHandler>

080011f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fa:	2003      	movs	r0, #3
 80011fc:	f000 fd05 	bl	8001c0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff feff 	bl	8001004 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001206:	f7ff fd89 	bl	8000d1c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008
 8001234:	20006604 	.word	0x20006604

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20006604 	.word	0x20006604

08001250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff ffee 	bl	8001238 <HAL_GetTick>
 800125c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001268:	d005      	beq.n	8001276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_Delay+0x40>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001276:	bf00      	nop
 8001278:	f7ff ffde 	bl	8001238 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	d8f7      	bhi.n	8001278 <HAL_Delay+0x28>
  {
  }
}
 8001288:	bf00      	nop
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000008 	.word	0x20000008

08001294 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800129c:	2300      	movs	r3, #0
 800129e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e031      	b.n	800130e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d109      	bne.n	80012c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff fd5a 	bl	8000d6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f003 0310 	and.w	r3, r3, #16
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d116      	bne.n	8001300 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <HAL_ADC_Init+0x84>)
 80012d8:	4013      	ands	r3, r2
 80012da:	f043 0202 	orr.w	r2, r3, #2
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 faea 	bl	80018bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f023 0303 	bic.w	r3, r3, #3
 80012f6:	f043 0201 	orr.w	r2, r3, #1
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	641a      	str	r2, [r3, #64]	; 0x40
 80012fe:	e001      	b.n	8001304 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800130c:	7bfb      	ldrb	r3, [r7, #15]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	ffffeefd 	.word	0xffffeefd

0800131c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800132e:	2b01      	cmp	r3, #1
 8001330:	d101      	bne.n	8001336 <HAL_ADC_Start+0x1a>
 8001332:	2302      	movs	r3, #2
 8001334:	e0a0      	b.n	8001478 <HAL_ADC_Start+0x15c>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b01      	cmp	r3, #1
 800134a:	d018      	beq.n	800137e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 0201 	orr.w	r2, r2, #1
 800135a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800135c:	4b49      	ldr	r3, [pc, #292]	; (8001484 <HAL_ADC_Start+0x168>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a49      	ldr	r2, [pc, #292]	; (8001488 <HAL_ADC_Start+0x16c>)
 8001362:	fba2 2303 	umull	r2, r3, r2, r3
 8001366:	0c9a      	lsrs	r2, r3, #18
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001370:	e002      	b.n	8001378 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3b01      	subs	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f9      	bne.n	8001372 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b01      	cmp	r3, #1
 800138a:	d174      	bne.n	8001476 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001390:	4b3e      	ldr	r3, [pc, #248]	; (800148c <HAL_ADC_Start+0x170>)
 8001392:	4013      	ands	r3, r2
 8001394:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d007      	beq.n	80013ba <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013c6:	d106      	bne.n	80013d6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f023 0206 	bic.w	r2, r3, #6
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	645a      	str	r2, [r3, #68]	; 0x44
 80013d4:	e002      	b.n	80013dc <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013ec:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80013ee:	4b28      	ldr	r3, [pc, #160]	; (8001490 <HAL_ADC_Start+0x174>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 031f 	and.w	r3, r3, #31
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10f      	bne.n	800141a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d136      	bne.n	8001476 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	e02d      	b.n	8001476 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <HAL_ADC_Start+0x178>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d10e      	bne.n	8001442 <HAL_ADC_Start+0x126>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d107      	bne.n	8001442 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001440:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <HAL_ADC_Start+0x174>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0310 	and.w	r3, r3, #16
 800144a:	2b00      	cmp	r3, #0
 800144c:	d113      	bne.n	8001476 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a11      	ldr	r2, [pc, #68]	; (8001498 <HAL_ADC_Start+0x17c>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d10e      	bne.n	8001476 <HAL_ADC_Start+0x15a>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d107      	bne.n	8001476 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001474:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	20000000 	.word	0x20000000
 8001488:	431bde83 	.word	0x431bde83
 800148c:	fffff8fe 	.word	0xfffff8fe
 8001490:	40012300 	.word	0x40012300
 8001494:	40012000 	.word	0x40012000
 8001498:	40012200 	.word	0x40012200

0800149c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d101      	bne.n	80014b2 <HAL_ADC_Stop+0x16>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e01f      	b.n	80014f2 <HAL_ADC_Stop+0x56>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0201 	bic.w	r2, r2, #1
 80014c8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d107      	bne.n	80014e8 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_ADC_Stop+0x64>)
 80014de:	4013      	ands	r3, r2
 80014e0:	f043 0201 	orr.w	r2, r3, #1
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	ffffeefe 	.word	0xffffeefe

08001504 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001520:	d113      	bne.n	800154a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800152c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001530:	d10b      	bne.n	800154a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f043 0220 	orr.w	r2, r3, #32
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e05c      	b.n	8001604 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800154a:	f7ff fe75 	bl	8001238 <HAL_GetTick>
 800154e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001550:	e01a      	b.n	8001588 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001558:	d016      	beq.n	8001588 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d007      	beq.n	8001570 <HAL_ADC_PollForConversion+0x6c>
 8001560:	f7ff fe6a 	bl	8001238 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d20b      	bcs.n	8001588 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f043 0204 	orr.w	r2, r3, #4
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e03d      	b.n	8001604 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b02      	cmp	r3, #2
 8001594:	d1dd      	bne.n	8001552 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f06f 0212 	mvn.w	r2, #18
 800159e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d123      	bne.n	8001602 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d11f      	bne.n	8001602 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d111      	bne.n	8001602 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d105      	bne.n	8001602 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f043 0201 	orr.w	r2, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x1c>
 8001640:	2302      	movs	r3, #2
 8001642:	e12a      	b.n	800189a <HAL_ADC_ConfigChannel+0x272>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b09      	cmp	r3, #9
 8001652:	d93a      	bls.n	80016ca <HAL_ADC_ConfigChannel+0xa2>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800165c:	d035      	beq.n	80016ca <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68d9      	ldr	r1, [r3, #12]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	b29b      	uxth	r3, r3
 800166a:	461a      	mov	r2, r3
 800166c:	4613      	mov	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4413      	add	r3, r2
 8001672:	3b1e      	subs	r3, #30
 8001674:	2207      	movs	r2, #7
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	400a      	ands	r2, r1
 8001682:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a87      	ldr	r2, [pc, #540]	; (80018a8 <HAL_ADC_ConfigChannel+0x280>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d10a      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68d9      	ldr	r1, [r3, #12]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	061a      	lsls	r2, r3, #24
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016a2:	e035      	b.n	8001710 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68d9      	ldr	r1, [r3, #12]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	4618      	mov	r0, r3
 80016b6:	4603      	mov	r3, r0
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4403      	add	r3, r0
 80016bc:	3b1e      	subs	r3, #30
 80016be:	409a      	lsls	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016c8:	e022      	b.n	8001710 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6919      	ldr	r1, [r3, #16]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	461a      	mov	r2, r3
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	2207      	movs	r2, #7
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43da      	mvns	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	400a      	ands	r2, r1
 80016ec:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6919      	ldr	r1, [r3, #16]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	4603      	mov	r3, r0
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4403      	add	r3, r0
 8001706:	409a      	lsls	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b06      	cmp	r3, #6
 8001716:	d824      	bhi.n	8001762 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	3b05      	subs	r3, #5
 800172a:	221f      	movs	r2, #31
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43da      	mvns	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	400a      	ands	r2, r1
 8001738:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	b29b      	uxth	r3, r3
 8001746:	4618      	mov	r0, r3
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	3b05      	subs	r3, #5
 8001754:	fa00 f203 	lsl.w	r2, r0, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	635a      	str	r2, [r3, #52]	; 0x34
 8001760:	e04c      	b.n	80017fc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b0c      	cmp	r3, #12
 8001768:	d824      	bhi.n	80017b4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	3b23      	subs	r3, #35	; 0x23
 800177c:	221f      	movs	r2, #31
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	400a      	ands	r2, r1
 800178a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	b29b      	uxth	r3, r3
 8001798:	4618      	mov	r0, r3
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	3b23      	subs	r3, #35	; 0x23
 80017a6:	fa00 f203 	lsl.w	r2, r0, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	631a      	str	r2, [r3, #48]	; 0x30
 80017b2:	e023      	b.n	80017fc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	3b41      	subs	r3, #65	; 0x41
 80017c6:	221f      	movs	r2, #31
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43da      	mvns	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	400a      	ands	r2, r1
 80017d4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	3b41      	subs	r3, #65	; 0x41
 80017f0:	fa00 f203 	lsl.w	r2, r0, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a2a      	ldr	r2, [pc, #168]	; (80018ac <HAL_ADC_ConfigChannel+0x284>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d10a      	bne.n	800181c <HAL_ADC_ConfigChannel+0x1f4>
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800180e:	d105      	bne.n	800181c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001810:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <HAL_ADC_ConfigChannel+0x288>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4a26      	ldr	r2, [pc, #152]	; (80018b0 <HAL_ADC_ConfigChannel+0x288>)
 8001816:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800181a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a22      	ldr	r2, [pc, #136]	; (80018ac <HAL_ADC_ConfigChannel+0x284>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d109      	bne.n	800183a <HAL_ADC_ConfigChannel+0x212>
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b12      	cmp	r3, #18
 800182c:	d105      	bne.n	800183a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_ADC_ConfigChannel+0x288>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	4a1f      	ldr	r2, [pc, #124]	; (80018b0 <HAL_ADC_ConfigChannel+0x288>)
 8001834:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001838:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a1b      	ldr	r2, [pc, #108]	; (80018ac <HAL_ADC_ConfigChannel+0x284>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d125      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x268>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a17      	ldr	r2, [pc, #92]	; (80018a8 <HAL_ADC_ConfigChannel+0x280>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d003      	beq.n	8001856 <HAL_ADC_ConfigChannel+0x22e>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b11      	cmp	r3, #17
 8001854:	d11c      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <HAL_ADC_ConfigChannel+0x288>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	4a15      	ldr	r2, [pc, #84]	; (80018b0 <HAL_ADC_ConfigChannel+0x288>)
 800185c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001860:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a10      	ldr	r2, [pc, #64]	; (80018a8 <HAL_ADC_ConfigChannel+0x280>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d111      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <HAL_ADC_ConfigChannel+0x28c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a11      	ldr	r2, [pc, #68]	; (80018b8 <HAL_ADC_ConfigChannel+0x290>)
 8001872:	fba2 2303 	umull	r2, r3, r2, r3
 8001876:	0c9a      	lsrs	r2, r3, #18
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001882:	e002      	b.n	800188a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3b01      	subs	r3, #1
 8001888:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f9      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	10000012 	.word	0x10000012
 80018ac:	40012000 	.word	0x40012000
 80018b0:	40012300 	.word	0x40012300
 80018b4:	20000000 	.word	0x20000000
 80018b8:	431bde83 	.word	0x431bde83

080018bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80018c4:	4b78      	ldr	r3, [pc, #480]	; (8001aa8 <ADC_Init+0x1ec>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	4a77      	ldr	r2, [pc, #476]	; (8001aa8 <ADC_Init+0x1ec>)
 80018ca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80018ce:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80018d0:	4b75      	ldr	r3, [pc, #468]	; (8001aa8 <ADC_Init+0x1ec>)
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	4973      	ldr	r1, [pc, #460]	; (8001aa8 <ADC_Init+0x1ec>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6859      	ldr	r1, [r3, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	021a      	lsls	r2, r3, #8
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001910:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6859      	ldr	r1, [r3, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001932:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6899      	ldr	r1, [r3, #8]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194a:	4a58      	ldr	r2, [pc, #352]	; (8001aac <ADC_Init+0x1f0>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d022      	beq.n	8001996 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800195e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6899      	ldr	r1, [r3, #8]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001980:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6899      	ldr	r1, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	e00f      	b.n	80019b6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0202 	bic.w	r2, r2, #2
 80019c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6899      	ldr	r1, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	005a      	lsls	r2, r3, #1
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d01b      	beq.n	8001a1c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6859      	ldr	r1, [r3, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	035a      	lsls	r2, r3, #13
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	e007      	b.n	8001a2c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	051a      	lsls	r2, r3, #20
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6899      	ldr	r1, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a6e:	025a      	lsls	r2, r3, #9
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6899      	ldr	r1, [r3, #8]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	029a      	lsls	r2, r3, #10
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	609a      	str	r2, [r3, #8]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	40012300 	.word	0x40012300
 8001aac:	0f000001 	.word	0x0f000001

08001ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001acc:	4013      	ands	r3, r2
 8001ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ade:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	60d3      	str	r3, [r2, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000ed00 	.word	0xe000ed00
 8001af4:	05fa0000 	.word	0x05fa0000

08001af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <__NVIC_GetPriorityGrouping+0x18>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	f003 0307 	and.w	r3, r3, #7
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	db0b      	blt.n	8001b3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	f003 021f 	and.w	r2, r3, #31
 8001b2c:	4907      	ldr	r1, [pc, #28]	; (8001b4c <__NVIC_EnableIRQ+0x38>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	2001      	movs	r0, #1
 8001b36:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000e100 	.word	0xe000e100

08001b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	6039      	str	r1, [r7, #0]
 8001b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	db0a      	blt.n	8001b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	490c      	ldr	r1, [pc, #48]	; (8001b9c <__NVIC_SetPriority+0x4c>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	0112      	lsls	r2, r2, #4
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	440b      	add	r3, r1
 8001b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b78:	e00a      	b.n	8001b90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	4908      	ldr	r1, [pc, #32]	; (8001ba0 <__NVIC_SetPriority+0x50>)
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	3b04      	subs	r3, #4
 8001b88:	0112      	lsls	r2, r2, #4
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	761a      	strb	r2, [r3, #24]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000e100 	.word	0xe000e100
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b089      	sub	sp, #36	; 0x24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f1c3 0307 	rsb	r3, r3, #7
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	bf28      	it	cs
 8001bc2:	2304      	movcs	r3, #4
 8001bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	2b06      	cmp	r3, #6
 8001bcc:	d902      	bls.n	8001bd4 <NVIC_EncodePriority+0x30>
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3b03      	subs	r3, #3
 8001bd2:	e000      	b.n	8001bd6 <NVIC_EncodePriority+0x32>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43da      	mvns	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	401a      	ands	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf6:	43d9      	mvns	r1, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	4313      	orrs	r3, r2
         );
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3724      	adds	r7, #36	; 0x24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ff4c 	bl	8001ab0 <__NVIC_SetPriorityGrouping>
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c32:	f7ff ff61 	bl	8001af8 <__NVIC_GetPriorityGrouping>
 8001c36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	68b9      	ldr	r1, [r7, #8]
 8001c3c:	6978      	ldr	r0, [r7, #20]
 8001c3e:	f7ff ffb1 	bl	8001ba4 <NVIC_EncodePriority>
 8001c42:	4602      	mov	r2, r0
 8001c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c48:	4611      	mov	r1, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff80 	bl	8001b50 <__NVIC_SetPriority>
}
 8001c50:	bf00      	nop
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff ff54 	bl	8001b14 <__NVIC_EnableIRQ>
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	e175      	b.n	8001f80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c94:	2201      	movs	r2, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	f040 8164 	bne.w	8001f7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d00b      	beq.n	8001cd2 <HAL_GPIO_Init+0x5e>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d007      	beq.n	8001cd2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cc6:	2b11      	cmp	r3, #17
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b12      	cmp	r3, #18
 8001cd0:	d130      	bne.n	8001d34 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	2203      	movs	r2, #3
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d08:	2201      	movs	r2, #1
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 0201 	and.w	r2, r3, #1
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x100>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b12      	cmp	r3, #18
 8001d72:	d123      	bne.n	8001dbc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	08da      	lsrs	r2, r3, #3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3208      	adds	r2, #8
 8001d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	08da      	lsrs	r2, r3, #3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3208      	adds	r2, #8
 8001db6:	69b9      	ldr	r1, [r7, #24]
 8001db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0203 	and.w	r2, r3, #3
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 80be 	beq.w	8001f7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	4b65      	ldr	r3, [pc, #404]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	4a64      	ldr	r2, [pc, #400]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e08:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0a:	4b62      	ldr	r3, [pc, #392]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e16:	4a60      	ldr	r2, [pc, #384]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a57      	ldr	r2, [pc, #348]	; (8001f9c <HAL_GPIO_Init+0x328>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d037      	beq.n	8001eb2 <HAL_GPIO_Init+0x23e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a56      	ldr	r2, [pc, #344]	; (8001fa0 <HAL_GPIO_Init+0x32c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d031      	beq.n	8001eae <HAL_GPIO_Init+0x23a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a55      	ldr	r2, [pc, #340]	; (8001fa4 <HAL_GPIO_Init+0x330>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d02b      	beq.n	8001eaa <HAL_GPIO_Init+0x236>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a54      	ldr	r2, [pc, #336]	; (8001fa8 <HAL_GPIO_Init+0x334>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d025      	beq.n	8001ea6 <HAL_GPIO_Init+0x232>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a53      	ldr	r2, [pc, #332]	; (8001fac <HAL_GPIO_Init+0x338>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01f      	beq.n	8001ea2 <HAL_GPIO_Init+0x22e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a52      	ldr	r2, [pc, #328]	; (8001fb0 <HAL_GPIO_Init+0x33c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d019      	beq.n	8001e9e <HAL_GPIO_Init+0x22a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a51      	ldr	r2, [pc, #324]	; (8001fb4 <HAL_GPIO_Init+0x340>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <HAL_GPIO_Init+0x226>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a50      	ldr	r2, [pc, #320]	; (8001fb8 <HAL_GPIO_Init+0x344>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00d      	beq.n	8001e96 <HAL_GPIO_Init+0x222>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4f      	ldr	r2, [pc, #316]	; (8001fbc <HAL_GPIO_Init+0x348>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d007      	beq.n	8001e92 <HAL_GPIO_Init+0x21e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4e      	ldr	r2, [pc, #312]	; (8001fc0 <HAL_GPIO_Init+0x34c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d101      	bne.n	8001e8e <HAL_GPIO_Init+0x21a>
 8001e8a:	2309      	movs	r3, #9
 8001e8c:	e012      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e8e:	230a      	movs	r3, #10
 8001e90:	e010      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e92:	2308      	movs	r3, #8
 8001e94:	e00e      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e96:	2307      	movs	r3, #7
 8001e98:	e00c      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e9a:	2306      	movs	r3, #6
 8001e9c:	e00a      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e9e:	2305      	movs	r3, #5
 8001ea0:	e008      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	e006      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e004      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	f002 0203 	and.w	r2, r2, #3
 8001eba:	0092      	lsls	r2, r2, #2
 8001ebc:	4093      	lsls	r3, r2
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ec4:	4934      	ldr	r1, [pc, #208]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed2:	4b3c      	ldr	r3, [pc, #240]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef6:	4a33      	ldr	r2, [pc, #204]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001efc:	4b31      	ldr	r3, [pc, #196]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f20:	4a28      	ldr	r2, [pc, #160]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f26:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f50:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f74:	4a13      	ldr	r2, [pc, #76]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	61fb      	str	r3, [r7, #28]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	2b0f      	cmp	r3, #15
 8001f84:	f67f ae86 	bls.w	8001c94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f88:	bf00      	nop
 8001f8a:	3724      	adds	r7, #36	; 0x24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40013800 	.word	0x40013800
 8001f9c:	40020000 	.word	0x40020000
 8001fa0:	40020400 	.word	0x40020400
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	40020c00 	.word	0x40020c00
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40021400 	.word	0x40021400
 8001fb4:	40021800 	.word	0x40021800
 8001fb8:	40021c00 	.word	0x40021c00
 8001fbc:	40022000 	.word	0x40022000
 8001fc0:	40022400 	.word	0x40022400
 8001fc4:	40013c00 	.word	0x40013c00

08001fc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	887b      	ldrh	r3, [r7, #2]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d002      	beq.n	8001fe6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
 8001fe4:	e001      	b.n	8001fea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e07f      	b.n	800210a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7fe ff12 	bl	8000e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2224      	movs	r2, #36	; 0x24
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0201 	bic.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002048:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002058:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d107      	bne.n	8002072 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	e006      	b.n	8002080 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800207e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	2b02      	cmp	r3, #2
 8002086:	d104      	bne.n	8002092 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002090:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6859      	ldr	r1, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_I2C_Init+0x11c>)
 800209e:	430b      	orrs	r3, r1
 80020a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691a      	ldr	r2, [r3, #16]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	ea42 0103 	orr.w	r1, r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	021a      	lsls	r2, r3, #8
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69d9      	ldr	r1, [r3, #28]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1a      	ldr	r2, [r3, #32]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0201 	orr.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	02008000 	.word	0x02008000

08002118 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af02      	add	r7, sp, #8
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	461a      	mov	r2, r3
 8002124:	460b      	mov	r3, r1
 8002126:	817b      	strh	r3, [r7, #10]
 8002128:	4613      	mov	r3, r2
 800212a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b20      	cmp	r3, #32
 8002136:	f040 80da 	bne.w	80022ee <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_I2C_Master_Transmit+0x30>
 8002144:	2302      	movs	r3, #2
 8002146:	e0d3      	b.n	80022f0 <HAL_I2C_Master_Transmit+0x1d8>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002150:	f7ff f872 	bl	8001238 <HAL_GetTick>
 8002154:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2319      	movs	r3, #25
 800215c:	2201      	movs	r2, #1
 800215e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 f9f8 	bl	8002558 <I2C_WaitOnFlagUntilTimeout>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e0be      	b.n	80022f0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2221      	movs	r2, #33	; 0x21
 8002176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2210      	movs	r2, #16
 800217e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	893a      	ldrh	r2, [r7, #8]
 8002192:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219e:	b29b      	uxth	r3, r3
 80021a0:	2bff      	cmp	r3, #255	; 0xff
 80021a2:	d90e      	bls.n	80021c2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	22ff      	movs	r2, #255	; 0xff
 80021a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	8979      	ldrh	r1, [r7, #10]
 80021b2:	4b51      	ldr	r3, [pc, #324]	; (80022f8 <HAL_I2C_Master_Transmit+0x1e0>)
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 faee 	bl	800279c <I2C_TransferConfig>
 80021c0:	e06c      	b.n	800229c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	8979      	ldrh	r1, [r7, #10]
 80021d4:	4b48      	ldr	r3, [pc, #288]	; (80022f8 <HAL_I2C_Master_Transmit+0x1e0>)
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 fadd 	bl	800279c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80021e2:	e05b      	b.n	800229c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	6a39      	ldr	r1, [r7, #32]
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 f9f5 	bl	80025d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e07b      	b.n	80022f0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	781a      	ldrb	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002212:	b29b      	uxth	r3, r3
 8002214:	3b01      	subs	r3, #1
 8002216:	b29a      	uxth	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002220:	3b01      	subs	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222c:	b29b      	uxth	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d034      	beq.n	800229c <HAL_I2C_Master_Transmit+0x184>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002236:	2b00      	cmp	r3, #0
 8002238:	d130      	bne.n	800229c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	2200      	movs	r2, #0
 8002242:	2180      	movs	r1, #128	; 0x80
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 f987 	bl	8002558 <I2C_WaitOnFlagUntilTimeout>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e04d      	b.n	80022f0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002258:	b29b      	uxth	r3, r3
 800225a:	2bff      	cmp	r3, #255	; 0xff
 800225c:	d90e      	bls.n	800227c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	22ff      	movs	r2, #255	; 0xff
 8002262:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002268:	b2da      	uxtb	r2, r3
 800226a:	8979      	ldrh	r1, [r7, #10]
 800226c:	2300      	movs	r3, #0
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 fa91 	bl	800279c <I2C_TransferConfig>
 800227a:	e00f      	b.n	800229c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228a:	b2da      	uxtb	r2, r3
 800228c:	8979      	ldrh	r1, [r7, #10]
 800228e:	2300      	movs	r3, #0
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 fa80 	bl	800279c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d19e      	bne.n	80021e4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	6a39      	ldr	r1, [r7, #32]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 f9d4 	bl	8002658 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e01a      	b.n	80022f0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2220      	movs	r2, #32
 80022c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6859      	ldr	r1, [r3, #4]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_I2C_Master_Transmit+0x1e4>)
 80022ce:	400b      	ands	r3, r1
 80022d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2220      	movs	r2, #32
 80022d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	e000      	b.n	80022f0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80022ee:	2302      	movs	r3, #2
  }
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	80002000 	.word	0x80002000
 80022fc:	fe00e800 	.word	0xfe00e800

08002300 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af02      	add	r7, sp, #8
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	460b      	mov	r3, r1
 800230e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b20      	cmp	r3, #32
 800231e:	f040 80ef 	bne.w	8002500 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800232c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002330:	d101      	bne.n	8002336 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002332:	2302      	movs	r3, #2
 8002334:	e0e5      	b.n	8002502 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_I2C_IsDeviceReady+0x44>
 8002340:	2302      	movs	r3, #2
 8002342:	e0de      	b.n	8002502 <HAL_I2C_IsDeviceReady+0x202>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2224      	movs	r2, #36	; 0x24
 8002350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d105      	bne.n	800236e <HAL_I2C_IsDeviceReady+0x6e>
 8002362:	897b      	ldrh	r3, [r7, #10]
 8002364:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002368:	4b68      	ldr	r3, [pc, #416]	; (800250c <HAL_I2C_IsDeviceReady+0x20c>)
 800236a:	4313      	orrs	r3, r2
 800236c:	e004      	b.n	8002378 <HAL_I2C_IsDeviceReady+0x78>
 800236e:	897b      	ldrh	r3, [r7, #10]
 8002370:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002374:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800237e:	f7fe ff5b 	bl	8001238 <HAL_GetTick>
 8002382:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	f003 0320 	and.w	r3, r3, #32
 800238e:	2b20      	cmp	r3, #32
 8002390:	bf0c      	ite	eq
 8002392:	2301      	moveq	r3, #1
 8002394:	2300      	movne	r3, #0
 8002396:	b2db      	uxtb	r3, r3
 8002398:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	2b10      	cmp	r3, #16
 80023a6:	bf0c      	ite	eq
 80023a8:	2301      	moveq	r3, #1
 80023aa:	2300      	movne	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80023b0:	e034      	b.n	800241c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023b8:	d01a      	beq.n	80023f0 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023ba:	f7fe ff3d 	bl	8001238 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d302      	bcc.n	80023d0 <HAL_I2C_IsDeviceReady+0xd0>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10f      	bne.n	80023f0 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023dc:	f043 0220 	orr.w	r2, r3, #32
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e088      	b.n	8002502 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b20      	cmp	r3, #32
 80023fc:	bf0c      	ite	eq
 80023fe:	2301      	moveq	r3, #1
 8002400:	2300      	movne	r3, #0
 8002402:	b2db      	uxtb	r3, r3
 8002404:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	f003 0310 	and.w	r3, r3, #16
 8002410:	2b10      	cmp	r3, #16
 8002412:	bf0c      	ite	eq
 8002414:	2301      	moveq	r3, #1
 8002416:	2300      	movne	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800241c:	7ffb      	ldrb	r3, [r7, #31]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d102      	bne.n	8002428 <HAL_I2C_IsDeviceReady+0x128>
 8002422:	7fbb      	ldrb	r3, [r7, #30]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0c4      	beq.n	80023b2 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	2b10      	cmp	r3, #16
 8002434:	d01a      	beq.n	800246c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2200      	movs	r2, #0
 800243e:	2120      	movs	r1, #32
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 f889 	bl	8002558 <I2C_WaitOnFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e058      	b.n	8002502 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2220      	movs	r2, #32
 8002456:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	e04a      	b.n	8002502 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	2200      	movs	r2, #0
 8002474:	2120      	movs	r1, #32
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f86e 	bl	8002558 <I2C_WaitOnFlagUntilTimeout>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e03d      	b.n	8002502 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2210      	movs	r2, #16
 800248c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2220      	movs	r2, #32
 8002494:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	429a      	cmp	r2, r3
 800249c:	d118      	bne.n	80024d0 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024ac:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2200      	movs	r2, #0
 80024b6:	2120      	movs	r1, #32
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 f84d 	bl	8002558 <I2C_WaitOnFlagUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e01c      	b.n	8002502 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2220      	movs	r2, #32
 80024ce:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	3301      	adds	r3, #1
 80024d4:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	429a      	cmp	r2, r3
 80024dc:	f63f af3d 	bhi.w	800235a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ec:	f043 0220 	orr.w	r2, r3, #32
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8002500:	2302      	movs	r3, #2
  }
}
 8002502:	4618      	mov	r0, r3
 8002504:	3720      	adds	r7, #32
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	02002000 	.word	0x02002000

08002510 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b02      	cmp	r3, #2
 8002524:	d103      	bne.n	800252e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2200      	movs	r2, #0
 800252c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b01      	cmp	r3, #1
 800253a:	d007      	beq.n	800254c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699a      	ldr	r2, [r3, #24]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	619a      	str	r2, [r3, #24]
  }
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	4613      	mov	r3, r2
 8002566:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002568:	e022      	b.n	80025b0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002570:	d01e      	beq.n	80025b0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002572:	f7fe fe61 	bl	8001238 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d302      	bcc.n	8002588 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d113      	bne.n	80025b0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	f043 0220 	orr.w	r2, r3, #32
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e00f      	b.n	80025d0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699a      	ldr	r2, [r3, #24]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	4013      	ands	r3, r2
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	429a      	cmp	r2, r3
 80025be:	bf0c      	ite	eq
 80025c0:	2301      	moveq	r3, #1
 80025c2:	2300      	movne	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d0cd      	beq.n	800256a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025e4:	e02c      	b.n	8002640 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 f870 	bl	80026d0 <I2C_IsAcknowledgeFailed>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e02a      	b.n	8002650 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002600:	d01e      	beq.n	8002640 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002602:	f7fe fe19 	bl	8001238 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	429a      	cmp	r2, r3
 8002610:	d302      	bcc.n	8002618 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d113      	bne.n	8002640 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261c:	f043 0220 	orr.w	r2, r3, #32
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e007      	b.n	8002650 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b02      	cmp	r3, #2
 800264c:	d1cb      	bne.n	80025e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002664:	e028      	b.n	80026b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 f830 	bl	80026d0 <I2C_IsAcknowledgeFailed>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e026      	b.n	80026c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800267a:	f7fe fddd 	bl	8001238 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	429a      	cmp	r2, r3
 8002688:	d302      	bcc.n	8002690 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d113      	bne.n	80026b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002694:	f043 0220 	orr.w	r2, r3, #32
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2220      	movs	r2, #32
 80026a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e007      	b.n	80026c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b20      	cmp	r3, #32
 80026c4:	d1cf      	bne.n	8002666 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b10      	cmp	r3, #16
 80026e8:	d151      	bne.n	800278e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026ea:	e022      	b.n	8002732 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026f2:	d01e      	beq.n	8002732 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f4:	f7fe fda0 	bl	8001238 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	429a      	cmp	r2, r3
 8002702:	d302      	bcc.n	800270a <I2C_IsAcknowledgeFailed+0x3a>
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d113      	bne.n	8002732 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f043 0220 	orr.w	r2, r3, #32
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2220      	movs	r2, #32
 800271a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e02e      	b.n	8002790 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b20      	cmp	r3, #32
 800273e:	d1d5      	bne.n	80026ec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2210      	movs	r2, #16
 8002746:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2220      	movs	r2, #32
 800274e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f7ff fedd 	bl	8002510 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <I2C_IsAcknowledgeFailed+0xc8>)
 8002762:	400b      	ands	r3, r1
 8002764:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	f043 0204 	orr.w	r2, r3, #4
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	fe00e800 	.word	0xfe00e800

0800279c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	607b      	str	r3, [r7, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	817b      	strh	r3, [r7, #10]
 80027aa:	4613      	mov	r3, r2
 80027ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	0d5b      	lsrs	r3, r3, #21
 80027b8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80027bc:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <I2C_TransferConfig+0x58>)
 80027be:	430b      	orrs	r3, r1
 80027c0:	43db      	mvns	r3, r3
 80027c2:	ea02 0103 	and.w	r1, r2, r3
 80027c6:	897b      	ldrh	r3, [r7, #10]
 80027c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027cc:	7a7b      	ldrb	r3, [r7, #9]
 80027ce:	041b      	lsls	r3, r3, #16
 80027d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	431a      	orrs	r2, r3
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	431a      	orrs	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	03ff63ff 	.word	0x03ff63ff

080027f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b20      	cmp	r3, #32
 800280c:	d138      	bne.n	8002880 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002818:	2302      	movs	r3, #2
 800281a:	e032      	b.n	8002882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2224      	movs	r2, #36	; 0x24
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0201 	bic.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800284a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6819      	ldr	r1, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	e000      	b.n	8002882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002880:	2302      	movs	r3, #2
  }
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800288e:	b480      	push	{r7}
 8002890:	b085      	sub	sp, #20
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	d139      	bne.n	8002918 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e033      	b.n	800291a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2224      	movs	r2, #36	; 0x24
 80028be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0201 	bic.w	r2, r2, #1
 80028d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0201 	orr.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	e000      	b.n	800291a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002918:	2302      	movs	r3, #2
  }
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002932:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	4a22      	ldr	r2, [pc, #136]	; (80029c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800293c:	6413      	str	r3, [r2, #64]	; 0x40
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800294a:	4b1e      	ldr	r3, [pc, #120]	; (80029c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a1d      	ldr	r2, [pc, #116]	; (80029c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002954:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002956:	f7fe fc6f 	bl	8001238 <HAL_GetTick>
 800295a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800295c:	e009      	b.n	8002972 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800295e:	f7fe fc6b 	bl	8001238 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800296c:	d901      	bls.n	8002972 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e022      	b.n	80029b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002972:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800297e:	d1ee      	bne.n	800295e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002980:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0f      	ldr	r2, [pc, #60]	; (80029c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800298c:	f7fe fc54 	bl	8001238 <HAL_GetTick>
 8002990:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002992:	e009      	b.n	80029a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002994:	f7fe fc50 	bl	8001238 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029a2:	d901      	bls.n	80029a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e007      	b.n	80029b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029b4:	d1ee      	bne.n	8002994 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40007000 	.word	0x40007000

080029c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80029d0:	2300      	movs	r3, #0
 80029d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e291      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 8087 	beq.w	8002afa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029ec:	4b96      	ldr	r3, [pc, #600]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d00c      	beq.n	8002a12 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f8:	4b93      	ldr	r3, [pc, #588]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d112      	bne.n	8002a2a <HAL_RCC_OscConfig+0x62>
 8002a04:	4b90      	ldr	r3, [pc, #576]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a10:	d10b      	bne.n	8002a2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a12:	4b8d      	ldr	r3, [pc, #564]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d06c      	beq.n	8002af8 <HAL_RCC_OscConfig+0x130>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d168      	bne.n	8002af8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e26b      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a32:	d106      	bne.n	8002a42 <HAL_RCC_OscConfig+0x7a>
 8002a34:	4b84      	ldr	r3, [pc, #528]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a83      	ldr	r2, [pc, #524]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	e02e      	b.n	8002aa0 <HAL_RCC_OscConfig+0xd8>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x9c>
 8002a4a:	4b7f      	ldr	r3, [pc, #508]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a7e      	ldr	r2, [pc, #504]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	4b7c      	ldr	r3, [pc, #496]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a7b      	ldr	r2, [pc, #492]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	e01d      	b.n	8002aa0 <HAL_RCC_OscConfig+0xd8>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCC_OscConfig+0xc0>
 8002a6e:	4b76      	ldr	r3, [pc, #472]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a75      	ldr	r2, [pc, #468]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	4b73      	ldr	r3, [pc, #460]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a72      	ldr	r2, [pc, #456]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e00b      	b.n	8002aa0 <HAL_RCC_OscConfig+0xd8>
 8002a88:	4b6f      	ldr	r3, [pc, #444]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a6e      	ldr	r2, [pc, #440]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	4b6c      	ldr	r3, [pc, #432]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a6b      	ldr	r2, [pc, #428]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d013      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fbc6 	bl	8001238 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab0:	f7fe fbc2 	bl	8001238 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	; 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e21f      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	4b61      	ldr	r3, [pc, #388]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0xe8>
 8002ace:	e014      	b.n	8002afa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fbb2 	bl	8001238 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad8:	f7fe fbae 	bl	8001238 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b64      	cmp	r3, #100	; 0x64
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e20b      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aea:	4b57      	ldr	r3, [pc, #348]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x110>
 8002af6:	e000      	b.n	8002afa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d069      	beq.n	8002bda <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b06:	4b50      	ldr	r3, [pc, #320]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b12:	4b4d      	ldr	r3, [pc, #308]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d11c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x190>
 8002b1e:	4b4a      	ldr	r3, [pc, #296]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d116      	bne.n	8002b58 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2a:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <HAL_RCC_OscConfig+0x17a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e1df      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b42:	4b41      	ldr	r3, [pc, #260]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	493d      	ldr	r1, [pc, #244]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b56:	e040      	b.n	8002bda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d023      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b60:	4b39      	ldr	r3, [pc, #228]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a38      	ldr	r2, [pc, #224]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fb64 	bl	8001238 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b74:	f7fe fb60 	bl	8001238 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e1bd      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b86:	4b30      	ldr	r3, [pc, #192]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b92:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4929      	ldr	r1, [pc, #164]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]
 8002ba6:	e018      	b.n	8002bda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba8:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a26      	ldr	r2, [pc, #152]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002bae:	f023 0301 	bic.w	r3, r3, #1
 8002bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fb40 	bl	8001238 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bbc:	f7fe fb3c 	bl	8001238 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e199      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bce:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d038      	beq.n	8002c58 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d019      	beq.n	8002c22 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bee:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf2:	4a15      	ldr	r2, [pc, #84]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfa:	f7fe fb1d 	bl	8001238 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c02:	f7fe fb19 	bl	8001238 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e176      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x23a>
 8002c20:	e01a      	b.n	8002c58 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c26:	4a08      	ldr	r2, [pc, #32]	; (8002c48 <HAL_RCC_OscConfig+0x280>)
 8002c28:	f023 0301 	bic.w	r3, r3, #1
 8002c2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2e:	f7fe fb03 	bl	8001238 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c34:	e00a      	b.n	8002c4c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c36:	f7fe faff 	bl	8001238 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d903      	bls.n	8002c4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e15c      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
 8002c48:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c4c:	4b91      	ldr	r3, [pc, #580]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1ee      	bne.n	8002c36 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80a4 	beq.w	8002dae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c66:	4b8b      	ldr	r3, [pc, #556]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10d      	bne.n	8002c8e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c72:	4b88      	ldr	r3, [pc, #544]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	4a87      	ldr	r2, [pc, #540]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7e:	4b85      	ldr	r3, [pc, #532]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c8e:	4b82      	ldr	r3, [pc, #520]	; (8002e98 <HAL_RCC_OscConfig+0x4d0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d118      	bne.n	8002ccc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c9a:	4b7f      	ldr	r3, [pc, #508]	; (8002e98 <HAL_RCC_OscConfig+0x4d0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a7e      	ldr	r2, [pc, #504]	; (8002e98 <HAL_RCC_OscConfig+0x4d0>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca6:	f7fe fac7 	bl	8001238 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cae:	f7fe fac3 	bl	8001238 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b64      	cmp	r3, #100	; 0x64
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e120      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cc0:	4b75      	ldr	r3, [pc, #468]	; (8002e98 <HAL_RCC_OscConfig+0x4d0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d106      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x31a>
 8002cd4:	4b6f      	ldr	r3, [pc, #444]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	4a6e      	ldr	r2, [pc, #440]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce0:	e02d      	b.n	8002d3e <HAL_RCC_OscConfig+0x376>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x33c>
 8002cea:	4b6a      	ldr	r3, [pc, #424]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	4a69      	ldr	r2, [pc, #420]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002cf0:	f023 0301 	bic.w	r3, r3, #1
 8002cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf6:	4b67      	ldr	r3, [pc, #412]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	4a66      	ldr	r2, [pc, #408]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002cfc:	f023 0304 	bic.w	r3, r3, #4
 8002d00:	6713      	str	r3, [r2, #112]	; 0x70
 8002d02:	e01c      	b.n	8002d3e <HAL_RCC_OscConfig+0x376>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b05      	cmp	r3, #5
 8002d0a:	d10c      	bne.n	8002d26 <HAL_RCC_OscConfig+0x35e>
 8002d0c:	4b61      	ldr	r3, [pc, #388]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d10:	4a60      	ldr	r2, [pc, #384]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d12:	f043 0304 	orr.w	r3, r3, #4
 8002d16:	6713      	str	r3, [r2, #112]	; 0x70
 8002d18:	4b5e      	ldr	r3, [pc, #376]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1c:	4a5d      	ldr	r2, [pc, #372]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6713      	str	r3, [r2, #112]	; 0x70
 8002d24:	e00b      	b.n	8002d3e <HAL_RCC_OscConfig+0x376>
 8002d26:	4b5b      	ldr	r3, [pc, #364]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2a:	4a5a      	ldr	r2, [pc, #360]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	6713      	str	r3, [r2, #112]	; 0x70
 8002d32:	4b58      	ldr	r3, [pc, #352]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d36:	4a57      	ldr	r2, [pc, #348]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d38:	f023 0304 	bic.w	r3, r3, #4
 8002d3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d015      	beq.n	8002d72 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d46:	f7fe fa77 	bl	8001238 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4c:	e00a      	b.n	8002d64 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4e:	f7fe fa73 	bl	8001238 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e0ce      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d64:	4b4b      	ldr	r3, [pc, #300]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0ee      	beq.n	8002d4e <HAL_RCC_OscConfig+0x386>
 8002d70:	e014      	b.n	8002d9c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d72:	f7fe fa61 	bl	8001238 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d78:	e00a      	b.n	8002d90 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7a:	f7fe fa5d 	bl	8001238 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e0b8      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d90:	4b40      	ldr	r3, [pc, #256]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1ee      	bne.n	8002d7a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d9c:	7dfb      	ldrb	r3, [r7, #23]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d105      	bne.n	8002dae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da2:	4b3c      	ldr	r3, [pc, #240]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	4a3b      	ldr	r2, [pc, #236]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 80a4 	beq.w	8002f00 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db8:	4b36      	ldr	r3, [pc, #216]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 030c 	and.w	r3, r3, #12
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d06b      	beq.n	8002e9c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d149      	bne.n	8002e60 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dcc:	4b31      	ldr	r3, [pc, #196]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a30      	ldr	r2, [pc, #192]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fe fa2e 	bl	8001238 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe fa2a 	bl	8001238 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e087      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df2:	4b28      	ldr	r3, [pc, #160]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69da      	ldr	r2, [r3, #28]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	019b      	lsls	r3, r3, #6
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	085b      	lsrs	r3, r3, #1
 8002e16:	3b01      	subs	r3, #1
 8002e18:	041b      	lsls	r3, r3, #16
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	061b      	lsls	r3, r3, #24
 8002e22:	4313      	orrs	r3, r2
 8002e24:	4a1b      	ldr	r2, [pc, #108]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e2a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e2c:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a18      	ldr	r2, [pc, #96]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fe f9fe 	bl	8001238 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e40:	f7fe f9fa 	bl	8001238 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e057      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e52:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0x478>
 8002e5e:	e04f      	b.n	8002f00 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6c:	f7fe f9e4 	bl	8001238 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e74:	f7fe f9e0 	bl	8001238 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e03d      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e86:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <HAL_RCC_OscConfig+0x4ac>
 8002e92:	e035      	b.n	8002f00 <HAL_RCC_OscConfig+0x538>
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e9c:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <HAL_RCC_OscConfig+0x544>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d028      	beq.n	8002efc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d121      	bne.n	8002efc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d11a      	bne.n	8002efc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ecc:	4013      	ands	r3, r2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ed2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d111      	bne.n	8002efc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	085b      	lsrs	r3, r3, #1
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d107      	bne.n	8002efc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800

08002f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0d0      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f28:	4b6a      	ldr	r3, [pc, #424]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d910      	bls.n	8002f58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f36:	4b67      	ldr	r3, [pc, #412]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 020f 	bic.w	r2, r3, #15
 8002f3e:	4965      	ldr	r1, [pc, #404]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	4b63      	ldr	r3, [pc, #396]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0b8      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d020      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f70:	4b59      	ldr	r3, [pc, #356]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4a58      	ldr	r2, [pc, #352]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f88:	4b53      	ldr	r3, [pc, #332]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4a52      	ldr	r2, [pc, #328]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f94:	4b50      	ldr	r3, [pc, #320]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	494d      	ldr	r1, [pc, #308]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d040      	beq.n	8003034 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d107      	bne.n	8002fca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	4b47      	ldr	r3, [pc, #284]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d115      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e07f      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d107      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd2:	4b41      	ldr	r3, [pc, #260]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e073      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe2:	4b3d      	ldr	r3, [pc, #244]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e06b      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ff2:	4b39      	ldr	r3, [pc, #228]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f023 0203 	bic.w	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4936      	ldr	r1, [pc, #216]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003000:	4313      	orrs	r3, r2
 8003002:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003004:	f7fe f918 	bl	8001238 <HAL_GetTick>
 8003008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300a:	e00a      	b.n	8003022 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300c:	f7fe f914 	bl	8001238 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	; 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e053      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003022:	4b2d      	ldr	r3, [pc, #180]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 020c 	and.w	r2, r3, #12
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	429a      	cmp	r2, r3
 8003032:	d1eb      	bne.n	800300c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003034:	4b27      	ldr	r3, [pc, #156]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d210      	bcs.n	8003064 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003042:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 020f 	bic.w	r2, r3, #15
 800304a:	4922      	ldr	r1, [pc, #136]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	4313      	orrs	r3, r2
 8003050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e032      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d008      	beq.n	8003082 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4916      	ldr	r1, [pc, #88]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 800307e:	4313      	orrs	r3, r2
 8003080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800308e:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	490e      	ldr	r1, [pc, #56]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030a2:	f000 f821 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 80030a6:	4601      	mov	r1, r0
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <HAL_RCC_ClockConfig+0x1cc>)
 80030b4:	5cd3      	ldrb	r3, [r2, r3]
 80030b6:	fa21 f303 	lsr.w	r3, r1, r3
 80030ba:	4a09      	ldr	r2, [pc, #36]	; (80030e0 <HAL_RCC_ClockConfig+0x1d0>)
 80030bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_RCC_ClockConfig+0x1d4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd ff9e 	bl	8001004 <HAL_InitTick>

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40023c00 	.word	0x40023c00
 80030d8:	40023800 	.word	0x40023800
 80030dc:	08009754 	.word	0x08009754
 80030e0:	20000000 	.word	0x20000000
 80030e4:	20000004 	.word	0x20000004

080030e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	607b      	str	r3, [r7, #4]
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	2300      	movs	r3, #0
 80030f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030fe:	4b50      	ldr	r3, [pc, #320]	; (8003240 <HAL_RCC_GetSysClockFreq+0x158>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b04      	cmp	r3, #4
 8003108:	d007      	beq.n	800311a <HAL_RCC_GetSysClockFreq+0x32>
 800310a:	2b08      	cmp	r3, #8
 800310c:	d008      	beq.n	8003120 <HAL_RCC_GetSysClockFreq+0x38>
 800310e:	2b00      	cmp	r3, #0
 8003110:	f040 808d 	bne.w	800322e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003114:	4b4b      	ldr	r3, [pc, #300]	; (8003244 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003116:	60bb      	str	r3, [r7, #8]
      break;
 8003118:	e08c      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800311a:	4b4b      	ldr	r3, [pc, #300]	; (8003248 <HAL_RCC_GetSysClockFreq+0x160>)
 800311c:	60bb      	str	r3, [r7, #8]
      break;
 800311e:	e089      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003120:	4b47      	ldr	r3, [pc, #284]	; (8003240 <HAL_RCC_GetSysClockFreq+0x158>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003128:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800312a:	4b45      	ldr	r3, [pc, #276]	; (8003240 <HAL_RCC_GetSysClockFreq+0x158>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d023      	beq.n	800317e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003136:	4b42      	ldr	r3, [pc, #264]	; (8003240 <HAL_RCC_GetSysClockFreq+0x158>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	099b      	lsrs	r3, r3, #6
 800313c:	f04f 0400 	mov.w	r4, #0
 8003140:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	ea03 0501 	and.w	r5, r3, r1
 800314c:	ea04 0602 	and.w	r6, r4, r2
 8003150:	4a3d      	ldr	r2, [pc, #244]	; (8003248 <HAL_RCC_GetSysClockFreq+0x160>)
 8003152:	fb02 f106 	mul.w	r1, r2, r6
 8003156:	2200      	movs	r2, #0
 8003158:	fb02 f205 	mul.w	r2, r2, r5
 800315c:	440a      	add	r2, r1
 800315e:	493a      	ldr	r1, [pc, #232]	; (8003248 <HAL_RCC_GetSysClockFreq+0x160>)
 8003160:	fba5 0101 	umull	r0, r1, r5, r1
 8003164:	1853      	adds	r3, r2, r1
 8003166:	4619      	mov	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f04f 0400 	mov.w	r4, #0
 800316e:	461a      	mov	r2, r3
 8003170:	4623      	mov	r3, r4
 8003172:	f7fd f8a5 	bl	80002c0 <__aeabi_uldivmod>
 8003176:	4603      	mov	r3, r0
 8003178:	460c      	mov	r4, r1
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	e049      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800317e:	4b30      	ldr	r3, [pc, #192]	; (8003240 <HAL_RCC_GetSysClockFreq+0x158>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	099b      	lsrs	r3, r3, #6
 8003184:	f04f 0400 	mov.w	r4, #0
 8003188:	f240 11ff 	movw	r1, #511	; 0x1ff
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	ea03 0501 	and.w	r5, r3, r1
 8003194:	ea04 0602 	and.w	r6, r4, r2
 8003198:	4629      	mov	r1, r5
 800319a:	4632      	mov	r2, r6
 800319c:	f04f 0300 	mov.w	r3, #0
 80031a0:	f04f 0400 	mov.w	r4, #0
 80031a4:	0154      	lsls	r4, r2, #5
 80031a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031aa:	014b      	lsls	r3, r1, #5
 80031ac:	4619      	mov	r1, r3
 80031ae:	4622      	mov	r2, r4
 80031b0:	1b49      	subs	r1, r1, r5
 80031b2:	eb62 0206 	sbc.w	r2, r2, r6
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	f04f 0400 	mov.w	r4, #0
 80031be:	0194      	lsls	r4, r2, #6
 80031c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80031c4:	018b      	lsls	r3, r1, #6
 80031c6:	1a5b      	subs	r3, r3, r1
 80031c8:	eb64 0402 	sbc.w	r4, r4, r2
 80031cc:	f04f 0100 	mov.w	r1, #0
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	00e2      	lsls	r2, r4, #3
 80031d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80031da:	00d9      	lsls	r1, r3, #3
 80031dc:	460b      	mov	r3, r1
 80031de:	4614      	mov	r4, r2
 80031e0:	195b      	adds	r3, r3, r5
 80031e2:	eb44 0406 	adc.w	r4, r4, r6
 80031e6:	f04f 0100 	mov.w	r1, #0
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	02a2      	lsls	r2, r4, #10
 80031f0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80031f4:	0299      	lsls	r1, r3, #10
 80031f6:	460b      	mov	r3, r1
 80031f8:	4614      	mov	r4, r2
 80031fa:	4618      	mov	r0, r3
 80031fc:	4621      	mov	r1, r4
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f04f 0400 	mov.w	r4, #0
 8003204:	461a      	mov	r2, r3
 8003206:	4623      	mov	r3, r4
 8003208:	f7fd f85a 	bl	80002c0 <__aeabi_uldivmod>
 800320c:	4603      	mov	r3, r0
 800320e:	460c      	mov	r4, r1
 8003210:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003212:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_RCC_GetSysClockFreq+0x158>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	0c1b      	lsrs	r3, r3, #16
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	3301      	adds	r3, #1
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	fbb2 f3f3 	udiv	r3, r2, r3
 800322a:	60bb      	str	r3, [r7, #8]
      break;
 800322c:	e002      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003230:	60bb      	str	r3, [r7, #8]
      break;
 8003232:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003234:	68bb      	ldr	r3, [r7, #8]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800323e:	bf00      	nop
 8003240:	40023800 	.word	0x40023800
 8003244:	00f42400 	.word	0x00f42400
 8003248:	017d7840 	.word	0x017d7840

0800324c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003250:	4b03      	ldr	r3, [pc, #12]	; (8003260 <HAL_RCC_GetHCLKFreq+0x14>)
 8003252:	681b      	ldr	r3, [r3, #0]
}
 8003254:	4618      	mov	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	20000000 	.word	0x20000000

08003264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003268:	f7ff fff0 	bl	800324c <HAL_RCC_GetHCLKFreq>
 800326c:	4601      	mov	r1, r0
 800326e:	4b05      	ldr	r3, [pc, #20]	; (8003284 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	0a9b      	lsrs	r3, r3, #10
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	4a03      	ldr	r2, [pc, #12]	; (8003288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800327a:	5cd3      	ldrb	r3, [r2, r3]
 800327c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003280:	4618      	mov	r0, r3
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40023800 	.word	0x40023800
 8003288:	08009764 	.word	0x08009764

0800328c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003290:	f7ff ffdc 	bl	800324c <HAL_RCC_GetHCLKFreq>
 8003294:	4601      	mov	r1, r0
 8003296:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	0b5b      	lsrs	r3, r3, #13
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	4a03      	ldr	r2, [pc, #12]	; (80032b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032a2:	5cd3      	ldrb	r3, [r2, r3]
 80032a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40023800 	.word	0x40023800
 80032b0:	08009764 	.word	0x08009764

080032b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	220f      	movs	r2, #15
 80032c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032c4:	4b12      	ldr	r3, [pc, #72]	; (8003310 <HAL_RCC_GetClockConfig+0x5c>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0203 	and.w	r2, r3, #3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032d0:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <HAL_RCC_GetClockConfig+0x5c>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032dc:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <HAL_RCC_GetClockConfig+0x5c>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80032e8:	4b09      	ldr	r3, [pc, #36]	; (8003310 <HAL_RCC_GetClockConfig+0x5c>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	08db      	lsrs	r3, r3, #3
 80032ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032f6:	4b07      	ldr	r3, [pc, #28]	; (8003314 <HAL_RCC_GetClockConfig+0x60>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 020f 	and.w	r2, r3, #15
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	601a      	str	r2, [r3, #0]
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40023800 	.word	0x40023800
 8003314:	40023c00 	.word	0x40023c00

08003318 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d012      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003340:	4b69      	ldr	r3, [pc, #420]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	4a68      	ldr	r2, [pc, #416]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003346:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800334a:	6093      	str	r3, [r2, #8]
 800334c:	4b66      	ldr	r3, [pc, #408]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003354:	4964      	ldr	r1, [pc, #400]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003362:	2301      	movs	r3, #1
 8003364:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d017      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003372:	4b5d      	ldr	r3, [pc, #372]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003378:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003380:	4959      	ldr	r1, [pc, #356]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003390:	d101      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003392:	2301      	movs	r3, #1
 8003394:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800339e:	2301      	movs	r3, #1
 80033a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d017      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033ae:	4b4e      	ldr	r3, [pc, #312]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	494a      	ldr	r1, [pc, #296]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033cc:	d101      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80033ce:	2301      	movs	r3, #1
 80033d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80033da:	2301      	movs	r3, #1
 80033dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80033ea:	2301      	movs	r3, #1
 80033ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0320 	and.w	r3, r3, #32
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 808b 	beq.w	8003512 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033fc:	4b3a      	ldr	r3, [pc, #232]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	4a39      	ldr	r2, [pc, #228]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003406:	6413      	str	r3, [r2, #64]	; 0x40
 8003408:	4b37      	ldr	r3, [pc, #220]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003414:	4b35      	ldr	r3, [pc, #212]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a34      	ldr	r2, [pc, #208]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800341a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800341e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003420:	f7fd ff0a 	bl	8001238 <HAL_GetTick>
 8003424:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003426:	e008      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003428:	f7fd ff06 	bl	8001238 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e355      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800343a:	4b2c      	ldr	r3, [pc, #176]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003446:	4b28      	ldr	r3, [pc, #160]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d035      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	429a      	cmp	r2, r3
 8003462:	d02e      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003464:	4b20      	ldr	r3, [pc, #128]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800346e:	4b1e      	ldr	r3, [pc, #120]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003472:	4a1d      	ldr	r2, [pc, #116]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003478:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800347a:	4b1b      	ldr	r3, [pc, #108]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347e:	4a1a      	ldr	r2, [pc, #104]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003484:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003486:	4a18      	ldr	r2, [pc, #96]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800348c:	4b16      	ldr	r3, [pc, #88]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d114      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003498:	f7fd fece 	bl	8001238 <HAL_GetTick>
 800349c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349e:	e00a      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a0:	f7fd feca 	bl	8001238 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e317      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b6:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0ee      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ce:	d111      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034dc:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80034de:	400b      	ands	r3, r1
 80034e0:	4901      	ldr	r1, [pc, #4]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]
 80034e6:	e00b      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40007000 	.word	0x40007000
 80034f0:	0ffffcff 	.word	0x0ffffcff
 80034f4:	4bb0      	ldr	r3, [pc, #704]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	4aaf      	ldr	r2, [pc, #700]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034fe:	6093      	str	r3, [r2, #8]
 8003500:	4bad      	ldr	r3, [pc, #692]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003502:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800350c:	49aa      	ldr	r1, [pc, #680]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800350e:	4313      	orrs	r3, r2
 8003510:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b00      	cmp	r3, #0
 800351c:	d010      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800351e:	4ba6      	ldr	r3, [pc, #664]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003524:	4aa4      	ldr	r2, [pc, #656]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800352a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800352e:	4ba2      	ldr	r3, [pc, #648]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003530:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003538:	499f      	ldr	r1, [pc, #636]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800354c:	4b9a      	ldr	r3, [pc, #616]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003552:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800355a:	4997      	ldr	r1, [pc, #604]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800356e:	4b92      	ldr	r3, [pc, #584]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003574:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800357c:	498e      	ldr	r1, [pc, #568]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003590:	4b89      	ldr	r3, [pc, #548]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003596:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359e:	4986      	ldr	r1, [pc, #536]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035b2:	4b81      	ldr	r3, [pc, #516]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c0:	497d      	ldr	r1, [pc, #500]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035d4:	4b78      	ldr	r3, [pc, #480]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035da:	f023 0203 	bic.w	r2, r3, #3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	4975      	ldr	r1, [pc, #468]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035f6:	4b70      	ldr	r3, [pc, #448]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fc:	f023 020c 	bic.w	r2, r3, #12
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003604:	496c      	ldr	r1, [pc, #432]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003618:	4b67      	ldr	r3, [pc, #412]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003626:	4964      	ldr	r1, [pc, #400]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800363a:	4b5f      	ldr	r3, [pc, #380]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800363c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003640:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003648:	495b      	ldr	r1, [pc, #364]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800365c:	4b56      	ldr	r3, [pc, #344]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366a:	4953      	ldr	r1, [pc, #332]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800367e:	4b4e      	ldr	r3, [pc, #312]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003684:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368c:	494a      	ldr	r1, [pc, #296]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036a0:	4b45      	ldr	r3, [pc, #276]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ae:	4942      	ldr	r1, [pc, #264]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80036c2:	4b3d      	ldr	r3, [pc, #244]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d0:	4939      	ldr	r1, [pc, #228]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036e4:	4b34      	ldr	r3, [pc, #208]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036f2:	4931      	ldr	r1, [pc, #196]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d011      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003706:	4b2c      	ldr	r3, [pc, #176]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003714:	4928      	ldr	r1, [pc, #160]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003720:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003724:	d101      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003726:	2301      	movs	r3, #1
 8003728:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003736:	2301      	movs	r3, #1
 8003738:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003746:	4b1c      	ldr	r3, [pc, #112]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003754:	4918      	ldr	r1, [pc, #96]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00b      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003768:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003778:	490f      	ldr	r1, [pc, #60]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d005      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800378e:	f040 80d8 	bne.w	8003942 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003792:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a08      	ldr	r2, [pc, #32]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003798:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800379c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800379e:	f7fd fd4b 	bl	8001238 <HAL_GetTick>
 80037a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037a4:	e00a      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037a6:	f7fd fd47 	bl	8001238 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b64      	cmp	r3, #100	; 0x64
 80037b2:	d903      	bls.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e196      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80037b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037bc:	4b6c      	ldr	r3, [pc, #432]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1ee      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d021      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d11d      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037dc:	4b64      	ldr	r3, [pc, #400]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e2:	0c1b      	lsrs	r3, r3, #16
 80037e4:	f003 0303 	and.w	r3, r3, #3
 80037e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037ea:	4b61      	ldr	r3, [pc, #388]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037f0:	0e1b      	lsrs	r3, r3, #24
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	019a      	lsls	r2, r3, #6
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	041b      	lsls	r3, r3, #16
 8003802:	431a      	orrs	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	061b      	lsls	r3, r3, #24
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	071b      	lsls	r3, r3, #28
 8003810:	4957      	ldr	r1, [pc, #348]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d004      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003828:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800382c:	d00a      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003836:	2b00      	cmp	r3, #0
 8003838:	d02e      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003842:	d129      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003844:	4b4a      	ldr	r3, [pc, #296]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800384a:	0c1b      	lsrs	r3, r3, #16
 800384c:	f003 0303 	and.w	r3, r3, #3
 8003850:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003852:	4b47      	ldr	r3, [pc, #284]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003858:	0f1b      	lsrs	r3, r3, #28
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	019a      	lsls	r2, r3, #6
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	041b      	lsls	r3, r3, #16
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	061b      	lsls	r3, r3, #24
 8003872:	431a      	orrs	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	071b      	lsls	r3, r3, #28
 8003878:	493d      	ldr	r1, [pc, #244]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003880:	4b3b      	ldr	r3, [pc, #236]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003886:	f023 021f 	bic.w	r2, r3, #31
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	3b01      	subs	r3, #1
 8003890:	4937      	ldr	r1, [pc, #220]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01d      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038a4:	4b32      	ldr	r3, [pc, #200]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038aa:	0e1b      	lsrs	r3, r3, #24
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038b2:	4b2f      	ldr	r3, [pc, #188]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038b8:	0f1b      	lsrs	r3, r3, #28
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	019a      	lsls	r2, r3, #6
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	041b      	lsls	r3, r3, #16
 80038cc:	431a      	orrs	r2, r3
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	061b      	lsls	r3, r3, #24
 80038d2:	431a      	orrs	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	071b      	lsls	r3, r3, #28
 80038d8:	4925      	ldr	r1, [pc, #148]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d011      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	019a      	lsls	r2, r3, #6
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	041b      	lsls	r3, r3, #16
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	061b      	lsls	r3, r3, #24
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	071b      	lsls	r3, r3, #28
 8003908:	4919      	ldr	r1, [pc, #100]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003910:	4b17      	ldr	r3, [pc, #92]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a16      	ldr	r2, [pc, #88]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003916:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800391a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800391c:	f7fd fc8c 	bl	8001238 <HAL_GetTick>
 8003920:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003924:	f7fd fc88 	bl	8001238 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b64      	cmp	r3, #100	; 0x64
 8003930:	d901      	bls.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e0d7      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003936:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0f0      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	2b01      	cmp	r3, #1
 8003946:	f040 80cd 	bne.w	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800394a:	4b09      	ldr	r3, [pc, #36]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a08      	ldr	r2, [pc, #32]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003956:	f7fd fc6f 	bl	8001238 <HAL_GetTick>
 800395a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800395c:	e00a      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800395e:	f7fd fc6b 	bl	8001238 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b64      	cmp	r3, #100	; 0x64
 800396a:	d903      	bls.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e0ba      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003970:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003974:	4b5e      	ldr	r3, [pc, #376]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800397c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003980:	d0ed      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d02e      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d12a      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039aa:	4b51      	ldr	r3, [pc, #324]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	0c1b      	lsrs	r3, r3, #16
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039b8:	4b4d      	ldr	r3, [pc, #308]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039be:	0f1b      	lsrs	r3, r3, #28
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	019a      	lsls	r2, r3, #6
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	041b      	lsls	r3, r3, #16
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	061b      	lsls	r3, r3, #24
 80039d8:	431a      	orrs	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	071b      	lsls	r3, r3, #28
 80039de:	4944      	ldr	r1, [pc, #272]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80039e6:	4b42      	ldr	r3, [pc, #264]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	3b01      	subs	r3, #1
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	493d      	ldr	r1, [pc, #244]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d022      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a14:	d11d      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a16:	4b36      	ldr	r3, [pc, #216]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1c:	0e1b      	lsrs	r3, r3, #24
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a24:	4b32      	ldr	r3, [pc, #200]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2a:	0f1b      	lsrs	r3, r3, #28
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	019a      	lsls	r2, r3, #6
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	041b      	lsls	r3, r3, #16
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	061b      	lsls	r3, r3, #24
 8003a44:	431a      	orrs	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	071b      	lsls	r3, r3, #28
 8003a4a:	4929      	ldr	r1, [pc, #164]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d028      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a5e:	4b24      	ldr	r3, [pc, #144]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a64:	0e1b      	lsrs	r3, r3, #24
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a6c:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a72:	0c1b      	lsrs	r3, r3, #16
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	019a      	lsls	r2, r3, #6
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	041b      	lsls	r3, r3, #16
 8003a84:	431a      	orrs	r2, r3
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	061b      	lsls	r3, r3, #24
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	071b      	lsls	r3, r3, #28
 8003a92:	4917      	ldr	r1, [pc, #92]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a9a:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	4911      	ldr	r1, [pc, #68]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a0e      	ldr	r2, [pc, #56]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003abc:	f7fd fbbc 	bl	8001238 <HAL_GetTick>
 8003ac0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ac4:	f7fd fbb8 	bl	8001238 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b64      	cmp	r3, #100	; 0x64
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e007      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ad6:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae2:	d1ef      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3720      	adds	r7, #32
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40023800 	.word	0x40023800

08003af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e01d      	b.n	8003b42 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd f9d8 	bl	8000ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	4619      	mov	r1, r3
 8003b32:	4610      	mov	r0, r2
 8003b34:	f000 fa36 	bl	8003fa4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <HAL_TIM_Base_Start_IT+0x50>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b06      	cmp	r3, #6
 8003b74:	d00b      	beq.n	8003b8e <HAL_TIM_Base_Start_IT+0x42>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b7c:	d007      	beq.n	8003b8e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0201 	orr.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	00010007 	.word	0x00010007

08003ba0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d122      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d11b      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0202 	mvn.w	r2, #2
 8003bcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f9c0 	bl	8003f68 <HAL_TIM_IC_CaptureCallback>
 8003be8:	e005      	b.n	8003bf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f9b2 	bl	8003f54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f9c3 	bl	8003f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d122      	bne.n	8003c50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d11b      	bne.n	8003c50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f06f 0204 	mvn.w	r2, #4
 8003c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2202      	movs	r2, #2
 8003c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f996 	bl	8003f68 <HAL_TIM_IC_CaptureCallback>
 8003c3c:	e005      	b.n	8003c4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f988 	bl	8003f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f999 	bl	8003f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d122      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d11b      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f06f 0208 	mvn.w	r2, #8
 8003c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2204      	movs	r2, #4
 8003c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f96c 	bl	8003f68 <HAL_TIM_IC_CaptureCallback>
 8003c90:	e005      	b.n	8003c9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f95e 	bl	8003f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f96f 	bl	8003f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	2b10      	cmp	r3, #16
 8003cb0:	d122      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	d11b      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0210 	mvn.w	r2, #16
 8003cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2208      	movs	r2, #8
 8003cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f942 	bl	8003f68 <HAL_TIM_IC_CaptureCallback>
 8003ce4:	e005      	b.n	8003cf2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f934 	bl	8003f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f945 	bl	8003f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d10e      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d107      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f06f 0201 	mvn.w	r2, #1
 8003d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fc ffe6 	bl	8000cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2e:	2b80      	cmp	r3, #128	; 0x80
 8003d30:	d10e      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3c:	2b80      	cmp	r3, #128	; 0x80
 8003d3e:	d107      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fafc 	bl	8004348 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d5e:	d10e      	bne.n	8003d7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6a:	2b80      	cmp	r3, #128	; 0x80
 8003d6c:	d107      	bne.n	8003d7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 faef 	bl	800435c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	d10e      	bne.n	8003daa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d96:	2b40      	cmp	r3, #64	; 0x40
 8003d98:	d107      	bne.n	8003daa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f8f3 	bl	8003f90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b20      	cmp	r3, #32
 8003db6:	d10e      	bne.n	8003dd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d107      	bne.n	8003dd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f06f 0220 	mvn.w	r2, #32
 8003dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 faaf 	bl	8004334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_TIM_ConfigClockSource+0x18>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e0a6      	b.n	8003f46 <HAL_TIM_ConfigClockSource+0x166>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4b4f      	ldr	r3, [pc, #316]	; (8003f50 <HAL_TIM_ConfigClockSource+0x170>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b40      	cmp	r3, #64	; 0x40
 8003e2e:	d067      	beq.n	8003f00 <HAL_TIM_ConfigClockSource+0x120>
 8003e30:	2b40      	cmp	r3, #64	; 0x40
 8003e32:	d80b      	bhi.n	8003e4c <HAL_TIM_ConfigClockSource+0x6c>
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d073      	beq.n	8003f20 <HAL_TIM_ConfigClockSource+0x140>
 8003e38:	2b10      	cmp	r3, #16
 8003e3a:	d802      	bhi.n	8003e42 <HAL_TIM_ConfigClockSource+0x62>
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d06f      	beq.n	8003f20 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003e40:	e078      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d06c      	beq.n	8003f20 <HAL_TIM_ConfigClockSource+0x140>
 8003e46:	2b30      	cmp	r3, #48	; 0x30
 8003e48:	d06a      	beq.n	8003f20 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003e4a:	e073      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e4c:	2b70      	cmp	r3, #112	; 0x70
 8003e4e:	d00d      	beq.n	8003e6c <HAL_TIM_ConfigClockSource+0x8c>
 8003e50:	2b70      	cmp	r3, #112	; 0x70
 8003e52:	d804      	bhi.n	8003e5e <HAL_TIM_ConfigClockSource+0x7e>
 8003e54:	2b50      	cmp	r3, #80	; 0x50
 8003e56:	d033      	beq.n	8003ec0 <HAL_TIM_ConfigClockSource+0xe0>
 8003e58:	2b60      	cmp	r3, #96	; 0x60
 8003e5a:	d041      	beq.n	8003ee0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003e5c:	e06a      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e62:	d066      	beq.n	8003f32 <HAL_TIM_ConfigClockSource+0x152>
 8003e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e68:	d017      	beq.n	8003e9a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003e6a:	e063      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	6899      	ldr	r1, [r3, #8]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f000 f9ac 	bl	80041d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e8e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	609a      	str	r2, [r3, #8]
      break;
 8003e98:	e04c      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	6899      	ldr	r1, [r3, #8]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f000 f995 	bl	80041d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ebc:	609a      	str	r2, [r3, #8]
      break;
 8003ebe:	e039      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	6859      	ldr	r1, [r3, #4]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f000 f909 	bl	80040e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2150      	movs	r1, #80	; 0x50
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 f962 	bl	80041a2 <TIM_ITRx_SetConfig>
      break;
 8003ede:	e029      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6818      	ldr	r0, [r3, #0]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	6859      	ldr	r1, [r3, #4]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	461a      	mov	r2, r3
 8003eee:	f000 f928 	bl	8004142 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2160      	movs	r1, #96	; 0x60
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 f952 	bl	80041a2 <TIM_ITRx_SetConfig>
      break;
 8003efe:	e019      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	6859      	ldr	r1, [r3, #4]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	f000 f8e9 	bl	80040e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2140      	movs	r1, #64	; 0x40
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 f942 	bl	80041a2 <TIM_ITRx_SetConfig>
      break;
 8003f1e:	e009      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	f000 f939 	bl	80041a2 <TIM_ITRx_SetConfig>
      break;
 8003f30:	e000      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003f32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	fffeff88 	.word	0xfffeff88

08003f54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a40      	ldr	r2, [pc, #256]	; (80040b8 <TIM_Base_SetConfig+0x114>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d013      	beq.n	8003fe4 <TIM_Base_SetConfig+0x40>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc2:	d00f      	beq.n	8003fe4 <TIM_Base_SetConfig+0x40>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a3d      	ldr	r2, [pc, #244]	; (80040bc <TIM_Base_SetConfig+0x118>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d00b      	beq.n	8003fe4 <TIM_Base_SetConfig+0x40>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a3c      	ldr	r2, [pc, #240]	; (80040c0 <TIM_Base_SetConfig+0x11c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d007      	beq.n	8003fe4 <TIM_Base_SetConfig+0x40>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a3b      	ldr	r2, [pc, #236]	; (80040c4 <TIM_Base_SetConfig+0x120>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d003      	beq.n	8003fe4 <TIM_Base_SetConfig+0x40>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a3a      	ldr	r2, [pc, #232]	; (80040c8 <TIM_Base_SetConfig+0x124>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d108      	bne.n	8003ff6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a2f      	ldr	r2, [pc, #188]	; (80040b8 <TIM_Base_SetConfig+0x114>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d02b      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004004:	d027      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a2c      	ldr	r2, [pc, #176]	; (80040bc <TIM_Base_SetConfig+0x118>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d023      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a2b      	ldr	r2, [pc, #172]	; (80040c0 <TIM_Base_SetConfig+0x11c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d01f      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a2a      	ldr	r2, [pc, #168]	; (80040c4 <TIM_Base_SetConfig+0x120>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d01b      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a29      	ldr	r2, [pc, #164]	; (80040c8 <TIM_Base_SetConfig+0x124>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d017      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a28      	ldr	r2, [pc, #160]	; (80040cc <TIM_Base_SetConfig+0x128>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d013      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a27      	ldr	r2, [pc, #156]	; (80040d0 <TIM_Base_SetConfig+0x12c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d00f      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a26      	ldr	r2, [pc, #152]	; (80040d4 <TIM_Base_SetConfig+0x130>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00b      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a25      	ldr	r2, [pc, #148]	; (80040d8 <TIM_Base_SetConfig+0x134>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d007      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a24      	ldr	r2, [pc, #144]	; (80040dc <TIM_Base_SetConfig+0x138>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d003      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a23      	ldr	r2, [pc, #140]	; (80040e0 <TIM_Base_SetConfig+0x13c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d108      	bne.n	8004068 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a0a      	ldr	r2, [pc, #40]	; (80040b8 <TIM_Base_SetConfig+0x114>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d003      	beq.n	800409c <TIM_Base_SetConfig+0xf8>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a0c      	ldr	r2, [pc, #48]	; (80040c8 <TIM_Base_SetConfig+0x124>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d103      	bne.n	80040a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	615a      	str	r2, [r3, #20]
}
 80040aa:	bf00      	nop
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40010000 	.word	0x40010000
 80040bc:	40000400 	.word	0x40000400
 80040c0:	40000800 	.word	0x40000800
 80040c4:	40000c00 	.word	0x40000c00
 80040c8:	40010400 	.word	0x40010400
 80040cc:	40014000 	.word	0x40014000
 80040d0:	40014400 	.word	0x40014400
 80040d4:	40014800 	.word	0x40014800
 80040d8:	40001800 	.word	0x40001800
 80040dc:	40001c00 	.word	0x40001c00
 80040e0:	40002000 	.word	0x40002000

080040e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f023 0201 	bic.w	r2, r3, #1
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800410e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f023 030a 	bic.w	r3, r3, #10
 8004120:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4313      	orrs	r3, r2
 8004128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	621a      	str	r2, [r3, #32]
}
 8004136:	bf00      	nop
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004142:	b480      	push	{r7}
 8004144:	b087      	sub	sp, #28
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	f023 0210 	bic.w	r2, r3, #16
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800416c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	031b      	lsls	r3, r3, #12
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800417e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	621a      	str	r2, [r3, #32]
}
 8004196:	bf00      	nop
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b085      	sub	sp, #20
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	f043 0307 	orr.w	r3, r3, #7
 80041c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	609a      	str	r2, [r3, #8]
}
 80041cc:	bf00      	nop
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	021a      	lsls	r2, r3, #8
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	431a      	orrs	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	4313      	orrs	r3, r2
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	4313      	orrs	r3, r2
 8004204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	609a      	str	r2, [r3, #8]
}
 800420c:	bf00      	nop
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800422c:	2302      	movs	r3, #2
 800422e:	e06d      	b.n	800430c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a30      	ldr	r2, [pc, #192]	; (8004318 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d004      	beq.n	8004264 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a2f      	ldr	r2, [pc, #188]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d108      	bne.n	8004276 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800426a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	4313      	orrs	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4313      	orrs	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a20      	ldr	r2, [pc, #128]	; (8004318 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d022      	beq.n	80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a2:	d01d      	beq.n	80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a1d      	ldr	r2, [pc, #116]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d018      	beq.n	80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a1c      	ldr	r2, [pc, #112]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d013      	beq.n	80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a1a      	ldr	r2, [pc, #104]	; (8004328 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00e      	beq.n	80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a15      	ldr	r2, [pc, #84]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d009      	beq.n	80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a16      	ldr	r2, [pc, #88]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d004      	beq.n	80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a15      	ldr	r2, [pc, #84]	; (8004330 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d10c      	bne.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	40010000 	.word	0x40010000
 800431c:	40010400 	.word	0x40010400
 8004320:	40000400 	.word	0x40000400
 8004324:	40000800 	.word	0x40000800
 8004328:	40000c00 	.word	0x40000c00
 800432c:	40014000 	.word	0x40014000
 8004330:	40001800 	.word	0x40001800

08004334 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e040      	b.n	8004404 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fc fdc0 	bl	8000f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2224      	movs	r2, #36	; 0x24
 800439c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0201 	bic.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f98a 	bl	80046c8 <UART_SetConfig>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e022      	b.n	8004404 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fc28 	bl	8004c1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fcaf 	bl	8004d60 <UART_CheckIdleState>
 8004402:	4603      	mov	r3, r0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08a      	sub	sp, #40	; 0x28
 8004410:	af02      	add	r7, sp, #8
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	4613      	mov	r3, r2
 800441a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004420:	2b20      	cmp	r3, #32
 8004422:	d17f      	bne.n	8004524 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <HAL_UART_Transmit+0x24>
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e078      	b.n	8004526 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_UART_Transmit+0x36>
 800443e:	2302      	movs	r3, #2
 8004440:	e071      	b.n	8004526 <HAL_UART_Transmit+0x11a>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2221      	movs	r2, #33	; 0x21
 8004454:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004456:	f7fc feef 	bl	8001238 <HAL_GetTick>
 800445a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	88fa      	ldrh	r2, [r7, #6]
 8004460:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	88fa      	ldrh	r2, [r7, #6]
 8004468:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004474:	d108      	bne.n	8004488 <HAL_UART_Transmit+0x7c>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d104      	bne.n	8004488 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	e003      	b.n	8004490 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800448c:	2300      	movs	r3, #0
 800448e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004498:	e02c      	b.n	80044f4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2200      	movs	r2, #0
 80044a2:	2180      	movs	r1, #128	; 0x80
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 fc8a 	bl	8004dbe <UART_WaitOnFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e038      	b.n	8004526 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10b      	bne.n	80044d2 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	3302      	adds	r3, #2
 80044ce:	61bb      	str	r3, [r7, #24]
 80044d0:	e007      	b.n	80044e2 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	781a      	ldrb	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	3301      	adds	r3, #1
 80044e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1cc      	bne.n	800449a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2200      	movs	r2, #0
 8004508:	2140      	movs	r1, #64	; 0x40
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 fc57 	bl	8004dbe <UART_WaitOnFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e005      	b.n	8004526 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2220      	movs	r2, #32
 800451e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	e000      	b.n	8004526 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004524:	2302      	movs	r3, #2
  }
}
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b08a      	sub	sp, #40	; 0x28
 8004532:	af02      	add	r7, sp, #8
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	603b      	str	r3, [r7, #0]
 800453a:	4613      	mov	r3, r2
 800453c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004542:	2b20      	cmp	r3, #32
 8004544:	f040 80ba 	bne.w	80046bc <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <HAL_UART_Receive+0x26>
 800454e:	88fb      	ldrh	r3, [r7, #6]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e0b2      	b.n	80046be <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800455e:	2b01      	cmp	r3, #1
 8004560:	d101      	bne.n	8004566 <HAL_UART_Receive+0x38>
 8004562:	2302      	movs	r3, #2
 8004564:	e0ab      	b.n	80046be <HAL_UART_Receive+0x190>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2222      	movs	r2, #34	; 0x22
 8004578:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800457a:	f7fc fe5d 	bl	8001238 <HAL_GetTick>
 800457e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	88fa      	ldrh	r2, [r7, #6]
 8004584:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	88fa      	ldrh	r2, [r7, #6]
 800458c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004598:	d10e      	bne.n	80045b8 <HAL_UART_Receive+0x8a>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d105      	bne.n	80045ae <HAL_UART_Receive+0x80>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80045a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045ac:	e02d      	b.n	800460a <HAL_UART_Receive+0xdc>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	22ff      	movs	r2, #255	; 0xff
 80045b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045b6:	e028      	b.n	800460a <HAL_UART_Receive+0xdc>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10d      	bne.n	80045dc <HAL_UART_Receive+0xae>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d104      	bne.n	80045d2 <HAL_UART_Receive+0xa4>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	22ff      	movs	r2, #255	; 0xff
 80045cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045d0:	e01b      	b.n	800460a <HAL_UART_Receive+0xdc>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	227f      	movs	r2, #127	; 0x7f
 80045d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045da:	e016      	b.n	800460a <HAL_UART_Receive+0xdc>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045e4:	d10d      	bne.n	8004602 <HAL_UART_Receive+0xd4>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d104      	bne.n	80045f8 <HAL_UART_Receive+0xca>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	227f      	movs	r2, #127	; 0x7f
 80045f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045f6:	e008      	b.n	800460a <HAL_UART_Receive+0xdc>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	223f      	movs	r2, #63	; 0x3f
 80045fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004600:	e003      	b.n	800460a <HAL_UART_Receive+0xdc>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004610:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461a:	d108      	bne.n	800462e <HAL_UART_Receive+0x100>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d104      	bne.n	800462e <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8004624:	2300      	movs	r3, #0
 8004626:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	61bb      	str	r3, [r7, #24]
 800462c:	e003      	b.n	8004636 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004632:	2300      	movs	r3, #0
 8004634:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800463e:	e032      	b.n	80046a6 <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2200      	movs	r2, #0
 8004648:	2120      	movs	r1, #32
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 fbb7 	bl	8004dbe <UART_WaitOnFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e031      	b.n	80046be <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10c      	bne.n	800467a <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	b29a      	uxth	r2, r3
 8004668:	8a7b      	ldrh	r3, [r7, #18]
 800466a:	4013      	ands	r3, r2
 800466c:	b29a      	uxth	r2, r3
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	3302      	adds	r3, #2
 8004676:	61bb      	str	r3, [r7, #24]
 8004678:	e00c      	b.n	8004694 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	b2da      	uxtb	r2, r3
 8004682:	8a7b      	ldrh	r3, [r7, #18]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	4013      	ands	r3, r2
 8004688:	b2da      	uxtb	r2, r3
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	3301      	adds	r3, #1
 8004692:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1c6      	bne.n	8004640 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2220      	movs	r2, #32
 80046b6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	e000      	b.n	80046be <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 80046bc:	2302      	movs	r3, #2
  }
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3720      	adds	r7, #32
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80046d4:	2300      	movs	r3, #0
 80046d6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	4bb1      	ldr	r3, [pc, #708]	; (80049bc <UART_SetConfig+0x2f4>)
 80046f8:	4013      	ands	r3, r2
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6812      	ldr	r2, [r2, #0]
 80046fe:	6939      	ldr	r1, [r7, #16]
 8004700:	430b      	orrs	r3, r1
 8004702:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	430a      	orrs	r2, r1
 800473c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a9f      	ldr	r2, [pc, #636]	; (80049c0 <UART_SetConfig+0x2f8>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d121      	bne.n	800478c <UART_SetConfig+0xc4>
 8004748:	4b9e      	ldr	r3, [pc, #632]	; (80049c4 <UART_SetConfig+0x2fc>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	2b03      	cmp	r3, #3
 8004754:	d816      	bhi.n	8004784 <UART_SetConfig+0xbc>
 8004756:	a201      	add	r2, pc, #4	; (adr r2, 800475c <UART_SetConfig+0x94>)
 8004758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475c:	0800476d 	.word	0x0800476d
 8004760:	08004779 	.word	0x08004779
 8004764:	08004773 	.word	0x08004773
 8004768:	0800477f 	.word	0x0800477f
 800476c:	2301      	movs	r3, #1
 800476e:	77fb      	strb	r3, [r7, #31]
 8004770:	e151      	b.n	8004a16 <UART_SetConfig+0x34e>
 8004772:	2302      	movs	r3, #2
 8004774:	77fb      	strb	r3, [r7, #31]
 8004776:	e14e      	b.n	8004a16 <UART_SetConfig+0x34e>
 8004778:	2304      	movs	r3, #4
 800477a:	77fb      	strb	r3, [r7, #31]
 800477c:	e14b      	b.n	8004a16 <UART_SetConfig+0x34e>
 800477e:	2308      	movs	r3, #8
 8004780:	77fb      	strb	r3, [r7, #31]
 8004782:	e148      	b.n	8004a16 <UART_SetConfig+0x34e>
 8004784:	2310      	movs	r3, #16
 8004786:	77fb      	strb	r3, [r7, #31]
 8004788:	bf00      	nop
 800478a:	e144      	b.n	8004a16 <UART_SetConfig+0x34e>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a8d      	ldr	r2, [pc, #564]	; (80049c8 <UART_SetConfig+0x300>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d134      	bne.n	8004800 <UART_SetConfig+0x138>
 8004796:	4b8b      	ldr	r3, [pc, #556]	; (80049c4 <UART_SetConfig+0x2fc>)
 8004798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479c:	f003 030c 	and.w	r3, r3, #12
 80047a0:	2b0c      	cmp	r3, #12
 80047a2:	d829      	bhi.n	80047f8 <UART_SetConfig+0x130>
 80047a4:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <UART_SetConfig+0xe4>)
 80047a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047aa:	bf00      	nop
 80047ac:	080047e1 	.word	0x080047e1
 80047b0:	080047f9 	.word	0x080047f9
 80047b4:	080047f9 	.word	0x080047f9
 80047b8:	080047f9 	.word	0x080047f9
 80047bc:	080047ed 	.word	0x080047ed
 80047c0:	080047f9 	.word	0x080047f9
 80047c4:	080047f9 	.word	0x080047f9
 80047c8:	080047f9 	.word	0x080047f9
 80047cc:	080047e7 	.word	0x080047e7
 80047d0:	080047f9 	.word	0x080047f9
 80047d4:	080047f9 	.word	0x080047f9
 80047d8:	080047f9 	.word	0x080047f9
 80047dc:	080047f3 	.word	0x080047f3
 80047e0:	2300      	movs	r3, #0
 80047e2:	77fb      	strb	r3, [r7, #31]
 80047e4:	e117      	b.n	8004a16 <UART_SetConfig+0x34e>
 80047e6:	2302      	movs	r3, #2
 80047e8:	77fb      	strb	r3, [r7, #31]
 80047ea:	e114      	b.n	8004a16 <UART_SetConfig+0x34e>
 80047ec:	2304      	movs	r3, #4
 80047ee:	77fb      	strb	r3, [r7, #31]
 80047f0:	e111      	b.n	8004a16 <UART_SetConfig+0x34e>
 80047f2:	2308      	movs	r3, #8
 80047f4:	77fb      	strb	r3, [r7, #31]
 80047f6:	e10e      	b.n	8004a16 <UART_SetConfig+0x34e>
 80047f8:	2310      	movs	r3, #16
 80047fa:	77fb      	strb	r3, [r7, #31]
 80047fc:	bf00      	nop
 80047fe:	e10a      	b.n	8004a16 <UART_SetConfig+0x34e>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a71      	ldr	r2, [pc, #452]	; (80049cc <UART_SetConfig+0x304>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d120      	bne.n	800484c <UART_SetConfig+0x184>
 800480a:	4b6e      	ldr	r3, [pc, #440]	; (80049c4 <UART_SetConfig+0x2fc>)
 800480c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004810:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004814:	2b10      	cmp	r3, #16
 8004816:	d00f      	beq.n	8004838 <UART_SetConfig+0x170>
 8004818:	2b10      	cmp	r3, #16
 800481a:	d802      	bhi.n	8004822 <UART_SetConfig+0x15a>
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <UART_SetConfig+0x164>
 8004820:	e010      	b.n	8004844 <UART_SetConfig+0x17c>
 8004822:	2b20      	cmp	r3, #32
 8004824:	d005      	beq.n	8004832 <UART_SetConfig+0x16a>
 8004826:	2b30      	cmp	r3, #48	; 0x30
 8004828:	d009      	beq.n	800483e <UART_SetConfig+0x176>
 800482a:	e00b      	b.n	8004844 <UART_SetConfig+0x17c>
 800482c:	2300      	movs	r3, #0
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	e0f1      	b.n	8004a16 <UART_SetConfig+0x34e>
 8004832:	2302      	movs	r3, #2
 8004834:	77fb      	strb	r3, [r7, #31]
 8004836:	e0ee      	b.n	8004a16 <UART_SetConfig+0x34e>
 8004838:	2304      	movs	r3, #4
 800483a:	77fb      	strb	r3, [r7, #31]
 800483c:	e0eb      	b.n	8004a16 <UART_SetConfig+0x34e>
 800483e:	2308      	movs	r3, #8
 8004840:	77fb      	strb	r3, [r7, #31]
 8004842:	e0e8      	b.n	8004a16 <UART_SetConfig+0x34e>
 8004844:	2310      	movs	r3, #16
 8004846:	77fb      	strb	r3, [r7, #31]
 8004848:	bf00      	nop
 800484a:	e0e4      	b.n	8004a16 <UART_SetConfig+0x34e>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a5f      	ldr	r2, [pc, #380]	; (80049d0 <UART_SetConfig+0x308>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d120      	bne.n	8004898 <UART_SetConfig+0x1d0>
 8004856:	4b5b      	ldr	r3, [pc, #364]	; (80049c4 <UART_SetConfig+0x2fc>)
 8004858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004860:	2b40      	cmp	r3, #64	; 0x40
 8004862:	d00f      	beq.n	8004884 <UART_SetConfig+0x1bc>
 8004864:	2b40      	cmp	r3, #64	; 0x40
 8004866:	d802      	bhi.n	800486e <UART_SetConfig+0x1a6>
 8004868:	2b00      	cmp	r3, #0
 800486a:	d005      	beq.n	8004878 <UART_SetConfig+0x1b0>
 800486c:	e010      	b.n	8004890 <UART_SetConfig+0x1c8>
 800486e:	2b80      	cmp	r3, #128	; 0x80
 8004870:	d005      	beq.n	800487e <UART_SetConfig+0x1b6>
 8004872:	2bc0      	cmp	r3, #192	; 0xc0
 8004874:	d009      	beq.n	800488a <UART_SetConfig+0x1c2>
 8004876:	e00b      	b.n	8004890 <UART_SetConfig+0x1c8>
 8004878:	2300      	movs	r3, #0
 800487a:	77fb      	strb	r3, [r7, #31]
 800487c:	e0cb      	b.n	8004a16 <UART_SetConfig+0x34e>
 800487e:	2302      	movs	r3, #2
 8004880:	77fb      	strb	r3, [r7, #31]
 8004882:	e0c8      	b.n	8004a16 <UART_SetConfig+0x34e>
 8004884:	2304      	movs	r3, #4
 8004886:	77fb      	strb	r3, [r7, #31]
 8004888:	e0c5      	b.n	8004a16 <UART_SetConfig+0x34e>
 800488a:	2308      	movs	r3, #8
 800488c:	77fb      	strb	r3, [r7, #31]
 800488e:	e0c2      	b.n	8004a16 <UART_SetConfig+0x34e>
 8004890:	2310      	movs	r3, #16
 8004892:	77fb      	strb	r3, [r7, #31]
 8004894:	bf00      	nop
 8004896:	e0be      	b.n	8004a16 <UART_SetConfig+0x34e>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a4d      	ldr	r2, [pc, #308]	; (80049d4 <UART_SetConfig+0x30c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d124      	bne.n	80048ec <UART_SetConfig+0x224>
 80048a2:	4b48      	ldr	r3, [pc, #288]	; (80049c4 <UART_SetConfig+0x2fc>)
 80048a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b0:	d012      	beq.n	80048d8 <UART_SetConfig+0x210>
 80048b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b6:	d802      	bhi.n	80048be <UART_SetConfig+0x1f6>
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d007      	beq.n	80048cc <UART_SetConfig+0x204>
 80048bc:	e012      	b.n	80048e4 <UART_SetConfig+0x21c>
 80048be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c2:	d006      	beq.n	80048d2 <UART_SetConfig+0x20a>
 80048c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048c8:	d009      	beq.n	80048de <UART_SetConfig+0x216>
 80048ca:	e00b      	b.n	80048e4 <UART_SetConfig+0x21c>
 80048cc:	2300      	movs	r3, #0
 80048ce:	77fb      	strb	r3, [r7, #31]
 80048d0:	e0a1      	b.n	8004a16 <UART_SetConfig+0x34e>
 80048d2:	2302      	movs	r3, #2
 80048d4:	77fb      	strb	r3, [r7, #31]
 80048d6:	e09e      	b.n	8004a16 <UART_SetConfig+0x34e>
 80048d8:	2304      	movs	r3, #4
 80048da:	77fb      	strb	r3, [r7, #31]
 80048dc:	e09b      	b.n	8004a16 <UART_SetConfig+0x34e>
 80048de:	2308      	movs	r3, #8
 80048e0:	77fb      	strb	r3, [r7, #31]
 80048e2:	e098      	b.n	8004a16 <UART_SetConfig+0x34e>
 80048e4:	2310      	movs	r3, #16
 80048e6:	77fb      	strb	r3, [r7, #31]
 80048e8:	bf00      	nop
 80048ea:	e094      	b.n	8004a16 <UART_SetConfig+0x34e>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a39      	ldr	r2, [pc, #228]	; (80049d8 <UART_SetConfig+0x310>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d124      	bne.n	8004940 <UART_SetConfig+0x278>
 80048f6:	4b33      	ldr	r3, [pc, #204]	; (80049c4 <UART_SetConfig+0x2fc>)
 80048f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004904:	d012      	beq.n	800492c <UART_SetConfig+0x264>
 8004906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800490a:	d802      	bhi.n	8004912 <UART_SetConfig+0x24a>
 800490c:	2b00      	cmp	r3, #0
 800490e:	d007      	beq.n	8004920 <UART_SetConfig+0x258>
 8004910:	e012      	b.n	8004938 <UART_SetConfig+0x270>
 8004912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004916:	d006      	beq.n	8004926 <UART_SetConfig+0x25e>
 8004918:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800491c:	d009      	beq.n	8004932 <UART_SetConfig+0x26a>
 800491e:	e00b      	b.n	8004938 <UART_SetConfig+0x270>
 8004920:	2301      	movs	r3, #1
 8004922:	77fb      	strb	r3, [r7, #31]
 8004924:	e077      	b.n	8004a16 <UART_SetConfig+0x34e>
 8004926:	2302      	movs	r3, #2
 8004928:	77fb      	strb	r3, [r7, #31]
 800492a:	e074      	b.n	8004a16 <UART_SetConfig+0x34e>
 800492c:	2304      	movs	r3, #4
 800492e:	77fb      	strb	r3, [r7, #31]
 8004930:	e071      	b.n	8004a16 <UART_SetConfig+0x34e>
 8004932:	2308      	movs	r3, #8
 8004934:	77fb      	strb	r3, [r7, #31]
 8004936:	e06e      	b.n	8004a16 <UART_SetConfig+0x34e>
 8004938:	2310      	movs	r3, #16
 800493a:	77fb      	strb	r3, [r7, #31]
 800493c:	bf00      	nop
 800493e:	e06a      	b.n	8004a16 <UART_SetConfig+0x34e>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a25      	ldr	r2, [pc, #148]	; (80049dc <UART_SetConfig+0x314>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d124      	bne.n	8004994 <UART_SetConfig+0x2cc>
 800494a:	4b1e      	ldr	r3, [pc, #120]	; (80049c4 <UART_SetConfig+0x2fc>)
 800494c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004950:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004958:	d012      	beq.n	8004980 <UART_SetConfig+0x2b8>
 800495a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495e:	d802      	bhi.n	8004966 <UART_SetConfig+0x29e>
 8004960:	2b00      	cmp	r3, #0
 8004962:	d007      	beq.n	8004974 <UART_SetConfig+0x2ac>
 8004964:	e012      	b.n	800498c <UART_SetConfig+0x2c4>
 8004966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800496a:	d006      	beq.n	800497a <UART_SetConfig+0x2b2>
 800496c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004970:	d009      	beq.n	8004986 <UART_SetConfig+0x2be>
 8004972:	e00b      	b.n	800498c <UART_SetConfig+0x2c4>
 8004974:	2300      	movs	r3, #0
 8004976:	77fb      	strb	r3, [r7, #31]
 8004978:	e04d      	b.n	8004a16 <UART_SetConfig+0x34e>
 800497a:	2302      	movs	r3, #2
 800497c:	77fb      	strb	r3, [r7, #31]
 800497e:	e04a      	b.n	8004a16 <UART_SetConfig+0x34e>
 8004980:	2304      	movs	r3, #4
 8004982:	77fb      	strb	r3, [r7, #31]
 8004984:	e047      	b.n	8004a16 <UART_SetConfig+0x34e>
 8004986:	2308      	movs	r3, #8
 8004988:	77fb      	strb	r3, [r7, #31]
 800498a:	e044      	b.n	8004a16 <UART_SetConfig+0x34e>
 800498c:	2310      	movs	r3, #16
 800498e:	77fb      	strb	r3, [r7, #31]
 8004990:	bf00      	nop
 8004992:	e040      	b.n	8004a16 <UART_SetConfig+0x34e>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a11      	ldr	r2, [pc, #68]	; (80049e0 <UART_SetConfig+0x318>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d139      	bne.n	8004a12 <UART_SetConfig+0x34a>
 800499e:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <UART_SetConfig+0x2fc>)
 80049a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80049a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049ac:	d027      	beq.n	80049fe <UART_SetConfig+0x336>
 80049ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049b2:	d817      	bhi.n	80049e4 <UART_SetConfig+0x31c>
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d01c      	beq.n	80049f2 <UART_SetConfig+0x32a>
 80049b8:	e027      	b.n	8004a0a <UART_SetConfig+0x342>
 80049ba:	bf00      	nop
 80049bc:	efff69f3 	.word	0xefff69f3
 80049c0:	40011000 	.word	0x40011000
 80049c4:	40023800 	.word	0x40023800
 80049c8:	40004400 	.word	0x40004400
 80049cc:	40004800 	.word	0x40004800
 80049d0:	40004c00 	.word	0x40004c00
 80049d4:	40005000 	.word	0x40005000
 80049d8:	40011400 	.word	0x40011400
 80049dc:	40007800 	.word	0x40007800
 80049e0:	40007c00 	.word	0x40007c00
 80049e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049e8:	d006      	beq.n	80049f8 <UART_SetConfig+0x330>
 80049ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049ee:	d009      	beq.n	8004a04 <UART_SetConfig+0x33c>
 80049f0:	e00b      	b.n	8004a0a <UART_SetConfig+0x342>
 80049f2:	2300      	movs	r3, #0
 80049f4:	77fb      	strb	r3, [r7, #31]
 80049f6:	e00e      	b.n	8004a16 <UART_SetConfig+0x34e>
 80049f8:	2302      	movs	r3, #2
 80049fa:	77fb      	strb	r3, [r7, #31]
 80049fc:	e00b      	b.n	8004a16 <UART_SetConfig+0x34e>
 80049fe:	2304      	movs	r3, #4
 8004a00:	77fb      	strb	r3, [r7, #31]
 8004a02:	e008      	b.n	8004a16 <UART_SetConfig+0x34e>
 8004a04:	2308      	movs	r3, #8
 8004a06:	77fb      	strb	r3, [r7, #31]
 8004a08:	e005      	b.n	8004a16 <UART_SetConfig+0x34e>
 8004a0a:	2310      	movs	r3, #16
 8004a0c:	77fb      	strb	r3, [r7, #31]
 8004a0e:	bf00      	nop
 8004a10:	e001      	b.n	8004a16 <UART_SetConfig+0x34e>
 8004a12:	2310      	movs	r3, #16
 8004a14:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a1e:	d17f      	bne.n	8004b20 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004a20:	7ffb      	ldrb	r3, [r7, #31]
 8004a22:	2b08      	cmp	r3, #8
 8004a24:	d85c      	bhi.n	8004ae0 <UART_SetConfig+0x418>
 8004a26:	a201      	add	r2, pc, #4	; (adr r2, 8004a2c <UART_SetConfig+0x364>)
 8004a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2c:	08004a51 	.word	0x08004a51
 8004a30:	08004a71 	.word	0x08004a71
 8004a34:	08004a91 	.word	0x08004a91
 8004a38:	08004ae1 	.word	0x08004ae1
 8004a3c:	08004aa9 	.word	0x08004aa9
 8004a40:	08004ae1 	.word	0x08004ae1
 8004a44:	08004ae1 	.word	0x08004ae1
 8004a48:	08004ae1 	.word	0x08004ae1
 8004a4c:	08004ac9 	.word	0x08004ac9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a50:	f7fe fc08 	bl	8003264 <HAL_RCC_GetPCLK1Freq>
 8004a54:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	005a      	lsls	r2, r3, #1
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	085b      	lsrs	r3, r3, #1
 8004a60:	441a      	add	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	61bb      	str	r3, [r7, #24]
        break;
 8004a6e:	e03a      	b.n	8004ae6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a70:	f7fe fc0c 	bl	800328c <HAL_RCC_GetPCLK2Freq>
 8004a74:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	005a      	lsls	r2, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	085b      	lsrs	r3, r3, #1
 8004a80:	441a      	add	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	61bb      	str	r3, [r7, #24]
        break;
 8004a8e:	e02a      	b.n	8004ae6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	085a      	lsrs	r2, r3, #1
 8004a96:	4b5f      	ldr	r3, [pc, #380]	; (8004c14 <UART_SetConfig+0x54c>)
 8004a98:	4413      	add	r3, r2
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6852      	ldr	r2, [r2, #4]
 8004a9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	61bb      	str	r3, [r7, #24]
        break;
 8004aa6:	e01e      	b.n	8004ae6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aa8:	f7fe fb1e 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 8004aac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	005a      	lsls	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	085b      	lsrs	r3, r3, #1
 8004ab8:	441a      	add	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	61bb      	str	r3, [r7, #24]
        break;
 8004ac6:	e00e      	b.n	8004ae6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	085b      	lsrs	r3, r3, #1
 8004ace:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	61bb      	str	r3, [r7, #24]
        break;
 8004ade:	e002      	b.n	8004ae6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	75fb      	strb	r3, [r7, #23]
        break;
 8004ae4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	2b0f      	cmp	r3, #15
 8004aea:	d916      	bls.n	8004b1a <UART_SetConfig+0x452>
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af2:	d212      	bcs.n	8004b1a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	f023 030f 	bic.w	r3, r3, #15
 8004afc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	085b      	lsrs	r3, r3, #1
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	897b      	ldrh	r3, [r7, #10]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	897a      	ldrh	r2, [r7, #10]
 8004b16:	60da      	str	r2, [r3, #12]
 8004b18:	e070      	b.n	8004bfc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	75fb      	strb	r3, [r7, #23]
 8004b1e:	e06d      	b.n	8004bfc <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8004b20:	7ffb      	ldrb	r3, [r7, #31]
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d859      	bhi.n	8004bda <UART_SetConfig+0x512>
 8004b26:	a201      	add	r2, pc, #4	; (adr r2, 8004b2c <UART_SetConfig+0x464>)
 8004b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2c:	08004b51 	.word	0x08004b51
 8004b30:	08004b6f 	.word	0x08004b6f
 8004b34:	08004b8d 	.word	0x08004b8d
 8004b38:	08004bdb 	.word	0x08004bdb
 8004b3c:	08004ba5 	.word	0x08004ba5
 8004b40:	08004bdb 	.word	0x08004bdb
 8004b44:	08004bdb 	.word	0x08004bdb
 8004b48:	08004bdb 	.word	0x08004bdb
 8004b4c:	08004bc3 	.word	0x08004bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b50:	f7fe fb88 	bl	8003264 <HAL_RCC_GetPCLK1Freq>
 8004b54:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	085a      	lsrs	r2, r3, #1
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	441a      	add	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	61bb      	str	r3, [r7, #24]
        break;
 8004b6c:	e038      	b.n	8004be0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b6e:	f7fe fb8d 	bl	800328c <HAL_RCC_GetPCLK2Freq>
 8004b72:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	085a      	lsrs	r2, r3, #1
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	441a      	add	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	61bb      	str	r3, [r7, #24]
        break;
 8004b8a:	e029      	b.n	8004be0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	085a      	lsrs	r2, r3, #1
 8004b92:	4b21      	ldr	r3, [pc, #132]	; (8004c18 <UART_SetConfig+0x550>)
 8004b94:	4413      	add	r3, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6852      	ldr	r2, [r2, #4]
 8004b9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	61bb      	str	r3, [r7, #24]
        break;
 8004ba2:	e01d      	b.n	8004be0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ba4:	f7fe faa0 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 8004ba8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	085a      	lsrs	r2, r3, #1
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	441a      	add	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	61bb      	str	r3, [r7, #24]
        break;
 8004bc0:	e00e      	b.n	8004be0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	085b      	lsrs	r3, r3, #1
 8004bc8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	61bb      	str	r3, [r7, #24]
        break;
 8004bd8:	e002      	b.n	8004be0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	75fb      	strb	r3, [r7, #23]
        break;
 8004bde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	2b0f      	cmp	r3, #15
 8004be4:	d908      	bls.n	8004bf8 <UART_SetConfig+0x530>
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bec:	d204      	bcs.n	8004bf8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	60da      	str	r2, [r3, #12]
 8004bf6:	e001      	b.n	8004bfc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3720      	adds	r7, #32
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	01e84800 	.word	0x01e84800
 8004c18:	00f42400 	.word	0x00f42400

08004c1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	f003 0310 	and.w	r3, r3, #16
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d01a      	beq.n	8004d32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d1a:	d10a      	bne.n	8004d32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	605a      	str	r2, [r3, #4]
  }
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004d6e:	f7fc fa63 	bl	8001238 <HAL_GetTick>
 8004d72:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d10e      	bne.n	8004da0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f814 	bl	8004dbe <UART_WaitOnFlagUntilTimeout>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e00a      	b.n	8004db6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2220      	movs	r2, #32
 8004da4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	60f8      	str	r0, [r7, #12]
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	603b      	str	r3, [r7, #0]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dce:	e05d      	b.n	8004e8c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dd6:	d059      	beq.n	8004e8c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd8:	f7fc fa2e 	bl	8001238 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d302      	bcc.n	8004dee <UART_WaitOnFlagUntilTimeout+0x30>
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d11b      	bne.n	8004e26 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004dfc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0201 	bic.w	r2, r2, #1
 8004e0c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2220      	movs	r2, #32
 8004e12:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2220      	movs	r2, #32
 8004e18:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e042      	b.n	8004eac <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d02b      	beq.n	8004e8c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e42:	d123      	bne.n	8004e8c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e4c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e5c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0201 	bic.w	r2, r2, #1
 8004e6c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2220      	movs	r2, #32
 8004e72:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2220      	movs	r2, #32
 8004e78:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e00f      	b.n	8004eac <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69da      	ldr	r2, [r3, #28]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	4013      	ands	r3, r2
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	bf0c      	ite	eq
 8004e9c:	2301      	moveq	r3, #1
 8004e9e:	2300      	movne	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	79fb      	ldrb	r3, [r7, #7]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d092      	beq.n	8004dd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004eb8:	bf00      	nop
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
	...

08004ec4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eca:	f3ef 8305 	mrs	r3, IPSR
 8004ece:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ed0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10f      	bne.n	8004ef6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eda:	607b      	str	r3, [r7, #4]
  return(result);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d105      	bne.n	8004eee <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ee2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ee6:	603b      	str	r3, [r7, #0]
  return(result);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d007      	beq.n	8004efe <osKernelInitialize+0x3a>
 8004eee:	4b0e      	ldr	r3, [pc, #56]	; (8004f28 <osKernelInitialize+0x64>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d103      	bne.n	8004efe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004ef6:	f06f 0305 	mvn.w	r3, #5
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	e00c      	b.n	8004f18 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004efe:	4b0a      	ldr	r3, [pc, #40]	; (8004f28 <osKernelInitialize+0x64>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d105      	bne.n	8004f12 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004f06:	4b08      	ldr	r3, [pc, #32]	; (8004f28 <osKernelInitialize+0x64>)
 8004f08:	2201      	movs	r2, #1
 8004f0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	e002      	b.n	8004f18 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004f18:	68fb      	ldr	r3, [r7, #12]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	20000098 	.word	0x20000098

08004f2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f32:	f3ef 8305 	mrs	r3, IPSR
 8004f36:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10f      	bne.n	8004f5e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f42:	607b      	str	r3, [r7, #4]
  return(result);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d105      	bne.n	8004f56 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f4a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f4e:	603b      	str	r3, [r7, #0]
  return(result);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d007      	beq.n	8004f66 <osKernelStart+0x3a>
 8004f56:	4b0f      	ldr	r3, [pc, #60]	; (8004f94 <osKernelStart+0x68>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d103      	bne.n	8004f66 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004f5e:	f06f 0305 	mvn.w	r3, #5
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	e010      	b.n	8004f88 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f66:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <osKernelStart+0x68>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d109      	bne.n	8004f82 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004f6e:	f7ff ffa1 	bl	8004eb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004f72:	4b08      	ldr	r3, [pc, #32]	; (8004f94 <osKernelStart+0x68>)
 8004f74:	2202      	movs	r2, #2
 8004f76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004f78:	f001 f89c 	bl	80060b4 <vTaskStartScheduler>
      stat = osOK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	e002      	b.n	8004f88 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f86:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004f88:	68fb      	ldr	r3, [r7, #12]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000098 	.word	0x20000098

08004f98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b090      	sub	sp, #64	; 0x40
 8004f9c:	af04      	add	r7, sp, #16
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fa8:	f3ef 8305 	mrs	r3, IPSR
 8004fac:	61fb      	str	r3, [r7, #28]
  return(result);
 8004fae:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f040 8090 	bne.w	80050d6 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8004fba:	61bb      	str	r3, [r7, #24]
  return(result);
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d105      	bne.n	8004fce <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fc2:	f3ef 8311 	mrs	r3, BASEPRI
 8004fc6:	617b      	str	r3, [r7, #20]
  return(result);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <osThreadNew+0x3e>
 8004fce:	4b44      	ldr	r3, [pc, #272]	; (80050e0 <osThreadNew+0x148>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d07f      	beq.n	80050d6 <osThreadNew+0x13e>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d07c      	beq.n	80050d6 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8004fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004fe2:	2318      	movs	r3, #24
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fee:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d045      	beq.n	8005082 <osThreadNew+0xea>
      if (attr->name != NULL) {
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <osThreadNew+0x6c>
        name = attr->name;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	2b00      	cmp	r3, #0
 8005016:	d008      	beq.n	800502a <osThreadNew+0x92>
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	2b38      	cmp	r3, #56	; 0x38
 800501c:	d805      	bhi.n	800502a <osThreadNew+0x92>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <osThreadNew+0x96>
        return (NULL);
 800502a:	2300      	movs	r3, #0
 800502c:	e054      	b.n	80050d8 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	089b      	lsrs	r3, r3, #2
 800503c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00e      	beq.n	8005064 <osThreadNew+0xcc>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	2b5b      	cmp	r3, #91	; 0x5b
 800504c:	d90a      	bls.n	8005064 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005052:	2b00      	cmp	r3, #0
 8005054:	d006      	beq.n	8005064 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <osThreadNew+0xcc>
        mem = 1;
 800505e:	2301      	movs	r3, #1
 8005060:	623b      	str	r3, [r7, #32]
 8005062:	e010      	b.n	8005086 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10c      	bne.n	8005086 <osThreadNew+0xee>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d108      	bne.n	8005086 <osThreadNew+0xee>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d104      	bne.n	8005086 <osThreadNew+0xee>
          mem = 0;
 800507c:	2300      	movs	r3, #0
 800507e:	623b      	str	r3, [r7, #32]
 8005080:	e001      	b.n	8005086 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d110      	bne.n	80050ae <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005094:	9202      	str	r2, [sp, #8]
 8005096:	9301      	str	r3, [sp, #4]
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 fe2a 	bl	8005cfc <xTaskCreateStatic>
 80050a8:	4603      	mov	r3, r0
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	e013      	b.n	80050d6 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d110      	bne.n	80050d6 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	f107 0310 	add.w	r3, r7, #16
 80050bc:	9301      	str	r3, [sp, #4]
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 fe78 	bl	8005dbc <xTaskCreate>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d001      	beq.n	80050d6 <osThreadNew+0x13e>
          hTask = NULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80050d6:	693b      	ldr	r3, [r7, #16]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3730      	adds	r7, #48	; 0x30
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20000098 	.word	0x20000098

080050e4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050ec:	f3ef 8305 	mrs	r3, IPSR
 80050f0:	613b      	str	r3, [r7, #16]
  return(result);
 80050f2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10f      	bne.n	8005118 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050f8:	f3ef 8310 	mrs	r3, PRIMASK
 80050fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d105      	bne.n	8005110 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005104:	f3ef 8311 	mrs	r3, BASEPRI
 8005108:	60bb      	str	r3, [r7, #8]
  return(result);
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d007      	beq.n	8005120 <osDelay+0x3c>
 8005110:	4b0a      	ldr	r3, [pc, #40]	; (800513c <osDelay+0x58>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b02      	cmp	r3, #2
 8005116:	d103      	bne.n	8005120 <osDelay+0x3c>
    stat = osErrorISR;
 8005118:	f06f 0305 	mvn.w	r3, #5
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	e007      	b.n	8005130 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005120:	2300      	movs	r3, #0
 8005122:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <osDelay+0x4c>
      vTaskDelay(ticks);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 ff8c 	bl	8006048 <vTaskDelay>
    }
  }

  return (stat);
 8005130:	697b      	ldr	r3, [r7, #20]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3718      	adds	r7, #24
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	20000098 	.word	0x20000098

08005140 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4a07      	ldr	r2, [pc, #28]	; (800516c <vApplicationGetIdleTaskMemory+0x2c>)
 8005150:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	4a06      	ldr	r2, [pc, #24]	; (8005170 <vApplicationGetIdleTaskMemory+0x30>)
 8005156:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800515e:	601a      	str	r2, [r3, #0]
}
 8005160:	bf00      	nop
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	2000009c 	.word	0x2000009c
 8005170:	200000f8 	.word	0x200000f8

08005174 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4a07      	ldr	r2, [pc, #28]	; (80051a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005184:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	4a06      	ldr	r2, [pc, #24]	; (80051a4 <vApplicationGetTimerTaskMemory+0x30>)
 800518a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005192:	601a      	str	r2, [r3, #0]
}
 8005194:	bf00      	nop
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	200008f8 	.word	0x200008f8
 80051a4:	20000954 	.word	0x20000954

080051a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f103 0208 	add.w	r2, r3, #8
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f103 0208 	add.w	r2, r3, #8
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f103 0208 	add.w	r2, r3, #8
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005202:	b480      	push	{r7}
 8005204:	b085      	sub	sp, #20
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	601a      	str	r2, [r3, #0]
}
 800523e:	bf00      	nop
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800524a:	b480      	push	{r7}
 800524c:	b085      	sub	sp, #20
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005260:	d103      	bne.n	800526a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	e00c      	b.n	8005284 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3308      	adds	r3, #8
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	e002      	b.n	8005278 <vListInsert+0x2e>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	429a      	cmp	r2, r3
 8005282:	d2f6      	bcs.n	8005272 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	601a      	str	r2, [r3, #0]
}
 80052b0:	bf00      	nop
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6892      	ldr	r2, [r2, #8]
 80052d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6852      	ldr	r2, [r2, #4]
 80052dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d103      	bne.n	80052f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	1e5a      	subs	r2, r3, #1
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10b      	bne.n	800533c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	b672      	cpsid	i
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	b662      	cpsie	i
 8005338:	60bb      	str	r3, [r7, #8]
 800533a:	e7fe      	b.n	800533a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800533c:	f002 f844 	bl	80073c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005348:	68f9      	ldr	r1, [r7, #12]
 800534a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800534c:	fb01 f303 	mul.w	r3, r1, r3
 8005350:	441a      	add	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536c:	3b01      	subs	r3, #1
 800536e:	68f9      	ldr	r1, [r7, #12]
 8005370:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005372:	fb01 f303 	mul.w	r3, r1, r3
 8005376:	441a      	add	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	22ff      	movs	r2, #255	; 0xff
 8005380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	22ff      	movs	r2, #255	; 0xff
 8005388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d114      	bne.n	80053bc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d01a      	beq.n	80053d0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3310      	adds	r3, #16
 800539e:	4618      	mov	r0, r3
 80053a0:	f001 f916 	bl	80065d0 <xTaskRemoveFromEventList>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d012      	beq.n	80053d0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80053aa:	4b0d      	ldr	r3, [pc, #52]	; (80053e0 <xQueueGenericReset+0xd0>)
 80053ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	e009      	b.n	80053d0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3310      	adds	r3, #16
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7ff fef1 	bl	80051a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	3324      	adds	r3, #36	; 0x24
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff feec 	bl	80051a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80053d0:	f002 f82c 	bl	800742c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80053d4:	2301      	movs	r3, #1
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	e000ed04 	.word	0xe000ed04

080053e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08e      	sub	sp, #56	; 0x38
 80053e8:	af02      	add	r7, sp, #8
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10b      	bne.n	8005410 <xQueueGenericCreateStatic+0x2c>
 80053f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fc:	b672      	cpsid	i
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	b662      	cpsie	i
 800540c:	62bb      	str	r3, [r7, #40]	; 0x28
 800540e:	e7fe      	b.n	800540e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10b      	bne.n	800542e <xQueueGenericCreateStatic+0x4a>
 8005416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541a:	b672      	cpsid	i
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	b662      	cpsie	i
 800542a:	627b      	str	r3, [r7, #36]	; 0x24
 800542c:	e7fe      	b.n	800542c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <xQueueGenericCreateStatic+0x56>
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <xQueueGenericCreateStatic+0x5a>
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <xQueueGenericCreateStatic+0x5c>
 800543e:	2300      	movs	r3, #0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10b      	bne.n	800545c <xQueueGenericCreateStatic+0x78>
 8005444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005448:	b672      	cpsid	i
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	b662      	cpsie	i
 8005458:	623b      	str	r3, [r7, #32]
 800545a:	e7fe      	b.n	800545a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d102      	bne.n	8005468 <xQueueGenericCreateStatic+0x84>
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <xQueueGenericCreateStatic+0x88>
 8005468:	2301      	movs	r3, #1
 800546a:	e000      	b.n	800546e <xQueueGenericCreateStatic+0x8a>
 800546c:	2300      	movs	r3, #0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10b      	bne.n	800548a <xQueueGenericCreateStatic+0xa6>
 8005472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005476:	b672      	cpsid	i
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	b662      	cpsie	i
 8005486:	61fb      	str	r3, [r7, #28]
 8005488:	e7fe      	b.n	8005488 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800548a:	2350      	movs	r3, #80	; 0x50
 800548c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b50      	cmp	r3, #80	; 0x50
 8005492:	d00b      	beq.n	80054ac <xQueueGenericCreateStatic+0xc8>
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	b672      	cpsid	i
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	b662      	cpsie	i
 80054a8:	61bb      	str	r3, [r7, #24]
 80054aa:	e7fe      	b.n	80054aa <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80054ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80054b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00d      	beq.n	80054d4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80054b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054c0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80054c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	4613      	mov	r3, r2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	68b9      	ldr	r1, [r7, #8]
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 f805 	bl	80054de <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80054d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3730      	adds	r7, #48	; 0x30
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b084      	sub	sp, #16
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	607a      	str	r2, [r7, #4]
 80054ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d103      	bne.n	80054fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	e002      	b.n	8005500 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800550c:	2101      	movs	r1, #1
 800550e:	69b8      	ldr	r0, [r7, #24]
 8005510:	f7ff fefe 	bl	8005310 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	78fa      	ldrb	r2, [r7, #3]
 8005518:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800551c:	bf00      	nop
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b08e      	sub	sp, #56	; 0x38
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005532:	2300      	movs	r3, #0
 8005534:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10b      	bne.n	8005558 <xQueueGenericSend+0x34>
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	b672      	cpsid	i
 8005546:	f383 8811 	msr	BASEPRI, r3
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	b662      	cpsie	i
 8005554:	62bb      	str	r3, [r7, #40]	; 0x28
 8005556:	e7fe      	b.n	8005556 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d103      	bne.n	8005566 <xQueueGenericSend+0x42>
 800555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <xQueueGenericSend+0x46>
 8005566:	2301      	movs	r3, #1
 8005568:	e000      	b.n	800556c <xQueueGenericSend+0x48>
 800556a:	2300      	movs	r3, #0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10b      	bne.n	8005588 <xQueueGenericSend+0x64>
 8005570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005574:	b672      	cpsid	i
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	b662      	cpsie	i
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
 8005586:	e7fe      	b.n	8005586 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b02      	cmp	r3, #2
 800558c:	d103      	bne.n	8005596 <xQueueGenericSend+0x72>
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005592:	2b01      	cmp	r3, #1
 8005594:	d101      	bne.n	800559a <xQueueGenericSend+0x76>
 8005596:	2301      	movs	r3, #1
 8005598:	e000      	b.n	800559c <xQueueGenericSend+0x78>
 800559a:	2300      	movs	r3, #0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10b      	bne.n	80055b8 <xQueueGenericSend+0x94>
 80055a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a4:	b672      	cpsid	i
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	b662      	cpsie	i
 80055b4:	623b      	str	r3, [r7, #32]
 80055b6:	e7fe      	b.n	80055b6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055b8:	f001 f9c8 	bl	800694c <xTaskGetSchedulerState>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d102      	bne.n	80055c8 <xQueueGenericSend+0xa4>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <xQueueGenericSend+0xa8>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <xQueueGenericSend+0xaa>
 80055cc:	2300      	movs	r3, #0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10b      	bne.n	80055ea <xQueueGenericSend+0xc6>
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	b672      	cpsid	i
 80055d8:	f383 8811 	msr	BASEPRI, r3
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	b662      	cpsie	i
 80055e6:	61fb      	str	r3, [r7, #28]
 80055e8:	e7fe      	b.n	80055e8 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055ea:	f001 feed 	bl	80073c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d302      	bcc.n	8005600 <xQueueGenericSend+0xdc>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d129      	bne.n	8005654 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	68b9      	ldr	r1, [r7, #8]
 8005604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005606:	f000 fa0d 	bl	8005a24 <prvCopyDataToQueue>
 800560a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800560c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	2b00      	cmp	r3, #0
 8005612:	d010      	beq.n	8005636 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005616:	3324      	adds	r3, #36	; 0x24
 8005618:	4618      	mov	r0, r3
 800561a:	f000 ffd9 	bl	80065d0 <xTaskRemoveFromEventList>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d013      	beq.n	800564c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005624:	4b3f      	ldr	r3, [pc, #252]	; (8005724 <xQueueGenericSend+0x200>)
 8005626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	e00a      	b.n	800564c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005638:	2b00      	cmp	r3, #0
 800563a:	d007      	beq.n	800564c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800563c:	4b39      	ldr	r3, [pc, #228]	; (8005724 <xQueueGenericSend+0x200>)
 800563e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800564c:	f001 feee 	bl	800742c <vPortExitCritical>
				return pdPASS;
 8005650:	2301      	movs	r3, #1
 8005652:	e063      	b.n	800571c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d103      	bne.n	8005662 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800565a:	f001 fee7 	bl	800742c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800565e:	2300      	movs	r3, #0
 8005660:	e05c      	b.n	800571c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005664:	2b00      	cmp	r3, #0
 8005666:	d106      	bne.n	8005676 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005668:	f107 0314 	add.w	r3, r7, #20
 800566c:	4618      	mov	r0, r3
 800566e:	f001 f813 	bl	8006698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005672:	2301      	movs	r3, #1
 8005674:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005676:	f001 fed9 	bl	800742c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800567a:	f000 fd83 	bl	8006184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800567e:	f001 fea3 	bl	80073c8 <vPortEnterCritical>
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005688:	b25b      	sxtb	r3, r3
 800568a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800568e:	d103      	bne.n	8005698 <xQueueGenericSend+0x174>
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800569e:	b25b      	sxtb	r3, r3
 80056a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056a4:	d103      	bne.n	80056ae <xQueueGenericSend+0x18a>
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056ae:	f001 febd 	bl	800742c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056b2:	1d3a      	adds	r2, r7, #4
 80056b4:	f107 0314 	add.w	r3, r7, #20
 80056b8:	4611      	mov	r1, r2
 80056ba:	4618      	mov	r0, r3
 80056bc:	f001 f802 	bl	80066c4 <xTaskCheckForTimeOut>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d124      	bne.n	8005710 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80056c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056c8:	f000 faa4 	bl	8005c14 <prvIsQueueFull>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d018      	beq.n	8005704 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d4:	3310      	adds	r3, #16
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	4611      	mov	r1, r2
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 ff26 	bl	800652c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80056e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056e2:	f000 fa2f 	bl	8005b44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80056e6:	f000 fd5b 	bl	80061a0 <xTaskResumeAll>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f47f af7c 	bne.w	80055ea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80056f2:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <xQueueGenericSend+0x200>)
 80056f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	e772      	b.n	80055ea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005706:	f000 fa1d 	bl	8005b44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800570a:	f000 fd49 	bl	80061a0 <xTaskResumeAll>
 800570e:	e76c      	b.n	80055ea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005712:	f000 fa17 	bl	8005b44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005716:	f000 fd43 	bl	80061a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800571a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800571c:	4618      	mov	r0, r3
 800571e:	3738      	adds	r7, #56	; 0x38
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	e000ed04 	.word	0xe000ed04

08005728 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08e      	sub	sp, #56	; 0x38
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10b      	bne.n	8005758 <xQueueGenericSendFromISR+0x30>
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	b672      	cpsid	i
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	b662      	cpsie	i
 8005754:	627b      	str	r3, [r7, #36]	; 0x24
 8005756:	e7fe      	b.n	8005756 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d103      	bne.n	8005766 <xQueueGenericSendFromISR+0x3e>
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <xQueueGenericSendFromISR+0x42>
 8005766:	2301      	movs	r3, #1
 8005768:	e000      	b.n	800576c <xQueueGenericSendFromISR+0x44>
 800576a:	2300      	movs	r3, #0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10b      	bne.n	8005788 <xQueueGenericSendFromISR+0x60>
 8005770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005774:	b672      	cpsid	i
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	b662      	cpsie	i
 8005784:	623b      	str	r3, [r7, #32]
 8005786:	e7fe      	b.n	8005786 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2b02      	cmp	r3, #2
 800578c:	d103      	bne.n	8005796 <xQueueGenericSendFromISR+0x6e>
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005792:	2b01      	cmp	r3, #1
 8005794:	d101      	bne.n	800579a <xQueueGenericSendFromISR+0x72>
 8005796:	2301      	movs	r3, #1
 8005798:	e000      	b.n	800579c <xQueueGenericSendFromISR+0x74>
 800579a:	2300      	movs	r3, #0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10b      	bne.n	80057b8 <xQueueGenericSendFromISR+0x90>
 80057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a4:	b672      	cpsid	i
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	b662      	cpsie	i
 80057b4:	61fb      	str	r3, [r7, #28]
 80057b6:	e7fe      	b.n	80057b6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057b8:	f001 fee6 	bl	8007588 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80057bc:	f3ef 8211 	mrs	r2, BASEPRI
 80057c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c4:	b672      	cpsid	i
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	b662      	cpsie	i
 80057d4:	61ba      	str	r2, [r7, #24]
 80057d6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80057d8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057da:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d302      	bcc.n	80057ee <xQueueGenericSendFromISR+0xc6>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d12c      	bne.n	8005848 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	68b9      	ldr	r1, [r7, #8]
 80057fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057fe:	f000 f911 	bl	8005a24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005802:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800580a:	d112      	bne.n	8005832 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	2b00      	cmp	r3, #0
 8005812:	d016      	beq.n	8005842 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005816:	3324      	adds	r3, #36	; 0x24
 8005818:	4618      	mov	r0, r3
 800581a:	f000 fed9 	bl	80065d0 <xTaskRemoveFromEventList>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00e      	beq.n	8005842 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00b      	beq.n	8005842 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	e007      	b.n	8005842 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005832:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005836:	3301      	adds	r3, #1
 8005838:	b2db      	uxtb	r3, r3
 800583a:	b25a      	sxtb	r2, r3
 800583c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005842:	2301      	movs	r3, #1
 8005844:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005846:	e001      	b.n	800584c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005848:	2300      	movs	r3, #0
 800584a:	637b      	str	r3, [r7, #52]	; 0x34
 800584c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005858:	4618      	mov	r0, r3
 800585a:	3738      	adds	r7, #56	; 0x38
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b08c      	sub	sp, #48	; 0x30
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800586c:	2300      	movs	r3, #0
 800586e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10b      	bne.n	8005892 <xQueueReceive+0x32>
	__asm volatile
 800587a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587e:	b672      	cpsid	i
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	b662      	cpsie	i
 800588e:	623b      	str	r3, [r7, #32]
 8005890:	e7fe      	b.n	8005890 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d103      	bne.n	80058a0 <xQueueReceive+0x40>
 8005898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <xQueueReceive+0x44>
 80058a0:	2301      	movs	r3, #1
 80058a2:	e000      	b.n	80058a6 <xQueueReceive+0x46>
 80058a4:	2300      	movs	r3, #0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10b      	bne.n	80058c2 <xQueueReceive+0x62>
 80058aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ae:	b672      	cpsid	i
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	b662      	cpsie	i
 80058be:	61fb      	str	r3, [r7, #28]
 80058c0:	e7fe      	b.n	80058c0 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058c2:	f001 f843 	bl	800694c <xTaskGetSchedulerState>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d102      	bne.n	80058d2 <xQueueReceive+0x72>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <xQueueReceive+0x76>
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <xQueueReceive+0x78>
 80058d6:	2300      	movs	r3, #0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10b      	bne.n	80058f4 <xQueueReceive+0x94>
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	b672      	cpsid	i
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	b662      	cpsie	i
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	e7fe      	b.n	80058f2 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058f4:	f001 fd68 	bl	80073c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	2b00      	cmp	r3, #0
 8005902:	d01f      	beq.n	8005944 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005904:	68b9      	ldr	r1, [r7, #8]
 8005906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005908:	f000 f8f6 	bl	8005af8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	1e5a      	subs	r2, r3, #1
 8005910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005912:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00f      	beq.n	800593c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	3310      	adds	r3, #16
 8005920:	4618      	mov	r0, r3
 8005922:	f000 fe55 	bl	80065d0 <xTaskRemoveFromEventList>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d007      	beq.n	800593c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800592c:	4b3c      	ldr	r3, [pc, #240]	; (8005a20 <xQueueReceive+0x1c0>)
 800592e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800593c:	f001 fd76 	bl	800742c <vPortExitCritical>
				return pdPASS;
 8005940:	2301      	movs	r3, #1
 8005942:	e069      	b.n	8005a18 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d103      	bne.n	8005952 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800594a:	f001 fd6f 	bl	800742c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800594e:	2300      	movs	r3, #0
 8005950:	e062      	b.n	8005a18 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005954:	2b00      	cmp	r3, #0
 8005956:	d106      	bne.n	8005966 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005958:	f107 0310 	add.w	r3, r7, #16
 800595c:	4618      	mov	r0, r3
 800595e:	f000 fe9b 	bl	8006698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005962:	2301      	movs	r3, #1
 8005964:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005966:	f001 fd61 	bl	800742c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800596a:	f000 fc0b 	bl	8006184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800596e:	f001 fd2b 	bl	80073c8 <vPortEnterCritical>
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005978:	b25b      	sxtb	r3, r3
 800597a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800597e:	d103      	bne.n	8005988 <xQueueReceive+0x128>
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800598e:	b25b      	sxtb	r3, r3
 8005990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005994:	d103      	bne.n	800599e <xQueueReceive+0x13e>
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800599e:	f001 fd45 	bl	800742c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059a2:	1d3a      	adds	r2, r7, #4
 80059a4:	f107 0310 	add.w	r3, r7, #16
 80059a8:	4611      	mov	r1, r2
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 fe8a 	bl	80066c4 <xTaskCheckForTimeOut>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d123      	bne.n	80059fe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059b8:	f000 f916 	bl	8005be8 <prvIsQueueEmpty>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d017      	beq.n	80059f2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c4:	3324      	adds	r3, #36	; 0x24
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	4611      	mov	r1, r2
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 fdae 	bl	800652c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059d2:	f000 f8b7 	bl	8005b44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059d6:	f000 fbe3 	bl	80061a0 <xTaskResumeAll>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d189      	bne.n	80058f4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80059e0:	4b0f      	ldr	r3, [pc, #60]	; (8005a20 <xQueueReceive+0x1c0>)
 80059e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	e780      	b.n	80058f4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80059f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059f4:	f000 f8a6 	bl	8005b44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059f8:	f000 fbd2 	bl	80061a0 <xTaskResumeAll>
 80059fc:	e77a      	b.n	80058f4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80059fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a00:	f000 f8a0 	bl	8005b44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a04:	f000 fbcc 	bl	80061a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a0a:	f000 f8ed 	bl	8005be8 <prvIsQueueEmpty>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f43f af6f 	beq.w	80058f4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a16:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3730      	adds	r7, #48	; 0x30
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	e000ed04 	.word	0xe000ed04

08005a24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a30:	2300      	movs	r3, #0
 8005a32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10d      	bne.n	8005a5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d14d      	bne.n	8005ae6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 ff9a 	bl	8006988 <xTaskPriorityDisinherit>
 8005a54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	609a      	str	r2, [r3, #8]
 8005a5c:	e043      	b.n	8005ae6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d119      	bne.n	8005a98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6858      	ldr	r0, [r3, #4]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	68b9      	ldr	r1, [r7, #8]
 8005a70:	f003 f966 	bl	8008d40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7c:	441a      	add	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d32b      	bcc.n	8005ae6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	605a      	str	r2, [r3, #4]
 8005a96:	e026      	b.n	8005ae6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	68d8      	ldr	r0, [r3, #12]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	68b9      	ldr	r1, [r7, #8]
 8005aa4:	f003 f94c 	bl	8008d40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab0:	425b      	negs	r3, r3
 8005ab2:	441a      	add	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d207      	bcs.n	8005ad4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005acc:	425b      	negs	r3, r3
 8005ace:	441a      	add	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d105      	bne.n	8005ae6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1c5a      	adds	r2, r3, #1
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005aee:	697b      	ldr	r3, [r7, #20]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d018      	beq.n	8005b3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b12:	441a      	add	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d303      	bcc.n	8005b2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68d9      	ldr	r1, [r3, #12]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b34:	461a      	mov	r2, r3
 8005b36:	6838      	ldr	r0, [r7, #0]
 8005b38:	f003 f902 	bl	8008d40 <memcpy>
	}
}
 8005b3c:	bf00      	nop
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b4c:	f001 fc3c 	bl	80073c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b58:	e011      	b.n	8005b7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d012      	beq.n	8005b88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	3324      	adds	r3, #36	; 0x24
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 fd32 	bl	80065d0 <xTaskRemoveFromEventList>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b72:	f000 fe0b 	bl	800678c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	dce9      	bgt.n	8005b5a <prvUnlockQueue+0x16>
 8005b86:	e000      	b.n	8005b8a <prvUnlockQueue+0x46>
					break;
 8005b88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	22ff      	movs	r2, #255	; 0xff
 8005b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005b92:	f001 fc4b 	bl	800742c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b96:	f001 fc17 	bl	80073c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ba0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ba2:	e011      	b.n	8005bc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d012      	beq.n	8005bd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3310      	adds	r3, #16
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fd0d 	bl	80065d0 <xTaskRemoveFromEventList>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005bbc:	f000 fde6 	bl	800678c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005bc0:	7bbb      	ldrb	r3, [r7, #14]
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	dce9      	bgt.n	8005ba4 <prvUnlockQueue+0x60>
 8005bd0:	e000      	b.n	8005bd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005bd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	22ff      	movs	r2, #255	; 0xff
 8005bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005bdc:	f001 fc26 	bl	800742c <vPortExitCritical>
}
 8005be0:	bf00      	nop
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bf0:	f001 fbea 	bl	80073c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d102      	bne.n	8005c02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	e001      	b.n	8005c06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c02:	2300      	movs	r3, #0
 8005c04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c06:	f001 fc11 	bl	800742c <vPortExitCritical>

	return xReturn;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c1c:	f001 fbd4 	bl	80073c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d102      	bne.n	8005c32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	e001      	b.n	8005c36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c32:	2300      	movs	r3, #0
 8005c34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c36:	f001 fbf9 	bl	800742c <vPortExitCritical>

	return xReturn;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	e014      	b.n	8005c7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c54:	4a0e      	ldr	r2, [pc, #56]	; (8005c90 <vQueueAddToRegistry+0x4c>)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10b      	bne.n	8005c78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c60:	490b      	ldr	r1, [pc, #44]	; (8005c90 <vQueueAddToRegistry+0x4c>)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c6a:	4a09      	ldr	r2, [pc, #36]	; (8005c90 <vQueueAddToRegistry+0x4c>)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	4413      	add	r3, r2
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c76:	e005      	b.n	8005c84 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2b07      	cmp	r3, #7
 8005c82:	d9e7      	bls.n	8005c54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c84:	bf00      	nop
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	20006608 	.word	0x20006608

08005c94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ca4:	f001 fb90 	bl	80073c8 <vPortEnterCritical>
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cae:	b25b      	sxtb	r3, r3
 8005cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cb4:	d103      	bne.n	8005cbe <vQueueWaitForMessageRestricted+0x2a>
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cc4:	b25b      	sxtb	r3, r3
 8005cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cca:	d103      	bne.n	8005cd4 <vQueueWaitForMessageRestricted+0x40>
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cd4:	f001 fbaa 	bl	800742c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d106      	bne.n	8005cee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	3324      	adds	r3, #36	; 0x24
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	68b9      	ldr	r1, [r7, #8]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 fc45 	bl	8006578 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005cee:	6978      	ldr	r0, [r7, #20]
 8005cf0:	f7ff ff28 	bl	8005b44 <prvUnlockQueue>
	}
 8005cf4:	bf00      	nop
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08e      	sub	sp, #56	; 0x38
 8005d00:	af04      	add	r7, sp, #16
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
 8005d08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10b      	bne.n	8005d28 <xTaskCreateStatic+0x2c>
 8005d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d14:	b672      	cpsid	i
 8005d16:	f383 8811 	msr	BASEPRI, r3
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	b662      	cpsie	i
 8005d24:	623b      	str	r3, [r7, #32]
 8005d26:	e7fe      	b.n	8005d26 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8005d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10b      	bne.n	8005d46 <xTaskCreateStatic+0x4a>
 8005d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d32:	b672      	cpsid	i
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	b662      	cpsie	i
 8005d42:	61fb      	str	r3, [r7, #28]
 8005d44:	e7fe      	b.n	8005d44 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d46:	235c      	movs	r3, #92	; 0x5c
 8005d48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	2b5c      	cmp	r3, #92	; 0x5c
 8005d4e:	d00b      	beq.n	8005d68 <xTaskCreateStatic+0x6c>
 8005d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d54:	b672      	cpsid	i
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	b662      	cpsie	i
 8005d64:	61bb      	str	r3, [r7, #24]
 8005d66:	e7fe      	b.n	8005d66 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005d68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01e      	beq.n	8005dae <xTaskCreateStatic+0xb2>
 8005d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d01b      	beq.n	8005dae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d7e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d88:	2300      	movs	r3, #0
 8005d8a:	9303      	str	r3, [sp, #12]
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	9302      	str	r3, [sp, #8]
 8005d90:	f107 0314 	add.w	r3, r7, #20
 8005d94:	9301      	str	r3, [sp, #4]
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	68b9      	ldr	r1, [r7, #8]
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 f850 	bl	8005e46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005da6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005da8:	f000 f8de 	bl	8005f68 <prvAddNewTaskToReadyList>
 8005dac:	e001      	b.n	8005db2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005db2:	697b      	ldr	r3, [r7, #20]
	}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3728      	adds	r7, #40	; 0x28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08c      	sub	sp, #48	; 0x30
 8005dc0:	af04      	add	r7, sp, #16
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	603b      	str	r3, [r7, #0]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005dcc:	88fb      	ldrh	r3, [r7, #6]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f001 fc1b 	bl	800760c <pvPortMalloc>
 8005dd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00e      	beq.n	8005dfc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005dde:	205c      	movs	r0, #92	; 0x5c
 8005de0:	f001 fc14 	bl	800760c <pvPortMalloc>
 8005de4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	631a      	str	r2, [r3, #48]	; 0x30
 8005df2:	e005      	b.n	8005e00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005df4:	6978      	ldr	r0, [r7, #20]
 8005df6:	f001 fcd1 	bl	800779c <vPortFree>
 8005dfa:	e001      	b.n	8005e00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d017      	beq.n	8005e36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e0e:	88fa      	ldrh	r2, [r7, #6]
 8005e10:	2300      	movs	r3, #0
 8005e12:	9303      	str	r3, [sp, #12]
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	9302      	str	r3, [sp, #8]
 8005e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1a:	9301      	str	r3, [sp, #4]
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	68b9      	ldr	r1, [r7, #8]
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 f80e 	bl	8005e46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e2a:	69f8      	ldr	r0, [r7, #28]
 8005e2c:	f000 f89c 	bl	8005f68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e30:	2301      	movs	r3, #1
 8005e32:	61bb      	str	r3, [r7, #24]
 8005e34:	e002      	b.n	8005e3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e3c:	69bb      	ldr	r3, [r7, #24]
	}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3720      	adds	r7, #32
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b088      	sub	sp, #32
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	60f8      	str	r0, [r7, #12]
 8005e4e:	60b9      	str	r1, [r7, #8]
 8005e50:	607a      	str	r2, [r7, #4]
 8005e52:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e56:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	21a5      	movs	r1, #165	; 0xa5
 8005e60:	f002 ff79 	bl	8008d56 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e68:	6879      	ldr	r1, [r7, #4]
 8005e6a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005e6e:	440b      	add	r3, r1
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	f023 0307 	bic.w	r3, r3, #7
 8005e7c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	f003 0307 	and.w	r3, r3, #7
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00b      	beq.n	8005ea0 <prvInitialiseNewTask+0x5a>
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	b672      	cpsid	i
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	b662      	cpsie	i
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	e7fe      	b.n	8005e9e <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d01f      	beq.n	8005ee6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	61fb      	str	r3, [r7, #28]
 8005eaa:	e012      	b.n	8005ed2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	7819      	ldrb	r1, [r3, #0]
 8005eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	4413      	add	r3, r2
 8005eba:	3334      	adds	r3, #52	; 0x34
 8005ebc:	460a      	mov	r2, r1
 8005ebe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d006      	beq.n	8005eda <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	61fb      	str	r3, [r7, #28]
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	2b0f      	cmp	r3, #15
 8005ed6:	d9e9      	bls.n	8005eac <prvInitialiseNewTask+0x66>
 8005ed8:	e000      	b.n	8005edc <prvInitialiseNewTask+0x96>
			{
				break;
 8005eda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ee4:	e003      	b.n	8005eee <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	2b37      	cmp	r3, #55	; 0x37
 8005ef2:	d901      	bls.n	8005ef8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ef4:	2337      	movs	r3, #55	; 0x37
 8005ef6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005efc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	2200      	movs	r2, #0
 8005f08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff f96a 	bl	80051e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	3318      	adds	r3, #24
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7ff f965 	bl	80051e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	2200      	movs	r2, #0
 8005f38:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	68f9      	ldr	r1, [r7, #12]
 8005f46:	69b8      	ldr	r0, [r7, #24]
 8005f48:	f001 f936 	bl	80071b8 <pxPortInitialiseStack>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f5e:	bf00      	nop
 8005f60:	3720      	adds	r7, #32
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
	...

08005f68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f70:	f001 fa2a 	bl	80073c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f74:	4b2d      	ldr	r3, [pc, #180]	; (800602c <prvAddNewTaskToReadyList+0xc4>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	4a2c      	ldr	r2, [pc, #176]	; (800602c <prvAddNewTaskToReadyList+0xc4>)
 8005f7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f7e:	4b2c      	ldr	r3, [pc, #176]	; (8006030 <prvAddNewTaskToReadyList+0xc8>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d109      	bne.n	8005f9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f86:	4a2a      	ldr	r2, [pc, #168]	; (8006030 <prvAddNewTaskToReadyList+0xc8>)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f8c:	4b27      	ldr	r3, [pc, #156]	; (800602c <prvAddNewTaskToReadyList+0xc4>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d110      	bne.n	8005fb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f94:	f000 fc1e 	bl	80067d4 <prvInitialiseTaskLists>
 8005f98:	e00d      	b.n	8005fb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f9a:	4b26      	ldr	r3, [pc, #152]	; (8006034 <prvAddNewTaskToReadyList+0xcc>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d109      	bne.n	8005fb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005fa2:	4b23      	ldr	r3, [pc, #140]	; (8006030 <prvAddNewTaskToReadyList+0xc8>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d802      	bhi.n	8005fb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005fb0:	4a1f      	ldr	r2, [pc, #124]	; (8006030 <prvAddNewTaskToReadyList+0xc8>)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005fb6:	4b20      	ldr	r3, [pc, #128]	; (8006038 <prvAddNewTaskToReadyList+0xd0>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	4a1e      	ldr	r2, [pc, #120]	; (8006038 <prvAddNewTaskToReadyList+0xd0>)
 8005fbe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005fc0:	4b1d      	ldr	r3, [pc, #116]	; (8006038 <prvAddNewTaskToReadyList+0xd0>)
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fcc:	4b1b      	ldr	r3, [pc, #108]	; (800603c <prvAddNewTaskToReadyList+0xd4>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d903      	bls.n	8005fdc <prvAddNewTaskToReadyList+0x74>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	4a18      	ldr	r2, [pc, #96]	; (800603c <prvAddNewTaskToReadyList+0xd4>)
 8005fda:	6013      	str	r3, [r2, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4a15      	ldr	r2, [pc, #84]	; (8006040 <prvAddNewTaskToReadyList+0xd8>)
 8005fea:	441a      	add	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4610      	mov	r0, r2
 8005ff4:	f7ff f905 	bl	8005202 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ff8:	f001 fa18 	bl	800742c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ffc:	4b0d      	ldr	r3, [pc, #52]	; (8006034 <prvAddNewTaskToReadyList+0xcc>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00e      	beq.n	8006022 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006004:	4b0a      	ldr	r3, [pc, #40]	; (8006030 <prvAddNewTaskToReadyList+0xc8>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600e:	429a      	cmp	r2, r3
 8006010:	d207      	bcs.n	8006022 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006012:	4b0c      	ldr	r3, [pc, #48]	; (8006044 <prvAddNewTaskToReadyList+0xdc>)
 8006014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006022:	bf00      	nop
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	20001e28 	.word	0x20001e28
 8006030:	20001954 	.word	0x20001954
 8006034:	20001e34 	.word	0x20001e34
 8006038:	20001e44 	.word	0x20001e44
 800603c:	20001e30 	.word	0x20001e30
 8006040:	20001958 	.word	0x20001958
 8006044:	e000ed04 	.word	0xe000ed04

08006048 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006050:	2300      	movs	r3, #0
 8006052:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d018      	beq.n	800608c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800605a:	4b14      	ldr	r3, [pc, #80]	; (80060ac <vTaskDelay+0x64>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00b      	beq.n	800607a <vTaskDelay+0x32>
 8006062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006066:	b672      	cpsid	i
 8006068:	f383 8811 	msr	BASEPRI, r3
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	b662      	cpsie	i
 8006076:	60bb      	str	r3, [r7, #8]
 8006078:	e7fe      	b.n	8006078 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800607a:	f000 f883 	bl	8006184 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800607e:	2100      	movs	r1, #0
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fcf1 	bl	8006a68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006086:	f000 f88b 	bl	80061a0 <xTaskResumeAll>
 800608a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d107      	bne.n	80060a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006092:	4b07      	ldr	r3, [pc, #28]	; (80060b0 <vTaskDelay+0x68>)
 8006094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060a2:	bf00      	nop
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	20001e50 	.word	0x20001e50
 80060b0:	e000ed04 	.word	0xe000ed04

080060b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b08a      	sub	sp, #40	; 0x28
 80060b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060be:	2300      	movs	r3, #0
 80060c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060c2:	463a      	mov	r2, r7
 80060c4:	1d39      	adds	r1, r7, #4
 80060c6:	f107 0308 	add.w	r3, r7, #8
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7ff f838 	bl	8005140 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060d0:	6839      	ldr	r1, [r7, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	9202      	str	r2, [sp, #8]
 80060d8:	9301      	str	r3, [sp, #4]
 80060da:	2300      	movs	r3, #0
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	2300      	movs	r3, #0
 80060e0:	460a      	mov	r2, r1
 80060e2:	4922      	ldr	r1, [pc, #136]	; (800616c <vTaskStartScheduler+0xb8>)
 80060e4:	4822      	ldr	r0, [pc, #136]	; (8006170 <vTaskStartScheduler+0xbc>)
 80060e6:	f7ff fe09 	bl	8005cfc <xTaskCreateStatic>
 80060ea:	4602      	mov	r2, r0
 80060ec:	4b21      	ldr	r3, [pc, #132]	; (8006174 <vTaskStartScheduler+0xc0>)
 80060ee:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80060f0:	4b20      	ldr	r3, [pc, #128]	; (8006174 <vTaskStartScheduler+0xc0>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80060f8:	2301      	movs	r3, #1
 80060fa:	617b      	str	r3, [r7, #20]
 80060fc:	e001      	b.n	8006102 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80060fe:	2300      	movs	r3, #0
 8006100:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d102      	bne.n	800610e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006108:	f000 fd02 	bl	8006b10 <xTimerCreateTimerTask>
 800610c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d117      	bne.n	8006144 <vTaskStartScheduler+0x90>
 8006114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006118:	b672      	cpsid	i
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	b662      	cpsie	i
 8006128:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800612a:	4b13      	ldr	r3, [pc, #76]	; (8006178 <vTaskStartScheduler+0xc4>)
 800612c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006130:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006132:	4b12      	ldr	r3, [pc, #72]	; (800617c <vTaskStartScheduler+0xc8>)
 8006134:	2201      	movs	r2, #1
 8006136:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006138:	4b11      	ldr	r3, [pc, #68]	; (8006180 <vTaskStartScheduler+0xcc>)
 800613a:	2200      	movs	r2, #0
 800613c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800613e:	f001 f8c7 	bl	80072d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006142:	e00f      	b.n	8006164 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800614a:	d10b      	bne.n	8006164 <vTaskStartScheduler+0xb0>
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	b672      	cpsid	i
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	b662      	cpsie	i
 8006160:	60fb      	str	r3, [r7, #12]
 8006162:	e7fe      	b.n	8006162 <vTaskStartScheduler+0xae>
}
 8006164:	bf00      	nop
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	080095d0 	.word	0x080095d0
 8006170:	080067a5 	.word	0x080067a5
 8006174:	20001e4c 	.word	0x20001e4c
 8006178:	20001e48 	.word	0x20001e48
 800617c:	20001e34 	.word	0x20001e34
 8006180:	20001e2c 	.word	0x20001e2c

08006184 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006184:	b480      	push	{r7}
 8006186:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006188:	4b04      	ldr	r3, [pc, #16]	; (800619c <vTaskSuspendAll+0x18>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3301      	adds	r3, #1
 800618e:	4a03      	ldr	r2, [pc, #12]	; (800619c <vTaskSuspendAll+0x18>)
 8006190:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006192:	bf00      	nop
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	20001e50 	.word	0x20001e50

080061a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061a6:	2300      	movs	r3, #0
 80061a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061aa:	2300      	movs	r3, #0
 80061ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061ae:	4b42      	ldr	r3, [pc, #264]	; (80062b8 <xTaskResumeAll+0x118>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10b      	bne.n	80061ce <xTaskResumeAll+0x2e>
 80061b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ba:	b672      	cpsid	i
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	b662      	cpsie	i
 80061ca:	603b      	str	r3, [r7, #0]
 80061cc:	e7fe      	b.n	80061cc <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80061ce:	f001 f8fb 	bl	80073c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061d2:	4b39      	ldr	r3, [pc, #228]	; (80062b8 <xTaskResumeAll+0x118>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3b01      	subs	r3, #1
 80061d8:	4a37      	ldr	r2, [pc, #220]	; (80062b8 <xTaskResumeAll+0x118>)
 80061da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061dc:	4b36      	ldr	r3, [pc, #216]	; (80062b8 <xTaskResumeAll+0x118>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d162      	bne.n	80062aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061e4:	4b35      	ldr	r3, [pc, #212]	; (80062bc <xTaskResumeAll+0x11c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d05e      	beq.n	80062aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061ec:	e02f      	b.n	800624e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ee:	4b34      	ldr	r3, [pc, #208]	; (80062c0 <xTaskResumeAll+0x120>)
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3318      	adds	r3, #24
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7ff f85e 	bl	80052bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3304      	adds	r3, #4
 8006204:	4618      	mov	r0, r3
 8006206:	f7ff f859 	bl	80052bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800620e:	4b2d      	ldr	r3, [pc, #180]	; (80062c4 <xTaskResumeAll+0x124>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d903      	bls.n	800621e <xTaskResumeAll+0x7e>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621a:	4a2a      	ldr	r2, [pc, #168]	; (80062c4 <xTaskResumeAll+0x124>)
 800621c:	6013      	str	r3, [r2, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006222:	4613      	mov	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4a27      	ldr	r2, [pc, #156]	; (80062c8 <xTaskResumeAll+0x128>)
 800622c:	441a      	add	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3304      	adds	r3, #4
 8006232:	4619      	mov	r1, r3
 8006234:	4610      	mov	r0, r2
 8006236:	f7fe ffe4 	bl	8005202 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623e:	4b23      	ldr	r3, [pc, #140]	; (80062cc <xTaskResumeAll+0x12c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006244:	429a      	cmp	r2, r3
 8006246:	d302      	bcc.n	800624e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006248:	4b21      	ldr	r3, [pc, #132]	; (80062d0 <xTaskResumeAll+0x130>)
 800624a:	2201      	movs	r2, #1
 800624c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800624e:	4b1c      	ldr	r3, [pc, #112]	; (80062c0 <xTaskResumeAll+0x120>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1cb      	bne.n	80061ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d001      	beq.n	8006260 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800625c:	f000 fb56 	bl	800690c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006260:	4b1c      	ldr	r3, [pc, #112]	; (80062d4 <xTaskResumeAll+0x134>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d010      	beq.n	800628e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800626c:	f000 f846 	bl	80062fc <xTaskIncrementTick>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006276:	4b16      	ldr	r3, [pc, #88]	; (80062d0 <xTaskResumeAll+0x130>)
 8006278:	2201      	movs	r2, #1
 800627a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3b01      	subs	r3, #1
 8006280:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1f1      	bne.n	800626c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006288:	4b12      	ldr	r3, [pc, #72]	; (80062d4 <xTaskResumeAll+0x134>)
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800628e:	4b10      	ldr	r3, [pc, #64]	; (80062d0 <xTaskResumeAll+0x130>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d009      	beq.n	80062aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006296:	2301      	movs	r3, #1
 8006298:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800629a:	4b0f      	ldr	r3, [pc, #60]	; (80062d8 <xTaskResumeAll+0x138>)
 800629c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062aa:	f001 f8bf 	bl	800742c <vPortExitCritical>

	return xAlreadyYielded;
 80062ae:	68bb      	ldr	r3, [r7, #8]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	20001e50 	.word	0x20001e50
 80062bc:	20001e28 	.word	0x20001e28
 80062c0:	20001de8 	.word	0x20001de8
 80062c4:	20001e30 	.word	0x20001e30
 80062c8:	20001958 	.word	0x20001958
 80062cc:	20001954 	.word	0x20001954
 80062d0:	20001e3c 	.word	0x20001e3c
 80062d4:	20001e38 	.word	0x20001e38
 80062d8:	e000ed04 	.word	0xe000ed04

080062dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80062e2:	4b05      	ldr	r3, [pc, #20]	; (80062f8 <xTaskGetTickCount+0x1c>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80062e8:	687b      	ldr	r3, [r7, #4]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	20001e2c 	.word	0x20001e2c

080062fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006302:	2300      	movs	r3, #0
 8006304:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006306:	4b4f      	ldr	r3, [pc, #316]	; (8006444 <xTaskIncrementTick+0x148>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	f040 808a 	bne.w	8006424 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006310:	4b4d      	ldr	r3, [pc, #308]	; (8006448 <xTaskIncrementTick+0x14c>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3301      	adds	r3, #1
 8006316:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006318:	4a4b      	ldr	r2, [pc, #300]	; (8006448 <xTaskIncrementTick+0x14c>)
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d121      	bne.n	8006368 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006324:	4b49      	ldr	r3, [pc, #292]	; (800644c <xTaskIncrementTick+0x150>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00b      	beq.n	8006346 <xTaskIncrementTick+0x4a>
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	b672      	cpsid	i
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	b662      	cpsie	i
 8006342:	603b      	str	r3, [r7, #0]
 8006344:	e7fe      	b.n	8006344 <xTaskIncrementTick+0x48>
 8006346:	4b41      	ldr	r3, [pc, #260]	; (800644c <xTaskIncrementTick+0x150>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	4b40      	ldr	r3, [pc, #256]	; (8006450 <xTaskIncrementTick+0x154>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a3e      	ldr	r2, [pc, #248]	; (800644c <xTaskIncrementTick+0x150>)
 8006352:	6013      	str	r3, [r2, #0]
 8006354:	4a3e      	ldr	r2, [pc, #248]	; (8006450 <xTaskIncrementTick+0x154>)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6013      	str	r3, [r2, #0]
 800635a:	4b3e      	ldr	r3, [pc, #248]	; (8006454 <xTaskIncrementTick+0x158>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3301      	adds	r3, #1
 8006360:	4a3c      	ldr	r2, [pc, #240]	; (8006454 <xTaskIncrementTick+0x158>)
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	f000 fad2 	bl	800690c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006368:	4b3b      	ldr	r3, [pc, #236]	; (8006458 <xTaskIncrementTick+0x15c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	429a      	cmp	r2, r3
 8006370:	d349      	bcc.n	8006406 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006372:	4b36      	ldr	r3, [pc, #216]	; (800644c <xTaskIncrementTick+0x150>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d104      	bne.n	8006386 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800637c:	4b36      	ldr	r3, [pc, #216]	; (8006458 <xTaskIncrementTick+0x15c>)
 800637e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006382:	601a      	str	r2, [r3, #0]
					break;
 8006384:	e03f      	b.n	8006406 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006386:	4b31      	ldr	r3, [pc, #196]	; (800644c <xTaskIncrementTick+0x150>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	429a      	cmp	r2, r3
 800639c:	d203      	bcs.n	80063a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800639e:	4a2e      	ldr	r2, [pc, #184]	; (8006458 <xTaskIncrementTick+0x15c>)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80063a4:	e02f      	b.n	8006406 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	3304      	adds	r3, #4
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fe ff86 	bl	80052bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d004      	beq.n	80063c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	3318      	adds	r3, #24
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fe ff7d 	bl	80052bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c6:	4b25      	ldr	r3, [pc, #148]	; (800645c <xTaskIncrementTick+0x160>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d903      	bls.n	80063d6 <xTaskIncrementTick+0xda>
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d2:	4a22      	ldr	r2, [pc, #136]	; (800645c <xTaskIncrementTick+0x160>)
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063da:	4613      	mov	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4a1f      	ldr	r2, [pc, #124]	; (8006460 <xTaskIncrementTick+0x164>)
 80063e4:	441a      	add	r2, r3
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	3304      	adds	r3, #4
 80063ea:	4619      	mov	r1, r3
 80063ec:	4610      	mov	r0, r2
 80063ee:	f7fe ff08 	bl	8005202 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f6:	4b1b      	ldr	r3, [pc, #108]	; (8006464 <xTaskIncrementTick+0x168>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d3b8      	bcc.n	8006372 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006400:	2301      	movs	r3, #1
 8006402:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006404:	e7b5      	b.n	8006372 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006406:	4b17      	ldr	r3, [pc, #92]	; (8006464 <xTaskIncrementTick+0x168>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640c:	4914      	ldr	r1, [pc, #80]	; (8006460 <xTaskIncrementTick+0x164>)
 800640e:	4613      	mov	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	440b      	add	r3, r1
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d907      	bls.n	800642e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800641e:	2301      	movs	r3, #1
 8006420:	617b      	str	r3, [r7, #20]
 8006422:	e004      	b.n	800642e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006424:	4b10      	ldr	r3, [pc, #64]	; (8006468 <xTaskIncrementTick+0x16c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3301      	adds	r3, #1
 800642a:	4a0f      	ldr	r2, [pc, #60]	; (8006468 <xTaskIncrementTick+0x16c>)
 800642c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800642e:	4b0f      	ldr	r3, [pc, #60]	; (800646c <xTaskIncrementTick+0x170>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8006436:	2301      	movs	r3, #1
 8006438:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800643a:	697b      	ldr	r3, [r7, #20]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	20001e50 	.word	0x20001e50
 8006448:	20001e2c 	.word	0x20001e2c
 800644c:	20001de0 	.word	0x20001de0
 8006450:	20001de4 	.word	0x20001de4
 8006454:	20001e40 	.word	0x20001e40
 8006458:	20001e48 	.word	0x20001e48
 800645c:	20001e30 	.word	0x20001e30
 8006460:	20001958 	.word	0x20001958
 8006464:	20001954 	.word	0x20001954
 8006468:	20001e38 	.word	0x20001e38
 800646c:	20001e3c 	.word	0x20001e3c

08006470 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006476:	4b28      	ldr	r3, [pc, #160]	; (8006518 <vTaskSwitchContext+0xa8>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800647e:	4b27      	ldr	r3, [pc, #156]	; (800651c <vTaskSwitchContext+0xac>)
 8006480:	2201      	movs	r2, #1
 8006482:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006484:	e042      	b.n	800650c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006486:	4b25      	ldr	r3, [pc, #148]	; (800651c <vTaskSwitchContext+0xac>)
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800648c:	4b24      	ldr	r3, [pc, #144]	; (8006520 <vTaskSwitchContext+0xb0>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	60fb      	str	r3, [r7, #12]
 8006492:	e011      	b.n	80064b8 <vTaskSwitchContext+0x48>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10b      	bne.n	80064b2 <vTaskSwitchContext+0x42>
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	b672      	cpsid	i
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	b662      	cpsie	i
 80064ae:	607b      	str	r3, [r7, #4]
 80064b0:	e7fe      	b.n	80064b0 <vTaskSwitchContext+0x40>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	491a      	ldr	r1, [pc, #104]	; (8006524 <vTaskSwitchContext+0xb4>)
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	440b      	add	r3, r1
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0e3      	beq.n	8006494 <vTaskSwitchContext+0x24>
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	4613      	mov	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4a13      	ldr	r2, [pc, #76]	; (8006524 <vTaskSwitchContext+0xb4>)
 80064d8:	4413      	add	r3, r2
 80064da:	60bb      	str	r3, [r7, #8]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	605a      	str	r2, [r3, #4]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	3308      	adds	r3, #8
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d104      	bne.n	80064fc <vTaskSwitchContext+0x8c>
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	605a      	str	r2, [r3, #4]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	4a09      	ldr	r2, [pc, #36]	; (8006528 <vTaskSwitchContext+0xb8>)
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	4a06      	ldr	r2, [pc, #24]	; (8006520 <vTaskSwitchContext+0xb0>)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6013      	str	r3, [r2, #0]
}
 800650c:	bf00      	nop
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	20001e50 	.word	0x20001e50
 800651c:	20001e3c 	.word	0x20001e3c
 8006520:	20001e30 	.word	0x20001e30
 8006524:	20001958 	.word	0x20001958
 8006528:	20001954 	.word	0x20001954

0800652c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10b      	bne.n	8006554 <vTaskPlaceOnEventList+0x28>
 800653c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006540:	b672      	cpsid	i
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	b662      	cpsie	i
 8006550:	60fb      	str	r3, [r7, #12]
 8006552:	e7fe      	b.n	8006552 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006554:	4b07      	ldr	r3, [pc, #28]	; (8006574 <vTaskPlaceOnEventList+0x48>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3318      	adds	r3, #24
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7fe fe74 	bl	800524a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006562:	2101      	movs	r1, #1
 8006564:	6838      	ldr	r0, [r7, #0]
 8006566:	f000 fa7f 	bl	8006a68 <prvAddCurrentTaskToDelayedList>
}
 800656a:	bf00      	nop
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20001954 	.word	0x20001954

08006578 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10b      	bne.n	80065a2 <vTaskPlaceOnEventListRestricted+0x2a>
 800658a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658e:	b672      	cpsid	i
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	b662      	cpsie	i
 800659e:	617b      	str	r3, [r7, #20]
 80065a0:	e7fe      	b.n	80065a0 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065a2:	4b0a      	ldr	r3, [pc, #40]	; (80065cc <vTaskPlaceOnEventListRestricted+0x54>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3318      	adds	r3, #24
 80065a8:	4619      	mov	r1, r3
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f7fe fe29 	bl	8005202 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d002      	beq.n	80065bc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80065b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	68b8      	ldr	r0, [r7, #8]
 80065c0:	f000 fa52 	bl	8006a68 <prvAddCurrentTaskToDelayedList>
	}
 80065c4:	bf00      	nop
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	20001954 	.word	0x20001954

080065d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10b      	bne.n	80065fe <xTaskRemoveFromEventList+0x2e>
 80065e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ea:	b672      	cpsid	i
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	b662      	cpsie	i
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	e7fe      	b.n	80065fc <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	3318      	adds	r3, #24
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe fe5a 	bl	80052bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006608:	4b1d      	ldr	r3, [pc, #116]	; (8006680 <xTaskRemoveFromEventList+0xb0>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d11d      	bne.n	800664c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	3304      	adds	r3, #4
 8006614:	4618      	mov	r0, r3
 8006616:	f7fe fe51 	bl	80052bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661e:	4b19      	ldr	r3, [pc, #100]	; (8006684 <xTaskRemoveFromEventList+0xb4>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	429a      	cmp	r2, r3
 8006624:	d903      	bls.n	800662e <xTaskRemoveFromEventList+0x5e>
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662a:	4a16      	ldr	r2, [pc, #88]	; (8006684 <xTaskRemoveFromEventList+0xb4>)
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006632:	4613      	mov	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4a13      	ldr	r2, [pc, #76]	; (8006688 <xTaskRemoveFromEventList+0xb8>)
 800663c:	441a      	add	r2, r3
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	3304      	adds	r3, #4
 8006642:	4619      	mov	r1, r3
 8006644:	4610      	mov	r0, r2
 8006646:	f7fe fddc 	bl	8005202 <vListInsertEnd>
 800664a:	e005      	b.n	8006658 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	3318      	adds	r3, #24
 8006650:	4619      	mov	r1, r3
 8006652:	480e      	ldr	r0, [pc, #56]	; (800668c <xTaskRemoveFromEventList+0xbc>)
 8006654:	f7fe fdd5 	bl	8005202 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800665c:	4b0c      	ldr	r3, [pc, #48]	; (8006690 <xTaskRemoveFromEventList+0xc0>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006662:	429a      	cmp	r2, r3
 8006664:	d905      	bls.n	8006672 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006666:	2301      	movs	r3, #1
 8006668:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800666a:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <xTaskRemoveFromEventList+0xc4>)
 800666c:	2201      	movs	r2, #1
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	e001      	b.n	8006676 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006672:	2300      	movs	r3, #0
 8006674:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006676:	697b      	ldr	r3, [r7, #20]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3718      	adds	r7, #24
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	20001e50 	.word	0x20001e50
 8006684:	20001e30 	.word	0x20001e30
 8006688:	20001958 	.word	0x20001958
 800668c:	20001de8 	.word	0x20001de8
 8006690:	20001954 	.word	0x20001954
 8006694:	20001e3c 	.word	0x20001e3c

08006698 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066a0:	4b06      	ldr	r3, [pc, #24]	; (80066bc <vTaskInternalSetTimeOutState+0x24>)
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066a8:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <vTaskInternalSetTimeOutState+0x28>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	605a      	str	r2, [r3, #4]
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	20001e40 	.word	0x20001e40
 80066c0:	20001e2c 	.word	0x20001e2c

080066c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10b      	bne.n	80066ec <xTaskCheckForTimeOut+0x28>
 80066d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d8:	b672      	cpsid	i
 80066da:	f383 8811 	msr	BASEPRI, r3
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	b662      	cpsie	i
 80066e8:	613b      	str	r3, [r7, #16]
 80066ea:	e7fe      	b.n	80066ea <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10b      	bne.n	800670a <xTaskCheckForTimeOut+0x46>
 80066f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f6:	b672      	cpsid	i
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	b662      	cpsie	i
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	e7fe      	b.n	8006708 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800670a:	f000 fe5d 	bl	80073c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800670e:	4b1d      	ldr	r3, [pc, #116]	; (8006784 <xTaskCheckForTimeOut+0xc0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006726:	d102      	bne.n	800672e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006728:	2300      	movs	r3, #0
 800672a:	61fb      	str	r3, [r7, #28]
 800672c:	e023      	b.n	8006776 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	4b15      	ldr	r3, [pc, #84]	; (8006788 <xTaskCheckForTimeOut+0xc4>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	429a      	cmp	r2, r3
 8006738:	d007      	beq.n	800674a <xTaskCheckForTimeOut+0x86>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	429a      	cmp	r2, r3
 8006742:	d302      	bcc.n	800674a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006744:	2301      	movs	r3, #1
 8006746:	61fb      	str	r3, [r7, #28]
 8006748:	e015      	b.n	8006776 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	429a      	cmp	r2, r3
 8006752:	d20b      	bcs.n	800676c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	1ad2      	subs	r2, r2, r3
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff ff99 	bl	8006698 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006766:	2300      	movs	r3, #0
 8006768:	61fb      	str	r3, [r7, #28]
 800676a:	e004      	b.n	8006776 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	2200      	movs	r2, #0
 8006770:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006772:	2301      	movs	r3, #1
 8006774:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006776:	f000 fe59 	bl	800742c <vPortExitCritical>

	return xReturn;
 800677a:	69fb      	ldr	r3, [r7, #28]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3720      	adds	r7, #32
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	20001e2c 	.word	0x20001e2c
 8006788:	20001e40 	.word	0x20001e40

0800678c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800678c:	b480      	push	{r7}
 800678e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006790:	4b03      	ldr	r3, [pc, #12]	; (80067a0 <vTaskMissedYield+0x14>)
 8006792:	2201      	movs	r2, #1
 8006794:	601a      	str	r2, [r3, #0]
}
 8006796:	bf00      	nop
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	20001e3c 	.word	0x20001e3c

080067a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067ac:	f000 f852 	bl	8006854 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067b0:	4b06      	ldr	r3, [pc, #24]	; (80067cc <prvIdleTask+0x28>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d9f9      	bls.n	80067ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80067b8:	4b05      	ldr	r3, [pc, #20]	; (80067d0 <prvIdleTask+0x2c>)
 80067ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067c8:	e7f0      	b.n	80067ac <prvIdleTask+0x8>
 80067ca:	bf00      	nop
 80067cc:	20001958 	.word	0x20001958
 80067d0:	e000ed04 	.word	0xe000ed04

080067d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067da:	2300      	movs	r3, #0
 80067dc:	607b      	str	r3, [r7, #4]
 80067de:	e00c      	b.n	80067fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	4613      	mov	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4a12      	ldr	r2, [pc, #72]	; (8006834 <prvInitialiseTaskLists+0x60>)
 80067ec:	4413      	add	r3, r2
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fe fcda 	bl	80051a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3301      	adds	r3, #1
 80067f8:	607b      	str	r3, [r7, #4]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b37      	cmp	r3, #55	; 0x37
 80067fe:	d9ef      	bls.n	80067e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006800:	480d      	ldr	r0, [pc, #52]	; (8006838 <prvInitialiseTaskLists+0x64>)
 8006802:	f7fe fcd1 	bl	80051a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006806:	480d      	ldr	r0, [pc, #52]	; (800683c <prvInitialiseTaskLists+0x68>)
 8006808:	f7fe fcce 	bl	80051a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800680c:	480c      	ldr	r0, [pc, #48]	; (8006840 <prvInitialiseTaskLists+0x6c>)
 800680e:	f7fe fccb 	bl	80051a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006812:	480c      	ldr	r0, [pc, #48]	; (8006844 <prvInitialiseTaskLists+0x70>)
 8006814:	f7fe fcc8 	bl	80051a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006818:	480b      	ldr	r0, [pc, #44]	; (8006848 <prvInitialiseTaskLists+0x74>)
 800681a:	f7fe fcc5 	bl	80051a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800681e:	4b0b      	ldr	r3, [pc, #44]	; (800684c <prvInitialiseTaskLists+0x78>)
 8006820:	4a05      	ldr	r2, [pc, #20]	; (8006838 <prvInitialiseTaskLists+0x64>)
 8006822:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006824:	4b0a      	ldr	r3, [pc, #40]	; (8006850 <prvInitialiseTaskLists+0x7c>)
 8006826:	4a05      	ldr	r2, [pc, #20]	; (800683c <prvInitialiseTaskLists+0x68>)
 8006828:	601a      	str	r2, [r3, #0]
}
 800682a:	bf00      	nop
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	20001958 	.word	0x20001958
 8006838:	20001db8 	.word	0x20001db8
 800683c:	20001dcc 	.word	0x20001dcc
 8006840:	20001de8 	.word	0x20001de8
 8006844:	20001dfc 	.word	0x20001dfc
 8006848:	20001e14 	.word	0x20001e14
 800684c:	20001de0 	.word	0x20001de0
 8006850:	20001de4 	.word	0x20001de4

08006854 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800685a:	e019      	b.n	8006890 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800685c:	f000 fdb4 	bl	80073c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006860:	4b0f      	ldr	r3, [pc, #60]	; (80068a0 <prvCheckTasksWaitingTermination+0x4c>)
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3304      	adds	r3, #4
 800686c:	4618      	mov	r0, r3
 800686e:	f7fe fd25 	bl	80052bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006872:	4b0c      	ldr	r3, [pc, #48]	; (80068a4 <prvCheckTasksWaitingTermination+0x50>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3b01      	subs	r3, #1
 8006878:	4a0a      	ldr	r2, [pc, #40]	; (80068a4 <prvCheckTasksWaitingTermination+0x50>)
 800687a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800687c:	4b0a      	ldr	r3, [pc, #40]	; (80068a8 <prvCheckTasksWaitingTermination+0x54>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3b01      	subs	r3, #1
 8006882:	4a09      	ldr	r2, [pc, #36]	; (80068a8 <prvCheckTasksWaitingTermination+0x54>)
 8006884:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006886:	f000 fdd1 	bl	800742c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f80e 	bl	80068ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006890:	4b05      	ldr	r3, [pc, #20]	; (80068a8 <prvCheckTasksWaitingTermination+0x54>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1e1      	bne.n	800685c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006898:	bf00      	nop
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	20001dfc 	.word	0x20001dfc
 80068a4:	20001e28 	.word	0x20001e28
 80068a8:	20001e10 	.word	0x20001e10

080068ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d108      	bne.n	80068d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 ff6a 	bl	800779c <vPortFree>
				vPortFree( pxTCB );
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 ff67 	bl	800779c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80068ce:	e019      	b.n	8006904 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d103      	bne.n	80068e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 ff5e 	bl	800779c <vPortFree>
	}
 80068e0:	e010      	b.n	8006904 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d00b      	beq.n	8006904 <prvDeleteTCB+0x58>
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	b672      	cpsid	i
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	b662      	cpsie	i
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	e7fe      	b.n	8006902 <prvDeleteTCB+0x56>
	}
 8006904:	bf00      	nop
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006912:	4b0c      	ldr	r3, [pc, #48]	; (8006944 <prvResetNextTaskUnblockTime+0x38>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d104      	bne.n	8006926 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800691c:	4b0a      	ldr	r3, [pc, #40]	; (8006948 <prvResetNextTaskUnblockTime+0x3c>)
 800691e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006922:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006924:	e008      	b.n	8006938 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006926:	4b07      	ldr	r3, [pc, #28]	; (8006944 <prvResetNextTaskUnblockTime+0x38>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	4a04      	ldr	r2, [pc, #16]	; (8006948 <prvResetNextTaskUnblockTime+0x3c>)
 8006936:	6013      	str	r3, [r2, #0]
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	20001de0 	.word	0x20001de0
 8006948:	20001e48 	.word	0x20001e48

0800694c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006952:	4b0b      	ldr	r3, [pc, #44]	; (8006980 <xTaskGetSchedulerState+0x34>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d102      	bne.n	8006960 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800695a:	2301      	movs	r3, #1
 800695c:	607b      	str	r3, [r7, #4]
 800695e:	e008      	b.n	8006972 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006960:	4b08      	ldr	r3, [pc, #32]	; (8006984 <xTaskGetSchedulerState+0x38>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d102      	bne.n	800696e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006968:	2302      	movs	r3, #2
 800696a:	607b      	str	r3, [r7, #4]
 800696c:	e001      	b.n	8006972 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800696e:	2300      	movs	r3, #0
 8006970:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006972:	687b      	ldr	r3, [r7, #4]
	}
 8006974:	4618      	mov	r0, r3
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	20001e34 	.word	0x20001e34
 8006984:	20001e50 	.word	0x20001e50

08006988 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006994:	2300      	movs	r3, #0
 8006996:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d058      	beq.n	8006a50 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800699e:	4b2f      	ldr	r3, [pc, #188]	; (8006a5c <xTaskPriorityDisinherit+0xd4>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d00b      	beq.n	80069c0 <xTaskPriorityDisinherit+0x38>
 80069a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ac:	b672      	cpsid	i
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	b662      	cpsie	i
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	e7fe      	b.n	80069be <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10b      	bne.n	80069e0 <xTaskPriorityDisinherit+0x58>
 80069c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069cc:	b672      	cpsid	i
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	b662      	cpsie	i
 80069dc:	60bb      	str	r3, [r7, #8]
 80069de:	e7fe      	b.n	80069de <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069e4:	1e5a      	subs	r2, r3, #1
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d02c      	beq.n	8006a50 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d128      	bne.n	8006a50 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	3304      	adds	r3, #4
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fe fc5a 	bl	80052bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a20:	4b0f      	ldr	r3, [pc, #60]	; (8006a60 <xTaskPriorityDisinherit+0xd8>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d903      	bls.n	8006a30 <xTaskPriorityDisinherit+0xa8>
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2c:	4a0c      	ldr	r2, [pc, #48]	; (8006a60 <xTaskPriorityDisinherit+0xd8>)
 8006a2e:	6013      	str	r3, [r2, #0]
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a34:	4613      	mov	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4a09      	ldr	r2, [pc, #36]	; (8006a64 <xTaskPriorityDisinherit+0xdc>)
 8006a3e:	441a      	add	r2, r3
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	3304      	adds	r3, #4
 8006a44:	4619      	mov	r1, r3
 8006a46:	4610      	mov	r0, r2
 8006a48:	f7fe fbdb 	bl	8005202 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a50:	697b      	ldr	r3, [r7, #20]
	}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3718      	adds	r7, #24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20001954 	.word	0x20001954
 8006a60:	20001e30 	.word	0x20001e30
 8006a64:	20001958 	.word	0x20001958

08006a68 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a72:	4b21      	ldr	r3, [pc, #132]	; (8006af8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a78:	4b20      	ldr	r3, [pc, #128]	; (8006afc <prvAddCurrentTaskToDelayedList+0x94>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7fe fc1c 	bl	80052bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a8a:	d10a      	bne.n	8006aa2 <prvAddCurrentTaskToDelayedList+0x3a>
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d007      	beq.n	8006aa2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a92:	4b1a      	ldr	r3, [pc, #104]	; (8006afc <prvAddCurrentTaskToDelayedList+0x94>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3304      	adds	r3, #4
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4819      	ldr	r0, [pc, #100]	; (8006b00 <prvAddCurrentTaskToDelayedList+0x98>)
 8006a9c:	f7fe fbb1 	bl	8005202 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006aa0:	e026      	b.n	8006af0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006aaa:	4b14      	ldr	r3, [pc, #80]	; (8006afc <prvAddCurrentTaskToDelayedList+0x94>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d209      	bcs.n	8006ace <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aba:	4b12      	ldr	r3, [pc, #72]	; (8006b04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	4b0f      	ldr	r3, [pc, #60]	; (8006afc <prvAddCurrentTaskToDelayedList+0x94>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	4610      	mov	r0, r2
 8006ac8:	f7fe fbbf 	bl	800524a <vListInsert>
}
 8006acc:	e010      	b.n	8006af0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ace:	4b0e      	ldr	r3, [pc, #56]	; (8006b08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	4b0a      	ldr	r3, [pc, #40]	; (8006afc <prvAddCurrentTaskToDelayedList+0x94>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4610      	mov	r0, r2
 8006adc:	f7fe fbb5 	bl	800524a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ae0:	4b0a      	ldr	r3, [pc, #40]	; (8006b0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d202      	bcs.n	8006af0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006aea:	4a08      	ldr	r2, [pc, #32]	; (8006b0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	6013      	str	r3, [r2, #0]
}
 8006af0:	bf00      	nop
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	20001e2c 	.word	0x20001e2c
 8006afc:	20001954 	.word	0x20001954
 8006b00:	20001e14 	.word	0x20001e14
 8006b04:	20001de4 	.word	0x20001de4
 8006b08:	20001de0 	.word	0x20001de0
 8006b0c:	20001e48 	.word	0x20001e48

08006b10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b08a      	sub	sp, #40	; 0x28
 8006b14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b1a:	f000 fb0d 	bl	8007138 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b1e:	4b1d      	ldr	r3, [pc, #116]	; (8006b94 <xTimerCreateTimerTask+0x84>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d021      	beq.n	8006b6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b26:	2300      	movs	r3, #0
 8006b28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b2e:	1d3a      	adds	r2, r7, #4
 8006b30:	f107 0108 	add.w	r1, r7, #8
 8006b34:	f107 030c 	add.w	r3, r7, #12
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7fe fb1b 	bl	8005174 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	9202      	str	r2, [sp, #8]
 8006b46:	9301      	str	r3, [sp, #4]
 8006b48:	2302      	movs	r3, #2
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	460a      	mov	r2, r1
 8006b50:	4911      	ldr	r1, [pc, #68]	; (8006b98 <xTimerCreateTimerTask+0x88>)
 8006b52:	4812      	ldr	r0, [pc, #72]	; (8006b9c <xTimerCreateTimerTask+0x8c>)
 8006b54:	f7ff f8d2 	bl	8005cfc <xTaskCreateStatic>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	4b11      	ldr	r3, [pc, #68]	; (8006ba0 <xTimerCreateTimerTask+0x90>)
 8006b5c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b5e:	4b10      	ldr	r3, [pc, #64]	; (8006ba0 <xTimerCreateTimerTask+0x90>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d001      	beq.n	8006b6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b66:	2301      	movs	r3, #1
 8006b68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10b      	bne.n	8006b88 <xTimerCreateTimerTask+0x78>
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	b672      	cpsid	i
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	b662      	cpsie	i
 8006b84:	613b      	str	r3, [r7, #16]
 8006b86:	e7fe      	b.n	8006b86 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8006b88:	697b      	ldr	r3, [r7, #20]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20001e84 	.word	0x20001e84
 8006b98:	080095d8 	.word	0x080095d8
 8006b9c:	08006cdd 	.word	0x08006cdd
 8006ba0:	20001e88 	.word	0x20001e88

08006ba4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b08a      	sub	sp, #40	; 0x28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
 8006bb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10b      	bne.n	8006bd4 <xTimerGenericCommand+0x30>
 8006bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc0:	b672      	cpsid	i
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	b662      	cpsie	i
 8006bd0:	623b      	str	r3, [r7, #32]
 8006bd2:	e7fe      	b.n	8006bd2 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006bd4:	4b19      	ldr	r3, [pc, #100]	; (8006c3c <xTimerGenericCommand+0x98>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d02a      	beq.n	8006c32 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2b05      	cmp	r3, #5
 8006bec:	dc18      	bgt.n	8006c20 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006bee:	f7ff fead 	bl	800694c <xTaskGetSchedulerState>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d109      	bne.n	8006c0c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006bf8:	4b10      	ldr	r3, [pc, #64]	; (8006c3c <xTimerGenericCommand+0x98>)
 8006bfa:	6818      	ldr	r0, [r3, #0]
 8006bfc:	f107 0110 	add.w	r1, r7, #16
 8006c00:	2300      	movs	r3, #0
 8006c02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c04:	f7fe fc8e 	bl	8005524 <xQueueGenericSend>
 8006c08:	6278      	str	r0, [r7, #36]	; 0x24
 8006c0a:	e012      	b.n	8006c32 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c0c:	4b0b      	ldr	r3, [pc, #44]	; (8006c3c <xTimerGenericCommand+0x98>)
 8006c0e:	6818      	ldr	r0, [r3, #0]
 8006c10:	f107 0110 	add.w	r1, r7, #16
 8006c14:	2300      	movs	r3, #0
 8006c16:	2200      	movs	r2, #0
 8006c18:	f7fe fc84 	bl	8005524 <xQueueGenericSend>
 8006c1c:	6278      	str	r0, [r7, #36]	; 0x24
 8006c1e:	e008      	b.n	8006c32 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c20:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <xTimerGenericCommand+0x98>)
 8006c22:	6818      	ldr	r0, [r3, #0]
 8006c24:	f107 0110 	add.w	r1, r7, #16
 8006c28:	2300      	movs	r3, #0
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	f7fe fd7c 	bl	8005728 <xQueueGenericSendFromISR>
 8006c30:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3728      	adds	r7, #40	; 0x28
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	20001e84 	.word	0x20001e84

08006c40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af02      	add	r7, sp, #8
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c4a:	4b23      	ldr	r3, [pc, #140]	; (8006cd8 <prvProcessExpiredTimer+0x98>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fe fb2f 	bl	80052bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c64:	f003 0304 	and.w	r3, r3, #4
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d023      	beq.n	8006cb4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	699a      	ldr	r2, [r3, #24]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	18d1      	adds	r1, r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	6978      	ldr	r0, [r7, #20]
 8006c7a:	f000 f8d3 	bl	8006e24 <prvInsertTimerInActiveList>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d020      	beq.n	8006cc6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c84:	2300      	movs	r3, #0
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	2300      	movs	r3, #0
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	6978      	ldr	r0, [r7, #20]
 8006c90:	f7ff ff88 	bl	8006ba4 <xTimerGenericCommand>
 8006c94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d114      	bne.n	8006cc6 <prvProcessExpiredTimer+0x86>
 8006c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca0:	b672      	cpsid	i
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	b662      	cpsie	i
 8006cb0:	60fb      	str	r3, [r7, #12]
 8006cb2:	e7fe      	b.n	8006cb2 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cba:	f023 0301 	bic.w	r3, r3, #1
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	6978      	ldr	r0, [r7, #20]
 8006ccc:	4798      	blx	r3
}
 8006cce:	bf00      	nop
 8006cd0:	3718      	adds	r7, #24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20001e7c 	.word	0x20001e7c

08006cdc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ce4:	f107 0308 	add.w	r3, r7, #8
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 f857 	bl	8006d9c <prvGetNextExpireTime>
 8006cee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 f803 	bl	8006d00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006cfa:	f000 f8d5 	bl	8006ea8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cfe:	e7f1      	b.n	8006ce4 <prvTimerTask+0x8>

08006d00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d0a:	f7ff fa3b 	bl	8006184 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d0e:	f107 0308 	add.w	r3, r7, #8
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 f866 	bl	8006de4 <prvSampleTimeNow>
 8006d18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d130      	bne.n	8006d82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10a      	bne.n	8006d3c <prvProcessTimerOrBlockTask+0x3c>
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d806      	bhi.n	8006d3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d2e:	f7ff fa37 	bl	80061a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d32:	68f9      	ldr	r1, [r7, #12]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7ff ff83 	bl	8006c40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d3a:	e024      	b.n	8006d86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d008      	beq.n	8006d54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d42:	4b13      	ldr	r3, [pc, #76]	; (8006d90 <prvProcessTimerOrBlockTask+0x90>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <prvProcessTimerOrBlockTask+0x50>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e000      	b.n	8006d52 <prvProcessTimerOrBlockTask+0x52>
 8006d50:	2300      	movs	r3, #0
 8006d52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d54:	4b0f      	ldr	r3, [pc, #60]	; (8006d94 <prvProcessTimerOrBlockTask+0x94>)
 8006d56:	6818      	ldr	r0, [r3, #0]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	4619      	mov	r1, r3
 8006d62:	f7fe ff97 	bl	8005c94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d66:	f7ff fa1b 	bl	80061a0 <xTaskResumeAll>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d70:	4b09      	ldr	r3, [pc, #36]	; (8006d98 <prvProcessTimerOrBlockTask+0x98>)
 8006d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	f3bf 8f6f 	isb	sy
}
 8006d80:	e001      	b.n	8006d86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d82:	f7ff fa0d 	bl	80061a0 <xTaskResumeAll>
}
 8006d86:	bf00      	nop
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	20001e80 	.word	0x20001e80
 8006d94:	20001e84 	.word	0x20001e84
 8006d98:	e000ed04 	.word	0xe000ed04

08006d9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006da4:	4b0e      	ldr	r3, [pc, #56]	; (8006de0 <prvGetNextExpireTime+0x44>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <prvGetNextExpireTime+0x16>
 8006dae:	2201      	movs	r2, #1
 8006db0:	e000      	b.n	8006db4 <prvGetNextExpireTime+0x18>
 8006db2:	2200      	movs	r2, #0
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d105      	bne.n	8006dcc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dc0:	4b07      	ldr	r3, [pc, #28]	; (8006de0 <prvGetNextExpireTime+0x44>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	e001      	b.n	8006dd0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	20001e7c 	.word	0x20001e7c

08006de4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006dec:	f7ff fa76 	bl	80062dc <xTaskGetTickCount>
 8006df0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006df2:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <prvSampleTimeNow+0x3c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d205      	bcs.n	8006e08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006dfc:	f000 f936 	bl	800706c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	e002      	b.n	8006e0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e0e:	4a04      	ldr	r2, [pc, #16]	; (8006e20 <prvSampleTimeNow+0x3c>)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e14:	68fb      	ldr	r3, [r7, #12]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	20001e8c 	.word	0x20001e8c

08006e24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
 8006e30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e32:	2300      	movs	r3, #0
 8006e34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d812      	bhi.n	8006e70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	1ad2      	subs	r2, r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d302      	bcc.n	8006e5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	617b      	str	r3, [r7, #20]
 8006e5c:	e01b      	b.n	8006e96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e5e:	4b10      	ldr	r3, [pc, #64]	; (8006ea0 <prvInsertTimerInActiveList+0x7c>)
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	3304      	adds	r3, #4
 8006e66:	4619      	mov	r1, r3
 8006e68:	4610      	mov	r0, r2
 8006e6a:	f7fe f9ee 	bl	800524a <vListInsert>
 8006e6e:	e012      	b.n	8006e96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d206      	bcs.n	8006e86 <prvInsertTimerInActiveList+0x62>
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d302      	bcc.n	8006e86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006e80:	2301      	movs	r3, #1
 8006e82:	617b      	str	r3, [r7, #20]
 8006e84:	e007      	b.n	8006e96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e86:	4b07      	ldr	r3, [pc, #28]	; (8006ea4 <prvInsertTimerInActiveList+0x80>)
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	4619      	mov	r1, r3
 8006e90:	4610      	mov	r0, r2
 8006e92:	f7fe f9da 	bl	800524a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006e96:	697b      	ldr	r3, [r7, #20]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3718      	adds	r7, #24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	20001e80 	.word	0x20001e80
 8006ea4:	20001e7c 	.word	0x20001e7c

08006ea8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08e      	sub	sp, #56	; 0x38
 8006eac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006eae:	e0cc      	b.n	800704a <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	da19      	bge.n	8006eea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006eb6:	1d3b      	adds	r3, r7, #4
 8006eb8:	3304      	adds	r3, #4
 8006eba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10b      	bne.n	8006eda <prvProcessReceivedCommands+0x32>
 8006ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec6:	b672      	cpsid	i
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	b662      	cpsie	i
 8006ed6:	61fb      	str	r3, [r7, #28]
 8006ed8:	e7fe      	b.n	8006ed8 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ee0:	6850      	ldr	r0, [r2, #4]
 8006ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ee4:	6892      	ldr	r2, [r2, #8]
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f2c0 80ab 	blt.w	8007048 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d004      	beq.n	8006f08 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f00:	3304      	adds	r3, #4
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fe f9da 	bl	80052bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f08:	463b      	mov	r3, r7
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7ff ff6a 	bl	8006de4 <prvSampleTimeNow>
 8006f10:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b09      	cmp	r3, #9
 8006f16:	f200 8098 	bhi.w	800704a <prvProcessReceivedCommands+0x1a2>
 8006f1a:	a201      	add	r2, pc, #4	; (adr r2, 8006f20 <prvProcessReceivedCommands+0x78>)
 8006f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f20:	08006f49 	.word	0x08006f49
 8006f24:	08006f49 	.word	0x08006f49
 8006f28:	08006f49 	.word	0x08006f49
 8006f2c:	08006fbf 	.word	0x08006fbf
 8006f30:	08006fd3 	.word	0x08006fd3
 8006f34:	0800701f 	.word	0x0800701f
 8006f38:	08006f49 	.word	0x08006f49
 8006f3c:	08006f49 	.word	0x08006f49
 8006f40:	08006fbf 	.word	0x08006fbf
 8006f44:	08006fd3 	.word	0x08006fd3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f4e:	f043 0301 	orr.w	r3, r3, #1
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	18d1      	adds	r1, r2, r3
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f68:	f7ff ff5c 	bl	8006e24 <prvInsertTimerInActiveList>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d06b      	beq.n	800704a <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f80:	f003 0304 	and.w	r3, r3, #4
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d060      	beq.n	800704a <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	441a      	add	r2, r3
 8006f90:	2300      	movs	r3, #0
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	2300      	movs	r3, #0
 8006f96:	2100      	movs	r1, #0
 8006f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f9a:	f7ff fe03 	bl	8006ba4 <xTimerGenericCommand>
 8006f9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d151      	bne.n	800704a <prvProcessReceivedCommands+0x1a2>
 8006fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006faa:	b672      	cpsid	i
 8006fac:	f383 8811 	msr	BASEPRI, r3
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	b662      	cpsie	i
 8006fba:	61bb      	str	r3, [r7, #24]
 8006fbc:	e7fe      	b.n	8006fbc <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fc4:	f023 0301 	bic.w	r3, r3, #1
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006fd0:	e03b      	b.n	800704a <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fd8:	f043 0301 	orr.w	r3, r3, #1
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10b      	bne.n	800700a <prvProcessReceivedCommands+0x162>
 8006ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff6:	b672      	cpsid	i
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	b662      	cpsie	i
 8007006:	617b      	str	r3, [r7, #20]
 8007008:	e7fe      	b.n	8007008 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700c:	699a      	ldr	r2, [r3, #24]
 800700e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007010:	18d1      	adds	r1, r2, r3
 8007012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007018:	f7ff ff04 	bl	8006e24 <prvInsertTimerInActiveList>
					break;
 800701c:	e015      	b.n	800704a <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800701e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007020:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007024:	f003 0302 	and.w	r3, r3, #2
 8007028:	2b00      	cmp	r3, #0
 800702a:	d103      	bne.n	8007034 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800702c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800702e:	f000 fbb5 	bl	800779c <vPortFree>
 8007032:	e00a      	b.n	800704a <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800703a:	f023 0301 	bic.w	r3, r3, #1
 800703e:	b2da      	uxtb	r2, r3
 8007040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007046:	e000      	b.n	800704a <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007048:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800704a:	4b07      	ldr	r3, [pc, #28]	; (8007068 <prvProcessReceivedCommands+0x1c0>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	1d39      	adds	r1, r7, #4
 8007050:	2200      	movs	r2, #0
 8007052:	4618      	mov	r0, r3
 8007054:	f7fe fc04 	bl	8005860 <xQueueReceive>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	f47f af28 	bne.w	8006eb0 <prvProcessReceivedCommands+0x8>
	}
}
 8007060:	bf00      	nop
 8007062:	3730      	adds	r7, #48	; 0x30
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	20001e84 	.word	0x20001e84

0800706c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b088      	sub	sp, #32
 8007070:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007072:	e049      	b.n	8007108 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007074:	4b2e      	ldr	r3, [pc, #184]	; (8007130 <prvSwitchTimerLists+0xc4>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800707e:	4b2c      	ldr	r3, [pc, #176]	; (8007130 <prvSwitchTimerLists+0xc4>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	3304      	adds	r3, #4
 800708c:	4618      	mov	r0, r3
 800708e:	f7fe f915 	bl	80052bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d02f      	beq.n	8007108 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	4413      	add	r3, r2
 80070b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d90e      	bls.n	80070d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070c6:	4b1a      	ldr	r3, [pc, #104]	; (8007130 <prvSwitchTimerLists+0xc4>)
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	3304      	adds	r3, #4
 80070ce:	4619      	mov	r1, r3
 80070d0:	4610      	mov	r0, r2
 80070d2:	f7fe f8ba 	bl	800524a <vListInsert>
 80070d6:	e017      	b.n	8007108 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070d8:	2300      	movs	r3, #0
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	2300      	movs	r3, #0
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	2100      	movs	r1, #0
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f7ff fd5e 	bl	8006ba4 <xTimerGenericCommand>
 80070e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10b      	bne.n	8007108 <prvSwitchTimerLists+0x9c>
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	b672      	cpsid	i
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	b662      	cpsie	i
 8007104:	603b      	str	r3, [r7, #0]
 8007106:	e7fe      	b.n	8007106 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007108:	4b09      	ldr	r3, [pc, #36]	; (8007130 <prvSwitchTimerLists+0xc4>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1b0      	bne.n	8007074 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007112:	4b07      	ldr	r3, [pc, #28]	; (8007130 <prvSwitchTimerLists+0xc4>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007118:	4b06      	ldr	r3, [pc, #24]	; (8007134 <prvSwitchTimerLists+0xc8>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a04      	ldr	r2, [pc, #16]	; (8007130 <prvSwitchTimerLists+0xc4>)
 800711e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007120:	4a04      	ldr	r2, [pc, #16]	; (8007134 <prvSwitchTimerLists+0xc8>)
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	6013      	str	r3, [r2, #0]
}
 8007126:	bf00      	nop
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	20001e7c 	.word	0x20001e7c
 8007134:	20001e80 	.word	0x20001e80

08007138 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800713e:	f000 f943 	bl	80073c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007142:	4b15      	ldr	r3, [pc, #84]	; (8007198 <prvCheckForValidListAndQueue+0x60>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d120      	bne.n	800718c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800714a:	4814      	ldr	r0, [pc, #80]	; (800719c <prvCheckForValidListAndQueue+0x64>)
 800714c:	f7fe f82c 	bl	80051a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007150:	4813      	ldr	r0, [pc, #76]	; (80071a0 <prvCheckForValidListAndQueue+0x68>)
 8007152:	f7fe f829 	bl	80051a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007156:	4b13      	ldr	r3, [pc, #76]	; (80071a4 <prvCheckForValidListAndQueue+0x6c>)
 8007158:	4a10      	ldr	r2, [pc, #64]	; (800719c <prvCheckForValidListAndQueue+0x64>)
 800715a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800715c:	4b12      	ldr	r3, [pc, #72]	; (80071a8 <prvCheckForValidListAndQueue+0x70>)
 800715e:	4a10      	ldr	r2, [pc, #64]	; (80071a0 <prvCheckForValidListAndQueue+0x68>)
 8007160:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007162:	2300      	movs	r3, #0
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	4b11      	ldr	r3, [pc, #68]	; (80071ac <prvCheckForValidListAndQueue+0x74>)
 8007168:	4a11      	ldr	r2, [pc, #68]	; (80071b0 <prvCheckForValidListAndQueue+0x78>)
 800716a:	2110      	movs	r1, #16
 800716c:	200a      	movs	r0, #10
 800716e:	f7fe f939 	bl	80053e4 <xQueueGenericCreateStatic>
 8007172:	4602      	mov	r2, r0
 8007174:	4b08      	ldr	r3, [pc, #32]	; (8007198 <prvCheckForValidListAndQueue+0x60>)
 8007176:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007178:	4b07      	ldr	r3, [pc, #28]	; (8007198 <prvCheckForValidListAndQueue+0x60>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d005      	beq.n	800718c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007180:	4b05      	ldr	r3, [pc, #20]	; (8007198 <prvCheckForValidListAndQueue+0x60>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	490b      	ldr	r1, [pc, #44]	; (80071b4 <prvCheckForValidListAndQueue+0x7c>)
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe fd5c 	bl	8005c44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800718c:	f000 f94e 	bl	800742c <vPortExitCritical>
}
 8007190:	bf00      	nop
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20001e84 	.word	0x20001e84
 800719c:	20001e54 	.word	0x20001e54
 80071a0:	20001e68 	.word	0x20001e68
 80071a4:	20001e7c 	.word	0x20001e7c
 80071a8:	20001e80 	.word	0x20001e80
 80071ac:	20001f30 	.word	0x20001f30
 80071b0:	20001e90 	.word	0x20001e90
 80071b4:	080095e0 	.word	0x080095e0

080071b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3b04      	subs	r3, #4
 80071c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80071d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	3b04      	subs	r3, #4
 80071d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	f023 0201 	bic.w	r2, r3, #1
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3b04      	subs	r3, #4
 80071e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071e8:	4a0c      	ldr	r2, [pc, #48]	; (800721c <pxPortInitialiseStack+0x64>)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	3b14      	subs	r3, #20
 80071f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3b04      	subs	r3, #4
 80071fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f06f 0202 	mvn.w	r2, #2
 8007206:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3b20      	subs	r3, #32
 800720c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800720e:	68fb      	ldr	r3, [r7, #12]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	08007221 	.word	0x08007221

08007220 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007226:	2300      	movs	r3, #0
 8007228:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800722a:	4b13      	ldr	r3, [pc, #76]	; (8007278 <prvTaskExitError+0x58>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007232:	d00b      	beq.n	800724c <prvTaskExitError+0x2c>
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	b672      	cpsid	i
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	b662      	cpsie	i
 8007248:	60fb      	str	r3, [r7, #12]
 800724a:	e7fe      	b.n	800724a <prvTaskExitError+0x2a>
 800724c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007250:	b672      	cpsid	i
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	b662      	cpsie	i
 8007260:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007262:	bf00      	nop
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d0fc      	beq.n	8007264 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800726a:	bf00      	nop
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	2000000c 	.word	0x2000000c
 800727c:	00000000 	.word	0x00000000

08007280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007280:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <pxCurrentTCBConst2>)
 8007282:	6819      	ldr	r1, [r3, #0]
 8007284:	6808      	ldr	r0, [r1, #0]
 8007286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728a:	f380 8809 	msr	PSP, r0
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f04f 0000 	mov.w	r0, #0
 8007296:	f380 8811 	msr	BASEPRI, r0
 800729a:	4770      	bx	lr
 800729c:	f3af 8000 	nop.w

080072a0 <pxCurrentTCBConst2>:
 80072a0:	20001954 	.word	0x20001954
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80072a4:	bf00      	nop
 80072a6:	bf00      	nop

080072a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80072a8:	4808      	ldr	r0, [pc, #32]	; (80072cc <prvPortStartFirstTask+0x24>)
 80072aa:	6800      	ldr	r0, [r0, #0]
 80072ac:	6800      	ldr	r0, [r0, #0]
 80072ae:	f380 8808 	msr	MSP, r0
 80072b2:	f04f 0000 	mov.w	r0, #0
 80072b6:	f380 8814 	msr	CONTROL, r0
 80072ba:	b662      	cpsie	i
 80072bc:	b661      	cpsie	f
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	df00      	svc	0
 80072c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072ca:	bf00      	nop
 80072cc:	e000ed08 	.word	0xe000ed08

080072d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80072d6:	4b36      	ldr	r3, [pc, #216]	; (80073b0 <xPortStartScheduler+0xe0>)
 80072d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	22ff      	movs	r2, #255	; 0xff
 80072e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	4b2e      	ldr	r3, [pc, #184]	; (80073b4 <xPortStartScheduler+0xe4>)
 80072fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072fe:	4b2e      	ldr	r3, [pc, #184]	; (80073b8 <xPortStartScheduler+0xe8>)
 8007300:	2207      	movs	r2, #7
 8007302:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007304:	e009      	b.n	800731a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007306:	4b2c      	ldr	r3, [pc, #176]	; (80073b8 <xPortStartScheduler+0xe8>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3b01      	subs	r3, #1
 800730c:	4a2a      	ldr	r2, [pc, #168]	; (80073b8 <xPortStartScheduler+0xe8>)
 800730e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	b2db      	uxtb	r3, r3
 8007314:	005b      	lsls	r3, r3, #1
 8007316:	b2db      	uxtb	r3, r3
 8007318:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800731a:	78fb      	ldrb	r3, [r7, #3]
 800731c:	b2db      	uxtb	r3, r3
 800731e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007322:	2b80      	cmp	r3, #128	; 0x80
 8007324:	d0ef      	beq.n	8007306 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007326:	4b24      	ldr	r3, [pc, #144]	; (80073b8 <xPortStartScheduler+0xe8>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f1c3 0307 	rsb	r3, r3, #7
 800732e:	2b04      	cmp	r3, #4
 8007330:	d00b      	beq.n	800734a <xPortStartScheduler+0x7a>
 8007332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007336:	b672      	cpsid	i
 8007338:	f383 8811 	msr	BASEPRI, r3
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	b662      	cpsie	i
 8007346:	60bb      	str	r3, [r7, #8]
 8007348:	e7fe      	b.n	8007348 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800734a:	4b1b      	ldr	r3, [pc, #108]	; (80073b8 <xPortStartScheduler+0xe8>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	021b      	lsls	r3, r3, #8
 8007350:	4a19      	ldr	r2, [pc, #100]	; (80073b8 <xPortStartScheduler+0xe8>)
 8007352:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007354:	4b18      	ldr	r3, [pc, #96]	; (80073b8 <xPortStartScheduler+0xe8>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800735c:	4a16      	ldr	r2, [pc, #88]	; (80073b8 <xPortStartScheduler+0xe8>)
 800735e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	b2da      	uxtb	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007368:	4b14      	ldr	r3, [pc, #80]	; (80073bc <xPortStartScheduler+0xec>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a13      	ldr	r2, [pc, #76]	; (80073bc <xPortStartScheduler+0xec>)
 800736e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007372:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007374:	4b11      	ldr	r3, [pc, #68]	; (80073bc <xPortStartScheduler+0xec>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a10      	ldr	r2, [pc, #64]	; (80073bc <xPortStartScheduler+0xec>)
 800737a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800737e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007380:	f000 f8d4 	bl	800752c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007384:	4b0e      	ldr	r3, [pc, #56]	; (80073c0 <xPortStartScheduler+0xf0>)
 8007386:	2200      	movs	r2, #0
 8007388:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800738a:	f000 f8f3 	bl	8007574 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800738e:	4b0d      	ldr	r3, [pc, #52]	; (80073c4 <xPortStartScheduler+0xf4>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a0c      	ldr	r2, [pc, #48]	; (80073c4 <xPortStartScheduler+0xf4>)
 8007394:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007398:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800739a:	f7ff ff85 	bl	80072a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800739e:	f7ff f867 	bl	8006470 <vTaskSwitchContext>
	prvTaskExitError();
 80073a2:	f7ff ff3d 	bl	8007220 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	e000e400 	.word	0xe000e400
 80073b4:	20001f80 	.word	0x20001f80
 80073b8:	20001f84 	.word	0x20001f84
 80073bc:	e000ed20 	.word	0xe000ed20
 80073c0:	2000000c 	.word	0x2000000c
 80073c4:	e000ef34 	.word	0xe000ef34

080073c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d2:	b672      	cpsid	i
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	b662      	cpsie	i
 80073e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80073e4:	4b0f      	ldr	r3, [pc, #60]	; (8007424 <vPortEnterCritical+0x5c>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	3301      	adds	r3, #1
 80073ea:	4a0e      	ldr	r2, [pc, #56]	; (8007424 <vPortEnterCritical+0x5c>)
 80073ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80073ee:	4b0d      	ldr	r3, [pc, #52]	; (8007424 <vPortEnterCritical+0x5c>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d110      	bne.n	8007418 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80073f6:	4b0c      	ldr	r3, [pc, #48]	; (8007428 <vPortEnterCritical+0x60>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00b      	beq.n	8007418 <vPortEnterCritical+0x50>
 8007400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007404:	b672      	cpsid	i
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	b662      	cpsie	i
 8007414:	603b      	str	r3, [r7, #0]
 8007416:	e7fe      	b.n	8007416 <vPortEnterCritical+0x4e>
	}
}
 8007418:	bf00      	nop
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	2000000c 	.word	0x2000000c
 8007428:	e000ed04 	.word	0xe000ed04

0800742c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007432:	4b12      	ldr	r3, [pc, #72]	; (800747c <vPortExitCritical+0x50>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10b      	bne.n	8007452 <vPortExitCritical+0x26>
 800743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743e:	b672      	cpsid	i
 8007440:	f383 8811 	msr	BASEPRI, r3
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	b662      	cpsie	i
 800744e:	607b      	str	r3, [r7, #4]
 8007450:	e7fe      	b.n	8007450 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8007452:	4b0a      	ldr	r3, [pc, #40]	; (800747c <vPortExitCritical+0x50>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3b01      	subs	r3, #1
 8007458:	4a08      	ldr	r2, [pc, #32]	; (800747c <vPortExitCritical+0x50>)
 800745a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800745c:	4b07      	ldr	r3, [pc, #28]	; (800747c <vPortExitCritical+0x50>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d104      	bne.n	800746e <vPortExitCritical+0x42>
 8007464:	2300      	movs	r3, #0
 8007466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800746e:	bf00      	nop
 8007470:	370c      	adds	r7, #12
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	2000000c 	.word	0x2000000c

08007480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007480:	f3ef 8009 	mrs	r0, PSP
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	4b15      	ldr	r3, [pc, #84]	; (80074e0 <pxCurrentTCBConst>)
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	f01e 0f10 	tst.w	lr, #16
 8007490:	bf08      	it	eq
 8007492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800749a:	6010      	str	r0, [r2, #0]
 800749c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80074a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80074a4:	b672      	cpsid	i
 80074a6:	f380 8811 	msr	BASEPRI, r0
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	b662      	cpsie	i
 80074b4:	f7fe ffdc 	bl	8006470 <vTaskSwitchContext>
 80074b8:	f04f 0000 	mov.w	r0, #0
 80074bc:	f380 8811 	msr	BASEPRI, r0
 80074c0:	bc09      	pop	{r0, r3}
 80074c2:	6819      	ldr	r1, [r3, #0]
 80074c4:	6808      	ldr	r0, [r1, #0]
 80074c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ca:	f01e 0f10 	tst.w	lr, #16
 80074ce:	bf08      	it	eq
 80074d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80074d4:	f380 8809 	msr	PSP, r0
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop

080074e0 <pxCurrentTCBConst>:
 80074e0:	20001954 	.word	0x20001954
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop

080074e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f2:	b672      	cpsid	i
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	b662      	cpsie	i
 8007502:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007504:	f7fe fefa 	bl	80062fc <xTaskIncrementTick>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d003      	beq.n	8007516 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800750e:	4b06      	ldr	r3, [pc, #24]	; (8007528 <SysTick_Handler+0x40>)
 8007510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007514:	601a      	str	r2, [r3, #0]
 8007516:	2300      	movs	r3, #0
 8007518:	603b      	str	r3, [r7, #0]
	__asm volatile
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007520:	bf00      	nop
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	e000ed04 	.word	0xe000ed04

0800752c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800752c:	b480      	push	{r7}
 800752e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007530:	4b0b      	ldr	r3, [pc, #44]	; (8007560 <vPortSetupTimerInterrupt+0x34>)
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007536:	4b0b      	ldr	r3, [pc, #44]	; (8007564 <vPortSetupTimerInterrupt+0x38>)
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800753c:	4b0a      	ldr	r3, [pc, #40]	; (8007568 <vPortSetupTimerInterrupt+0x3c>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a0a      	ldr	r2, [pc, #40]	; (800756c <vPortSetupTimerInterrupt+0x40>)
 8007542:	fba2 2303 	umull	r2, r3, r2, r3
 8007546:	099b      	lsrs	r3, r3, #6
 8007548:	4a09      	ldr	r2, [pc, #36]	; (8007570 <vPortSetupTimerInterrupt+0x44>)
 800754a:	3b01      	subs	r3, #1
 800754c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800754e:	4b04      	ldr	r3, [pc, #16]	; (8007560 <vPortSetupTimerInterrupt+0x34>)
 8007550:	2207      	movs	r2, #7
 8007552:	601a      	str	r2, [r3, #0]
}
 8007554:	bf00      	nop
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	e000e010 	.word	0xe000e010
 8007564:	e000e018 	.word	0xe000e018
 8007568:	20000000 	.word	0x20000000
 800756c:	10624dd3 	.word	0x10624dd3
 8007570:	e000e014 	.word	0xe000e014

08007574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007574:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007584 <vPortEnableVFP+0x10>
 8007578:	6801      	ldr	r1, [r0, #0]
 800757a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800757e:	6001      	str	r1, [r0, #0]
 8007580:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007582:	bf00      	nop
 8007584:	e000ed88 	.word	0xe000ed88

08007588 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800758e:	f3ef 8305 	mrs	r3, IPSR
 8007592:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2b0f      	cmp	r3, #15
 8007598:	d915      	bls.n	80075c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800759a:	4a18      	ldr	r2, [pc, #96]	; (80075fc <vPortValidateInterruptPriority+0x74>)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4413      	add	r3, r2
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80075a4:	4b16      	ldr	r3, [pc, #88]	; (8007600 <vPortValidateInterruptPriority+0x78>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	7afa      	ldrb	r2, [r7, #11]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d20b      	bcs.n	80075c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	b672      	cpsid	i
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	b662      	cpsie	i
 80075c2:	607b      	str	r3, [r7, #4]
 80075c4:	e7fe      	b.n	80075c4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80075c6:	4b0f      	ldr	r3, [pc, #60]	; (8007604 <vPortValidateInterruptPriority+0x7c>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80075ce:	4b0e      	ldr	r3, [pc, #56]	; (8007608 <vPortValidateInterruptPriority+0x80>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d90b      	bls.n	80075ee <vPortValidateInterruptPriority+0x66>
 80075d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075da:	b672      	cpsid	i
 80075dc:	f383 8811 	msr	BASEPRI, r3
 80075e0:	f3bf 8f6f 	isb	sy
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	b662      	cpsie	i
 80075ea:	603b      	str	r3, [r7, #0]
 80075ec:	e7fe      	b.n	80075ec <vPortValidateInterruptPriority+0x64>
	}
 80075ee:	bf00      	nop
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	e000e3f0 	.word	0xe000e3f0
 8007600:	20001f80 	.word	0x20001f80
 8007604:	e000ed0c 	.word	0xe000ed0c
 8007608:	20001f84 	.word	0x20001f84

0800760c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b08a      	sub	sp, #40	; 0x28
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007614:	2300      	movs	r3, #0
 8007616:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007618:	f7fe fdb4 	bl	8006184 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800761c:	4b5a      	ldr	r3, [pc, #360]	; (8007788 <pvPortMalloc+0x17c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007624:	f000 f916 	bl	8007854 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007628:	4b58      	ldr	r3, [pc, #352]	; (800778c <pvPortMalloc+0x180>)
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4013      	ands	r3, r2
 8007630:	2b00      	cmp	r3, #0
 8007632:	f040 8090 	bne.w	8007756 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d01e      	beq.n	800767a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800763c:	2208      	movs	r2, #8
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4413      	add	r3, r2
 8007642:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f003 0307 	and.w	r3, r3, #7
 800764a:	2b00      	cmp	r3, #0
 800764c:	d015      	beq.n	800767a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f023 0307 	bic.w	r3, r3, #7
 8007654:	3308      	adds	r3, #8
 8007656:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f003 0307 	and.w	r3, r3, #7
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00b      	beq.n	800767a <pvPortMalloc+0x6e>
 8007662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007666:	b672      	cpsid	i
 8007668:	f383 8811 	msr	BASEPRI, r3
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	f3bf 8f4f 	dsb	sy
 8007674:	b662      	cpsie	i
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	e7fe      	b.n	8007678 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d06a      	beq.n	8007756 <pvPortMalloc+0x14a>
 8007680:	4b43      	ldr	r3, [pc, #268]	; (8007790 <pvPortMalloc+0x184>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	429a      	cmp	r2, r3
 8007688:	d865      	bhi.n	8007756 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800768a:	4b42      	ldr	r3, [pc, #264]	; (8007794 <pvPortMalloc+0x188>)
 800768c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800768e:	4b41      	ldr	r3, [pc, #260]	; (8007794 <pvPortMalloc+0x188>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007694:	e004      	b.n	80076a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007698:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d903      	bls.n	80076b2 <pvPortMalloc+0xa6>
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1f1      	bne.n	8007696 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80076b2:	4b35      	ldr	r3, [pc, #212]	; (8007788 <pvPortMalloc+0x17c>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d04c      	beq.n	8007756 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2208      	movs	r2, #8
 80076c2:	4413      	add	r3, r2
 80076c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80076c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	685a      	ldr	r2, [r3, #4]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	1ad2      	subs	r2, r2, r3
 80076d6:	2308      	movs	r3, #8
 80076d8:	005b      	lsls	r3, r3, #1
 80076da:	429a      	cmp	r2, r3
 80076dc:	d920      	bls.n	8007720 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80076de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4413      	add	r3, r2
 80076e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	f003 0307 	and.w	r3, r3, #7
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00b      	beq.n	8007708 <pvPortMalloc+0xfc>
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	b672      	cpsid	i
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	b662      	cpsie	i
 8007704:	613b      	str	r3, [r7, #16]
 8007706:	e7fe      	b.n	8007706 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	1ad2      	subs	r2, r2, r3
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800771a:	69b8      	ldr	r0, [r7, #24]
 800771c:	f000 f8fc 	bl	8007918 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007720:	4b1b      	ldr	r3, [pc, #108]	; (8007790 <pvPortMalloc+0x184>)
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	4a19      	ldr	r2, [pc, #100]	; (8007790 <pvPortMalloc+0x184>)
 800772c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800772e:	4b18      	ldr	r3, [pc, #96]	; (8007790 <pvPortMalloc+0x184>)
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	4b19      	ldr	r3, [pc, #100]	; (8007798 <pvPortMalloc+0x18c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	429a      	cmp	r2, r3
 8007738:	d203      	bcs.n	8007742 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800773a:	4b15      	ldr	r3, [pc, #84]	; (8007790 <pvPortMalloc+0x184>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a16      	ldr	r2, [pc, #88]	; (8007798 <pvPortMalloc+0x18c>)
 8007740:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	4b11      	ldr	r3, [pc, #68]	; (800778c <pvPortMalloc+0x180>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	431a      	orrs	r2, r3
 800774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	2200      	movs	r2, #0
 8007754:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007756:	f7fe fd23 	bl	80061a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	f003 0307 	and.w	r3, r3, #7
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00b      	beq.n	800777c <pvPortMalloc+0x170>
 8007764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007768:	b672      	cpsid	i
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	b662      	cpsie	i
 8007778:	60fb      	str	r3, [r7, #12]
 800777a:	e7fe      	b.n	800777a <pvPortMalloc+0x16e>
	return pvReturn;
 800777c:	69fb      	ldr	r3, [r7, #28]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3728      	adds	r7, #40	; 0x28
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	20006350 	.word	0x20006350
 800778c:	2000635c 	.word	0x2000635c
 8007790:	20006354 	.word	0x20006354
 8007794:	20006348 	.word	0x20006348
 8007798:	20006358 	.word	0x20006358

0800779c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d04a      	beq.n	8007844 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80077ae:	2308      	movs	r3, #8
 80077b0:	425b      	negs	r3, r3
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	4413      	add	r3, r2
 80077b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	4b22      	ldr	r3, [pc, #136]	; (800784c <vPortFree+0xb0>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4013      	ands	r3, r2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10b      	bne.n	80077e2 <vPortFree+0x46>
 80077ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ce:	b672      	cpsid	i
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	b662      	cpsie	i
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	e7fe      	b.n	80077e0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00b      	beq.n	8007802 <vPortFree+0x66>
 80077ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ee:	b672      	cpsid	i
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	b662      	cpsie	i
 80077fe:	60bb      	str	r3, [r7, #8]
 8007800:	e7fe      	b.n	8007800 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	4b11      	ldr	r3, [pc, #68]	; (800784c <vPortFree+0xb0>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4013      	ands	r3, r2
 800780c:	2b00      	cmp	r3, #0
 800780e:	d019      	beq.n	8007844 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d115      	bne.n	8007844 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	4b0b      	ldr	r3, [pc, #44]	; (800784c <vPortFree+0xb0>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	43db      	mvns	r3, r3
 8007822:	401a      	ands	r2, r3
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007828:	f7fe fcac 	bl	8006184 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	4b07      	ldr	r3, [pc, #28]	; (8007850 <vPortFree+0xb4>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4413      	add	r3, r2
 8007836:	4a06      	ldr	r2, [pc, #24]	; (8007850 <vPortFree+0xb4>)
 8007838:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800783a:	6938      	ldr	r0, [r7, #16]
 800783c:	f000 f86c 	bl	8007918 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007840:	f7fe fcae 	bl	80061a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007844:	bf00      	nop
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	2000635c 	.word	0x2000635c
 8007850:	20006354 	.word	0x20006354

08007854 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800785a:	f244 33c0 	movw	r3, #17344	; 0x43c0
 800785e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007860:	4b27      	ldr	r3, [pc, #156]	; (8007900 <prvHeapInit+0xac>)
 8007862:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00c      	beq.n	8007888 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	3307      	adds	r3, #7
 8007872:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f023 0307 	bic.w	r3, r3, #7
 800787a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	4a1f      	ldr	r2, [pc, #124]	; (8007900 <prvHeapInit+0xac>)
 8007884:	4413      	add	r3, r2
 8007886:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800788c:	4a1d      	ldr	r2, [pc, #116]	; (8007904 <prvHeapInit+0xb0>)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007892:	4b1c      	ldr	r3, [pc, #112]	; (8007904 <prvHeapInit+0xb0>)
 8007894:	2200      	movs	r2, #0
 8007896:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	4413      	add	r3, r2
 800789e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80078a0:	2208      	movs	r2, #8
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	1a9b      	subs	r3, r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f023 0307 	bic.w	r3, r3, #7
 80078ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	4a15      	ldr	r2, [pc, #84]	; (8007908 <prvHeapInit+0xb4>)
 80078b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80078b6:	4b14      	ldr	r3, [pc, #80]	; (8007908 <prvHeapInit+0xb4>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2200      	movs	r2, #0
 80078bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80078be:	4b12      	ldr	r3, [pc, #72]	; (8007908 <prvHeapInit+0xb4>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2200      	movs	r2, #0
 80078c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	1ad2      	subs	r2, r2, r3
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078d4:	4b0c      	ldr	r3, [pc, #48]	; (8007908 <prvHeapInit+0xb4>)
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	4a0a      	ldr	r2, [pc, #40]	; (800790c <prvHeapInit+0xb8>)
 80078e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	4a09      	ldr	r2, [pc, #36]	; (8007910 <prvHeapInit+0xbc>)
 80078ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078ec:	4b09      	ldr	r3, [pc, #36]	; (8007914 <prvHeapInit+0xc0>)
 80078ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80078f2:	601a      	str	r2, [r3, #0]
}
 80078f4:	bf00      	nop
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	20001f88 	.word	0x20001f88
 8007904:	20006348 	.word	0x20006348
 8007908:	20006350 	.word	0x20006350
 800790c:	20006358 	.word	0x20006358
 8007910:	20006354 	.word	0x20006354
 8007914:	2000635c 	.word	0x2000635c

08007918 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007920:	4b28      	ldr	r3, [pc, #160]	; (80079c4 <prvInsertBlockIntoFreeList+0xac>)
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	e002      	b.n	800792c <prvInsertBlockIntoFreeList+0x14>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	60fb      	str	r3, [r7, #12]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	429a      	cmp	r2, r3
 8007934:	d8f7      	bhi.n	8007926 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	4413      	add	r3, r2
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	429a      	cmp	r2, r3
 8007946:	d108      	bne.n	800795a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	441a      	add	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	441a      	add	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	429a      	cmp	r2, r3
 800796c:	d118      	bne.n	80079a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	4b15      	ldr	r3, [pc, #84]	; (80079c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	429a      	cmp	r2, r3
 8007978:	d00d      	beq.n	8007996 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	441a      	add	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	e008      	b.n	80079a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007996:	4b0c      	ldr	r3, [pc, #48]	; (80079c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	e003      	b.n	80079a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d002      	beq.n	80079b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079b6:	bf00      	nop
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	20006348 	.word	0x20006348
 80079c8:	20006350 	.word	0x20006350

080079cc <readAnalog2Values>:
}
uint16_t getAnalogValue1(void){return analogValue1;}
#elif ANALOGINPUTVAL==2
uint16_t analogValue1;
uint16_t analogValue2;
void readAnalog2Values(ADC_HandleTypeDef *adc1,ADC_HandleTypeDef *adc2){
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
	  HAL_ADC_Start(adc1);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7f9 fca0 	bl	800131c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(adc1, ADCTIMEOUT);
 80079dc:	2164      	movs	r1, #100	; 0x64
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7f9 fd90 	bl	8001504 <HAL_ADC_PollForConversion>
	  analogValue1 = HAL_ADC_GetValue(adc1);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7f9 fe11 	bl	800160c <HAL_ADC_GetValue>
 80079ea:	4603      	mov	r3, r0
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	4b0d      	ldr	r3, [pc, #52]	; (8007a24 <readAnalog2Values+0x58>)
 80079f0:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop (adc1);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7f9 fd52 	bl	800149c <HAL_ADC_Stop>
	  HAL_ADC_Start(adc2);
 80079f8:	6838      	ldr	r0, [r7, #0]
 80079fa:	f7f9 fc8f 	bl	800131c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(adc2, ADCTIMEOUT);
 80079fe:	2164      	movs	r1, #100	; 0x64
 8007a00:	6838      	ldr	r0, [r7, #0]
 8007a02:	f7f9 fd7f 	bl	8001504 <HAL_ADC_PollForConversion>
	  analogValue2 = HAL_ADC_GetValue(adc2);
 8007a06:	6838      	ldr	r0, [r7, #0]
 8007a08:	f7f9 fe00 	bl	800160c <HAL_ADC_GetValue>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	4b05      	ldr	r3, [pc, #20]	; (8007a28 <readAnalog2Values+0x5c>)
 8007a12:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop (adc2);
 8007a14:	6838      	ldr	r0, [r7, #0]
 8007a16:	f7f9 fd41 	bl	800149c <HAL_ADC_Stop>
}
 8007a1a:	bf00      	nop
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	2000664a 	.word	0x2000664a
 8007a28:	20006648 	.word	0x20006648

08007a2c <getAnalogValue1>:
uint16_t getAnalogValue1(void){return analogValue1;}
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	4b03      	ldr	r3, [pc, #12]	; (8007a40 <getAnalogValue1+0x14>)
 8007a32:	881b      	ldrh	r3, [r3, #0]
 8007a34:	4618      	mov	r0, r3
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	2000664a 	.word	0x2000664a

08007a44 <getAnalogValue2>:
uint16_t getAnalogValue2(void){return analogValue2;}
 8007a44:	b480      	push	{r7}
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	4b03      	ldr	r3, [pc, #12]	; (8007a58 <getAnalogValue2+0x14>)
 8007a4a:	881b      	ldrh	r3, [r3, #0]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	20006648 	.word	0x20006648

08007a5c <valuesMap>:
 * @param inMax -> input interval maximum value
 * @param outMin -> output interval minumum value
 * @param outMax -> output interval maximum value
 * @return output value
 */
uint16_t valuesMap(uint16_t inValue, uint16_t inMin, uint16_t inMax, uint16_t outMin, uint16_t outMax) {
 8007a5c:	b490      	push	{r4, r7}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	4604      	mov	r4, r0
 8007a64:	4608      	mov	r0, r1
 8007a66:	4611      	mov	r1, r2
 8007a68:	461a      	mov	r2, r3
 8007a6a:	4623      	mov	r3, r4
 8007a6c:	80fb      	strh	r3, [r7, #6]
 8007a6e:	4603      	mov	r3, r0
 8007a70:	80bb      	strh	r3, [r7, #4]
 8007a72:	460b      	mov	r3, r1
 8007a74:	807b      	strh	r3, [r7, #2]
 8007a76:	4613      	mov	r3, r2
 8007a78:	803b      	strh	r3, [r7, #0]
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
 8007a7a:	88fa      	ldrh	r2, [r7, #6]
 8007a7c:	88bb      	ldrh	r3, [r7, #4]
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	8a39      	ldrh	r1, [r7, #16]
 8007a82:	883a      	ldrh	r2, [r7, #0]
 8007a84:	1a8a      	subs	r2, r1, r2
 8007a86:	fb02 f203 	mul.w	r2, r2, r3
 8007a8a:	8879      	ldrh	r1, [r7, #2]
 8007a8c:	88bb      	ldrh	r3, [r7, #4]
 8007a8e:	1acb      	subs	r3, r1, r3
 8007a90:	fb92 f3f3 	sdiv	r3, r2, r3
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	883b      	ldrh	r3, [r7, #0]
 8007a98:	4413      	add	r3, r2
 8007a9a:	b29b      	uxth	r3, r3
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bc90      	pop	{r4, r7}
 8007aa4:	4770      	bx	lr
	...

08007aa8 <buttonCounterIncrease>:
uint8_t selectedLcd=0,selectedLcdItem=0;
/* @brief count pressed button use in tim interrupt
 * @param none
 * @return none
 * */
void buttonCounterIncrease(void){
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	af00      	add	r7, sp, #0
	if(!READ_SELECT_BTN)selectbtncounter++;
 8007aac:	2102      	movs	r1, #2
 8007aae:	4816      	ldr	r0, [pc, #88]	; (8007b08 <buttonCounterIncrease+0x60>)
 8007ab0:	f7fa fa8a 	bl	8001fc8 <HAL_GPIO_ReadPin>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d106      	bne.n	8007ac8 <buttonCounterIncrease+0x20>
 8007aba:	4b14      	ldr	r3, [pc, #80]	; (8007b0c <buttonCounterIncrease+0x64>)
 8007abc:	881b      	ldrh	r3, [r3, #0]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	4b12      	ldr	r3, [pc, #72]	; (8007b0c <buttonCounterIncrease+0x64>)
 8007ac4:	801a      	strh	r2, [r3, #0]
	else if(!READ_PLUS_BTN)plusbtncounter++;
	else if(!READ_MINUS_BTN)minusbtncounter++;
}
 8007ac6:	e01c      	b.n	8007b02 <buttonCounterIncrease+0x5a>
	else if(!READ_PLUS_BTN)plusbtncounter++;
 8007ac8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007acc:	4810      	ldr	r0, [pc, #64]	; (8007b10 <buttonCounterIncrease+0x68>)
 8007ace:	f7fa fa7b 	bl	8001fc8 <HAL_GPIO_ReadPin>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d106      	bne.n	8007ae6 <buttonCounterIncrease+0x3e>
 8007ad8:	4b0e      	ldr	r3, [pc, #56]	; (8007b14 <buttonCounterIncrease+0x6c>)
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	3301      	adds	r3, #1
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	4b0c      	ldr	r3, [pc, #48]	; (8007b14 <buttonCounterIncrease+0x6c>)
 8007ae2:	801a      	strh	r2, [r3, #0]
}
 8007ae4:	e00d      	b.n	8007b02 <buttonCounterIncrease+0x5a>
	else if(!READ_MINUS_BTN)minusbtncounter++;
 8007ae6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007aea:	4809      	ldr	r0, [pc, #36]	; (8007b10 <buttonCounterIncrease+0x68>)
 8007aec:	f7fa fa6c 	bl	8001fc8 <HAL_GPIO_ReadPin>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d105      	bne.n	8007b02 <buttonCounterIncrease+0x5a>
 8007af6:	4b08      	ldr	r3, [pc, #32]	; (8007b18 <buttonCounterIncrease+0x70>)
 8007af8:	881b      	ldrh	r3, [r3, #0]
 8007afa:	3301      	adds	r3, #1
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	4b06      	ldr	r3, [pc, #24]	; (8007b18 <buttonCounterIncrease+0x70>)
 8007b00:	801a      	strh	r2, [r3, #0]
}
 8007b02:	bf00      	nop
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	40022000 	.word	0x40022000
 8007b0c:	20006360 	.word	0x20006360
 8007b10:	40020400 	.word	0x40020400
 8007b14:	20006362 	.word	0x20006362
 8007b18:	20006364 	.word	0x20006364

08007b1c <selectButton_Listenner_For_MenuControl>:
 * @param none
 * @return 0 -> didnt press
 * @return 1 -> short pressed
 * @return 2 -> long pressed
 * */
uint8_t selectButton_Listenner_For_MenuControl(void) {
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	af00      	add	r7, sp, #0
	if(READ_SELECT_BTN){
 8007b20:	2102      	movs	r1, #2
 8007b22:	480f      	ldr	r0, [pc, #60]	; (8007b60 <selectButton_Listenner_For_MenuControl+0x44>)
 8007b24:	f7fa fa50 	bl	8001fc8 <HAL_GPIO_ReadPin>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d015      	beq.n	8007b5a <selectButton_Listenner_For_MenuControl+0x3e>
		if(selectbtncounter>=BTN_LONG_PRESS_TIME){ selectbtncounter=0;return 2;}
 8007b2e:	4b0d      	ldr	r3, [pc, #52]	; (8007b64 <selectButton_Listenner_For_MenuControl+0x48>)
 8007b30:	881b      	ldrh	r3, [r3, #0]
 8007b32:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007b36:	d304      	bcc.n	8007b42 <selectButton_Listenner_For_MenuControl+0x26>
 8007b38:	4b0a      	ldr	r3, [pc, #40]	; (8007b64 <selectButton_Listenner_For_MenuControl+0x48>)
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	801a      	strh	r2, [r3, #0]
 8007b3e:	2302      	movs	r3, #2
 8007b40:	e00c      	b.n	8007b5c <selectButton_Listenner_For_MenuControl+0x40>
		if(selectbtncounter>=BTN_SHORT_PRESS_TIME){ selectbtncounter=0;return 1;}
 8007b42:	4b08      	ldr	r3, [pc, #32]	; (8007b64 <selectButton_Listenner_For_MenuControl+0x48>)
 8007b44:	881b      	ldrh	r3, [r3, #0]
 8007b46:	2b09      	cmp	r3, #9
 8007b48:	d904      	bls.n	8007b54 <selectButton_Listenner_For_MenuControl+0x38>
 8007b4a:	4b06      	ldr	r3, [pc, #24]	; (8007b64 <selectButton_Listenner_For_MenuControl+0x48>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	801a      	strh	r2, [r3, #0]
 8007b50:	2301      	movs	r3, #1
 8007b52:	e003      	b.n	8007b5c <selectButton_Listenner_For_MenuControl+0x40>
		selectbtncounter=0;
 8007b54:	4b03      	ldr	r3, [pc, #12]	; (8007b64 <selectButton_Listenner_For_MenuControl+0x48>)
 8007b56:	2200      	movs	r2, #0
 8007b58:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	40022000 	.word	0x40022000
 8007b64:	20006360 	.word	0x20006360

08007b68 <plusButton_Listenner_For_MenuControl>:
 * @param none
 * @return 0 -> didnt press
 * @return 1 -> short pressed
 * @return 2 -> long pressed
 * */
uint8_t plusButton_Listenner_For_MenuControl(void) {
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	af00      	add	r7, sp, #0

	if(READ_PLUS_BTN){
 8007b6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007b70:	480f      	ldr	r0, [pc, #60]	; (8007bb0 <plusButton_Listenner_For_MenuControl+0x48>)
 8007b72:	f7fa fa29 	bl	8001fc8 <HAL_GPIO_ReadPin>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d015      	beq.n	8007ba8 <plusButton_Listenner_For_MenuControl+0x40>
		if(plusbtncounter>=BTN_LONG_PRESS_TIME){ plusbtncounter=0;return 2;}
 8007b7c:	4b0d      	ldr	r3, [pc, #52]	; (8007bb4 <plusButton_Listenner_For_MenuControl+0x4c>)
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007b84:	d304      	bcc.n	8007b90 <plusButton_Listenner_For_MenuControl+0x28>
 8007b86:	4b0b      	ldr	r3, [pc, #44]	; (8007bb4 <plusButton_Listenner_For_MenuControl+0x4c>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	801a      	strh	r2, [r3, #0]
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	e00c      	b.n	8007baa <plusButton_Listenner_For_MenuControl+0x42>
		if(plusbtncounter>=BTN_SHORT_PRESS_TIME){ plusbtncounter=0;return 1;}
 8007b90:	4b08      	ldr	r3, [pc, #32]	; (8007bb4 <plusButton_Listenner_For_MenuControl+0x4c>)
 8007b92:	881b      	ldrh	r3, [r3, #0]
 8007b94:	2b09      	cmp	r3, #9
 8007b96:	d904      	bls.n	8007ba2 <plusButton_Listenner_For_MenuControl+0x3a>
 8007b98:	4b06      	ldr	r3, [pc, #24]	; (8007bb4 <plusButton_Listenner_For_MenuControl+0x4c>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	801a      	strh	r2, [r3, #0]
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e003      	b.n	8007baa <plusButton_Listenner_For_MenuControl+0x42>
		plusbtncounter=0;
 8007ba2:	4b04      	ldr	r3, [pc, #16]	; (8007bb4 <plusButton_Listenner_For_MenuControl+0x4c>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	40020400 	.word	0x40020400
 8007bb4:	20006362 	.word	0x20006362

08007bb8 <minusButton_Listenner_For_MenuControl>:
 * @param none
 * @return 0 -> didnt press
 * @return 1 -> short pressed
 * @return 2 -> long pressed
 * */
uint8_t minusButton_Listenner_For_MenuControl(void) {
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	af00      	add	r7, sp, #0
	if(READ_MINUS_BTN){
 8007bbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007bc0:	480f      	ldr	r0, [pc, #60]	; (8007c00 <minusButton_Listenner_For_MenuControl+0x48>)
 8007bc2:	f7fa fa01 	bl	8001fc8 <HAL_GPIO_ReadPin>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d015      	beq.n	8007bf8 <minusButton_Listenner_For_MenuControl+0x40>
		if(minusbtncounter>=BTN_LONG_PRESS_TIME){ minusbtncounter=0;return 2;}
 8007bcc:	4b0d      	ldr	r3, [pc, #52]	; (8007c04 <minusButton_Listenner_For_MenuControl+0x4c>)
 8007bce:	881b      	ldrh	r3, [r3, #0]
 8007bd0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007bd4:	d304      	bcc.n	8007be0 <minusButton_Listenner_For_MenuControl+0x28>
 8007bd6:	4b0b      	ldr	r3, [pc, #44]	; (8007c04 <minusButton_Listenner_For_MenuControl+0x4c>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	801a      	strh	r2, [r3, #0]
 8007bdc:	2302      	movs	r3, #2
 8007bde:	e00c      	b.n	8007bfa <minusButton_Listenner_For_MenuControl+0x42>
		if(minusbtncounter>=BTN_SHORT_PRESS_TIME){ minusbtncounter=0;return 1;}
 8007be0:	4b08      	ldr	r3, [pc, #32]	; (8007c04 <minusButton_Listenner_For_MenuControl+0x4c>)
 8007be2:	881b      	ldrh	r3, [r3, #0]
 8007be4:	2b09      	cmp	r3, #9
 8007be6:	d904      	bls.n	8007bf2 <minusButton_Listenner_For_MenuControl+0x3a>
 8007be8:	4b06      	ldr	r3, [pc, #24]	; (8007c04 <minusButton_Listenner_For_MenuControl+0x4c>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	801a      	strh	r2, [r3, #0]
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e003      	b.n	8007bfa <minusButton_Listenner_For_MenuControl+0x42>
		minusbtncounter=0;
 8007bf2:	4b04      	ldr	r3, [pc, #16]	; (8007c04 <minusButton_Listenner_For_MenuControl+0x4c>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	40020400 	.word	0x40020400
 8007c04:	20006364 	.word	0x20006364

08007c08 <btnParameterInit>:
/* @brief drivers parameter values initalize
 * @param none
 * @return none
 * */
void btnParameterInit(void){
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&BTNCOUNTER);
 8007c0c:	4811      	ldr	r0, [pc, #68]	; (8007c54 <btnParameterInit+0x4c>)
 8007c0e:	f7fb ff9d 	bl	8003b4c <HAL_TIM_Base_Start_IT>
	drv1.angle=0;
 8007c12:	4b11      	ldr	r3, [pc, #68]	; (8007c58 <btnParameterInit+0x50>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	809a      	strh	r2, [r3, #4]
	drv1.pid_kd=0;
 8007c18:	4b0f      	ldr	r3, [pc, #60]	; (8007c58 <btnParameterInit+0x50>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	701a      	strb	r2, [r3, #0]
	drv1.pid_ki=0;
 8007c1e:	4b0e      	ldr	r3, [pc, #56]	; (8007c58 <btnParameterInit+0x50>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	705a      	strb	r2, [r3, #1]
	drv1.pid_kp=0;
 8007c24:	4b0c      	ldr	r3, [pc, #48]	; (8007c58 <btnParameterInit+0x50>)
 8007c26:	2200      	movs	r2, #0
 8007c28:	709a      	strb	r2, [r3, #2]
	drv1.factor=0;
 8007c2a:	4b0b      	ldr	r3, [pc, #44]	; (8007c58 <btnParameterInit+0x50>)
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	70da      	strb	r2, [r3, #3]
	drv2.angle=0;
 8007c30:	4b0a      	ldr	r3, [pc, #40]	; (8007c5c <btnParameterInit+0x54>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	809a      	strh	r2, [r3, #4]
	drv2.pid_kd=0;
 8007c36:	4b09      	ldr	r3, [pc, #36]	; (8007c5c <btnParameterInit+0x54>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	701a      	strb	r2, [r3, #0]
	drv2.pid_ki=0;
 8007c3c:	4b07      	ldr	r3, [pc, #28]	; (8007c5c <btnParameterInit+0x54>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	705a      	strb	r2, [r3, #1]
	drv2.pid_kp=0;
 8007c42:	4b06      	ldr	r3, [pc, #24]	; (8007c5c <btnParameterInit+0x54>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	709a      	strb	r2, [r3, #2]
	drv2.factor=0;
 8007c48:	4b04      	ldr	r3, [pc, #16]	; (8007c5c <btnParameterInit+0x54>)
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	70da      	strb	r2, [r3, #3]
}
 8007c4e:	bf00      	nop
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	20006584 	.word	0x20006584
 8007c58:	2000664c 	.word	0x2000664c
 8007c5c:	20006654 	.word	0x20006654

08007c60 <setDriver1AngleValue>:
/* @brief set the angle to motor driver 1 interface
 * @param angle -> driver angle value
 * @return none
 * */
void setDriver1AngleValue(uint16_t angle){
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	4603      	mov	r3, r0
 8007c68:	80fb      	strh	r3, [r7, #6]
	drv1.angle=angle;
 8007c6a:	4a04      	ldr	r2, [pc, #16]	; (8007c7c <setDriver1AngleValue+0x1c>)
 8007c6c:	88fb      	ldrh	r3, [r7, #6]
 8007c6e:	8093      	strh	r3, [r2, #4]
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	2000664c 	.word	0x2000664c

08007c80 <setDriver2AngleValue>:
/* @brief set the angle to motor driver 2 interface
 * @param angle -> driver angle value
 * @return none
 * */
void setDriver2AngleValue(uint16_t angle){
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	4603      	mov	r3, r0
 8007c88:	80fb      	strh	r3, [r7, #6]
	drv2.angle=angle;
 8007c8a:	4a04      	ldr	r2, [pc, #16]	; (8007c9c <setDriver2AngleValue+0x1c>)
 8007c8c:	88fb      	ldrh	r3, [r7, #6]
 8007c8e:	8093      	strh	r3, [r2, #4]
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr
 8007c9c:	20006654 	.word	0x20006654

08007ca0 <buttonController>:
/* @brief controlling and sending values of drivers
 * @param none
 * @return none
 * */
void buttonController(void){
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	af00      	add	r7, sp, #0
	static bool selectedMDI=true; //selected motor driver interface
	static uint8_t selectBtnListenner=0,plusBtnListenner=0,minusBtnListenner=0;
	static item=0;
	if(selectedMDI){
 8007ca4:	4b98      	ldr	r3, [pc, #608]	; (8007f08 <buttonController+0x268>)
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 80be 	beq.w	8007e2a <buttonController+0x18a>
		if(2==selectBtnListenner){ selectedMDI=false; selectedLcd=1; item=0;}
 8007cae:	4b97      	ldr	r3, [pc, #604]	; (8007f0c <buttonController+0x26c>)
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d108      	bne.n	8007cc8 <buttonController+0x28>
 8007cb6:	4b94      	ldr	r3, [pc, #592]	; (8007f08 <buttonController+0x268>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	701a      	strb	r2, [r3, #0]
 8007cbc:	4b94      	ldr	r3, [pc, #592]	; (8007f10 <buttonController+0x270>)
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	701a      	strb	r2, [r3, #0]
 8007cc2:	4b94      	ldr	r3, [pc, #592]	; (8007f14 <buttonController+0x274>)
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	601a      	str	r2, [r3, #0]
		if(1==selectBtnListenner){
 8007cc8:	4b90      	ldr	r3, [pc, #576]	; (8007f0c <buttonController+0x26c>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d110      	bne.n	8007cf2 <buttonController+0x52>
			if(item<ITEM_MAX)item++;
 8007cd0:	4b90      	ldr	r3, [pc, #576]	; (8007f14 <buttonController+0x274>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	dc05      	bgt.n	8007ce4 <buttonController+0x44>
 8007cd8:	4b8e      	ldr	r3, [pc, #568]	; (8007f14 <buttonController+0x274>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	4a8d      	ldr	r2, [pc, #564]	; (8007f14 <buttonController+0x274>)
 8007ce0:	6013      	str	r3, [r2, #0]
 8007ce2:	e006      	b.n	8007cf2 <buttonController+0x52>
			else if(item==ITEM_MAX)item=0;
 8007ce4:	4b8b      	ldr	r3, [pc, #556]	; (8007f14 <buttonController+0x274>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2b03      	cmp	r3, #3
 8007cea:	d102      	bne.n	8007cf2 <buttonController+0x52>
 8007cec:	4b89      	ldr	r3, [pc, #548]	; (8007f14 <buttonController+0x274>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	601a      	str	r2, [r3, #0]
		}
		if(2==plusBtnListenner)selectedLcdItem=0;
 8007cf2:	4b89      	ldr	r3, [pc, #548]	; (8007f18 <buttonController+0x278>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d102      	bne.n	8007d00 <buttonController+0x60>
 8007cfa:	4b88      	ldr	r3, [pc, #544]	; (8007f1c <buttonController+0x27c>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	701a      	strb	r2, [r3, #0]
		if(1==plusBtnListenner){
 8007d00:	4b85      	ldr	r3, [pc, #532]	; (8007f18 <buttonController+0x278>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d142      	bne.n	8007d8e <buttonController+0xee>
			switch(item){
 8007d08:	4b82      	ldr	r3, [pc, #520]	; (8007f14 <buttonController+0x274>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d83e      	bhi.n	8007d8e <buttonController+0xee>
 8007d10:	a201      	add	r2, pc, #4	; (adr r2, 8007d18 <buttonController+0x78>)
 8007d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d16:	bf00      	nop
 8007d18:	08007d29 	.word	0x08007d29
 8007d1c:	08007d3f 	.word	0x08007d3f
 8007d20:	08007d55 	.word	0x08007d55
 8007d24:	08007d6b 	.word	0x08007d6b
			case 0: if(drv1.pid_kd<255) drv1.pid_kd++; break;
 8007d28:	4b7d      	ldr	r3, [pc, #500]	; (8007f20 <buttonController+0x280>)
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	2bff      	cmp	r3, #255	; 0xff
 8007d2e:	d027      	beq.n	8007d80 <buttonController+0xe0>
 8007d30:	4b7b      	ldr	r3, [pc, #492]	; (8007f20 <buttonController+0x280>)
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	3301      	adds	r3, #1
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	4b79      	ldr	r3, [pc, #484]	; (8007f20 <buttonController+0x280>)
 8007d3a:	701a      	strb	r2, [r3, #0]
 8007d3c:	e020      	b.n	8007d80 <buttonController+0xe0>
			case 1: if(drv1.pid_ki<255) drv1.pid_ki++; break;
 8007d3e:	4b78      	ldr	r3, [pc, #480]	; (8007f20 <buttonController+0x280>)
 8007d40:	785b      	ldrb	r3, [r3, #1]
 8007d42:	2bff      	cmp	r3, #255	; 0xff
 8007d44:	d01e      	beq.n	8007d84 <buttonController+0xe4>
 8007d46:	4b76      	ldr	r3, [pc, #472]	; (8007f20 <buttonController+0x280>)
 8007d48:	785b      	ldrb	r3, [r3, #1]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	4b74      	ldr	r3, [pc, #464]	; (8007f20 <buttonController+0x280>)
 8007d50:	705a      	strb	r2, [r3, #1]
 8007d52:	e017      	b.n	8007d84 <buttonController+0xe4>
			case 2: if(drv1.pid_kp<255) drv1.pid_kp++; break;
 8007d54:	4b72      	ldr	r3, [pc, #456]	; (8007f20 <buttonController+0x280>)
 8007d56:	789b      	ldrb	r3, [r3, #2]
 8007d58:	2bff      	cmp	r3, #255	; 0xff
 8007d5a:	d015      	beq.n	8007d88 <buttonController+0xe8>
 8007d5c:	4b70      	ldr	r3, [pc, #448]	; (8007f20 <buttonController+0x280>)
 8007d5e:	789b      	ldrb	r3, [r3, #2]
 8007d60:	3301      	adds	r3, #1
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	4b6e      	ldr	r3, [pc, #440]	; (8007f20 <buttonController+0x280>)
 8007d66:	709a      	strb	r2, [r3, #2]
 8007d68:	e00e      	b.n	8007d88 <buttonController+0xe8>
			case 3: if(drv1.factor<255) drv1.factor++; break;
 8007d6a:	4b6d      	ldr	r3, [pc, #436]	; (8007f20 <buttonController+0x280>)
 8007d6c:	78db      	ldrb	r3, [r3, #3]
 8007d6e:	2bff      	cmp	r3, #255	; 0xff
 8007d70:	d00c      	beq.n	8007d8c <buttonController+0xec>
 8007d72:	4b6b      	ldr	r3, [pc, #428]	; (8007f20 <buttonController+0x280>)
 8007d74:	78db      	ldrb	r3, [r3, #3]
 8007d76:	3301      	adds	r3, #1
 8007d78:	b2da      	uxtb	r2, r3
 8007d7a:	4b69      	ldr	r3, [pc, #420]	; (8007f20 <buttonController+0x280>)
 8007d7c:	70da      	strb	r2, [r3, #3]
 8007d7e:	e005      	b.n	8007d8c <buttonController+0xec>
			case 0: if(drv1.pid_kd<255) drv1.pid_kd++; break;
 8007d80:	bf00      	nop
 8007d82:	e004      	b.n	8007d8e <buttonController+0xee>
			case 1: if(drv1.pid_ki<255) drv1.pid_ki++; break;
 8007d84:	bf00      	nop
 8007d86:	e002      	b.n	8007d8e <buttonController+0xee>
			case 2: if(drv1.pid_kp<255) drv1.pid_kp++; break;
 8007d88:	bf00      	nop
 8007d8a:	e000      	b.n	8007d8e <buttonController+0xee>
			case 3: if(drv1.factor<255) drv1.factor++; break;
 8007d8c:	bf00      	nop
			}
		}
		if(2==minusBtnListenner)selectedLcdItem=1;
 8007d8e:	4b65      	ldr	r3, [pc, #404]	; (8007f24 <buttonController+0x284>)
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d102      	bne.n	8007d9c <buttonController+0xfc>
 8007d96:	4b61      	ldr	r3, [pc, #388]	; (8007f1c <buttonController+0x27c>)
 8007d98:	2201      	movs	r2, #1
 8007d9a:	701a      	strb	r2, [r3, #0]
		if(1==minusBtnListenner){
 8007d9c:	4b61      	ldr	r3, [pc, #388]	; (8007f24 <buttonController+0x284>)
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	f040 811a 	bne.w	8007fda <buttonController+0x33a>
			switch(item){
 8007da6:	4b5b      	ldr	r3, [pc, #364]	; (8007f14 <buttonController+0x274>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	f200 8115 	bhi.w	8007fda <buttonController+0x33a>
 8007db0:	a201      	add	r2, pc, #4	; (adr r2, 8007db8 <buttonController+0x118>)
 8007db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db6:	bf00      	nop
 8007db8:	08007dc9 	.word	0x08007dc9
 8007dbc:	08007de1 	.word	0x08007de1
 8007dc0:	08007df9 	.word	0x08007df9
 8007dc4:	08007e11 	.word	0x08007e11
			case 0: if(drv1.pid_kd>0) drv1.pid_kd--; break;
 8007dc8:	4b55      	ldr	r3, [pc, #340]	; (8007f20 <buttonController+0x280>)
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f000 80f5 	beq.w	8007fbc <buttonController+0x31c>
 8007dd2:	4b53      	ldr	r3, [pc, #332]	; (8007f20 <buttonController+0x280>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	4b51      	ldr	r3, [pc, #324]	; (8007f20 <buttonController+0x280>)
 8007ddc:	701a      	strb	r2, [r3, #0]
 8007dde:	e0ed      	b.n	8007fbc <buttonController+0x31c>
			case 1: if(drv1.pid_ki>0) drv1.pid_ki--; break;
 8007de0:	4b4f      	ldr	r3, [pc, #316]	; (8007f20 <buttonController+0x280>)
 8007de2:	785b      	ldrb	r3, [r3, #1]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 80eb 	beq.w	8007fc0 <buttonController+0x320>
 8007dea:	4b4d      	ldr	r3, [pc, #308]	; (8007f20 <buttonController+0x280>)
 8007dec:	785b      	ldrb	r3, [r3, #1]
 8007dee:	3b01      	subs	r3, #1
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	4b4b      	ldr	r3, [pc, #300]	; (8007f20 <buttonController+0x280>)
 8007df4:	705a      	strb	r2, [r3, #1]
 8007df6:	e0e3      	b.n	8007fc0 <buttonController+0x320>
			case 2: if(drv1.pid_kp>0) drv1.pid_kp--; break;
 8007df8:	4b49      	ldr	r3, [pc, #292]	; (8007f20 <buttonController+0x280>)
 8007dfa:	789b      	ldrb	r3, [r3, #2]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 80e1 	beq.w	8007fc4 <buttonController+0x324>
 8007e02:	4b47      	ldr	r3, [pc, #284]	; (8007f20 <buttonController+0x280>)
 8007e04:	789b      	ldrb	r3, [r3, #2]
 8007e06:	3b01      	subs	r3, #1
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	4b45      	ldr	r3, [pc, #276]	; (8007f20 <buttonController+0x280>)
 8007e0c:	709a      	strb	r2, [r3, #2]
 8007e0e:	e0d9      	b.n	8007fc4 <buttonController+0x324>
			case 3: if(drv1.factor>0) drv1.factor--; break;
 8007e10:	4b43      	ldr	r3, [pc, #268]	; (8007f20 <buttonController+0x280>)
 8007e12:	78db      	ldrb	r3, [r3, #3]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f000 80d7 	beq.w	8007fc8 <buttonController+0x328>
 8007e1a:	4b41      	ldr	r3, [pc, #260]	; (8007f20 <buttonController+0x280>)
 8007e1c:	78db      	ldrb	r3, [r3, #3]
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	b2da      	uxtb	r2, r3
 8007e22:	4b3f      	ldr	r3, [pc, #252]	; (8007f20 <buttonController+0x280>)
 8007e24:	70da      	strb	r2, [r3, #3]
 8007e26:	bf00      	nop
 8007e28:	e0ce      	b.n	8007fc8 <buttonController+0x328>
			}
		}
	}
	else{
		if(2==selectBtnListenner){ selectedMDI=true; selectedLcd=0; item=0;}
 8007e2a:	4b38      	ldr	r3, [pc, #224]	; (8007f0c <buttonController+0x26c>)
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d108      	bne.n	8007e44 <buttonController+0x1a4>
 8007e32:	4b35      	ldr	r3, [pc, #212]	; (8007f08 <buttonController+0x268>)
 8007e34:	2201      	movs	r2, #1
 8007e36:	701a      	strb	r2, [r3, #0]
 8007e38:	4b35      	ldr	r3, [pc, #212]	; (8007f10 <buttonController+0x270>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	701a      	strb	r2, [r3, #0]
 8007e3e:	4b35      	ldr	r3, [pc, #212]	; (8007f14 <buttonController+0x274>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	601a      	str	r2, [r3, #0]
		if(1==selectBtnListenner){
 8007e44:	4b31      	ldr	r3, [pc, #196]	; (8007f0c <buttonController+0x26c>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d110      	bne.n	8007e6e <buttonController+0x1ce>
			if(item<ITEM_MAX)item++;
 8007e4c:	4b31      	ldr	r3, [pc, #196]	; (8007f14 <buttonController+0x274>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	dc05      	bgt.n	8007e60 <buttonController+0x1c0>
 8007e54:	4b2f      	ldr	r3, [pc, #188]	; (8007f14 <buttonController+0x274>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	4a2e      	ldr	r2, [pc, #184]	; (8007f14 <buttonController+0x274>)
 8007e5c:	6013      	str	r3, [r2, #0]
 8007e5e:	e006      	b.n	8007e6e <buttonController+0x1ce>
			else if(item==ITEM_MAX)item=0;
 8007e60:	4b2c      	ldr	r3, [pc, #176]	; (8007f14 <buttonController+0x274>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b03      	cmp	r3, #3
 8007e66:	d102      	bne.n	8007e6e <buttonController+0x1ce>
 8007e68:	4b2a      	ldr	r3, [pc, #168]	; (8007f14 <buttonController+0x274>)
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	601a      	str	r2, [r3, #0]
		}
		if(2==plusBtnListenner)selectedLcdItem=0;
 8007e6e:	4b2a      	ldr	r3, [pc, #168]	; (8007f18 <buttonController+0x278>)
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d102      	bne.n	8007e7c <buttonController+0x1dc>
 8007e76:	4b29      	ldr	r3, [pc, #164]	; (8007f1c <buttonController+0x27c>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	701a      	strb	r2, [r3, #0]
		if(1==plusBtnListenner){
 8007e7c:	4b26      	ldr	r3, [pc, #152]	; (8007f18 <buttonController+0x278>)
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d154      	bne.n	8007f2e <buttonController+0x28e>
			switch(item){
 8007e84:	4b23      	ldr	r3, [pc, #140]	; (8007f14 <buttonController+0x274>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2b03      	cmp	r3, #3
 8007e8a:	d850      	bhi.n	8007f2e <buttonController+0x28e>
 8007e8c:	a201      	add	r2, pc, #4	; (adr r2, 8007e94 <buttonController+0x1f4>)
 8007e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e92:	bf00      	nop
 8007e94:	08007ea5 	.word	0x08007ea5
 8007e98:	08007ebb 	.word	0x08007ebb
 8007e9c:	08007ed1 	.word	0x08007ed1
 8007ea0:	08007ee7 	.word	0x08007ee7
			case 0: if(drv2.pid_kd<255) drv2.pid_kd++; break;
 8007ea4:	4b20      	ldr	r3, [pc, #128]	; (8007f28 <buttonController+0x288>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	2bff      	cmp	r3, #255	; 0xff
 8007eaa:	d027      	beq.n	8007efc <buttonController+0x25c>
 8007eac:	4b1e      	ldr	r3, [pc, #120]	; (8007f28 <buttonController+0x288>)
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	b2da      	uxtb	r2, r3
 8007eb4:	4b1c      	ldr	r3, [pc, #112]	; (8007f28 <buttonController+0x288>)
 8007eb6:	701a      	strb	r2, [r3, #0]
 8007eb8:	e020      	b.n	8007efc <buttonController+0x25c>
			case 1: if(drv2.pid_ki<255) drv2.pid_ki++; break;
 8007eba:	4b1b      	ldr	r3, [pc, #108]	; (8007f28 <buttonController+0x288>)
 8007ebc:	785b      	ldrb	r3, [r3, #1]
 8007ebe:	2bff      	cmp	r3, #255	; 0xff
 8007ec0:	d01e      	beq.n	8007f00 <buttonController+0x260>
 8007ec2:	4b19      	ldr	r3, [pc, #100]	; (8007f28 <buttonController+0x288>)
 8007ec4:	785b      	ldrb	r3, [r3, #1]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	4b17      	ldr	r3, [pc, #92]	; (8007f28 <buttonController+0x288>)
 8007ecc:	705a      	strb	r2, [r3, #1]
 8007ece:	e017      	b.n	8007f00 <buttonController+0x260>
			case 2: if(drv2.pid_kp<255) drv2.pid_kp++; break;
 8007ed0:	4b15      	ldr	r3, [pc, #84]	; (8007f28 <buttonController+0x288>)
 8007ed2:	789b      	ldrb	r3, [r3, #2]
 8007ed4:	2bff      	cmp	r3, #255	; 0xff
 8007ed6:	d015      	beq.n	8007f04 <buttonController+0x264>
 8007ed8:	4b13      	ldr	r3, [pc, #76]	; (8007f28 <buttonController+0x288>)
 8007eda:	789b      	ldrb	r3, [r3, #2]
 8007edc:	3301      	adds	r3, #1
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	4b11      	ldr	r3, [pc, #68]	; (8007f28 <buttonController+0x288>)
 8007ee2:	709a      	strb	r2, [r3, #2]
 8007ee4:	e00e      	b.n	8007f04 <buttonController+0x264>
			case 3: if(drv2.factor<255) drv2.factor++; break;
 8007ee6:	4b10      	ldr	r3, [pc, #64]	; (8007f28 <buttonController+0x288>)
 8007ee8:	78db      	ldrb	r3, [r3, #3]
 8007eea:	2bff      	cmp	r3, #255	; 0xff
 8007eec:	d01e      	beq.n	8007f2c <buttonController+0x28c>
 8007eee:	4b0e      	ldr	r3, [pc, #56]	; (8007f28 <buttonController+0x288>)
 8007ef0:	78db      	ldrb	r3, [r3, #3]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	b2da      	uxtb	r2, r3
 8007ef6:	4b0c      	ldr	r3, [pc, #48]	; (8007f28 <buttonController+0x288>)
 8007ef8:	70da      	strb	r2, [r3, #3]
 8007efa:	e017      	b.n	8007f2c <buttonController+0x28c>
			case 0: if(drv2.pid_kd<255) drv2.pid_kd++; break;
 8007efc:	bf00      	nop
 8007efe:	e016      	b.n	8007f2e <buttonController+0x28e>
			case 1: if(drv2.pid_ki<255) drv2.pid_ki++; break;
 8007f00:	bf00      	nop
 8007f02:	e014      	b.n	8007f2e <buttonController+0x28e>
			case 2: if(drv2.pid_kp<255) drv2.pid_kp++; break;
 8007f04:	bf00      	nop
 8007f06:	e012      	b.n	8007f2e <buttonController+0x28e>
 8007f08:	20000010 	.word	0x20000010
 8007f0c:	20006368 	.word	0x20006368
 8007f10:	20006366 	.word	0x20006366
 8007f14:	2000636c 	.word	0x2000636c
 8007f18:	20006370 	.word	0x20006370
 8007f1c:	20006367 	.word	0x20006367
 8007f20:	2000664c 	.word	0x2000664c
 8007f24:	20006371 	.word	0x20006371
 8007f28:	20006654 	.word	0x20006654
			case 3: if(drv2.factor<255) drv2.factor++; break;
 8007f2c:	bf00      	nop
			}
		}
		if(2==minusBtnListenner)selectedLcdItem=1;
 8007f2e:	4b35      	ldr	r3, [pc, #212]	; (8008004 <buttonController+0x364>)
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d102      	bne.n	8007f3c <buttonController+0x29c>
 8007f36:	4b34      	ldr	r3, [pc, #208]	; (8008008 <buttonController+0x368>)
 8007f38:	2201      	movs	r2, #1
 8007f3a:	701a      	strb	r2, [r3, #0]
		if(1==minusBtnListenner){
 8007f3c:	4b31      	ldr	r3, [pc, #196]	; (8008004 <buttonController+0x364>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d14a      	bne.n	8007fda <buttonController+0x33a>
			switch(item){
 8007f44:	4b31      	ldr	r3, [pc, #196]	; (800800c <buttonController+0x36c>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b03      	cmp	r3, #3
 8007f4a:	d846      	bhi.n	8007fda <buttonController+0x33a>
 8007f4c:	a201      	add	r2, pc, #4	; (adr r2, 8007f54 <buttonController+0x2b4>)
 8007f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f52:	bf00      	nop
 8007f54:	08007f65 	.word	0x08007f65
 8007f58:	08007f7b 	.word	0x08007f7b
 8007f5c:	08007f91 	.word	0x08007f91
 8007f60:	08007fa7 	.word	0x08007fa7
			case 0: if(drv2.pid_kd>0) drv2.pid_kd--; break;
 8007f64:	4b2a      	ldr	r3, [pc, #168]	; (8008010 <buttonController+0x370>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d02f      	beq.n	8007fcc <buttonController+0x32c>
 8007f6c:	4b28      	ldr	r3, [pc, #160]	; (8008010 <buttonController+0x370>)
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	3b01      	subs	r3, #1
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	4b26      	ldr	r3, [pc, #152]	; (8008010 <buttonController+0x370>)
 8007f76:	701a      	strb	r2, [r3, #0]
 8007f78:	e028      	b.n	8007fcc <buttonController+0x32c>
			case 1: if(drv2.pid_ki>0) drv2.pid_ki--; break;
 8007f7a:	4b25      	ldr	r3, [pc, #148]	; (8008010 <buttonController+0x370>)
 8007f7c:	785b      	ldrb	r3, [r3, #1]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d026      	beq.n	8007fd0 <buttonController+0x330>
 8007f82:	4b23      	ldr	r3, [pc, #140]	; (8008010 <buttonController+0x370>)
 8007f84:	785b      	ldrb	r3, [r3, #1]
 8007f86:	3b01      	subs	r3, #1
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	4b21      	ldr	r3, [pc, #132]	; (8008010 <buttonController+0x370>)
 8007f8c:	705a      	strb	r2, [r3, #1]
 8007f8e:	e01f      	b.n	8007fd0 <buttonController+0x330>
			case 2: if(drv2.pid_kp>0) drv2.pid_kp--; break;
 8007f90:	4b1f      	ldr	r3, [pc, #124]	; (8008010 <buttonController+0x370>)
 8007f92:	789b      	ldrb	r3, [r3, #2]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d01d      	beq.n	8007fd4 <buttonController+0x334>
 8007f98:	4b1d      	ldr	r3, [pc, #116]	; (8008010 <buttonController+0x370>)
 8007f9a:	789b      	ldrb	r3, [r3, #2]
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	4b1b      	ldr	r3, [pc, #108]	; (8008010 <buttonController+0x370>)
 8007fa2:	709a      	strb	r2, [r3, #2]
 8007fa4:	e016      	b.n	8007fd4 <buttonController+0x334>
			case 3: if(drv2.factor>0) drv2.factor--; break;
 8007fa6:	4b1a      	ldr	r3, [pc, #104]	; (8008010 <buttonController+0x370>)
 8007fa8:	78db      	ldrb	r3, [r3, #3]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d014      	beq.n	8007fd8 <buttonController+0x338>
 8007fae:	4b18      	ldr	r3, [pc, #96]	; (8008010 <buttonController+0x370>)
 8007fb0:	78db      	ldrb	r3, [r3, #3]
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	4b16      	ldr	r3, [pc, #88]	; (8008010 <buttonController+0x370>)
 8007fb8:	70da      	strb	r2, [r3, #3]
 8007fba:	e00d      	b.n	8007fd8 <buttonController+0x338>
			case 0: if(drv1.pid_kd>0) drv1.pid_kd--; break;
 8007fbc:	bf00      	nop
 8007fbe:	e00c      	b.n	8007fda <buttonController+0x33a>
			case 1: if(drv1.pid_ki>0) drv1.pid_ki--; break;
 8007fc0:	bf00      	nop
 8007fc2:	e00a      	b.n	8007fda <buttonController+0x33a>
			case 2: if(drv1.pid_kp>0) drv1.pid_kp--; break;
 8007fc4:	bf00      	nop
 8007fc6:	e008      	b.n	8007fda <buttonController+0x33a>
			case 3: if(drv1.factor>0) drv1.factor--; break;
 8007fc8:	bf00      	nop
 8007fca:	e006      	b.n	8007fda <buttonController+0x33a>
			case 0: if(drv2.pid_kd>0) drv2.pid_kd--; break;
 8007fcc:	bf00      	nop
 8007fce:	e004      	b.n	8007fda <buttonController+0x33a>
			case 1: if(drv2.pid_ki>0) drv2.pid_ki--; break;
 8007fd0:	bf00      	nop
 8007fd2:	e002      	b.n	8007fda <buttonController+0x33a>
			case 2: if(drv2.pid_kp>0) drv2.pid_kp--; break;
 8007fd4:	bf00      	nop
 8007fd6:	e000      	b.n	8007fda <buttonController+0x33a>
			case 3: if(drv2.factor>0) drv2.factor--; break;
 8007fd8:	bf00      	nop
			}
		}
	}

	selectBtnListenner=selectButton_Listenner_For_MenuControl();
 8007fda:	f7ff fd9f 	bl	8007b1c <selectButton_Listenner_For_MenuControl>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	4b0c      	ldr	r3, [pc, #48]	; (8008014 <buttonController+0x374>)
 8007fe4:	701a      	strb	r2, [r3, #0]
	plusBtnListenner=plusButton_Listenner_For_MenuControl();
 8007fe6:	f7ff fdbf 	bl	8007b68 <plusButton_Listenner_For_MenuControl>
 8007fea:	4603      	mov	r3, r0
 8007fec:	461a      	mov	r2, r3
 8007fee:	4b0a      	ldr	r3, [pc, #40]	; (8008018 <buttonController+0x378>)
 8007ff0:	701a      	strb	r2, [r3, #0]
	minusBtnListenner=minusButton_Listenner_For_MenuControl();
 8007ff2:	f7ff fde1 	bl	8007bb8 <minusButton_Listenner_For_MenuControl>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	4b02      	ldr	r3, [pc, #8]	; (8008004 <buttonController+0x364>)
 8007ffc:	701a      	strb	r2, [r3, #0]
	//"drv1= %x - %x - %x - %x\n",drv1.pid_kd,drv1.pid_ki,drv1.pid_kp,drv1.factor
	//"drv2= %x - %x - %x - %x\n",drv2.pid_kd,drv2.pid_ki,drv2.pid_kp,drv2.factor

}
 8007ffe:	bf00      	nop
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	20006371 	.word	0x20006371
 8008008:	20006367 	.word	0x20006367
 800800c:	2000636c 	.word	0x2000636c
 8008010:	20006654 	.word	0x20006654
 8008014:	20006368 	.word	0x20006368
 8008018:	20006370 	.word	0x20006370

0800801c <transmissionDriver1>:
void transmissionDriver1(void){
 800801c:	b590      	push	{r4, r7, lr}
 800801e:	b083      	sub	sp, #12
 8008020:	af02      	add	r7, sp, #8
	MDI_sendDataChannel1(drv1.angle,drv1.pid_kd,drv1.pid_ki,drv1.pid_kp,drv1.factor);
 8008022:	4b09      	ldr	r3, [pc, #36]	; (8008048 <transmissionDriver1+0x2c>)
 8008024:	8898      	ldrh	r0, [r3, #4]
 8008026:	4b08      	ldr	r3, [pc, #32]	; (8008048 <transmissionDriver1+0x2c>)
 8008028:	7819      	ldrb	r1, [r3, #0]
 800802a:	4b07      	ldr	r3, [pc, #28]	; (8008048 <transmissionDriver1+0x2c>)
 800802c:	785a      	ldrb	r2, [r3, #1]
 800802e:	4b06      	ldr	r3, [pc, #24]	; (8008048 <transmissionDriver1+0x2c>)
 8008030:	789c      	ldrb	r4, [r3, #2]
 8008032:	4b05      	ldr	r3, [pc, #20]	; (8008048 <transmissionDriver1+0x2c>)
 8008034:	78db      	ldrb	r3, [r3, #3]
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	4623      	mov	r3, r4
 800803a:	f000 fc73 	bl	8008924 <MDI_sendDataChannel1>
}
 800803e:	bf00      	nop
 8008040:	3704      	adds	r7, #4
 8008042:	46bd      	mov	sp, r7
 8008044:	bd90      	pop	{r4, r7, pc}
 8008046:	bf00      	nop
 8008048:	2000664c 	.word	0x2000664c

0800804c <transmissionDriver2>:
void transmissionDriver2(void){
 800804c:	b590      	push	{r4, r7, lr}
 800804e:	b083      	sub	sp, #12
 8008050:	af02      	add	r7, sp, #8
	MDI_sendDataChannel2(drv2.angle,drv2.pid_kd,drv2.pid_ki,drv2.pid_kp,drv2.factor);
 8008052:	4b09      	ldr	r3, [pc, #36]	; (8008078 <transmissionDriver2+0x2c>)
 8008054:	8898      	ldrh	r0, [r3, #4]
 8008056:	4b08      	ldr	r3, [pc, #32]	; (8008078 <transmissionDriver2+0x2c>)
 8008058:	7819      	ldrb	r1, [r3, #0]
 800805a:	4b07      	ldr	r3, [pc, #28]	; (8008078 <transmissionDriver2+0x2c>)
 800805c:	785a      	ldrb	r2, [r3, #1]
 800805e:	4b06      	ldr	r3, [pc, #24]	; (8008078 <transmissionDriver2+0x2c>)
 8008060:	789c      	ldrb	r4, [r3, #2]
 8008062:	4b05      	ldr	r3, [pc, #20]	; (8008078 <transmissionDriver2+0x2c>)
 8008064:	78db      	ldrb	r3, [r3, #3]
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	4623      	mov	r3, r4
 800806a:	f000 fd3b 	bl	8008ae4 <MDI_sendDataChannel2>
}
 800806e:	bf00      	nop
 8008070:	3704      	adds	r7, #4
 8008072:	46bd      	mov	sp, r7
 8008074:	bd90      	pop	{r4, r7, pc}
 8008076:	bf00      	nop
 8008078:	20006654 	.word	0x20006654

0800807c <getDriver1TransmitVal>:
mD_interface getDriver1TransmitVal(void){
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
	return drv1;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a05      	ldr	r2, [pc, #20]	; (800809c <getDriver1TransmitVal+0x20>)
 8008088:	6811      	ldr	r1, [r2, #0]
 800808a:	6019      	str	r1, [r3, #0]
 800808c:	8892      	ldrh	r2, [r2, #4]
 800808e:	809a      	strh	r2, [r3, #4]
}
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	2000664c 	.word	0x2000664c

080080a0 <getDriver2TransmitVal>:
mD_interface getDriver2TransmitVal(void){
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
	return drv2;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a05      	ldr	r2, [pc, #20]	; (80080c0 <getDriver2TransmitVal+0x20>)
 80080ac:	6811      	ldr	r1, [r2, #0]
 80080ae:	6019      	str	r1, [r3, #0]
 80080b0:	8892      	ldrh	r2, [r2, #4]
 80080b2:	809a      	strh	r2, [r3, #4]
}
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	20006654 	.word	0x20006654

080080c4 <getSelectedLcdVal>:
uint8_t getSelectedLcdVal(void){return selectedLcd;}
 80080c4:	b480      	push	{r7}
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	4b03      	ldr	r3, [pc, #12]	; (80080d8 <getSelectedLcdVal+0x14>)
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	4618      	mov	r0, r3
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	20006366 	.word	0x20006366

080080dc <getSelectedLcdItemVal>:
uint8_t getSelectedLcdItemVal(void){return selectedLcdItem;}
 80080dc:	b480      	push	{r7}
 80080de:	af00      	add	r7, sp, #0
 80080e0:	4b03      	ldr	r3, [pc, #12]	; (80080f0 <getSelectedLcdItemVal+0x14>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	4618      	mov	r0, r3
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	20006367 	.word	0x20006367

080080f4 <lcd_Init>:

/* @brief lcd module initalize
 * @param none
 * @return none
 * */
void lcd_Init(void){
 80080f4:	b580      	push	{r7, lr}
 80080f6:	af00      	add	r7, sp, #0
	LCD_i2cDeviceCheck();
 80080f8:	f000 f958 	bl	80083ac <LCD_i2cDeviceCheck>
	LCD_Init();
 80080fc:	f000 fb92 	bl	8008824 <LCD_Init>
	LCD_BackLight(LCD_BL_ON);
 8008100:	2008      	movs	r0, #8
 8008102:	f000 fb71 	bl	80087e8 <LCD_BackLight>
	LCD_SetCursor(0,0);
 8008106:	2100      	movs	r1, #0
 8008108:	2000      	movs	r0, #0
 800810a:	f000 fa3b 	bl	8008584 <LCD_SetCursor>

	LCD_Send_String("TEST",STR_NOSLIDE);
 800810e:	2100      	movs	r1, #0
 8008110:	4802      	ldr	r0, [pc, #8]	; (800811c <lcd_Init+0x28>)
 8008112:	f000 fa67 	bl	80085e4 <LCD_Send_String>
}
 8008116:	bf00      	nop
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	080095e8 	.word	0x080095e8

08008120 <printToLcdDrv1Receive>:
void printToLcdDrv1Receive(mD_interface gets){
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af02      	add	r7, sp, #8
 8008126:	463b      	mov	r3, r7
 8008128:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SetCursor(1,1);
 800812c:	2101      	movs	r1, #1
 800812e:	2001      	movs	r0, #1
 8008130:	f000 fa28 	bl	8008584 <LCD_SetCursor>
	sprintf(lcdBuff,"Gln1:a:%04d d:%02x",gets.angle,gets.pid_kd);
 8008134:	88bb      	ldrh	r3, [r7, #4]
 8008136:	461a      	mov	r2, r3
 8008138:	783b      	ldrb	r3, [r7, #0]
 800813a:	490f      	ldr	r1, [pc, #60]	; (8008178 <printToLcdDrv1Receive+0x58>)
 800813c:	480f      	ldr	r0, [pc, #60]	; (800817c <printToLcdDrv1Receive+0x5c>)
 800813e:	f000 fe13 	bl	8008d68 <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 8008142:	2100      	movs	r1, #0
 8008144:	480d      	ldr	r0, [pc, #52]	; (800817c <printToLcdDrv1Receive+0x5c>)
 8008146:	f000 fa4d 	bl	80085e4 <LCD_Send_String>
	LCD_SetCursor(2,1);
 800814a:	2101      	movs	r1, #1
 800814c:	2002      	movs	r0, #2
 800814e:	f000 fa19 	bl	8008584 <LCD_SetCursor>
	sprintf(lcdBuff,"i:%02x p:%02x f:%02x",gets.pid_ki,gets.pid_kp,gets.factor);
 8008152:	787b      	ldrb	r3, [r7, #1]
 8008154:	461a      	mov	r2, r3
 8008156:	78bb      	ldrb	r3, [r7, #2]
 8008158:	4619      	mov	r1, r3
 800815a:	78fb      	ldrb	r3, [r7, #3]
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	460b      	mov	r3, r1
 8008160:	4907      	ldr	r1, [pc, #28]	; (8008180 <printToLcdDrv1Receive+0x60>)
 8008162:	4806      	ldr	r0, [pc, #24]	; (800817c <printToLcdDrv1Receive+0x5c>)
 8008164:	f000 fe00 	bl	8008d68 <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 8008168:	2100      	movs	r1, #0
 800816a:	4804      	ldr	r0, [pc, #16]	; (800817c <printToLcdDrv1Receive+0x5c>)
 800816c:	f000 fa3a 	bl	80085e4 <LCD_Send_String>
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	080095f0 	.word	0x080095f0
 800817c:	2000665c 	.word	0x2000665c
 8008180:	08009604 	.word	0x08009604

08008184 <printToLcdDrv1Transmit>:
void printToLcdDrv1Transmit(mD_interface sends){
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af02      	add	r7, sp, #8
 800818a:	463b      	mov	r3, r7
 800818c:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SetCursor(1,1);
 8008190:	2101      	movs	r1, #1
 8008192:	2001      	movs	r0, #1
 8008194:	f000 f9f6 	bl	8008584 <LCD_SetCursor>
	sprintf(lcdBuff,"Gdn1:a:%04d d:%02x",sends.angle,sends.pid_kd);
 8008198:	88bb      	ldrh	r3, [r7, #4]
 800819a:	461a      	mov	r2, r3
 800819c:	783b      	ldrb	r3, [r7, #0]
 800819e:	490f      	ldr	r1, [pc, #60]	; (80081dc <printToLcdDrv1Transmit+0x58>)
 80081a0:	480f      	ldr	r0, [pc, #60]	; (80081e0 <printToLcdDrv1Transmit+0x5c>)
 80081a2:	f000 fde1 	bl	8008d68 <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 80081a6:	2100      	movs	r1, #0
 80081a8:	480d      	ldr	r0, [pc, #52]	; (80081e0 <printToLcdDrv1Transmit+0x5c>)
 80081aa:	f000 fa1b 	bl	80085e4 <LCD_Send_String>
	LCD_SetCursor(2,1);
 80081ae:	2101      	movs	r1, #1
 80081b0:	2002      	movs	r0, #2
 80081b2:	f000 f9e7 	bl	8008584 <LCD_SetCursor>
	sprintf(lcdBuff,"i:%02x p:%02x f:%02x",sends.pid_ki,sends.pid_kp,sends.factor);
 80081b6:	787b      	ldrb	r3, [r7, #1]
 80081b8:	461a      	mov	r2, r3
 80081ba:	78bb      	ldrb	r3, [r7, #2]
 80081bc:	4619      	mov	r1, r3
 80081be:	78fb      	ldrb	r3, [r7, #3]
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	460b      	mov	r3, r1
 80081c4:	4907      	ldr	r1, [pc, #28]	; (80081e4 <printToLcdDrv1Transmit+0x60>)
 80081c6:	4806      	ldr	r0, [pc, #24]	; (80081e0 <printToLcdDrv1Transmit+0x5c>)
 80081c8:	f000 fdce 	bl	8008d68 <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 80081cc:	2100      	movs	r1, #0
 80081ce:	4804      	ldr	r0, [pc, #16]	; (80081e0 <printToLcdDrv1Transmit+0x5c>)
 80081d0:	f000 fa08 	bl	80085e4 <LCD_Send_String>
}
 80081d4:	bf00      	nop
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	0800961c 	.word	0x0800961c
 80081e0:	2000665c 	.word	0x2000665c
 80081e4:	08009604 	.word	0x08009604

080081e8 <printToLcdDrv2Receive>:
void printToLcdDrv2Receive(mD_interface gets){
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af02      	add	r7, sp, #8
 80081ee:	463b      	mov	r3, r7
 80081f0:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SetCursor(1,1);
 80081f4:	2101      	movs	r1, #1
 80081f6:	2001      	movs	r0, #1
 80081f8:	f000 f9c4 	bl	8008584 <LCD_SetCursor>
	sprintf(lcdBuff,"Gln2:a:%04d d:%02x",gets.angle,gets.pid_kd);
 80081fc:	88bb      	ldrh	r3, [r7, #4]
 80081fe:	461a      	mov	r2, r3
 8008200:	783b      	ldrb	r3, [r7, #0]
 8008202:	490f      	ldr	r1, [pc, #60]	; (8008240 <printToLcdDrv2Receive+0x58>)
 8008204:	480f      	ldr	r0, [pc, #60]	; (8008244 <printToLcdDrv2Receive+0x5c>)
 8008206:	f000 fdaf 	bl	8008d68 <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 800820a:	2100      	movs	r1, #0
 800820c:	480d      	ldr	r0, [pc, #52]	; (8008244 <printToLcdDrv2Receive+0x5c>)
 800820e:	f000 f9e9 	bl	80085e4 <LCD_Send_String>
	LCD_SetCursor(2,1);
 8008212:	2101      	movs	r1, #1
 8008214:	2002      	movs	r0, #2
 8008216:	f000 f9b5 	bl	8008584 <LCD_SetCursor>
	sprintf(lcdBuff,"i:%02x p:%02x f:%02x",gets.pid_ki,gets.pid_kp,gets.factor);
 800821a:	787b      	ldrb	r3, [r7, #1]
 800821c:	461a      	mov	r2, r3
 800821e:	78bb      	ldrb	r3, [r7, #2]
 8008220:	4619      	mov	r1, r3
 8008222:	78fb      	ldrb	r3, [r7, #3]
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	460b      	mov	r3, r1
 8008228:	4907      	ldr	r1, [pc, #28]	; (8008248 <printToLcdDrv2Receive+0x60>)
 800822a:	4806      	ldr	r0, [pc, #24]	; (8008244 <printToLcdDrv2Receive+0x5c>)
 800822c:	f000 fd9c 	bl	8008d68 <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 8008230:	2100      	movs	r1, #0
 8008232:	4804      	ldr	r0, [pc, #16]	; (8008244 <printToLcdDrv2Receive+0x5c>)
 8008234:	f000 f9d6 	bl	80085e4 <LCD_Send_String>
}
 8008238:	bf00      	nop
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	08009630 	.word	0x08009630
 8008244:	2000665c 	.word	0x2000665c
 8008248:	08009604 	.word	0x08009604

0800824c <printToLcdDrv2Transmit>:
void printToLcdDrv2Transmit(mD_interface sends){
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af02      	add	r7, sp, #8
 8008252:	463b      	mov	r3, r7
 8008254:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SetCursor(1,1);
 8008258:	2101      	movs	r1, #1
 800825a:	2001      	movs	r0, #1
 800825c:	f000 f992 	bl	8008584 <LCD_SetCursor>
	sprintf(lcdBuff,"Gdn2:a:%04d d:%02x",sends.angle,sends.pid_kd);
 8008260:	88bb      	ldrh	r3, [r7, #4]
 8008262:	461a      	mov	r2, r3
 8008264:	783b      	ldrb	r3, [r7, #0]
 8008266:	490f      	ldr	r1, [pc, #60]	; (80082a4 <printToLcdDrv2Transmit+0x58>)
 8008268:	480f      	ldr	r0, [pc, #60]	; (80082a8 <printToLcdDrv2Transmit+0x5c>)
 800826a:	f000 fd7d 	bl	8008d68 <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 800826e:	2100      	movs	r1, #0
 8008270:	480d      	ldr	r0, [pc, #52]	; (80082a8 <printToLcdDrv2Transmit+0x5c>)
 8008272:	f000 f9b7 	bl	80085e4 <LCD_Send_String>
	LCD_SetCursor(2,1);
 8008276:	2101      	movs	r1, #1
 8008278:	2002      	movs	r0, #2
 800827a:	f000 f983 	bl	8008584 <LCD_SetCursor>
	sprintf(lcdBuff,"i:%02x p:%02x f:%02x",sends.pid_ki,sends.pid_kp,sends.factor);
 800827e:	787b      	ldrb	r3, [r7, #1]
 8008280:	461a      	mov	r2, r3
 8008282:	78bb      	ldrb	r3, [r7, #2]
 8008284:	4619      	mov	r1, r3
 8008286:	78fb      	ldrb	r3, [r7, #3]
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	460b      	mov	r3, r1
 800828c:	4907      	ldr	r1, [pc, #28]	; (80082ac <printToLcdDrv2Transmit+0x60>)
 800828e:	4806      	ldr	r0, [pc, #24]	; (80082a8 <printToLcdDrv2Transmit+0x5c>)
 8008290:	f000 fd6a 	bl	8008d68 <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 8008294:	2100      	movs	r1, #0
 8008296:	4804      	ldr	r0, [pc, #16]	; (80082a8 <printToLcdDrv2Transmit+0x5c>)
 8008298:	f000 f9a4 	bl	80085e4 <LCD_Send_String>
}
 800829c:	bf00      	nop
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	08009644 	.word	0x08009644
 80082a8:	2000665c 	.word	0x2000665c
 80082ac:	08009604 	.word	0x08009604

080082b0 <cleanTheLcd>:
void cleanTheLcd(void){
 80082b0:	b580      	push	{r7, lr}
 80082b2:	af00      	add	r7, sp, #0
	LCD_Clear();
 80082b4:	f000 f952 	bl	800855c <LCD_Clear>
}
 80082b8:	bf00      	nop
 80082ba:	bd80      	pop	{r7, pc}

080082bc <lcdController>:
void lcdController(void){
 80082bc:	b590      	push	{r4, r7, lr}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
	static mD_interface temp;
	static uint8_t itemVal=0,statuVal=0;
	if(0==statuVal){
 80082c2:	4b2f      	ldr	r3, [pc, #188]	; (8008380 <lcdController+0xc4>)
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d125      	bne.n	8008316 <lcdController+0x5a>
		if(0==itemVal){
 80082ca:	4b2e      	ldr	r3, [pc, #184]	; (8008384 <lcdController+0xc8>)
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d110      	bne.n	80082f4 <lcdController+0x38>
			temp=getDriver1TransmitVal();
 80082d2:	4c2d      	ldr	r4, [pc, #180]	; (8008388 <lcdController+0xcc>)
 80082d4:	463b      	mov	r3, r7
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7ff fed0 	bl	800807c <getDriver1TransmitVal>
 80082dc:	4622      	mov	r2, r4
 80082de:	463b      	mov	r3, r7
 80082e0:	6818      	ldr	r0, [r3, #0]
 80082e2:	6010      	str	r0, [r2, #0]
 80082e4:	889b      	ldrh	r3, [r3, #4]
 80082e6:	8093      	strh	r3, [r2, #4]
			printToLcdDrv1Transmit(temp);
 80082e8:	4b27      	ldr	r3, [pc, #156]	; (8008388 <lcdController+0xcc>)
 80082ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80082ee:	f7ff ff49 	bl	8008184 <printToLcdDrv1Transmit>
 80082f2:	e035      	b.n	8008360 <lcdController+0xa4>

		}else{
			temp=getDriver1ReceiveVal();
 80082f4:	4c24      	ldr	r4, [pc, #144]	; (8008388 <lcdController+0xcc>)
 80082f6:	463b      	mov	r3, r7
 80082f8:	4618      	mov	r0, r3
 80082fa:	f000 fcd3 	bl	8008ca4 <getDriver1ReceiveVal>
 80082fe:	4622      	mov	r2, r4
 8008300:	463b      	mov	r3, r7
 8008302:	6818      	ldr	r0, [r3, #0]
 8008304:	6010      	str	r0, [r2, #0]
 8008306:	889b      	ldrh	r3, [r3, #4]
 8008308:	8093      	strh	r3, [r2, #4]
			printToLcdDrv1Receive(temp);
 800830a:	4b1f      	ldr	r3, [pc, #124]	; (8008388 <lcdController+0xcc>)
 800830c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008310:	f7ff ff06 	bl	8008120 <printToLcdDrv1Receive>
 8008314:	e024      	b.n	8008360 <lcdController+0xa4>
		}
	}
	else{
		if(0==itemVal){
 8008316:	4b1b      	ldr	r3, [pc, #108]	; (8008384 <lcdController+0xc8>)
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d110      	bne.n	8008340 <lcdController+0x84>
			temp=getDriver2TransmitVal();
 800831e:	4c1a      	ldr	r4, [pc, #104]	; (8008388 <lcdController+0xcc>)
 8008320:	463b      	mov	r3, r7
 8008322:	4618      	mov	r0, r3
 8008324:	f7ff febc 	bl	80080a0 <getDriver2TransmitVal>
 8008328:	4622      	mov	r2, r4
 800832a:	463b      	mov	r3, r7
 800832c:	6818      	ldr	r0, [r3, #0]
 800832e:	6010      	str	r0, [r2, #0]
 8008330:	889b      	ldrh	r3, [r3, #4]
 8008332:	8093      	strh	r3, [r2, #4]
			printToLcdDrv2Transmit(temp);
 8008334:	4b14      	ldr	r3, [pc, #80]	; (8008388 <lcdController+0xcc>)
 8008336:	e893 0003 	ldmia.w	r3, {r0, r1}
 800833a:	f7ff ff87 	bl	800824c <printToLcdDrv2Transmit>
 800833e:	e00f      	b.n	8008360 <lcdController+0xa4>

		}else{
			temp=getDriver2ReceiveVal();
 8008340:	4c11      	ldr	r4, [pc, #68]	; (8008388 <lcdController+0xcc>)
 8008342:	463b      	mov	r3, r7
 8008344:	4618      	mov	r0, r3
 8008346:	f000 fcbf 	bl	8008cc8 <getDriver2ReceiveVal>
 800834a:	4622      	mov	r2, r4
 800834c:	463b      	mov	r3, r7
 800834e:	6818      	ldr	r0, [r3, #0]
 8008350:	6010      	str	r0, [r2, #0]
 8008352:	889b      	ldrh	r3, [r3, #4]
 8008354:	8093      	strh	r3, [r2, #4]
			printToLcdDrv2Receive(temp);
 8008356:	4b0c      	ldr	r3, [pc, #48]	; (8008388 <lcdController+0xcc>)
 8008358:	e893 0003 	ldmia.w	r3, {r0, r1}
 800835c:	f7ff ff44 	bl	80081e8 <printToLcdDrv2Receive>
		}
	}
	statuVal=getSelectedLcdVal();
 8008360:	f7ff feb0 	bl	80080c4 <getSelectedLcdVal>
 8008364:	4603      	mov	r3, r0
 8008366:	461a      	mov	r2, r3
 8008368:	4b05      	ldr	r3, [pc, #20]	; (8008380 <lcdController+0xc4>)
 800836a:	701a      	strb	r2, [r3, #0]
	itemVal=getSelectedLcdItemVal();
 800836c:	f7ff feb6 	bl	80080dc <getSelectedLcdItemVal>
 8008370:	4603      	mov	r3, r0
 8008372:	461a      	mov	r2, r3
 8008374:	4b03      	ldr	r3, [pc, #12]	; (8008384 <lcdController+0xc8>)
 8008376:	701a      	strb	r2, [r3, #0]
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	bd90      	pop	{r4, r7, pc}
 8008380:	20006372 	.word	0x20006372
 8008384:	20006373 	.word	0x20006373
 8008388:	20006374 	.word	0x20006374

0800838c <hi2cx_define>:
*/
I2C_HandleTypeDef hi2cx;
extern I2C_HandleTypeDef hi2c1; //* Change "hi2c1" like hi2c2, hi2c3... according to which i2c type(i2c1,i2c2...) you use, default is hi2c1.
                                //That I2C_HandleTypeDef hi2c1 comes from main.c*.
static void hi2cx_define(void)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	af00      	add	r7, sp, #0
	hi2cx = hi2c1;	//* Change "hi2c1" like hi2c2, hi2c3... according to which i2c type you use, default is hi2c1.
 8008390:	4a04      	ldr	r2, [pc, #16]	; (80083a4 <hi2cx_define+0x18>)
 8008392:	4b05      	ldr	r3, [pc, #20]	; (80083a8 <hi2cx_define+0x1c>)
 8008394:	4610      	mov	r0, r2
 8008396:	4619      	mov	r1, r3
 8008398:	234c      	movs	r3, #76	; 0x4c
 800839a:	461a      	mov	r2, r3
 800839c:	f000 fcd0 	bl	8008d40 <memcpy>
}
 80083a0:	bf00      	nop
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	20006670 	.word	0x20006670
 80083a8:	20006418 	.word	0x20006418

080083ac <LCD_i2cDeviceCheck>:
/**
*@brief: Lcd i2c device check.
*@retval: none
*/
void LCD_i2cDeviceCheck(void)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	af00      	add	r7, sp, #0
	/* Checks if target device is ready for communication. */
	/* 3 is number of trials, 1000ms is timeout */
	HAL_Delay(50);
 80083b0:	2032      	movs	r0, #50	; 0x32
 80083b2:	f7f8 ff4d 	bl	8001250 <HAL_Delay>
	hi2cx_define();
 80083b6:	f7ff ffe9 	bl	800838c <hi2cx_define>
	while (HAL_I2C_IsDeviceReady(&hi2cx, i2cDeviceAddr, 3, 1000) != HAL_OK) 
 80083ba:	bf00      	nop
 80083bc:	4b06      	ldr	r3, [pc, #24]	; (80083d8 <LCD_i2cDeviceCheck+0x2c>)
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	b299      	uxth	r1, r3
 80083c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80083c6:	2203      	movs	r2, #3
 80083c8:	4804      	ldr	r0, [pc, #16]	; (80083dc <LCD_i2cDeviceCheck+0x30>)
 80083ca:	f7f9 ff99 	bl	8002300 <HAL_I2C_IsDeviceReady>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1f3      	bne.n	80083bc <LCD_i2cDeviceCheck+0x10>
	{	
		
	}
}
 80083d4:	bf00      	nop
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	20000011 	.word	0x20000011
 80083dc:	20006670 	.word	0x20006670

080083e0 <LCD_Set_Command>:
/**
*@brief: Send commands to lcd.
*@retval: none
*/
void LCD_Set_Command(uint8_t cmd)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af02      	add	r7, sp, #8
 80083e6:	4603      	mov	r3, r0
 80083e8:	71fb      	strb	r3, [r7, #7]
	data_M = cmd & Mask_Data;        //Most significant bit
 80083ea:	4b24      	ldr	r3, [pc, #144]	; (800847c <LCD_Set_Command+0x9c>)
 80083ec:	781a      	ldrb	r2, [r3, #0]
 80083ee:	79fb      	ldrb	r3, [r7, #7]
 80083f0:	4013      	ands	r3, r2
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	4b22      	ldr	r3, [pc, #136]	; (8008480 <LCD_Set_Command+0xa0>)
 80083f6:	701a      	strb	r2, [r3, #0]
	data_L = (cmd << 4) & Mask_Data; //Least significant bit
 80083f8:	79fb      	ldrb	r3, [r7, #7]
 80083fa:	011b      	lsls	r3, r3, #4
 80083fc:	b25a      	sxtb	r2, r3
 80083fe:	4b1f      	ldr	r3, [pc, #124]	; (800847c <LCD_Set_Command+0x9c>)
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	b25b      	sxtb	r3, r3
 8008404:	4013      	ands	r3, r2
 8008406:	b25b      	sxtb	r3, r3
 8008408:	b2da      	uxtb	r2, r3
 800840a:	4b1e      	ldr	r3, [pc, #120]	; (8008484 <LCD_Set_Command+0xa4>)
 800840c:	701a      	strb	r2, [r3, #0]
	
	//For backlight On/off
	data_M |= data_BL;
 800840e:	4b1c      	ldr	r3, [pc, #112]	; (8008480 <LCD_Set_Command+0xa0>)
 8008410:	781a      	ldrb	r2, [r3, #0]
 8008412:	4b1d      	ldr	r3, [pc, #116]	; (8008488 <LCD_Set_Command+0xa8>)
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	4313      	orrs	r3, r2
 8008418:	b2da      	uxtb	r2, r3
 800841a:	4b19      	ldr	r3, [pc, #100]	; (8008480 <LCD_Set_Command+0xa0>)
 800841c:	701a      	strb	r2, [r3, #0]
	data_L |= data_BL;
 800841e:	4b19      	ldr	r3, [pc, #100]	; (8008484 <LCD_Set_Command+0xa4>)
 8008420:	781a      	ldrb	r2, [r3, #0]
 8008422:	4b19      	ldr	r3, [pc, #100]	; (8008488 <LCD_Set_Command+0xa8>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	4313      	orrs	r3, r2
 8008428:	b2da      	uxtb	r2, r3
 800842a:	4b16      	ldr	r3, [pc, #88]	; (8008484 <LCD_Set_Command+0xa4>)
 800842c:	701a      	strb	r2, [r3, #0]
	
	data[0] = data_M | LCD_E;  //Enable E pin, RS=0
 800842e:	4b14      	ldr	r3, [pc, #80]	; (8008480 <LCD_Set_Command+0xa0>)
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	f043 0304 	orr.w	r3, r3, #4
 8008436:	b2da      	uxtb	r2, r3
 8008438:	4b14      	ldr	r3, [pc, #80]	; (800848c <LCD_Set_Command+0xac>)
 800843a:	701a      	strb	r2, [r3, #0]
	data[1] = data_M;          //Disable E pin, RS=0
 800843c:	4b10      	ldr	r3, [pc, #64]	; (8008480 <LCD_Set_Command+0xa0>)
 800843e:	781a      	ldrb	r2, [r3, #0]
 8008440:	4b12      	ldr	r3, [pc, #72]	; (800848c <LCD_Set_Command+0xac>)
 8008442:	705a      	strb	r2, [r3, #1]
	data[2] = data_L | LCD_E;
 8008444:	4b0f      	ldr	r3, [pc, #60]	; (8008484 <LCD_Set_Command+0xa4>)
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	f043 0304 	orr.w	r3, r3, #4
 800844c:	b2da      	uxtb	r2, r3
 800844e:	4b0f      	ldr	r3, [pc, #60]	; (800848c <LCD_Set_Command+0xac>)
 8008450:	709a      	strb	r2, [r3, #2]
  data[3] = data_L;
 8008452:	4b0c      	ldr	r3, [pc, #48]	; (8008484 <LCD_Set_Command+0xa4>)
 8008454:	781a      	ldrb	r2, [r3, #0]
 8008456:	4b0d      	ldr	r3, [pc, #52]	; (800848c <LCD_Set_Command+0xac>)
 8008458:	70da      	strb	r2, [r3, #3]
	
	hi2cx_define();	
 800845a:	f7ff ff97 	bl	800838c <hi2cx_define>
	HAL_I2C_Master_Transmit(&hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 800845e:	4b0c      	ldr	r3, [pc, #48]	; (8008490 <LCD_Set_Command+0xb0>)
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	b299      	uxth	r1, r3
 8008464:	23c8      	movs	r3, #200	; 0xc8
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	2304      	movs	r3, #4
 800846a:	4a08      	ldr	r2, [pc, #32]	; (800848c <LCD_Set_Command+0xac>)
 800846c:	4809      	ldr	r0, [pc, #36]	; (8008494 <LCD_Set_Command+0xb4>)
 800846e:	f7f9 fe53 	bl	8002118 <HAL_I2C_Master_Transmit>
}
 8008472:	bf00      	nop
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	20000012 	.word	0x20000012
 8008480:	20006380 	.word	0x20006380
 8008484:	20006381 	.word	0x20006381
 8008488:	20006382 	.word	0x20006382
 800848c:	2000637c 	.word	0x2000637c
 8008490:	20000011 	.word	0x20000011
 8008494:	20006670 	.word	0x20006670

08008498 <LCD_Write_Data>:
/**
*@brief: Write data to lcd.
*@retval: none
*/
void LCD_Write_Data(uint8_t datax)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af02      	add	r7, sp, #8
 800849e:	4603      	mov	r3, r0
 80084a0:	71fb      	strb	r3, [r7, #7]
	data_M = datax & Mask_Data;        //Most significant bit
 80084a2:	4b27      	ldr	r3, [pc, #156]	; (8008540 <LCD_Write_Data+0xa8>)
 80084a4:	781a      	ldrb	r2, [r3, #0]
 80084a6:	79fb      	ldrb	r3, [r7, #7]
 80084a8:	4013      	ands	r3, r2
 80084aa:	b2da      	uxtb	r2, r3
 80084ac:	4b25      	ldr	r3, [pc, #148]	; (8008544 <LCD_Write_Data+0xac>)
 80084ae:	701a      	strb	r2, [r3, #0]
	data_L = (datax << 4) & Mask_Data; //Least significant bit
 80084b0:	79fb      	ldrb	r3, [r7, #7]
 80084b2:	011b      	lsls	r3, r3, #4
 80084b4:	b25a      	sxtb	r2, r3
 80084b6:	4b22      	ldr	r3, [pc, #136]	; (8008540 <LCD_Write_Data+0xa8>)
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	b25b      	sxtb	r3, r3
 80084bc:	4013      	ands	r3, r2
 80084be:	b25b      	sxtb	r3, r3
 80084c0:	b2da      	uxtb	r2, r3
 80084c2:	4b21      	ldr	r3, [pc, #132]	; (8008548 <LCD_Write_Data+0xb0>)
 80084c4:	701a      	strb	r2, [r3, #0]
	
	//For backlight On/off
	data_M |= data_BL;
 80084c6:	4b1f      	ldr	r3, [pc, #124]	; (8008544 <LCD_Write_Data+0xac>)
 80084c8:	781a      	ldrb	r2, [r3, #0]
 80084ca:	4b20      	ldr	r3, [pc, #128]	; (800854c <LCD_Write_Data+0xb4>)
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	4b1c      	ldr	r3, [pc, #112]	; (8008544 <LCD_Write_Data+0xac>)
 80084d4:	701a      	strb	r2, [r3, #0]
	data_L |= data_BL;
 80084d6:	4b1c      	ldr	r3, [pc, #112]	; (8008548 <LCD_Write_Data+0xb0>)
 80084d8:	781a      	ldrb	r2, [r3, #0]
 80084da:	4b1c      	ldr	r3, [pc, #112]	; (800854c <LCD_Write_Data+0xb4>)
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	4313      	orrs	r3, r2
 80084e0:	b2da      	uxtb	r2, r3
 80084e2:	4b19      	ldr	r3, [pc, #100]	; (8008548 <LCD_Write_Data+0xb0>)
 80084e4:	701a      	strb	r2, [r3, #0]
	 	
	data[0] = data_M | LCD_E|LCD_RS;  //Enable E pin, RS=1
 80084e6:	4b17      	ldr	r3, [pc, #92]	; (8008544 <LCD_Write_Data+0xac>)
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	f043 0305 	orr.w	r3, r3, #5
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	4b17      	ldr	r3, [pc, #92]	; (8008550 <LCD_Write_Data+0xb8>)
 80084f2:	701a      	strb	r2, [r3, #0]
	data[1] = data_M | LCD_RS;        //Disable E pin, RS=1
 80084f4:	4b13      	ldr	r3, [pc, #76]	; (8008544 <LCD_Write_Data+0xac>)
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	f043 0301 	orr.w	r3, r3, #1
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	4b14      	ldr	r3, [pc, #80]	; (8008550 <LCD_Write_Data+0xb8>)
 8008500:	705a      	strb	r2, [r3, #1]
	data[2] = data_L | LCD_E|LCD_RS;
 8008502:	4b11      	ldr	r3, [pc, #68]	; (8008548 <LCD_Write_Data+0xb0>)
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	f043 0305 	orr.w	r3, r3, #5
 800850a:	b2da      	uxtb	r2, r3
 800850c:	4b10      	ldr	r3, [pc, #64]	; (8008550 <LCD_Write_Data+0xb8>)
 800850e:	709a      	strb	r2, [r3, #2]
  data[3] = data_L | LCD_RS;  
 8008510:	4b0d      	ldr	r3, [pc, #52]	; (8008548 <LCD_Write_Data+0xb0>)
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	f043 0301 	orr.w	r3, r3, #1
 8008518:	b2da      	uxtb	r2, r3
 800851a:	4b0d      	ldr	r3, [pc, #52]	; (8008550 <LCD_Write_Data+0xb8>)
 800851c:	70da      	strb	r2, [r3, #3]
	
	hi2cx_define();
 800851e:	f7ff ff35 	bl	800838c <hi2cx_define>
	HAL_I2C_Master_Transmit(&hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 8008522:	4b0c      	ldr	r3, [pc, #48]	; (8008554 <LCD_Write_Data+0xbc>)
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	b299      	uxth	r1, r3
 8008528:	23c8      	movs	r3, #200	; 0xc8
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	2304      	movs	r3, #4
 800852e:	4a08      	ldr	r2, [pc, #32]	; (8008550 <LCD_Write_Data+0xb8>)
 8008530:	4809      	ldr	r0, [pc, #36]	; (8008558 <LCD_Write_Data+0xc0>)
 8008532:	f7f9 fdf1 	bl	8002118 <HAL_I2C_Master_Transmit>
}
 8008536:	bf00      	nop
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	20000012 	.word	0x20000012
 8008544:	20006380 	.word	0x20006380
 8008548:	20006381 	.word	0x20006381
 800854c:	20006382 	.word	0x20006382
 8008550:	2000637c 	.word	0x2000637c
 8008554:	20000011 	.word	0x20000011
 8008558:	20006670 	.word	0x20006670

0800855c <LCD_Clear>:
/**
*@brief: Clear lcd display.
*@retval: none
*/
void LCD_Clear(void)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	af00      	add	r7, sp, #0
	LCD_Set_Command(LCD_CLEAR_DISPLAY);
 8008560:	2001      	movs	r0, #1
 8008562:	f7ff ff3d 	bl	80083e0 <LCD_Set_Command>
	HAL_Delay(10);
 8008566:	200a      	movs	r0, #10
 8008568:	f7f8 fe72 	bl	8001250 <HAL_Delay>
	str_len = 0;
 800856c:	4b03      	ldr	r3, [pc, #12]	; (800857c <LCD_Clear+0x20>)
 800856e:	2200      	movs	r2, #0
 8008570:	701a      	strb	r2, [r3, #0]
	line_pos = 1;
 8008572:	4b03      	ldr	r3, [pc, #12]	; (8008580 <LCD_Clear+0x24>)
 8008574:	2201      	movs	r2, #1
 8008576:	701a      	strb	r2, [r3, #0]
}
 8008578:	bf00      	nop
 800857a:	bd80      	pop	{r7, pc}
 800857c:	20006383 	.word	0x20006383
 8008580:	20000013 	.word	0x20000013

08008584 <LCD_SetCursor>:
*@brief: Set lcd cursor position.
*@param: line_x: line no, chr_x: character no.
*@retval: none
*/
void LCD_SetCursor(int line_x, int chr_x)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  line_pos = line_x; //hold line position.	
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	b2da      	uxtb	r2, r3
 8008592:	4b12      	ldr	r3, [pc, #72]	; (80085dc <LCD_SetCursor+0x58>)
 8008594:	701a      	strb	r2, [r3, #0]
	
	if(((line_x >=1 && line_x <= line_MAX) && (chr_x >=1 && chr_x <= chr_MAX)))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	dd1b      	ble.n	80085d4 <LCD_SetCursor+0x50>
 800859c:	2302      	movs	r3, #2
 800859e:	461a      	mov	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4293      	cmp	r3, r2
 80085a4:	dc16      	bgt.n	80085d4 <LCD_SetCursor+0x50>
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	dd13      	ble.n	80085d4 <LCD_SetCursor+0x50>
 80085ac:	2310      	movs	r3, #16
 80085ae:	461a      	mov	r2, r3
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	4293      	cmp	r3, r2
 80085b4:	dc0e      	bgt.n	80085d4 <LCD_SetCursor+0x50>
	{		
		LCD_Set_Command(LCD_SET_DDRAMADDR | Cursor_Data[line_x - 1][chr_x - 1]);		
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	1e5a      	subs	r2, r3, #1
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	3b01      	subs	r3, #1
 80085be:	4908      	ldr	r1, [pc, #32]	; (80085e0 <LCD_SetCursor+0x5c>)
 80085c0:	0112      	lsls	r2, r2, #4
 80085c2:	440a      	add	r2, r1
 80085c4:	4413      	add	r3, r2
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7ff ff06 	bl	80083e0 <LCD_Set_Command>
	}
}
 80085d4:	bf00      	nop
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	20000013 	.word	0x20000013
 80085e0:	0800976c 	.word	0x0800976c

080085e4 <LCD_Send_String>:
*@brief: Send string data to lcd.
*@param: str[]: string array, mode: str slide/noslide.
*@retval: none
*/
void LCD_Send_String(char str[], uint8_t mode)
{	 
 80085e4:	b5b0      	push	{r4, r5, r7, lr}
 80085e6:	b08a      	sub	sp, #40	; 0x28
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	460b      	mov	r3, r1
 80085ee:	70fb      	strb	r3, [r7, #3]
 80085f0:	466b      	mov	r3, sp
 80085f2:	461d      	mov	r5, r3
	char *buffer[BFR_MAX];
 80085f4:	2364      	movs	r3, #100	; 0x64
 80085f6:	3b01      	subs	r3, #1
 80085f8:	61fb      	str	r3, [r7, #28]
 80085fa:	2364      	movs	r3, #100	; 0x64
 80085fc:	b2d9      	uxtb	r1, r3
 80085fe:	f04f 0200 	mov.w	r2, #0
 8008602:	f04f 0300 	mov.w	r3, #0
 8008606:	f04f 0400 	mov.w	r4, #0
 800860a:	0154      	lsls	r4, r2, #5
 800860c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008610:	014b      	lsls	r3, r1, #5
 8008612:	2364      	movs	r3, #100	; 0x64
 8008614:	b2d9      	uxtb	r1, r3
 8008616:	f04f 0200 	mov.w	r2, #0
 800861a:	f04f 0300 	mov.w	r3, #0
 800861e:	f04f 0400 	mov.w	r4, #0
 8008622:	0154      	lsls	r4, r2, #5
 8008624:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008628:	014b      	lsls	r3, r1, #5
 800862a:	2364      	movs	r3, #100	; 0x64
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	3303      	adds	r3, #3
 8008630:	3307      	adds	r3, #7
 8008632:	08db      	lsrs	r3, r3, #3
 8008634:	00db      	lsls	r3, r3, #3
 8008636:	ebad 0d03 	sub.w	sp, sp, r3
 800863a:	466b      	mov	r3, sp
 800863c:	3303      	adds	r3, #3
 800863e:	089b      	lsrs	r3, r3, #2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	61bb      	str	r3, [r7, #24]
	uint8_t i[4] = {chr_MAX,chr_MAX,chr_MAX,chr_MAX}; //i follows the ch position while sliding.
 8008644:	2310      	movs	r3, #16
 8008646:	743b      	strb	r3, [r7, #16]
 8008648:	2310      	movs	r3, #16
 800864a:	747b      	strb	r3, [r7, #17]
 800864c:	2310      	movs	r3, #16
 800864e:	74bb      	strb	r3, [r7, #18]
 8008650:	2310      	movs	r3, #16
 8008652:	74fb      	strb	r3, [r7, #19]
   uint8_t c[4] = {0, 0, 0, 0}; //c follows the each ch of the str buffer while sliding.
 8008654:	2300      	movs	r3, #0
 8008656:	60fb      	str	r3, [r7, #12]
   uint8_t ch_len = 0; //follow the string lenght.
 8008658:	2300      	movs	r3, #0
 800865a:	75fb      	strb	r3, [r7, #23]
  str_len = 0;
 800865c:	4b60      	ldr	r3, [pc, #384]	; (80087e0 <LCD_Send_String+0x1fc>)
 800865e:	2200      	movs	r2, #0
 8008660:	701a      	strb	r2, [r3, #0]
	

	switch(mode)
 8008662:	78fb      	ldrb	r3, [r7, #3]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d01e      	beq.n	80086a6 <LCD_Send_String+0xc2>
 8008668:	2b01      	cmp	r3, #1
 800866a:	d021      	beq.n	80086b0 <LCD_Send_String+0xcc>
 800866c:	e0b2      	b.n	80087d4 <LCD_Send_String+0x1f0>
	{			
		case STR_NOSLIDE:
			
			while (*str) 
			{
				LCD_Write_Data (*str++);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	1c5a      	adds	r2, r3, #1
 8008672:	607a      	str	r2, [r7, #4]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	4618      	mov	r0, r3
 8008678:	f7ff ff0e 	bl	8008498 <LCD_Write_Data>
				str_len++;
 800867c:	4b58      	ldr	r3, [pc, #352]	; (80087e0 <LCD_Send_String+0x1fc>)
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	3301      	adds	r3, #1
 8008682:	b2da      	uxtb	r2, r3
 8008684:	4b56      	ldr	r3, [pc, #344]	; (80087e0 <LCD_Send_String+0x1fc>)
 8008686:	701a      	strb	r2, [r3, #0]
				if(str_len == chr_MAX)
 8008688:	4b55      	ldr	r3, [pc, #340]	; (80087e0 <LCD_Send_String+0x1fc>)
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	2210      	movs	r2, #16
 800868e:	4293      	cmp	r3, r2
 8008690:	d109      	bne.n	80086a6 <LCD_Send_String+0xc2>
				{
					LCD_SetCursor(line_pos + 1, 1);
 8008692:	4b54      	ldr	r3, [pc, #336]	; (80087e4 <LCD_Send_String+0x200>)
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	3301      	adds	r3, #1
 8008698:	2101      	movs	r1, #1
 800869a:	4618      	mov	r0, r3
 800869c:	f7ff ff72 	bl	8008584 <LCD_SetCursor>
					str_len = 0;
 80086a0:	4b4f      	ldr	r3, [pc, #316]	; (80087e0 <LCD_Send_String+0x1fc>)
 80086a2:	2200      	movs	r2, #0
 80086a4:	701a      	strb	r2, [r3, #0]
			while (*str) 
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1df      	bne.n	800866e <LCD_Send_String+0x8a>
				}			
			}	
			
			break;
 80086ae:	e091      	b.n	80087d4 <LCD_Send_String+0x1f0>
		
		case STR_SLIDE:
		
		  for(int a = 0; a < BFR_MAX; a++)
 80086b0:	2300      	movs	r3, #0
 80086b2:	623b      	str	r3, [r7, #32]
 80086b4:	e009      	b.n	80086ca <LCD_Send_String+0xe6>
		  buffer[a]=str++;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	1c5a      	adds	r2, r3, #1
 80086ba:	607a      	str	r2, [r7, #4]
 80086bc:	69ba      	ldr	r2, [r7, #24]
 80086be:	6a39      	ldr	r1, [r7, #32]
 80086c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		  for(int a = 0; a < BFR_MAX; a++)
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	3301      	adds	r3, #1
 80086c8:	623b      	str	r3, [r7, #32]
 80086ca:	2364      	movs	r3, #100	; 0x64
 80086cc:	461a      	mov	r2, r3
 80086ce:	6a3b      	ldr	r3, [r7, #32]
 80086d0:	4293      	cmp	r3, r2
 80086d2:	dbf0      	blt.n	80086b6 <LCD_Send_String+0xd2>
						
			ch_len = strlen(*buffer);
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4618      	mov	r0, r3
 80086da:	f7f7 fd99 	bl	8000210 <strlen>
 80086de:	4603      	mov	r3, r0
 80086e0:	75fb      	strb	r3, [r7, #23]
				 		
			LCD_SetCursor(line_pos, i[line_pos - 1]);	
 80086e2:	4b40      	ldr	r3, [pc, #256]	; (80087e4 <LCD_Send_String+0x200>)
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	461a      	mov	r2, r3
 80086e8:	4b3e      	ldr	r3, [pc, #248]	; (80087e4 <LCD_Send_String+0x200>)
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	3b01      	subs	r3, #1
 80086ee:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80086f2:	440b      	add	r3, r1
 80086f4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80086f8:	4619      	mov	r1, r3
 80086fa:	4610      	mov	r0, r2
 80086fc:	f7ff ff42 	bl	8008584 <LCD_SetCursor>
				  			
			for(int k = c[line_pos - 1];k < ch_len; k++) 
 8008700:	4b38      	ldr	r3, [pc, #224]	; (80087e4 <LCD_Send_String+0x200>)
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	3b01      	subs	r3, #1
 8008706:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800870a:	4413      	add	r3, r2
 800870c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8008710:	627b      	str	r3, [r7, #36]	; 0x24
 8008712:	e00a      	b.n	800872a <LCD_Send_String+0x146>
			LCD_Write_Data (*buffer[k]);
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	4618      	mov	r0, r3
 8008720:	f7ff feba 	bl	8008498 <LCD_Write_Data>
			for(int k = c[line_pos - 1];k < ch_len; k++) 
 8008724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008726:	3301      	adds	r3, #1
 8008728:	627b      	str	r3, [r7, #36]	; 0x24
 800872a:	7dfb      	ldrb	r3, [r7, #23]
 800872c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800872e:	429a      	cmp	r2, r3
 8008730:	dbf0      	blt.n	8008714 <LCD_Send_String+0x130>
								
			i[line_pos - 1]--;
 8008732:	4b2c      	ldr	r3, [pc, #176]	; (80087e4 <LCD_Send_String+0x200>)
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	3b01      	subs	r3, #1
 8008738:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800873c:	441a      	add	r2, r3
 800873e:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8008742:	3a01      	subs	r2, #1
 8008744:	b2d2      	uxtb	r2, r2
 8008746:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800874a:	440b      	add	r3, r1
 800874c:	f803 2c18 	strb.w	r2, [r3, #-24]
      
			if(i[line_pos -1] == 0)
 8008750:	4b24      	ldr	r3, [pc, #144]	; (80087e4 <LCD_Send_String+0x200>)
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	3b01      	subs	r3, #1
 8008756:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800875a:	4413      	add	r3, r2
 800875c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d136      	bne.n	80087d2 <LCD_Send_String+0x1ee>
			{
				i[line_pos - 1] = 1;
 8008764:	4b1f      	ldr	r3, [pc, #124]	; (80087e4 <LCD_Send_String+0x200>)
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	3b01      	subs	r3, #1
 800876a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800876e:	4413      	add	r3, r2
 8008770:	2201      	movs	r2, #1
 8008772:	f803 2c18 	strb.w	r2, [r3, #-24]
				c[line_pos - 1]++;
 8008776:	4b1b      	ldr	r3, [pc, #108]	; (80087e4 <LCD_Send_String+0x200>)
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	3b01      	subs	r3, #1
 800877c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008780:	441a      	add	r2, r3
 8008782:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8008786:	3201      	adds	r2, #1
 8008788:	b2d2      	uxtb	r2, r2
 800878a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800878e:	440b      	add	r3, r1
 8008790:	f803 2c1c 	strb.w	r2, [r3, #-28]
        if(c[line_pos - 1] == ch_len)
 8008794:	4b13      	ldr	r3, [pc, #76]	; (80087e4 <LCD_Send_String+0x200>)
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	3b01      	subs	r3, #1
 800879a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800879e:	4413      	add	r3, r2
 80087a0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80087a4:	7dfa      	ldrb	r2, [r7, #23]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d113      	bne.n	80087d2 <LCD_Send_String+0x1ee>
					{					
						i[line_pos - 1] = chr_MAX;
 80087aa:	4b0e      	ldr	r3, [pc, #56]	; (80087e4 <LCD_Send_String+0x200>)
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	3b01      	subs	r3, #1
 80087b0:	2210      	movs	r2, #16
 80087b2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80087b6:	440b      	add	r3, r1
 80087b8:	f803 2c18 	strb.w	r2, [r3, #-24]
						c[line_pos - 1] = 0;
 80087bc:	4b09      	ldr	r3, [pc, #36]	; (80087e4 <LCD_Send_String+0x200>)
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	3b01      	subs	r3, #1
 80087c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80087c6:	4413      	add	r3, r2
 80087c8:	2200      	movs	r2, #0
 80087ca:	f803 2c1c 	strb.w	r2, [r3, #-28]
						ch_len = 0;						
 80087ce:	2300      	movs	r3, #0
 80087d0:	75fb      	strb	r3, [r7, #23]
					}												
			}
		 			
			break;	 
 80087d2:	bf00      	nop
 80087d4:	46ad      	mov	sp, r5
	}	
}
 80087d6:	bf00      	nop
 80087d8:	3728      	adds	r7, #40	; 0x28
 80087da:	46bd      	mov	sp, r7
 80087dc:	bdb0      	pop	{r4, r5, r7, pc}
 80087de:	bf00      	nop
 80087e0:	20006383 	.word	0x20006383
 80087e4:	20000013 	.word	0x20000013

080087e8 <LCD_BackLight>:
*@brief: Backlight control
*@param: light_state: BL on/off
*@retval: none
*/
void LCD_BackLight(uint8_t light_state)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	4603      	mov	r3, r0
 80087f0:	71fb      	strb	r3, [r7, #7]
	if(light_state == LCD_BL_ON)
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	2b08      	cmp	r3, #8
 80087f6:	d106      	bne.n	8008806 <LCD_BackLight+0x1e>
	{
    data_BL = LCD_BL_ON;		
 80087f8:	4b09      	ldr	r3, [pc, #36]	; (8008820 <LCD_BackLight+0x38>)
 80087fa:	2208      	movs	r2, #8
 80087fc:	701a      	strb	r2, [r3, #0]
		LCD_Write_Data(0x20); //Empty character
 80087fe:	2020      	movs	r0, #32
 8008800:	f7ff fe4a 	bl	8008498 <LCD_Write_Data>
	else if (light_state == LCD_BL_OFF)
	{
		data_BL = LCD_BL_OFF;
		LCD_Write_Data(0x20);
	}
}
 8008804:	e008      	b.n	8008818 <LCD_BackLight+0x30>
	else if (light_state == LCD_BL_OFF)
 8008806:	79fb      	ldrb	r3, [r7, #7]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d105      	bne.n	8008818 <LCD_BackLight+0x30>
		data_BL = LCD_BL_OFF;
 800880c:	4b04      	ldr	r3, [pc, #16]	; (8008820 <LCD_BackLight+0x38>)
 800880e:	2200      	movs	r2, #0
 8008810:	701a      	strb	r2, [r3, #0]
		LCD_Write_Data(0x20);
 8008812:	2020      	movs	r0, #32
 8008814:	f7ff fe40 	bl	8008498 <LCD_Write_Data>
}
 8008818:	bf00      	nop
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	20006382 	.word	0x20006382

08008824 <LCD_Init>:
/**
*@brief: Lcd initiliazing settings.
*@retval: none
*/
void LCD_Init(void)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	af00      	add	r7, sp, #0
	LCD_Set_Command(LCD_CLEAR_DISPLAY);
 8008828:	2001      	movs	r0, #1
 800882a:	f7ff fdd9 	bl	80083e0 <LCD_Set_Command>
	HAL_Delay(1000);
 800882e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008832:	f7f8 fd0d 	bl	8001250 <HAL_Delay>
	LCD_Set_Command(LCD_RETURN_HOME);
 8008836:	2002      	movs	r0, #2
 8008838:	f7ff fdd2 	bl	80083e0 <LCD_Set_Command>
	HAL_Delay(5);
 800883c:	2005      	movs	r0, #5
 800883e:	f7f8 fd07 	bl	8001250 <HAL_Delay>
	LCD_Set_Command(LCD_FUNCTION_SET|MODE_4B|MODE_2L|MODE_5X8_DOTS);
 8008842:	2028      	movs	r0, #40	; 0x28
 8008844:	f7ff fdcc 	bl	80083e0 <LCD_Set_Command>
	HAL_Delay(5);
 8008848:	2005      	movs	r0, #5
 800884a:	f7f8 fd01 	bl	8001250 <HAL_Delay>
	LCD_Set_Command(LCD_DISPLAY_CONTROL|DISPLAY_ON|CURSOR_OFF|BLINK_OFF);
 800884e:	200c      	movs	r0, #12
 8008850:	f7ff fdc6 	bl	80083e0 <LCD_Set_Command>
	HAL_Delay(5);
 8008854:	2005      	movs	r0, #5
 8008856:	f7f8 fcfb 	bl	8001250 <HAL_Delay>
	LCD_Set_Command(LCD_SET_DDRAMADDR);
 800885a:	2080      	movs	r0, #128	; 0x80
 800885c:	f7ff fdc0 	bl	80083e0 <LCD_Set_Command>
	HAL_Delay(500);
 8008860:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008864:	f7f8 fcf4 	bl	8001250 <HAL_Delay>
}
 8008868:	bf00      	nop
 800886a:	bd80      	pop	{r7, pc}

0800886c <MDI_writeCommand>:
 * @brief Write command to Motor Driver
 * @param uartChannel -> get uart channel
 * @param cmd -> command to write
 * @return none
 */
static void MDI_writeCommand(UART_HandleTypeDef *uartChannel,uint8_t cmd){
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	460b      	mov	r3, r1
 8008876:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(uartChannel,(uint8_t*) &cmd,sizeof(cmd),TIMEOUTVAL);
 8008878:	1cf9      	adds	r1, r7, #3
 800887a:	2314      	movs	r3, #20
 800887c:	2201      	movs	r2, #1
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7fb fdc4 	bl	800440c <HAL_UART_Transmit>
}
 8008884:	bf00      	nop
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <MDI_writeSmallData>:
 * @brief Write small data to Motor Driver
 * @param uartChannel -> get uart channel
 * @param data -> data to write
 * @return none
 */
static void MDI_writeSmallData(UART_HandleTypeDef *uartChannel,uint8_t data){
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	460b      	mov	r3, r1
 8008896:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(uartChannel,(uint8_t*)&data,sizeof(data),TIMEOUTVAL);
 8008898:	1cf9      	adds	r1, r7, #3
 800889a:	2314      	movs	r3, #20
 800889c:	2201      	movs	r2, #1
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7fb fdb4 	bl	800440c <HAL_UART_Transmit>
}
 80088a4:	bf00      	nop
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <MDI_writeBigData>:
 * @param uartChannel -> get uart channel
 * @param buff -> get data array
 * @param buff_size -> get data array size
 * @return none
 */
static void MDI_writeBigData(UART_HandleTypeDef *uartChannel,uint8_t *buff, size_t buff_size){
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
	while (buff_size > 0) {
 80088b8:	e014      	b.n	80088e4 <MDI_writeBigData+0x38>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088c0:	4293      	cmp	r3, r2
 80088c2:	bf28      	it	cs
 80088c4:	4613      	movcs	r3, r2
 80088c6:	82fb      	strh	r3, [r7, #22]
		HAL_UART_Transmit(uartChannel, buff, chunk_size, TIMEOUTVAL);
 80088c8:	8afa      	ldrh	r2, [r7, #22]
 80088ca:	2314      	movs	r3, #20
 80088cc:	68b9      	ldr	r1, [r7, #8]
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f7fb fd9c 	bl	800440c <HAL_UART_Transmit>
		buff += chunk_size;
 80088d4:	8afb      	ldrh	r3, [r7, #22]
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	4413      	add	r3, r2
 80088da:	60bb      	str	r3, [r7, #8]
		buff_size -= chunk_size;
 80088dc:	8afb      	ldrh	r3, [r7, #22]
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	607b      	str	r3, [r7, #4]
	while (buff_size > 0) {
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1e7      	bne.n	80088ba <MDI_writeBigData+0xe>
	}
}
 80088ea:	bf00      	nop
 80088ec:	3718      	adds	r7, #24
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <MDI_2byteWriteData>:
 * @brief Write  2 byte data to Motor Driver
 * @param uartChannel -> get uart channel
 * @param data -> get 2 byte data
 * @return none
 */
void MDI_2byteWriteData(UART_HandleTypeDef *uartChannel,uint16_t data){
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	460b      	mov	r3, r1
 80088fc:	807b      	strh	r3, [r7, #2]
	uint8_t arrTmp[] = {data >> 8, data & 0xFF};
 80088fe:	887b      	ldrh	r3, [r7, #2]
 8008900:	0a1b      	lsrs	r3, r3, #8
 8008902:	b29b      	uxth	r3, r3
 8008904:	b2db      	uxtb	r3, r3
 8008906:	733b      	strb	r3, [r7, #12]
 8008908:	887b      	ldrh	r3, [r7, #2]
 800890a:	b2db      	uxtb	r3, r3
 800890c:	737b      	strb	r3, [r7, #13]
	MDI_writeBigData(uartChannel,arrTmp,sizeof(arrTmp));
 800890e:	f107 030c 	add.w	r3, r7, #12
 8008912:	2202      	movs	r2, #2
 8008914:	4619      	mov	r1, r3
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f7ff ffc8 	bl	80088ac <MDI_writeBigData>

}
 800891c:	bf00      	nop
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <MDI_sendDataChannel1>:
 * @param ki -> get Pid ki value
 * @param kp -> get Pid kp value
 * @param factor -> get factor of Pid elements
 * @return none
 */
void MDI_sendDataChannel1(uint16_t angleVal,uint8_t kd,uint8_t ki,uint8_t kp,uint8_t factor ){
 8008924:	b590      	push	{r4, r7, lr}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	4604      	mov	r4, r0
 800892c:	4608      	mov	r0, r1
 800892e:	4611      	mov	r1, r2
 8008930:	461a      	mov	r2, r3
 8008932:	4623      	mov	r3, r4
 8008934:	80fb      	strh	r3, [r7, #6]
 8008936:	4603      	mov	r3, r0
 8008938:	717b      	strb	r3, [r7, #5]
 800893a:	460b      	mov	r3, r1
 800893c:	713b      	strb	r3, [r7, #4]
 800893e:	4613      	mov	r3, r2
 8008940:	70fb      	strb	r3, [r7, #3]
	uint16_t checksumTmp=0;
 8008942:	2300      	movs	r3, #0
 8008944:	81fb      	strh	r3, [r7, #14]
	MDI_writeCommand(&MDI_channel1,0xFF);
 8008946:	21ff      	movs	r1, #255	; 0xff
 8008948:	482d      	ldr	r0, [pc, #180]	; (8008a00 <MDI_sendDataChannel1+0xdc>)
 800894a:	f7ff ff8f 	bl	800886c <MDI_writeCommand>
	MDI_writeCommand(&MDI_channel1,0xFF); //Data transmission started
 800894e:	21ff      	movs	r1, #255	; 0xff
 8008950:	482b      	ldr	r0, [pc, #172]	; (8008a00 <MDI_sendDataChannel1+0xdc>)
 8008952:	f7ff ff8b 	bl	800886c <MDI_writeCommand>
	MDI_2byteWriteData(&MDI_channel1,angleVal);
 8008956:	88fb      	ldrh	r3, [r7, #6]
 8008958:	4619      	mov	r1, r3
 800895a:	4829      	ldr	r0, [pc, #164]	; (8008a00 <MDI_sendDataChannel1+0xdc>)
 800895c:	f7ff ffc9 	bl	80088f2 <MDI_2byteWriteData>
	uint8_t tmpArr[] ={angleVal >> 8, angleVal & 0xFF};
 8008960:	88fb      	ldrh	r3, [r7, #6]
 8008962:	0a1b      	lsrs	r3, r3, #8
 8008964:	b29b      	uxth	r3, r3
 8008966:	b2db      	uxtb	r3, r3
 8008968:	723b      	strb	r3, [r7, #8]
 800896a:	88fb      	ldrh	r3, [r7, #6]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	727b      	strb	r3, [r7, #9]
	checksumTmp+=tmpArr[0];
 8008970:	7a3b      	ldrb	r3, [r7, #8]
 8008972:	b29a      	uxth	r2, r3
 8008974:	89fb      	ldrh	r3, [r7, #14]
 8008976:	4413      	add	r3, r2
 8008978:	81fb      	strh	r3, [r7, #14]
	checksumTmp+=tmpArr[1]; //2 byte angle val sended
 800897a:	7a7b      	ldrb	r3, [r7, #9]
 800897c:	b29a      	uxth	r2, r3
 800897e:	89fb      	ldrh	r3, [r7, #14]
 8008980:	4413      	add	r3, r2
 8008982:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel1,kd); checksumTmp+=kd; //writed kd
 8008984:	797b      	ldrb	r3, [r7, #5]
 8008986:	4619      	mov	r1, r3
 8008988:	481d      	ldr	r0, [pc, #116]	; (8008a00 <MDI_sendDataChannel1+0xdc>)
 800898a:	f7ff ff7f 	bl	800888c <MDI_writeSmallData>
 800898e:	797b      	ldrb	r3, [r7, #5]
 8008990:	b29a      	uxth	r2, r3
 8008992:	89fb      	ldrh	r3, [r7, #14]
 8008994:	4413      	add	r3, r2
 8008996:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel1,ki); checksumTmp+=ki; //writed ki
 8008998:	793b      	ldrb	r3, [r7, #4]
 800899a:	4619      	mov	r1, r3
 800899c:	4818      	ldr	r0, [pc, #96]	; (8008a00 <MDI_sendDataChannel1+0xdc>)
 800899e:	f7ff ff75 	bl	800888c <MDI_writeSmallData>
 80089a2:	793b      	ldrb	r3, [r7, #4]
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	89fb      	ldrh	r3, [r7, #14]
 80089a8:	4413      	add	r3, r2
 80089aa:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel1,kp); checksumTmp+=kp; //writed kp
 80089ac:	78fb      	ldrb	r3, [r7, #3]
 80089ae:	4619      	mov	r1, r3
 80089b0:	4813      	ldr	r0, [pc, #76]	; (8008a00 <MDI_sendDataChannel1+0xdc>)
 80089b2:	f7ff ff6b 	bl	800888c <MDI_writeSmallData>
 80089b6:	78fb      	ldrb	r3, [r7, #3]
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	89fb      	ldrh	r3, [r7, #14]
 80089bc:	4413      	add	r3, r2
 80089be:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel1,factor); checksumTmp+=factor; //writed factor
 80089c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089c4:	4619      	mov	r1, r3
 80089c6:	480e      	ldr	r0, [pc, #56]	; (8008a00 <MDI_sendDataChannel1+0xdc>)
 80089c8:	f7ff ff60 	bl	800888c <MDI_writeSmallData>
 80089cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	89fb      	ldrh	r3, [r7, #14]
 80089d4:	4413      	add	r3, r2
 80089d6:	81fb      	strh	r3, [r7, #14]
	uint8_t tmp =checksumTmp%256;
 80089d8:	89fb      	ldrh	r3, [r7, #14]
 80089da:	737b      	strb	r3, [r7, #13]
	MDI_writeSmallData(&MDI_channel1,tmp); //checksum first byte
 80089dc:	7b7b      	ldrb	r3, [r7, #13]
 80089de:	4619      	mov	r1, r3
 80089e0:	4807      	ldr	r0, [pc, #28]	; (8008a00 <MDI_sendDataChannel1+0xdc>)
 80089e2:	f7ff ff53 	bl	800888c <MDI_writeSmallData>
	uint8_t tmpComp =~tmp;
 80089e6:	7b7b      	ldrb	r3, [r7, #13]
 80089e8:	43db      	mvns	r3, r3
 80089ea:	733b      	strb	r3, [r7, #12]
	MDI_writeSmallData(&MDI_channel1,tmpComp); //checksum second byte
 80089ec:	7b3b      	ldrb	r3, [r7, #12]
 80089ee:	4619      	mov	r1, r3
 80089f0:	4803      	ldr	r0, [pc, #12]	; (8008a00 <MDI_sendDataChannel1+0xdc>)
 80089f2:	f7ff ff4b 	bl	800888c <MDI_writeSmallData>
}
 80089f6:	bf00      	nop
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd90      	pop	{r4, r7, pc}
 80089fe:	bf00      	nop
 8008a00:	20006500 	.word	0x20006500

08008a04 <MDI_getDataChannel1>:
/**
 * @brief get to Motor Driver 1 values
 * @return none
 */
uint8_t getFirstData1;
void MDI_getDataChannel1(void){
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&MDI_channel1,(uint8_t*)&getFirstData1,1,TIMEOUTVAL);
 8008a0a:	2314      	movs	r3, #20
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	4931      	ldr	r1, [pc, #196]	; (8008ad4 <MDI_getDataChannel1+0xd0>)
 8008a10:	4831      	ldr	r0, [pc, #196]	; (8008ad8 <MDI_getDataChannel1+0xd4>)
 8008a12:	f7fb fd8c 	bl	800452e <HAL_UART_Receive>
		if(0xFF ==getFirstData1){
 8008a16:	4b2f      	ldr	r3, [pc, #188]	; (8008ad4 <MDI_getDataChannel1+0xd0>)
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	2bff      	cmp	r3, #255	; 0xff
 8008a1c:	d153      	bne.n	8008ac6 <MDI_getDataChannel1+0xc2>
		HAL_UART_Receive(&MDI_channel1,(uint8_t*)rec1Buff,9,TIMEOUTVAL*9);
 8008a1e:	23b4      	movs	r3, #180	; 0xb4
 8008a20:	2209      	movs	r2, #9
 8008a22:	492e      	ldr	r1, [pc, #184]	; (8008adc <MDI_getDataChannel1+0xd8>)
 8008a24:	482c      	ldr	r0, [pc, #176]	; (8008ad8 <MDI_getDataChannel1+0xd4>)
 8008a26:	f7fb fd82 	bl	800452e <HAL_UART_Receive>
		if(0xFF==rec1Buff[0]){
 8008a2a:	4b2c      	ldr	r3, [pc, #176]	; (8008adc <MDI_getDataChannel1+0xd8>)
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	2bff      	cmp	r3, #255	; 0xff
 8008a30:	d13c      	bne.n	8008aac <MDI_getDataChannel1+0xa8>
			uint16_t checksumTmp=0;
 8008a32:	2300      	movs	r3, #0
 8008a34:	80fb      	strh	r3, [r7, #6]
			for(uint8_t c=1;c<7;c++)checksumTmp+=rec1Buff[c];
 8008a36:	2301      	movs	r3, #1
 8008a38:	717b      	strb	r3, [r7, #5]
 8008a3a:	e009      	b.n	8008a50 <MDI_getDataChannel1+0x4c>
 8008a3c:	797b      	ldrb	r3, [r7, #5]
 8008a3e:	4a27      	ldr	r2, [pc, #156]	; (8008adc <MDI_getDataChannel1+0xd8>)
 8008a40:	5cd3      	ldrb	r3, [r2, r3]
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	88fb      	ldrh	r3, [r7, #6]
 8008a46:	4413      	add	r3, r2
 8008a48:	80fb      	strh	r3, [r7, #6]
 8008a4a:	797b      	ldrb	r3, [r7, #5]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	717b      	strb	r3, [r7, #5]
 8008a50:	797b      	ldrb	r3, [r7, #5]
 8008a52:	2b06      	cmp	r3, #6
 8008a54:	d9f2      	bls.n	8008a3c <MDI_getDataChannel1+0x38>
			uint8_t tmp =checksumTmp%256;
 8008a56:	88fb      	ldrh	r3, [r7, #6]
 8008a58:	70fb      	strb	r3, [r7, #3]
			uint8_t tmpComp =~tmp;
 8008a5a:	78fb      	ldrb	r3, [r7, #3]
 8008a5c:	43db      	mvns	r3, r3
 8008a5e:	70bb      	strb	r3, [r7, #2]
			if(tmp == rec1Buff[7] && tmpComp == rec1Buff[8]){
 8008a60:	4b1e      	ldr	r3, [pc, #120]	; (8008adc <MDI_getDataChannel1+0xd8>)
 8008a62:	79db      	ldrb	r3, [r3, #7]
 8008a64:	78fa      	ldrb	r2, [r7, #3]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d120      	bne.n	8008aac <MDI_getDataChannel1+0xa8>
 8008a6a:	4b1c      	ldr	r3, [pc, #112]	; (8008adc <MDI_getDataChannel1+0xd8>)
 8008a6c:	7a1b      	ldrb	r3, [r3, #8]
 8008a6e:	78ba      	ldrb	r2, [r7, #2]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d11b      	bne.n	8008aac <MDI_getDataChannel1+0xa8>
				driver1.angle=((uint16_t)rec1Buff[1] << 8) | rec1Buff[2];
 8008a74:	4b19      	ldr	r3, [pc, #100]	; (8008adc <MDI_getDataChannel1+0xd8>)
 8008a76:	785b      	ldrb	r3, [r3, #1]
 8008a78:	021b      	lsls	r3, r3, #8
 8008a7a:	b21a      	sxth	r2, r3
 8008a7c:	4b17      	ldr	r3, [pc, #92]	; (8008adc <MDI_getDataChannel1+0xd8>)
 8008a7e:	789b      	ldrb	r3, [r3, #2]
 8008a80:	b21b      	sxth	r3, r3
 8008a82:	4313      	orrs	r3, r2
 8008a84:	b21b      	sxth	r3, r3
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	4b15      	ldr	r3, [pc, #84]	; (8008ae0 <MDI_getDataChannel1+0xdc>)
 8008a8a:	809a      	strh	r2, [r3, #4]
				driver1.pid_kd=rec1Buff[3];
 8008a8c:	4b13      	ldr	r3, [pc, #76]	; (8008adc <MDI_getDataChannel1+0xd8>)
 8008a8e:	78da      	ldrb	r2, [r3, #3]
 8008a90:	4b13      	ldr	r3, [pc, #76]	; (8008ae0 <MDI_getDataChannel1+0xdc>)
 8008a92:	701a      	strb	r2, [r3, #0]
				driver1.pid_ki=rec1Buff[4];
 8008a94:	4b11      	ldr	r3, [pc, #68]	; (8008adc <MDI_getDataChannel1+0xd8>)
 8008a96:	791a      	ldrb	r2, [r3, #4]
 8008a98:	4b11      	ldr	r3, [pc, #68]	; (8008ae0 <MDI_getDataChannel1+0xdc>)
 8008a9a:	705a      	strb	r2, [r3, #1]
				driver1.pid_kp=rec1Buff[5];
 8008a9c:	4b0f      	ldr	r3, [pc, #60]	; (8008adc <MDI_getDataChannel1+0xd8>)
 8008a9e:	795a      	ldrb	r2, [r3, #5]
 8008aa0:	4b0f      	ldr	r3, [pc, #60]	; (8008ae0 <MDI_getDataChannel1+0xdc>)
 8008aa2:	709a      	strb	r2, [r3, #2]
				driver1.factor=rec1Buff[6];
 8008aa4:	4b0d      	ldr	r3, [pc, #52]	; (8008adc <MDI_getDataChannel1+0xd8>)
 8008aa6:	799a      	ldrb	r2, [r3, #6]
 8008aa8:	4b0d      	ldr	r3, [pc, #52]	; (8008ae0 <MDI_getDataChannel1+0xdc>)
 8008aaa:	70da      	strb	r2, [r3, #3]
			}
		}
		for(uint8_t c=0;c<9;c++)rec1Buff[c]=0;
 8008aac:	2300      	movs	r3, #0
 8008aae:	713b      	strb	r3, [r7, #4]
 8008ab0:	e006      	b.n	8008ac0 <MDI_getDataChannel1+0xbc>
 8008ab2:	793b      	ldrb	r3, [r7, #4]
 8008ab4:	4a09      	ldr	r2, [pc, #36]	; (8008adc <MDI_getDataChannel1+0xd8>)
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	54d1      	strb	r1, [r2, r3]
 8008aba:	793b      	ldrb	r3, [r7, #4]
 8008abc:	3301      	adds	r3, #1
 8008abe:	713b      	strb	r3, [r7, #4]
 8008ac0:	793b      	ldrb	r3, [r7, #4]
 8008ac2:	2b08      	cmp	r3, #8
 8008ac4:	d9f5      	bls.n	8008ab2 <MDI_getDataChannel1+0xae>
		}
		getFirstData1=0;
 8008ac6:	4b03      	ldr	r3, [pc, #12]	; (8008ad4 <MDI_getDataChannel1+0xd0>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	701a      	strb	r2, [r3, #0]
}//"%d - %d - %d - %d - %d - %d - %d - %d - %d\n",rec1Buff[0],rec1Buff[1],rec1Buff[2],rec1Buff[3],rec1Buff[4],rec1Buff[5],rec1Buff[6],rec1Buff[7],rec1Buff[8]
 8008acc:	bf00      	nop
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	200066d6 	.word	0x200066d6
 8008ad8:	20006500 	.word	0x20006500
 8008adc:	200066d8 	.word	0x200066d8
 8008ae0:	200066c4 	.word	0x200066c4

08008ae4 <MDI_sendDataChannel2>:
 * @param ki -> get Pid ki value
 * @param kp -> get Pid kp value
 * @param factor -> get factor of Pid elements
 * @return none
 */
void MDI_sendDataChannel2(uint16_t angleVal,uint8_t kd,uint8_t ki,uint8_t kp,uint8_t factor ){
 8008ae4:	b590      	push	{r4, r7, lr}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	4604      	mov	r4, r0
 8008aec:	4608      	mov	r0, r1
 8008aee:	4611      	mov	r1, r2
 8008af0:	461a      	mov	r2, r3
 8008af2:	4623      	mov	r3, r4
 8008af4:	80fb      	strh	r3, [r7, #6]
 8008af6:	4603      	mov	r3, r0
 8008af8:	717b      	strb	r3, [r7, #5]
 8008afa:	460b      	mov	r3, r1
 8008afc:	713b      	strb	r3, [r7, #4]
 8008afe:	4613      	mov	r3, r2
 8008b00:	70fb      	strb	r3, [r7, #3]
	uint16_t checksumTmp=0;
 8008b02:	2300      	movs	r3, #0
 8008b04:	81fb      	strh	r3, [r7, #14]
	MDI_writeCommand(&MDI_channel2,0xFF);
 8008b06:	21ff      	movs	r1, #255	; 0xff
 8008b08:	482d      	ldr	r0, [pc, #180]	; (8008bc0 <MDI_sendDataChannel2+0xdc>)
 8008b0a:	f7ff feaf 	bl	800886c <MDI_writeCommand>
	MDI_writeCommand(&MDI_channel2,0xFF); //Data transmission started
 8008b0e:	21ff      	movs	r1, #255	; 0xff
 8008b10:	482b      	ldr	r0, [pc, #172]	; (8008bc0 <MDI_sendDataChannel2+0xdc>)
 8008b12:	f7ff feab 	bl	800886c <MDI_writeCommand>
	MDI_2byteWriteData(&MDI_channel2,angleVal);
 8008b16:	88fb      	ldrh	r3, [r7, #6]
 8008b18:	4619      	mov	r1, r3
 8008b1a:	4829      	ldr	r0, [pc, #164]	; (8008bc0 <MDI_sendDataChannel2+0xdc>)
 8008b1c:	f7ff fee9 	bl	80088f2 <MDI_2byteWriteData>
	uint8_t tmpArr[] ={angleVal >> 8, angleVal & 0xFF};
 8008b20:	88fb      	ldrh	r3, [r7, #6]
 8008b22:	0a1b      	lsrs	r3, r3, #8
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	723b      	strb	r3, [r7, #8]
 8008b2a:	88fb      	ldrh	r3, [r7, #6]
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	727b      	strb	r3, [r7, #9]
	checksumTmp+=tmpArr[0];
 8008b30:	7a3b      	ldrb	r3, [r7, #8]
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	89fb      	ldrh	r3, [r7, #14]
 8008b36:	4413      	add	r3, r2
 8008b38:	81fb      	strh	r3, [r7, #14]
	checksumTmp+=tmpArr[1]; //2 byte angle val sended
 8008b3a:	7a7b      	ldrb	r3, [r7, #9]
 8008b3c:	b29a      	uxth	r2, r3
 8008b3e:	89fb      	ldrh	r3, [r7, #14]
 8008b40:	4413      	add	r3, r2
 8008b42:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel2,kd); checksumTmp+=kd; //writed kd
 8008b44:	797b      	ldrb	r3, [r7, #5]
 8008b46:	4619      	mov	r1, r3
 8008b48:	481d      	ldr	r0, [pc, #116]	; (8008bc0 <MDI_sendDataChannel2+0xdc>)
 8008b4a:	f7ff fe9f 	bl	800888c <MDI_writeSmallData>
 8008b4e:	797b      	ldrb	r3, [r7, #5]
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	89fb      	ldrh	r3, [r7, #14]
 8008b54:	4413      	add	r3, r2
 8008b56:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel2,ki); checksumTmp+=ki; //writed ki
 8008b58:	793b      	ldrb	r3, [r7, #4]
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	4818      	ldr	r0, [pc, #96]	; (8008bc0 <MDI_sendDataChannel2+0xdc>)
 8008b5e:	f7ff fe95 	bl	800888c <MDI_writeSmallData>
 8008b62:	793b      	ldrb	r3, [r7, #4]
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	89fb      	ldrh	r3, [r7, #14]
 8008b68:	4413      	add	r3, r2
 8008b6a:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel2,kp); checksumTmp+=kp; //writed kp
 8008b6c:	78fb      	ldrb	r3, [r7, #3]
 8008b6e:	4619      	mov	r1, r3
 8008b70:	4813      	ldr	r0, [pc, #76]	; (8008bc0 <MDI_sendDataChannel2+0xdc>)
 8008b72:	f7ff fe8b 	bl	800888c <MDI_writeSmallData>
 8008b76:	78fb      	ldrb	r3, [r7, #3]
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	89fb      	ldrh	r3, [r7, #14]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel2,factor); checksumTmp+=factor; //writed factor
 8008b80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b84:	4619      	mov	r1, r3
 8008b86:	480e      	ldr	r0, [pc, #56]	; (8008bc0 <MDI_sendDataChannel2+0xdc>)
 8008b88:	f7ff fe80 	bl	800888c <MDI_writeSmallData>
 8008b8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	89fb      	ldrh	r3, [r7, #14]
 8008b94:	4413      	add	r3, r2
 8008b96:	81fb      	strh	r3, [r7, #14]
	uint8_t tmp =checksumTmp%256;
 8008b98:	89fb      	ldrh	r3, [r7, #14]
 8008b9a:	737b      	strb	r3, [r7, #13]
	MDI_writeSmallData(&MDI_channel2,tmp); //checksum first byte
 8008b9c:	7b7b      	ldrb	r3, [r7, #13]
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	4807      	ldr	r0, [pc, #28]	; (8008bc0 <MDI_sendDataChannel2+0xdc>)
 8008ba2:	f7ff fe73 	bl	800888c <MDI_writeSmallData>
	uint8_t tmpComp =~tmp;
 8008ba6:	7b7b      	ldrb	r3, [r7, #13]
 8008ba8:	43db      	mvns	r3, r3
 8008baa:	733b      	strb	r3, [r7, #12]
	MDI_writeSmallData(&MDI_channel2,tmpComp); //checksum second byte
 8008bac:	7b3b      	ldrb	r3, [r7, #12]
 8008bae:	4619      	mov	r1, r3
 8008bb0:	4803      	ldr	r0, [pc, #12]	; (8008bc0 <MDI_sendDataChannel2+0xdc>)
 8008bb2:	f7ff fe6b 	bl	800888c <MDI_writeSmallData>
}
 8008bb6:	bf00      	nop
 8008bb8:	3714      	adds	r7, #20
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd90      	pop	{r4, r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	20006398 	.word	0x20006398

08008bc4 <MDI_getDataChannel2>:
/**
 * @brief get to Motor Driver 2 values
 * @return none
 */
uint8_t getFirstData2;
void MDI_getDataChannel2(void){
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&MDI_channel2,(uint8_t*)&getFirstData2,1,TIMEOUTVAL);
 8008bca:	2314      	movs	r3, #20
 8008bcc:	2201      	movs	r2, #1
 8008bce:	4931      	ldr	r1, [pc, #196]	; (8008c94 <MDI_getDataChannel2+0xd0>)
 8008bd0:	4831      	ldr	r0, [pc, #196]	; (8008c98 <MDI_getDataChannel2+0xd4>)
 8008bd2:	f7fb fcac 	bl	800452e <HAL_UART_Receive>
	if(0xFF ==getFirstData2){
 8008bd6:	4b2f      	ldr	r3, [pc, #188]	; (8008c94 <MDI_getDataChannel2+0xd0>)
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	2bff      	cmp	r3, #255	; 0xff
 8008bdc:	d153      	bne.n	8008c86 <MDI_getDataChannel2+0xc2>
	HAL_UART_Receive(&MDI_channel2,(uint8_t*)rec2Buff,9,TIMEOUTVAL*9);
 8008bde:	23b4      	movs	r3, #180	; 0xb4
 8008be0:	2209      	movs	r2, #9
 8008be2:	492e      	ldr	r1, [pc, #184]	; (8008c9c <MDI_getDataChannel2+0xd8>)
 8008be4:	482c      	ldr	r0, [pc, #176]	; (8008c98 <MDI_getDataChannel2+0xd4>)
 8008be6:	f7fb fca2 	bl	800452e <HAL_UART_Receive>
	if(0xFF==rec2Buff[0]){
 8008bea:	4b2c      	ldr	r3, [pc, #176]	; (8008c9c <MDI_getDataChannel2+0xd8>)
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	2bff      	cmp	r3, #255	; 0xff
 8008bf0:	d13c      	bne.n	8008c6c <MDI_getDataChannel2+0xa8>
		uint16_t checksumTmp=0;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	80fb      	strh	r3, [r7, #6]
		for(uint8_t c=1;c<7;c++)checksumTmp+=rec2Buff[c];
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	717b      	strb	r3, [r7, #5]
 8008bfa:	e009      	b.n	8008c10 <MDI_getDataChannel2+0x4c>
 8008bfc:	797b      	ldrb	r3, [r7, #5]
 8008bfe:	4a27      	ldr	r2, [pc, #156]	; (8008c9c <MDI_getDataChannel2+0xd8>)
 8008c00:	5cd3      	ldrb	r3, [r2, r3]
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	88fb      	ldrh	r3, [r7, #6]
 8008c06:	4413      	add	r3, r2
 8008c08:	80fb      	strh	r3, [r7, #6]
 8008c0a:	797b      	ldrb	r3, [r7, #5]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	717b      	strb	r3, [r7, #5]
 8008c10:	797b      	ldrb	r3, [r7, #5]
 8008c12:	2b06      	cmp	r3, #6
 8008c14:	d9f2      	bls.n	8008bfc <MDI_getDataChannel2+0x38>
		uint8_t tmp =checksumTmp%256;
 8008c16:	88fb      	ldrh	r3, [r7, #6]
 8008c18:	70fb      	strb	r3, [r7, #3]
		uint8_t tmpComp =~tmp;
 8008c1a:	78fb      	ldrb	r3, [r7, #3]
 8008c1c:	43db      	mvns	r3, r3
 8008c1e:	70bb      	strb	r3, [r7, #2]
		if(tmp == rec2Buff[7] && tmpComp == rec2Buff[8]){
 8008c20:	4b1e      	ldr	r3, [pc, #120]	; (8008c9c <MDI_getDataChannel2+0xd8>)
 8008c22:	79db      	ldrb	r3, [r3, #7]
 8008c24:	78fa      	ldrb	r2, [r7, #3]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d120      	bne.n	8008c6c <MDI_getDataChannel2+0xa8>
 8008c2a:	4b1c      	ldr	r3, [pc, #112]	; (8008c9c <MDI_getDataChannel2+0xd8>)
 8008c2c:	7a1b      	ldrb	r3, [r3, #8]
 8008c2e:	78ba      	ldrb	r2, [r7, #2]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d11b      	bne.n	8008c6c <MDI_getDataChannel2+0xa8>
			driver2.angle=((uint16_t)rec2Buff[1] << 8) | rec2Buff[2];
 8008c34:	4b19      	ldr	r3, [pc, #100]	; (8008c9c <MDI_getDataChannel2+0xd8>)
 8008c36:	785b      	ldrb	r3, [r3, #1]
 8008c38:	021b      	lsls	r3, r3, #8
 8008c3a:	b21a      	sxth	r2, r3
 8008c3c:	4b17      	ldr	r3, [pc, #92]	; (8008c9c <MDI_getDataChannel2+0xd8>)
 8008c3e:	789b      	ldrb	r3, [r3, #2]
 8008c40:	b21b      	sxth	r3, r3
 8008c42:	4313      	orrs	r3, r2
 8008c44:	b21b      	sxth	r3, r3
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	4b15      	ldr	r3, [pc, #84]	; (8008ca0 <MDI_getDataChannel2+0xdc>)
 8008c4a:	809a      	strh	r2, [r3, #4]
			driver2.pid_kd=rec2Buff[3];
 8008c4c:	4b13      	ldr	r3, [pc, #76]	; (8008c9c <MDI_getDataChannel2+0xd8>)
 8008c4e:	78da      	ldrb	r2, [r3, #3]
 8008c50:	4b13      	ldr	r3, [pc, #76]	; (8008ca0 <MDI_getDataChannel2+0xdc>)
 8008c52:	701a      	strb	r2, [r3, #0]
			driver2.pid_ki=rec2Buff[4];
 8008c54:	4b11      	ldr	r3, [pc, #68]	; (8008c9c <MDI_getDataChannel2+0xd8>)
 8008c56:	791a      	ldrb	r2, [r3, #4]
 8008c58:	4b11      	ldr	r3, [pc, #68]	; (8008ca0 <MDI_getDataChannel2+0xdc>)
 8008c5a:	705a      	strb	r2, [r3, #1]
			driver2.pid_kp=rec2Buff[5];
 8008c5c:	4b0f      	ldr	r3, [pc, #60]	; (8008c9c <MDI_getDataChannel2+0xd8>)
 8008c5e:	795a      	ldrb	r2, [r3, #5]
 8008c60:	4b0f      	ldr	r3, [pc, #60]	; (8008ca0 <MDI_getDataChannel2+0xdc>)
 8008c62:	709a      	strb	r2, [r3, #2]
			driver2.factor=rec2Buff[6];
 8008c64:	4b0d      	ldr	r3, [pc, #52]	; (8008c9c <MDI_getDataChannel2+0xd8>)
 8008c66:	799a      	ldrb	r2, [r3, #6]
 8008c68:	4b0d      	ldr	r3, [pc, #52]	; (8008ca0 <MDI_getDataChannel2+0xdc>)
 8008c6a:	70da      	strb	r2, [r3, #3]
		}
	}
	for(uint8_t c=0;c<9;c++)rec2Buff[c]=0;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	713b      	strb	r3, [r7, #4]
 8008c70:	e006      	b.n	8008c80 <MDI_getDataChannel2+0xbc>
 8008c72:	793b      	ldrb	r3, [r7, #4]
 8008c74:	4a09      	ldr	r2, [pc, #36]	; (8008c9c <MDI_getDataChannel2+0xd8>)
 8008c76:	2100      	movs	r1, #0
 8008c78:	54d1      	strb	r1, [r2, r3]
 8008c7a:	793b      	ldrb	r3, [r7, #4]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	713b      	strb	r3, [r7, #4]
 8008c80:	793b      	ldrb	r3, [r7, #4]
 8008c82:	2b08      	cmp	r3, #8
 8008c84:	d9f5      	bls.n	8008c72 <MDI_getDataChannel2+0xae>
	}
	getFirstData2=0;
 8008c86:	4b03      	ldr	r3, [pc, #12]	; (8008c94 <MDI_getDataChannel2+0xd0>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	701a      	strb	r2, [r3, #0]
}//"DRV 2: angle: %d - kd: %d - ki: %d - kp: %d - factor: %d\n",driver2.angle,driver2.pid_kd,driver2.pid_ki,driver2.pid_kp,driver2.factor
 8008c8c:	bf00      	nop
 8008c8e:	3708      	adds	r7, #8
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	200066e2 	.word	0x200066e2
 8008c98:	20006398 	.word	0x20006398
 8008c9c:	200066cc 	.word	0x200066cc
 8008ca0:	200066bc 	.word	0x200066bc

08008ca4 <getDriver1ReceiveVal>:
uint8_t getDriver2ki(void){ return driver2.pid_kd;}
uint8_t getDriver2kp(void){ return driver2.pid_ki;}
uint8_t getDriver2factor(void){ return driver2.pid_kp;}
uint16_t getDriver2angle(void){return  driver2.factor;}

mD_interface getDriver1ReceiveVal(void){return driver1;}
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a05      	ldr	r2, [pc, #20]	; (8008cc4 <getDriver1ReceiveVal+0x20>)
 8008cb0:	6811      	ldr	r1, [r2, #0]
 8008cb2:	6019      	str	r1, [r3, #0]
 8008cb4:	8892      	ldrh	r2, [r2, #4]
 8008cb6:	809a      	strh	r2, [r3, #4]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr
 8008cc4:	200066c4 	.word	0x200066c4

08008cc8 <getDriver2ReceiveVal>:
mD_interface getDriver2ReceiveVal(void){return driver2;}
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a05      	ldr	r2, [pc, #20]	; (8008ce8 <getDriver2ReceiveVal+0x20>)
 8008cd4:	6811      	ldr	r1, [r2, #0]
 8008cd6:	6019      	str	r1, [r3, #0]
 8008cd8:	8892      	ldrh	r2, [r2, #4]
 8008cda:	809a      	strh	r2, [r3, #4]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	200066bc 	.word	0x200066bc

08008cec <__errno>:
 8008cec:	4b01      	ldr	r3, [pc, #4]	; (8008cf4 <__errno+0x8>)
 8008cee:	6818      	ldr	r0, [r3, #0]
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	20000014 	.word	0x20000014

08008cf8 <__libc_init_array>:
 8008cf8:	b570      	push	{r4, r5, r6, lr}
 8008cfa:	4e0d      	ldr	r6, [pc, #52]	; (8008d30 <__libc_init_array+0x38>)
 8008cfc:	4c0d      	ldr	r4, [pc, #52]	; (8008d34 <__libc_init_array+0x3c>)
 8008cfe:	1ba4      	subs	r4, r4, r6
 8008d00:	10a4      	asrs	r4, r4, #2
 8008d02:	2500      	movs	r5, #0
 8008d04:	42a5      	cmp	r5, r4
 8008d06:	d109      	bne.n	8008d1c <__libc_init_array+0x24>
 8008d08:	4e0b      	ldr	r6, [pc, #44]	; (8008d38 <__libc_init_array+0x40>)
 8008d0a:	4c0c      	ldr	r4, [pc, #48]	; (8008d3c <__libc_init_array+0x44>)
 8008d0c:	f000 fc28 	bl	8009560 <_init>
 8008d10:	1ba4      	subs	r4, r4, r6
 8008d12:	10a4      	asrs	r4, r4, #2
 8008d14:	2500      	movs	r5, #0
 8008d16:	42a5      	cmp	r5, r4
 8008d18:	d105      	bne.n	8008d26 <__libc_init_array+0x2e>
 8008d1a:	bd70      	pop	{r4, r5, r6, pc}
 8008d1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d20:	4798      	blx	r3
 8008d22:	3501      	adds	r5, #1
 8008d24:	e7ee      	b.n	8008d04 <__libc_init_array+0xc>
 8008d26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d2a:	4798      	blx	r3
 8008d2c:	3501      	adds	r5, #1
 8008d2e:	e7f2      	b.n	8008d16 <__libc_init_array+0x1e>
 8008d30:	080097c8 	.word	0x080097c8
 8008d34:	080097c8 	.word	0x080097c8
 8008d38:	080097c8 	.word	0x080097c8
 8008d3c:	080097cc 	.word	0x080097cc

08008d40 <memcpy>:
 8008d40:	b510      	push	{r4, lr}
 8008d42:	1e43      	subs	r3, r0, #1
 8008d44:	440a      	add	r2, r1
 8008d46:	4291      	cmp	r1, r2
 8008d48:	d100      	bne.n	8008d4c <memcpy+0xc>
 8008d4a:	bd10      	pop	{r4, pc}
 8008d4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d54:	e7f7      	b.n	8008d46 <memcpy+0x6>

08008d56 <memset>:
 8008d56:	4402      	add	r2, r0
 8008d58:	4603      	mov	r3, r0
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d100      	bne.n	8008d60 <memset+0xa>
 8008d5e:	4770      	bx	lr
 8008d60:	f803 1b01 	strb.w	r1, [r3], #1
 8008d64:	e7f9      	b.n	8008d5a <memset+0x4>
	...

08008d68 <siprintf>:
 8008d68:	b40e      	push	{r1, r2, r3}
 8008d6a:	b500      	push	{lr}
 8008d6c:	b09c      	sub	sp, #112	; 0x70
 8008d6e:	ab1d      	add	r3, sp, #116	; 0x74
 8008d70:	9002      	str	r0, [sp, #8]
 8008d72:	9006      	str	r0, [sp, #24]
 8008d74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d78:	4809      	ldr	r0, [pc, #36]	; (8008da0 <siprintf+0x38>)
 8008d7a:	9107      	str	r1, [sp, #28]
 8008d7c:	9104      	str	r1, [sp, #16]
 8008d7e:	4909      	ldr	r1, [pc, #36]	; (8008da4 <siprintf+0x3c>)
 8008d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d84:	9105      	str	r1, [sp, #20]
 8008d86:	6800      	ldr	r0, [r0, #0]
 8008d88:	9301      	str	r3, [sp, #4]
 8008d8a:	a902      	add	r1, sp, #8
 8008d8c:	f000 f866 	bl	8008e5c <_svfiprintf_r>
 8008d90:	9b02      	ldr	r3, [sp, #8]
 8008d92:	2200      	movs	r2, #0
 8008d94:	701a      	strb	r2, [r3, #0]
 8008d96:	b01c      	add	sp, #112	; 0x70
 8008d98:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d9c:	b003      	add	sp, #12
 8008d9e:	4770      	bx	lr
 8008da0:	20000014 	.word	0x20000014
 8008da4:	ffff0208 	.word	0xffff0208

08008da8 <__ssputs_r>:
 8008da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dac:	688e      	ldr	r6, [r1, #8]
 8008dae:	429e      	cmp	r6, r3
 8008db0:	4682      	mov	sl, r0
 8008db2:	460c      	mov	r4, r1
 8008db4:	4690      	mov	r8, r2
 8008db6:	4699      	mov	r9, r3
 8008db8:	d837      	bhi.n	8008e2a <__ssputs_r+0x82>
 8008dba:	898a      	ldrh	r2, [r1, #12]
 8008dbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008dc0:	d031      	beq.n	8008e26 <__ssputs_r+0x7e>
 8008dc2:	6825      	ldr	r5, [r4, #0]
 8008dc4:	6909      	ldr	r1, [r1, #16]
 8008dc6:	1a6f      	subs	r7, r5, r1
 8008dc8:	6965      	ldr	r5, [r4, #20]
 8008dca:	2302      	movs	r3, #2
 8008dcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dd0:	fb95 f5f3 	sdiv	r5, r5, r3
 8008dd4:	f109 0301 	add.w	r3, r9, #1
 8008dd8:	443b      	add	r3, r7
 8008dda:	429d      	cmp	r5, r3
 8008ddc:	bf38      	it	cc
 8008dde:	461d      	movcc	r5, r3
 8008de0:	0553      	lsls	r3, r2, #21
 8008de2:	d530      	bpl.n	8008e46 <__ssputs_r+0x9e>
 8008de4:	4629      	mov	r1, r5
 8008de6:	f000 fb21 	bl	800942c <_malloc_r>
 8008dea:	4606      	mov	r6, r0
 8008dec:	b950      	cbnz	r0, 8008e04 <__ssputs_r+0x5c>
 8008dee:	230c      	movs	r3, #12
 8008df0:	f8ca 3000 	str.w	r3, [sl]
 8008df4:	89a3      	ldrh	r3, [r4, #12]
 8008df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dfa:	81a3      	strh	r3, [r4, #12]
 8008dfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e04:	463a      	mov	r2, r7
 8008e06:	6921      	ldr	r1, [r4, #16]
 8008e08:	f7ff ff9a 	bl	8008d40 <memcpy>
 8008e0c:	89a3      	ldrh	r3, [r4, #12]
 8008e0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e16:	81a3      	strh	r3, [r4, #12]
 8008e18:	6126      	str	r6, [r4, #16]
 8008e1a:	6165      	str	r5, [r4, #20]
 8008e1c:	443e      	add	r6, r7
 8008e1e:	1bed      	subs	r5, r5, r7
 8008e20:	6026      	str	r6, [r4, #0]
 8008e22:	60a5      	str	r5, [r4, #8]
 8008e24:	464e      	mov	r6, r9
 8008e26:	454e      	cmp	r6, r9
 8008e28:	d900      	bls.n	8008e2c <__ssputs_r+0x84>
 8008e2a:	464e      	mov	r6, r9
 8008e2c:	4632      	mov	r2, r6
 8008e2e:	4641      	mov	r1, r8
 8008e30:	6820      	ldr	r0, [r4, #0]
 8008e32:	f000 fa93 	bl	800935c <memmove>
 8008e36:	68a3      	ldr	r3, [r4, #8]
 8008e38:	1b9b      	subs	r3, r3, r6
 8008e3a:	60a3      	str	r3, [r4, #8]
 8008e3c:	6823      	ldr	r3, [r4, #0]
 8008e3e:	441e      	add	r6, r3
 8008e40:	6026      	str	r6, [r4, #0]
 8008e42:	2000      	movs	r0, #0
 8008e44:	e7dc      	b.n	8008e00 <__ssputs_r+0x58>
 8008e46:	462a      	mov	r2, r5
 8008e48:	f000 fb4a 	bl	80094e0 <_realloc_r>
 8008e4c:	4606      	mov	r6, r0
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	d1e2      	bne.n	8008e18 <__ssputs_r+0x70>
 8008e52:	6921      	ldr	r1, [r4, #16]
 8008e54:	4650      	mov	r0, sl
 8008e56:	f000 fa9b 	bl	8009390 <_free_r>
 8008e5a:	e7c8      	b.n	8008dee <__ssputs_r+0x46>

08008e5c <_svfiprintf_r>:
 8008e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e60:	461d      	mov	r5, r3
 8008e62:	898b      	ldrh	r3, [r1, #12]
 8008e64:	061f      	lsls	r7, r3, #24
 8008e66:	b09d      	sub	sp, #116	; 0x74
 8008e68:	4680      	mov	r8, r0
 8008e6a:	460c      	mov	r4, r1
 8008e6c:	4616      	mov	r6, r2
 8008e6e:	d50f      	bpl.n	8008e90 <_svfiprintf_r+0x34>
 8008e70:	690b      	ldr	r3, [r1, #16]
 8008e72:	b96b      	cbnz	r3, 8008e90 <_svfiprintf_r+0x34>
 8008e74:	2140      	movs	r1, #64	; 0x40
 8008e76:	f000 fad9 	bl	800942c <_malloc_r>
 8008e7a:	6020      	str	r0, [r4, #0]
 8008e7c:	6120      	str	r0, [r4, #16]
 8008e7e:	b928      	cbnz	r0, 8008e8c <_svfiprintf_r+0x30>
 8008e80:	230c      	movs	r3, #12
 8008e82:	f8c8 3000 	str.w	r3, [r8]
 8008e86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e8a:	e0c8      	b.n	800901e <_svfiprintf_r+0x1c2>
 8008e8c:	2340      	movs	r3, #64	; 0x40
 8008e8e:	6163      	str	r3, [r4, #20]
 8008e90:	2300      	movs	r3, #0
 8008e92:	9309      	str	r3, [sp, #36]	; 0x24
 8008e94:	2320      	movs	r3, #32
 8008e96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e9a:	2330      	movs	r3, #48	; 0x30
 8008e9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ea0:	9503      	str	r5, [sp, #12]
 8008ea2:	f04f 0b01 	mov.w	fp, #1
 8008ea6:	4637      	mov	r7, r6
 8008ea8:	463d      	mov	r5, r7
 8008eaa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008eae:	b10b      	cbz	r3, 8008eb4 <_svfiprintf_r+0x58>
 8008eb0:	2b25      	cmp	r3, #37	; 0x25
 8008eb2:	d13e      	bne.n	8008f32 <_svfiprintf_r+0xd6>
 8008eb4:	ebb7 0a06 	subs.w	sl, r7, r6
 8008eb8:	d00b      	beq.n	8008ed2 <_svfiprintf_r+0x76>
 8008eba:	4653      	mov	r3, sl
 8008ebc:	4632      	mov	r2, r6
 8008ebe:	4621      	mov	r1, r4
 8008ec0:	4640      	mov	r0, r8
 8008ec2:	f7ff ff71 	bl	8008da8 <__ssputs_r>
 8008ec6:	3001      	adds	r0, #1
 8008ec8:	f000 80a4 	beq.w	8009014 <_svfiprintf_r+0x1b8>
 8008ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ece:	4453      	add	r3, sl
 8008ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ed2:	783b      	ldrb	r3, [r7, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f000 809d 	beq.w	8009014 <_svfiprintf_r+0x1b8>
 8008eda:	2300      	movs	r3, #0
 8008edc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ee0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ee4:	9304      	str	r3, [sp, #16]
 8008ee6:	9307      	str	r3, [sp, #28]
 8008ee8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008eec:	931a      	str	r3, [sp, #104]	; 0x68
 8008eee:	462f      	mov	r7, r5
 8008ef0:	2205      	movs	r2, #5
 8008ef2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008ef6:	4850      	ldr	r0, [pc, #320]	; (8009038 <_svfiprintf_r+0x1dc>)
 8008ef8:	f7f7 f992 	bl	8000220 <memchr>
 8008efc:	9b04      	ldr	r3, [sp, #16]
 8008efe:	b9d0      	cbnz	r0, 8008f36 <_svfiprintf_r+0xda>
 8008f00:	06d9      	lsls	r1, r3, #27
 8008f02:	bf44      	itt	mi
 8008f04:	2220      	movmi	r2, #32
 8008f06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f0a:	071a      	lsls	r2, r3, #28
 8008f0c:	bf44      	itt	mi
 8008f0e:	222b      	movmi	r2, #43	; 0x2b
 8008f10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f14:	782a      	ldrb	r2, [r5, #0]
 8008f16:	2a2a      	cmp	r2, #42	; 0x2a
 8008f18:	d015      	beq.n	8008f46 <_svfiprintf_r+0xea>
 8008f1a:	9a07      	ldr	r2, [sp, #28]
 8008f1c:	462f      	mov	r7, r5
 8008f1e:	2000      	movs	r0, #0
 8008f20:	250a      	movs	r5, #10
 8008f22:	4639      	mov	r1, r7
 8008f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f28:	3b30      	subs	r3, #48	; 0x30
 8008f2a:	2b09      	cmp	r3, #9
 8008f2c:	d94d      	bls.n	8008fca <_svfiprintf_r+0x16e>
 8008f2e:	b1b8      	cbz	r0, 8008f60 <_svfiprintf_r+0x104>
 8008f30:	e00f      	b.n	8008f52 <_svfiprintf_r+0xf6>
 8008f32:	462f      	mov	r7, r5
 8008f34:	e7b8      	b.n	8008ea8 <_svfiprintf_r+0x4c>
 8008f36:	4a40      	ldr	r2, [pc, #256]	; (8009038 <_svfiprintf_r+0x1dc>)
 8008f38:	1a80      	subs	r0, r0, r2
 8008f3a:	fa0b f000 	lsl.w	r0, fp, r0
 8008f3e:	4318      	orrs	r0, r3
 8008f40:	9004      	str	r0, [sp, #16]
 8008f42:	463d      	mov	r5, r7
 8008f44:	e7d3      	b.n	8008eee <_svfiprintf_r+0x92>
 8008f46:	9a03      	ldr	r2, [sp, #12]
 8008f48:	1d11      	adds	r1, r2, #4
 8008f4a:	6812      	ldr	r2, [r2, #0]
 8008f4c:	9103      	str	r1, [sp, #12]
 8008f4e:	2a00      	cmp	r2, #0
 8008f50:	db01      	blt.n	8008f56 <_svfiprintf_r+0xfa>
 8008f52:	9207      	str	r2, [sp, #28]
 8008f54:	e004      	b.n	8008f60 <_svfiprintf_r+0x104>
 8008f56:	4252      	negs	r2, r2
 8008f58:	f043 0302 	orr.w	r3, r3, #2
 8008f5c:	9207      	str	r2, [sp, #28]
 8008f5e:	9304      	str	r3, [sp, #16]
 8008f60:	783b      	ldrb	r3, [r7, #0]
 8008f62:	2b2e      	cmp	r3, #46	; 0x2e
 8008f64:	d10c      	bne.n	8008f80 <_svfiprintf_r+0x124>
 8008f66:	787b      	ldrb	r3, [r7, #1]
 8008f68:	2b2a      	cmp	r3, #42	; 0x2a
 8008f6a:	d133      	bne.n	8008fd4 <_svfiprintf_r+0x178>
 8008f6c:	9b03      	ldr	r3, [sp, #12]
 8008f6e:	1d1a      	adds	r2, r3, #4
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	9203      	str	r2, [sp, #12]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	bfb8      	it	lt
 8008f78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008f7c:	3702      	adds	r7, #2
 8008f7e:	9305      	str	r3, [sp, #20]
 8008f80:	4d2e      	ldr	r5, [pc, #184]	; (800903c <_svfiprintf_r+0x1e0>)
 8008f82:	7839      	ldrb	r1, [r7, #0]
 8008f84:	2203      	movs	r2, #3
 8008f86:	4628      	mov	r0, r5
 8008f88:	f7f7 f94a 	bl	8000220 <memchr>
 8008f8c:	b138      	cbz	r0, 8008f9e <_svfiprintf_r+0x142>
 8008f8e:	2340      	movs	r3, #64	; 0x40
 8008f90:	1b40      	subs	r0, r0, r5
 8008f92:	fa03 f000 	lsl.w	r0, r3, r0
 8008f96:	9b04      	ldr	r3, [sp, #16]
 8008f98:	4303      	orrs	r3, r0
 8008f9a:	3701      	adds	r7, #1
 8008f9c:	9304      	str	r3, [sp, #16]
 8008f9e:	7839      	ldrb	r1, [r7, #0]
 8008fa0:	4827      	ldr	r0, [pc, #156]	; (8009040 <_svfiprintf_r+0x1e4>)
 8008fa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fa6:	2206      	movs	r2, #6
 8008fa8:	1c7e      	adds	r6, r7, #1
 8008faa:	f7f7 f939 	bl	8000220 <memchr>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	d038      	beq.n	8009024 <_svfiprintf_r+0x1c8>
 8008fb2:	4b24      	ldr	r3, [pc, #144]	; (8009044 <_svfiprintf_r+0x1e8>)
 8008fb4:	bb13      	cbnz	r3, 8008ffc <_svfiprintf_r+0x1a0>
 8008fb6:	9b03      	ldr	r3, [sp, #12]
 8008fb8:	3307      	adds	r3, #7
 8008fba:	f023 0307 	bic.w	r3, r3, #7
 8008fbe:	3308      	adds	r3, #8
 8008fc0:	9303      	str	r3, [sp, #12]
 8008fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fc4:	444b      	add	r3, r9
 8008fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fc8:	e76d      	b.n	8008ea6 <_svfiprintf_r+0x4a>
 8008fca:	fb05 3202 	mla	r2, r5, r2, r3
 8008fce:	2001      	movs	r0, #1
 8008fd0:	460f      	mov	r7, r1
 8008fd2:	e7a6      	b.n	8008f22 <_svfiprintf_r+0xc6>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	3701      	adds	r7, #1
 8008fd8:	9305      	str	r3, [sp, #20]
 8008fda:	4619      	mov	r1, r3
 8008fdc:	250a      	movs	r5, #10
 8008fde:	4638      	mov	r0, r7
 8008fe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fe4:	3a30      	subs	r2, #48	; 0x30
 8008fe6:	2a09      	cmp	r2, #9
 8008fe8:	d903      	bls.n	8008ff2 <_svfiprintf_r+0x196>
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d0c8      	beq.n	8008f80 <_svfiprintf_r+0x124>
 8008fee:	9105      	str	r1, [sp, #20]
 8008ff0:	e7c6      	b.n	8008f80 <_svfiprintf_r+0x124>
 8008ff2:	fb05 2101 	mla	r1, r5, r1, r2
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	4607      	mov	r7, r0
 8008ffa:	e7f0      	b.n	8008fde <_svfiprintf_r+0x182>
 8008ffc:	ab03      	add	r3, sp, #12
 8008ffe:	9300      	str	r3, [sp, #0]
 8009000:	4622      	mov	r2, r4
 8009002:	4b11      	ldr	r3, [pc, #68]	; (8009048 <_svfiprintf_r+0x1ec>)
 8009004:	a904      	add	r1, sp, #16
 8009006:	4640      	mov	r0, r8
 8009008:	f3af 8000 	nop.w
 800900c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009010:	4681      	mov	r9, r0
 8009012:	d1d6      	bne.n	8008fc2 <_svfiprintf_r+0x166>
 8009014:	89a3      	ldrh	r3, [r4, #12]
 8009016:	065b      	lsls	r3, r3, #25
 8009018:	f53f af35 	bmi.w	8008e86 <_svfiprintf_r+0x2a>
 800901c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800901e:	b01d      	add	sp, #116	; 0x74
 8009020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009024:	ab03      	add	r3, sp, #12
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	4622      	mov	r2, r4
 800902a:	4b07      	ldr	r3, [pc, #28]	; (8009048 <_svfiprintf_r+0x1ec>)
 800902c:	a904      	add	r1, sp, #16
 800902e:	4640      	mov	r0, r8
 8009030:	f000 f882 	bl	8009138 <_printf_i>
 8009034:	e7ea      	b.n	800900c <_svfiprintf_r+0x1b0>
 8009036:	bf00      	nop
 8009038:	0800978c 	.word	0x0800978c
 800903c:	08009792 	.word	0x08009792
 8009040:	08009796 	.word	0x08009796
 8009044:	00000000 	.word	0x00000000
 8009048:	08008da9 	.word	0x08008da9

0800904c <_printf_common>:
 800904c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009050:	4691      	mov	r9, r2
 8009052:	461f      	mov	r7, r3
 8009054:	688a      	ldr	r2, [r1, #8]
 8009056:	690b      	ldr	r3, [r1, #16]
 8009058:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800905c:	4293      	cmp	r3, r2
 800905e:	bfb8      	it	lt
 8009060:	4613      	movlt	r3, r2
 8009062:	f8c9 3000 	str.w	r3, [r9]
 8009066:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800906a:	4606      	mov	r6, r0
 800906c:	460c      	mov	r4, r1
 800906e:	b112      	cbz	r2, 8009076 <_printf_common+0x2a>
 8009070:	3301      	adds	r3, #1
 8009072:	f8c9 3000 	str.w	r3, [r9]
 8009076:	6823      	ldr	r3, [r4, #0]
 8009078:	0699      	lsls	r1, r3, #26
 800907a:	bf42      	ittt	mi
 800907c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009080:	3302      	addmi	r3, #2
 8009082:	f8c9 3000 	strmi.w	r3, [r9]
 8009086:	6825      	ldr	r5, [r4, #0]
 8009088:	f015 0506 	ands.w	r5, r5, #6
 800908c:	d107      	bne.n	800909e <_printf_common+0x52>
 800908e:	f104 0a19 	add.w	sl, r4, #25
 8009092:	68e3      	ldr	r3, [r4, #12]
 8009094:	f8d9 2000 	ldr.w	r2, [r9]
 8009098:	1a9b      	subs	r3, r3, r2
 800909a:	42ab      	cmp	r3, r5
 800909c:	dc28      	bgt.n	80090f0 <_printf_common+0xa4>
 800909e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80090a2:	6822      	ldr	r2, [r4, #0]
 80090a4:	3300      	adds	r3, #0
 80090a6:	bf18      	it	ne
 80090a8:	2301      	movne	r3, #1
 80090aa:	0692      	lsls	r2, r2, #26
 80090ac:	d42d      	bmi.n	800910a <_printf_common+0xbe>
 80090ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090b2:	4639      	mov	r1, r7
 80090b4:	4630      	mov	r0, r6
 80090b6:	47c0      	blx	r8
 80090b8:	3001      	adds	r0, #1
 80090ba:	d020      	beq.n	80090fe <_printf_common+0xb2>
 80090bc:	6823      	ldr	r3, [r4, #0]
 80090be:	68e5      	ldr	r5, [r4, #12]
 80090c0:	f8d9 2000 	ldr.w	r2, [r9]
 80090c4:	f003 0306 	and.w	r3, r3, #6
 80090c8:	2b04      	cmp	r3, #4
 80090ca:	bf08      	it	eq
 80090cc:	1aad      	subeq	r5, r5, r2
 80090ce:	68a3      	ldr	r3, [r4, #8]
 80090d0:	6922      	ldr	r2, [r4, #16]
 80090d2:	bf0c      	ite	eq
 80090d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090d8:	2500      	movne	r5, #0
 80090da:	4293      	cmp	r3, r2
 80090dc:	bfc4      	itt	gt
 80090de:	1a9b      	subgt	r3, r3, r2
 80090e0:	18ed      	addgt	r5, r5, r3
 80090e2:	f04f 0900 	mov.w	r9, #0
 80090e6:	341a      	adds	r4, #26
 80090e8:	454d      	cmp	r5, r9
 80090ea:	d11a      	bne.n	8009122 <_printf_common+0xd6>
 80090ec:	2000      	movs	r0, #0
 80090ee:	e008      	b.n	8009102 <_printf_common+0xb6>
 80090f0:	2301      	movs	r3, #1
 80090f2:	4652      	mov	r2, sl
 80090f4:	4639      	mov	r1, r7
 80090f6:	4630      	mov	r0, r6
 80090f8:	47c0      	blx	r8
 80090fa:	3001      	adds	r0, #1
 80090fc:	d103      	bne.n	8009106 <_printf_common+0xba>
 80090fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009106:	3501      	adds	r5, #1
 8009108:	e7c3      	b.n	8009092 <_printf_common+0x46>
 800910a:	18e1      	adds	r1, r4, r3
 800910c:	1c5a      	adds	r2, r3, #1
 800910e:	2030      	movs	r0, #48	; 0x30
 8009110:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009114:	4422      	add	r2, r4
 8009116:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800911a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800911e:	3302      	adds	r3, #2
 8009120:	e7c5      	b.n	80090ae <_printf_common+0x62>
 8009122:	2301      	movs	r3, #1
 8009124:	4622      	mov	r2, r4
 8009126:	4639      	mov	r1, r7
 8009128:	4630      	mov	r0, r6
 800912a:	47c0      	blx	r8
 800912c:	3001      	adds	r0, #1
 800912e:	d0e6      	beq.n	80090fe <_printf_common+0xb2>
 8009130:	f109 0901 	add.w	r9, r9, #1
 8009134:	e7d8      	b.n	80090e8 <_printf_common+0x9c>
	...

08009138 <_printf_i>:
 8009138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800913c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009140:	460c      	mov	r4, r1
 8009142:	7e09      	ldrb	r1, [r1, #24]
 8009144:	b085      	sub	sp, #20
 8009146:	296e      	cmp	r1, #110	; 0x6e
 8009148:	4617      	mov	r7, r2
 800914a:	4606      	mov	r6, r0
 800914c:	4698      	mov	r8, r3
 800914e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009150:	f000 80b3 	beq.w	80092ba <_printf_i+0x182>
 8009154:	d822      	bhi.n	800919c <_printf_i+0x64>
 8009156:	2963      	cmp	r1, #99	; 0x63
 8009158:	d036      	beq.n	80091c8 <_printf_i+0x90>
 800915a:	d80a      	bhi.n	8009172 <_printf_i+0x3a>
 800915c:	2900      	cmp	r1, #0
 800915e:	f000 80b9 	beq.w	80092d4 <_printf_i+0x19c>
 8009162:	2958      	cmp	r1, #88	; 0x58
 8009164:	f000 8083 	beq.w	800926e <_printf_i+0x136>
 8009168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800916c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009170:	e032      	b.n	80091d8 <_printf_i+0xa0>
 8009172:	2964      	cmp	r1, #100	; 0x64
 8009174:	d001      	beq.n	800917a <_printf_i+0x42>
 8009176:	2969      	cmp	r1, #105	; 0x69
 8009178:	d1f6      	bne.n	8009168 <_printf_i+0x30>
 800917a:	6820      	ldr	r0, [r4, #0]
 800917c:	6813      	ldr	r3, [r2, #0]
 800917e:	0605      	lsls	r5, r0, #24
 8009180:	f103 0104 	add.w	r1, r3, #4
 8009184:	d52a      	bpl.n	80091dc <_printf_i+0xa4>
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6011      	str	r1, [r2, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	da03      	bge.n	8009196 <_printf_i+0x5e>
 800918e:	222d      	movs	r2, #45	; 0x2d
 8009190:	425b      	negs	r3, r3
 8009192:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009196:	486f      	ldr	r0, [pc, #444]	; (8009354 <_printf_i+0x21c>)
 8009198:	220a      	movs	r2, #10
 800919a:	e039      	b.n	8009210 <_printf_i+0xd8>
 800919c:	2973      	cmp	r1, #115	; 0x73
 800919e:	f000 809d 	beq.w	80092dc <_printf_i+0x1a4>
 80091a2:	d808      	bhi.n	80091b6 <_printf_i+0x7e>
 80091a4:	296f      	cmp	r1, #111	; 0x6f
 80091a6:	d020      	beq.n	80091ea <_printf_i+0xb2>
 80091a8:	2970      	cmp	r1, #112	; 0x70
 80091aa:	d1dd      	bne.n	8009168 <_printf_i+0x30>
 80091ac:	6823      	ldr	r3, [r4, #0]
 80091ae:	f043 0320 	orr.w	r3, r3, #32
 80091b2:	6023      	str	r3, [r4, #0]
 80091b4:	e003      	b.n	80091be <_printf_i+0x86>
 80091b6:	2975      	cmp	r1, #117	; 0x75
 80091b8:	d017      	beq.n	80091ea <_printf_i+0xb2>
 80091ba:	2978      	cmp	r1, #120	; 0x78
 80091bc:	d1d4      	bne.n	8009168 <_printf_i+0x30>
 80091be:	2378      	movs	r3, #120	; 0x78
 80091c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091c4:	4864      	ldr	r0, [pc, #400]	; (8009358 <_printf_i+0x220>)
 80091c6:	e055      	b.n	8009274 <_printf_i+0x13c>
 80091c8:	6813      	ldr	r3, [r2, #0]
 80091ca:	1d19      	adds	r1, r3, #4
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6011      	str	r1, [r2, #0]
 80091d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091d8:	2301      	movs	r3, #1
 80091da:	e08c      	b.n	80092f6 <_printf_i+0x1be>
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6011      	str	r1, [r2, #0]
 80091e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80091e4:	bf18      	it	ne
 80091e6:	b21b      	sxthne	r3, r3
 80091e8:	e7cf      	b.n	800918a <_printf_i+0x52>
 80091ea:	6813      	ldr	r3, [r2, #0]
 80091ec:	6825      	ldr	r5, [r4, #0]
 80091ee:	1d18      	adds	r0, r3, #4
 80091f0:	6010      	str	r0, [r2, #0]
 80091f2:	0628      	lsls	r0, r5, #24
 80091f4:	d501      	bpl.n	80091fa <_printf_i+0xc2>
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	e002      	b.n	8009200 <_printf_i+0xc8>
 80091fa:	0668      	lsls	r0, r5, #25
 80091fc:	d5fb      	bpl.n	80091f6 <_printf_i+0xbe>
 80091fe:	881b      	ldrh	r3, [r3, #0]
 8009200:	4854      	ldr	r0, [pc, #336]	; (8009354 <_printf_i+0x21c>)
 8009202:	296f      	cmp	r1, #111	; 0x6f
 8009204:	bf14      	ite	ne
 8009206:	220a      	movne	r2, #10
 8009208:	2208      	moveq	r2, #8
 800920a:	2100      	movs	r1, #0
 800920c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009210:	6865      	ldr	r5, [r4, #4]
 8009212:	60a5      	str	r5, [r4, #8]
 8009214:	2d00      	cmp	r5, #0
 8009216:	f2c0 8095 	blt.w	8009344 <_printf_i+0x20c>
 800921a:	6821      	ldr	r1, [r4, #0]
 800921c:	f021 0104 	bic.w	r1, r1, #4
 8009220:	6021      	str	r1, [r4, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d13d      	bne.n	80092a2 <_printf_i+0x16a>
 8009226:	2d00      	cmp	r5, #0
 8009228:	f040 808e 	bne.w	8009348 <_printf_i+0x210>
 800922c:	4665      	mov	r5, ip
 800922e:	2a08      	cmp	r2, #8
 8009230:	d10b      	bne.n	800924a <_printf_i+0x112>
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	07db      	lsls	r3, r3, #31
 8009236:	d508      	bpl.n	800924a <_printf_i+0x112>
 8009238:	6923      	ldr	r3, [r4, #16]
 800923a:	6862      	ldr	r2, [r4, #4]
 800923c:	429a      	cmp	r2, r3
 800923e:	bfde      	ittt	le
 8009240:	2330      	movle	r3, #48	; 0x30
 8009242:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009246:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800924a:	ebac 0305 	sub.w	r3, ip, r5
 800924e:	6123      	str	r3, [r4, #16]
 8009250:	f8cd 8000 	str.w	r8, [sp]
 8009254:	463b      	mov	r3, r7
 8009256:	aa03      	add	r2, sp, #12
 8009258:	4621      	mov	r1, r4
 800925a:	4630      	mov	r0, r6
 800925c:	f7ff fef6 	bl	800904c <_printf_common>
 8009260:	3001      	adds	r0, #1
 8009262:	d14d      	bne.n	8009300 <_printf_i+0x1c8>
 8009264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009268:	b005      	add	sp, #20
 800926a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800926e:	4839      	ldr	r0, [pc, #228]	; (8009354 <_printf_i+0x21c>)
 8009270:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009274:	6813      	ldr	r3, [r2, #0]
 8009276:	6821      	ldr	r1, [r4, #0]
 8009278:	1d1d      	adds	r5, r3, #4
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	6015      	str	r5, [r2, #0]
 800927e:	060a      	lsls	r2, r1, #24
 8009280:	d50b      	bpl.n	800929a <_printf_i+0x162>
 8009282:	07ca      	lsls	r2, r1, #31
 8009284:	bf44      	itt	mi
 8009286:	f041 0120 	orrmi.w	r1, r1, #32
 800928a:	6021      	strmi	r1, [r4, #0]
 800928c:	b91b      	cbnz	r3, 8009296 <_printf_i+0x15e>
 800928e:	6822      	ldr	r2, [r4, #0]
 8009290:	f022 0220 	bic.w	r2, r2, #32
 8009294:	6022      	str	r2, [r4, #0]
 8009296:	2210      	movs	r2, #16
 8009298:	e7b7      	b.n	800920a <_printf_i+0xd2>
 800929a:	064d      	lsls	r5, r1, #25
 800929c:	bf48      	it	mi
 800929e:	b29b      	uxthmi	r3, r3
 80092a0:	e7ef      	b.n	8009282 <_printf_i+0x14a>
 80092a2:	4665      	mov	r5, ip
 80092a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80092a8:	fb02 3311 	mls	r3, r2, r1, r3
 80092ac:	5cc3      	ldrb	r3, [r0, r3]
 80092ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80092b2:	460b      	mov	r3, r1
 80092b4:	2900      	cmp	r1, #0
 80092b6:	d1f5      	bne.n	80092a4 <_printf_i+0x16c>
 80092b8:	e7b9      	b.n	800922e <_printf_i+0xf6>
 80092ba:	6813      	ldr	r3, [r2, #0]
 80092bc:	6825      	ldr	r5, [r4, #0]
 80092be:	6961      	ldr	r1, [r4, #20]
 80092c0:	1d18      	adds	r0, r3, #4
 80092c2:	6010      	str	r0, [r2, #0]
 80092c4:	0628      	lsls	r0, r5, #24
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	d501      	bpl.n	80092ce <_printf_i+0x196>
 80092ca:	6019      	str	r1, [r3, #0]
 80092cc:	e002      	b.n	80092d4 <_printf_i+0x19c>
 80092ce:	066a      	lsls	r2, r5, #25
 80092d0:	d5fb      	bpl.n	80092ca <_printf_i+0x192>
 80092d2:	8019      	strh	r1, [r3, #0]
 80092d4:	2300      	movs	r3, #0
 80092d6:	6123      	str	r3, [r4, #16]
 80092d8:	4665      	mov	r5, ip
 80092da:	e7b9      	b.n	8009250 <_printf_i+0x118>
 80092dc:	6813      	ldr	r3, [r2, #0]
 80092de:	1d19      	adds	r1, r3, #4
 80092e0:	6011      	str	r1, [r2, #0]
 80092e2:	681d      	ldr	r5, [r3, #0]
 80092e4:	6862      	ldr	r2, [r4, #4]
 80092e6:	2100      	movs	r1, #0
 80092e8:	4628      	mov	r0, r5
 80092ea:	f7f6 ff99 	bl	8000220 <memchr>
 80092ee:	b108      	cbz	r0, 80092f4 <_printf_i+0x1bc>
 80092f0:	1b40      	subs	r0, r0, r5
 80092f2:	6060      	str	r0, [r4, #4]
 80092f4:	6863      	ldr	r3, [r4, #4]
 80092f6:	6123      	str	r3, [r4, #16]
 80092f8:	2300      	movs	r3, #0
 80092fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092fe:	e7a7      	b.n	8009250 <_printf_i+0x118>
 8009300:	6923      	ldr	r3, [r4, #16]
 8009302:	462a      	mov	r2, r5
 8009304:	4639      	mov	r1, r7
 8009306:	4630      	mov	r0, r6
 8009308:	47c0      	blx	r8
 800930a:	3001      	adds	r0, #1
 800930c:	d0aa      	beq.n	8009264 <_printf_i+0x12c>
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	079b      	lsls	r3, r3, #30
 8009312:	d413      	bmi.n	800933c <_printf_i+0x204>
 8009314:	68e0      	ldr	r0, [r4, #12]
 8009316:	9b03      	ldr	r3, [sp, #12]
 8009318:	4298      	cmp	r0, r3
 800931a:	bfb8      	it	lt
 800931c:	4618      	movlt	r0, r3
 800931e:	e7a3      	b.n	8009268 <_printf_i+0x130>
 8009320:	2301      	movs	r3, #1
 8009322:	464a      	mov	r2, r9
 8009324:	4639      	mov	r1, r7
 8009326:	4630      	mov	r0, r6
 8009328:	47c0      	blx	r8
 800932a:	3001      	adds	r0, #1
 800932c:	d09a      	beq.n	8009264 <_printf_i+0x12c>
 800932e:	3501      	adds	r5, #1
 8009330:	68e3      	ldr	r3, [r4, #12]
 8009332:	9a03      	ldr	r2, [sp, #12]
 8009334:	1a9b      	subs	r3, r3, r2
 8009336:	42ab      	cmp	r3, r5
 8009338:	dcf2      	bgt.n	8009320 <_printf_i+0x1e8>
 800933a:	e7eb      	b.n	8009314 <_printf_i+0x1dc>
 800933c:	2500      	movs	r5, #0
 800933e:	f104 0919 	add.w	r9, r4, #25
 8009342:	e7f5      	b.n	8009330 <_printf_i+0x1f8>
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1ac      	bne.n	80092a2 <_printf_i+0x16a>
 8009348:	7803      	ldrb	r3, [r0, #0]
 800934a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800934e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009352:	e76c      	b.n	800922e <_printf_i+0xf6>
 8009354:	0800979d 	.word	0x0800979d
 8009358:	080097ae 	.word	0x080097ae

0800935c <memmove>:
 800935c:	4288      	cmp	r0, r1
 800935e:	b510      	push	{r4, lr}
 8009360:	eb01 0302 	add.w	r3, r1, r2
 8009364:	d807      	bhi.n	8009376 <memmove+0x1a>
 8009366:	1e42      	subs	r2, r0, #1
 8009368:	4299      	cmp	r1, r3
 800936a:	d00a      	beq.n	8009382 <memmove+0x26>
 800936c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009370:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009374:	e7f8      	b.n	8009368 <memmove+0xc>
 8009376:	4283      	cmp	r3, r0
 8009378:	d9f5      	bls.n	8009366 <memmove+0xa>
 800937a:	1881      	adds	r1, r0, r2
 800937c:	1ad2      	subs	r2, r2, r3
 800937e:	42d3      	cmn	r3, r2
 8009380:	d100      	bne.n	8009384 <memmove+0x28>
 8009382:	bd10      	pop	{r4, pc}
 8009384:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009388:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800938c:	e7f7      	b.n	800937e <memmove+0x22>
	...

08009390 <_free_r>:
 8009390:	b538      	push	{r3, r4, r5, lr}
 8009392:	4605      	mov	r5, r0
 8009394:	2900      	cmp	r1, #0
 8009396:	d045      	beq.n	8009424 <_free_r+0x94>
 8009398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800939c:	1f0c      	subs	r4, r1, #4
 800939e:	2b00      	cmp	r3, #0
 80093a0:	bfb8      	it	lt
 80093a2:	18e4      	addlt	r4, r4, r3
 80093a4:	f000 f8d2 	bl	800954c <__malloc_lock>
 80093a8:	4a1f      	ldr	r2, [pc, #124]	; (8009428 <_free_r+0x98>)
 80093aa:	6813      	ldr	r3, [r2, #0]
 80093ac:	4610      	mov	r0, r2
 80093ae:	b933      	cbnz	r3, 80093be <_free_r+0x2e>
 80093b0:	6063      	str	r3, [r4, #4]
 80093b2:	6014      	str	r4, [r2, #0]
 80093b4:	4628      	mov	r0, r5
 80093b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093ba:	f000 b8c8 	b.w	800954e <__malloc_unlock>
 80093be:	42a3      	cmp	r3, r4
 80093c0:	d90c      	bls.n	80093dc <_free_r+0x4c>
 80093c2:	6821      	ldr	r1, [r4, #0]
 80093c4:	1862      	adds	r2, r4, r1
 80093c6:	4293      	cmp	r3, r2
 80093c8:	bf04      	itt	eq
 80093ca:	681a      	ldreq	r2, [r3, #0]
 80093cc:	685b      	ldreq	r3, [r3, #4]
 80093ce:	6063      	str	r3, [r4, #4]
 80093d0:	bf04      	itt	eq
 80093d2:	1852      	addeq	r2, r2, r1
 80093d4:	6022      	streq	r2, [r4, #0]
 80093d6:	6004      	str	r4, [r0, #0]
 80093d8:	e7ec      	b.n	80093b4 <_free_r+0x24>
 80093da:	4613      	mov	r3, r2
 80093dc:	685a      	ldr	r2, [r3, #4]
 80093de:	b10a      	cbz	r2, 80093e4 <_free_r+0x54>
 80093e0:	42a2      	cmp	r2, r4
 80093e2:	d9fa      	bls.n	80093da <_free_r+0x4a>
 80093e4:	6819      	ldr	r1, [r3, #0]
 80093e6:	1858      	adds	r0, r3, r1
 80093e8:	42a0      	cmp	r0, r4
 80093ea:	d10b      	bne.n	8009404 <_free_r+0x74>
 80093ec:	6820      	ldr	r0, [r4, #0]
 80093ee:	4401      	add	r1, r0
 80093f0:	1858      	adds	r0, r3, r1
 80093f2:	4282      	cmp	r2, r0
 80093f4:	6019      	str	r1, [r3, #0]
 80093f6:	d1dd      	bne.n	80093b4 <_free_r+0x24>
 80093f8:	6810      	ldr	r0, [r2, #0]
 80093fa:	6852      	ldr	r2, [r2, #4]
 80093fc:	605a      	str	r2, [r3, #4]
 80093fe:	4401      	add	r1, r0
 8009400:	6019      	str	r1, [r3, #0]
 8009402:	e7d7      	b.n	80093b4 <_free_r+0x24>
 8009404:	d902      	bls.n	800940c <_free_r+0x7c>
 8009406:	230c      	movs	r3, #12
 8009408:	602b      	str	r3, [r5, #0]
 800940a:	e7d3      	b.n	80093b4 <_free_r+0x24>
 800940c:	6820      	ldr	r0, [r4, #0]
 800940e:	1821      	adds	r1, r4, r0
 8009410:	428a      	cmp	r2, r1
 8009412:	bf04      	itt	eq
 8009414:	6811      	ldreq	r1, [r2, #0]
 8009416:	6852      	ldreq	r2, [r2, #4]
 8009418:	6062      	str	r2, [r4, #4]
 800941a:	bf04      	itt	eq
 800941c:	1809      	addeq	r1, r1, r0
 800941e:	6021      	streq	r1, [r4, #0]
 8009420:	605c      	str	r4, [r3, #4]
 8009422:	e7c7      	b.n	80093b4 <_free_r+0x24>
 8009424:	bd38      	pop	{r3, r4, r5, pc}
 8009426:	bf00      	nop
 8009428:	20006384 	.word	0x20006384

0800942c <_malloc_r>:
 800942c:	b570      	push	{r4, r5, r6, lr}
 800942e:	1ccd      	adds	r5, r1, #3
 8009430:	f025 0503 	bic.w	r5, r5, #3
 8009434:	3508      	adds	r5, #8
 8009436:	2d0c      	cmp	r5, #12
 8009438:	bf38      	it	cc
 800943a:	250c      	movcc	r5, #12
 800943c:	2d00      	cmp	r5, #0
 800943e:	4606      	mov	r6, r0
 8009440:	db01      	blt.n	8009446 <_malloc_r+0x1a>
 8009442:	42a9      	cmp	r1, r5
 8009444:	d903      	bls.n	800944e <_malloc_r+0x22>
 8009446:	230c      	movs	r3, #12
 8009448:	6033      	str	r3, [r6, #0]
 800944a:	2000      	movs	r0, #0
 800944c:	bd70      	pop	{r4, r5, r6, pc}
 800944e:	f000 f87d 	bl	800954c <__malloc_lock>
 8009452:	4a21      	ldr	r2, [pc, #132]	; (80094d8 <_malloc_r+0xac>)
 8009454:	6814      	ldr	r4, [r2, #0]
 8009456:	4621      	mov	r1, r4
 8009458:	b991      	cbnz	r1, 8009480 <_malloc_r+0x54>
 800945a:	4c20      	ldr	r4, [pc, #128]	; (80094dc <_malloc_r+0xb0>)
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	b91b      	cbnz	r3, 8009468 <_malloc_r+0x3c>
 8009460:	4630      	mov	r0, r6
 8009462:	f000 f863 	bl	800952c <_sbrk_r>
 8009466:	6020      	str	r0, [r4, #0]
 8009468:	4629      	mov	r1, r5
 800946a:	4630      	mov	r0, r6
 800946c:	f000 f85e 	bl	800952c <_sbrk_r>
 8009470:	1c43      	adds	r3, r0, #1
 8009472:	d124      	bne.n	80094be <_malloc_r+0x92>
 8009474:	230c      	movs	r3, #12
 8009476:	6033      	str	r3, [r6, #0]
 8009478:	4630      	mov	r0, r6
 800947a:	f000 f868 	bl	800954e <__malloc_unlock>
 800947e:	e7e4      	b.n	800944a <_malloc_r+0x1e>
 8009480:	680b      	ldr	r3, [r1, #0]
 8009482:	1b5b      	subs	r3, r3, r5
 8009484:	d418      	bmi.n	80094b8 <_malloc_r+0x8c>
 8009486:	2b0b      	cmp	r3, #11
 8009488:	d90f      	bls.n	80094aa <_malloc_r+0x7e>
 800948a:	600b      	str	r3, [r1, #0]
 800948c:	50cd      	str	r5, [r1, r3]
 800948e:	18cc      	adds	r4, r1, r3
 8009490:	4630      	mov	r0, r6
 8009492:	f000 f85c 	bl	800954e <__malloc_unlock>
 8009496:	f104 000b 	add.w	r0, r4, #11
 800949a:	1d23      	adds	r3, r4, #4
 800949c:	f020 0007 	bic.w	r0, r0, #7
 80094a0:	1ac3      	subs	r3, r0, r3
 80094a2:	d0d3      	beq.n	800944c <_malloc_r+0x20>
 80094a4:	425a      	negs	r2, r3
 80094a6:	50e2      	str	r2, [r4, r3]
 80094a8:	e7d0      	b.n	800944c <_malloc_r+0x20>
 80094aa:	428c      	cmp	r4, r1
 80094ac:	684b      	ldr	r3, [r1, #4]
 80094ae:	bf16      	itet	ne
 80094b0:	6063      	strne	r3, [r4, #4]
 80094b2:	6013      	streq	r3, [r2, #0]
 80094b4:	460c      	movne	r4, r1
 80094b6:	e7eb      	b.n	8009490 <_malloc_r+0x64>
 80094b8:	460c      	mov	r4, r1
 80094ba:	6849      	ldr	r1, [r1, #4]
 80094bc:	e7cc      	b.n	8009458 <_malloc_r+0x2c>
 80094be:	1cc4      	adds	r4, r0, #3
 80094c0:	f024 0403 	bic.w	r4, r4, #3
 80094c4:	42a0      	cmp	r0, r4
 80094c6:	d005      	beq.n	80094d4 <_malloc_r+0xa8>
 80094c8:	1a21      	subs	r1, r4, r0
 80094ca:	4630      	mov	r0, r6
 80094cc:	f000 f82e 	bl	800952c <_sbrk_r>
 80094d0:	3001      	adds	r0, #1
 80094d2:	d0cf      	beq.n	8009474 <_malloc_r+0x48>
 80094d4:	6025      	str	r5, [r4, #0]
 80094d6:	e7db      	b.n	8009490 <_malloc_r+0x64>
 80094d8:	20006384 	.word	0x20006384
 80094dc:	20006388 	.word	0x20006388

080094e0 <_realloc_r>:
 80094e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e2:	4607      	mov	r7, r0
 80094e4:	4614      	mov	r4, r2
 80094e6:	460e      	mov	r6, r1
 80094e8:	b921      	cbnz	r1, 80094f4 <_realloc_r+0x14>
 80094ea:	4611      	mov	r1, r2
 80094ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80094f0:	f7ff bf9c 	b.w	800942c <_malloc_r>
 80094f4:	b922      	cbnz	r2, 8009500 <_realloc_r+0x20>
 80094f6:	f7ff ff4b 	bl	8009390 <_free_r>
 80094fa:	4625      	mov	r5, r4
 80094fc:	4628      	mov	r0, r5
 80094fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009500:	f000 f826 	bl	8009550 <_malloc_usable_size_r>
 8009504:	42a0      	cmp	r0, r4
 8009506:	d20f      	bcs.n	8009528 <_realloc_r+0x48>
 8009508:	4621      	mov	r1, r4
 800950a:	4638      	mov	r0, r7
 800950c:	f7ff ff8e 	bl	800942c <_malloc_r>
 8009510:	4605      	mov	r5, r0
 8009512:	2800      	cmp	r0, #0
 8009514:	d0f2      	beq.n	80094fc <_realloc_r+0x1c>
 8009516:	4631      	mov	r1, r6
 8009518:	4622      	mov	r2, r4
 800951a:	f7ff fc11 	bl	8008d40 <memcpy>
 800951e:	4631      	mov	r1, r6
 8009520:	4638      	mov	r0, r7
 8009522:	f7ff ff35 	bl	8009390 <_free_r>
 8009526:	e7e9      	b.n	80094fc <_realloc_r+0x1c>
 8009528:	4635      	mov	r5, r6
 800952a:	e7e7      	b.n	80094fc <_realloc_r+0x1c>

0800952c <_sbrk_r>:
 800952c:	b538      	push	{r3, r4, r5, lr}
 800952e:	4c06      	ldr	r4, [pc, #24]	; (8009548 <_sbrk_r+0x1c>)
 8009530:	2300      	movs	r3, #0
 8009532:	4605      	mov	r5, r0
 8009534:	4608      	mov	r0, r1
 8009536:	6023      	str	r3, [r4, #0]
 8009538:	f7f7 fde8 	bl	800110c <_sbrk>
 800953c:	1c43      	adds	r3, r0, #1
 800953e:	d102      	bne.n	8009546 <_sbrk_r+0x1a>
 8009540:	6823      	ldr	r3, [r4, #0]
 8009542:	b103      	cbz	r3, 8009546 <_sbrk_r+0x1a>
 8009544:	602b      	str	r3, [r5, #0]
 8009546:	bd38      	pop	{r3, r4, r5, pc}
 8009548:	200066e4 	.word	0x200066e4

0800954c <__malloc_lock>:
 800954c:	4770      	bx	lr

0800954e <__malloc_unlock>:
 800954e:	4770      	bx	lr

08009550 <_malloc_usable_size_r>:
 8009550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009554:	1f18      	subs	r0, r3, #4
 8009556:	2b00      	cmp	r3, #0
 8009558:	bfbc      	itt	lt
 800955a:	580b      	ldrlt	r3, [r1, r0]
 800955c:	18c0      	addlt	r0, r0, r3
 800955e:	4770      	bx	lr

08009560 <_init>:
 8009560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009562:	bf00      	nop
 8009564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009566:	bc08      	pop	{r3}
 8009568:	469e      	mov	lr, r3
 800956a:	4770      	bx	lr

0800956c <_fini>:
 800956c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956e:	bf00      	nop
 8009570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009572:	bc08      	pop	{r3}
 8009574:	469e      	mov	lr, r3
 8009576:	4770      	bx	lr
