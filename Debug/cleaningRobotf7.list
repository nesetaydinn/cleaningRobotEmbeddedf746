
cleaningRobotf7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08009874  08009874  00019874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099c8  080099c8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080099c8  080099c8  000199c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099d0  080099d0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099d0  080099d0  000199d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099d4  080099d4  000199d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080099d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c98  20000078  08009a50  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d10  08009a50  00024d10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022be9  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000431c  00000000  00000000  00042c91  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001af8  00000000  00000000  00046fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018f0  00000000  00000000  00048aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004ee9  00000000  00000000  0004a398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016e53  00000000  00000000  0004f281  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fda9e  00000000  00000000  000660d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00163b72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072e4  00000000  00000000  00163bf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800985c 	.word	0x0800985c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800985c 	.word	0x0800985c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fd57 	bl	8001076 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f812 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 fa36 	bl	8000a3c <MX_GPIO_Init>
  MX_ADC1_Init();
 80005d0:	f000 f8a2 	bl	8000718 <MX_ADC1_Init>
  MX_TIM2_Init();
 80005d4:	f000 f984 	bl	80008e0 <MX_TIM2_Init>
  MX_ADC3_Init();
 80005d8:	f000 f8f0 	bl	80007bc <MX_ADC3_Init>
  MX_UART7_Init();
 80005dc:	f000 f9ce 	bl	800097c <MX_UART7_Init>
  MX_USART6_UART_Init();
 80005e0:	f000 f9fc 	bl	80009dc <MX_USART6_UART_Init>
  MX_I2C1_Init();
 80005e4:	f000 f93c 	bl	8000860 <MX_I2C1_Init>
  tasks_init();
 80005e8:	f008 fbe0 	bl	8008dac <tasks_init>
  while (1)
 80005ec:	e7fe      	b.n	80005ec <main+0x2c>
	...

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b0b4      	sub	sp, #208	; 0xd0
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f008 fd27 	bl	8009052 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2284      	movs	r2, #132	; 0x84
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f008 fd18 	bl	8009052 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000622:	4b3b      	ldr	r3, [pc, #236]	; (8000710 <SystemClock_Config+0x120>)
 8000624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000626:	4a3a      	ldr	r2, [pc, #232]	; (8000710 <SystemClock_Config+0x120>)
 8000628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062c:	6413      	str	r3, [r2, #64]	; 0x40
 800062e:	4b38      	ldr	r3, [pc, #224]	; (8000710 <SystemClock_Config+0x120>)
 8000630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063a:	4b36      	ldr	r3, [pc, #216]	; (8000714 <SystemClock_Config+0x124>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a35      	ldr	r2, [pc, #212]	; (8000714 <SystemClock_Config+0x124>)
 8000640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000644:	6013      	str	r3, [r2, #0]
 8000646:	4b33      	ldr	r3, [pc, #204]	; (8000714 <SystemClock_Config+0x124>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000652:	2301      	movs	r3, #1
 8000654:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000660:	2302      	movs	r3, #2
 8000662:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800066e:	2319      	movs	r3, #25
 8000670:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000674:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000678:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000682:	2302      	movs	r3, #2
 8000684:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800068c:	4618      	mov	r0, r3
 800068e:	f002 f8fd 	bl	800288c <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000698:	f000 fa58 	bl	8000b4c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800069c:	f002 f8a6 	bl	80027ec <HAL_PWREx_EnableOverDrive>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006a6:	f000 fa51 	bl	8000b4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	230f      	movs	r3, #15
 80006ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006d0:	2107      	movs	r1, #7
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fb7e 	bl	8002dd4 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80006de:	f000 fa35 	bl	8000b4c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_UART7
 80006e2:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 80006e6:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80006e8:	2300      	movs	r3, #0
 80006ea:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fd6f 	bl	80031dc <HAL_RCCEx_PeriphCLKConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000704:	f000 fa22 	bl	8000b4c <Error_Handler>
  }
}
 8000708:	bf00      	nop
 800070a:	37d0      	adds	r7, #208	; 0xd0
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800071e:	463b      	mov	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800072a:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <MX_ADC1_Init+0x98>)
 800072c:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <MX_ADC1_Init+0x9c>)
 800072e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000730:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000732:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000736:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000738:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_ADC1_Init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000744:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000746:	2201      	movs	r2, #1
 8000748:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <MX_ADC1_Init+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000754:	2200      	movs	r2, #0
 8000756:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_ADC1_Init+0x98>)
 800075a:	4a17      	ldr	r2, [pc, #92]	; (80007b8 <MX_ADC1_Init+0xa0>)
 800075c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000766:	2201      	movs	r2, #1
 8000768:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_ADC1_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_ADC1_Init+0x98>)
 8000774:	2201      	movs	r2, #1
 8000776:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <MX_ADC1_Init+0x98>)
 800077a:	f000 fccb 	bl	8001114 <HAL_ADC_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000784:	f000 f9e2 	bl	8000b4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000788:	2300      	movs	r3, #0
 800078a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800078c:	2301      	movs	r3, #1
 800078e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000790:	2305      	movs	r3, #5
 8000792:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_ADC1_Init+0x98>)
 800079a:	f000 fe85 	bl	80014a8 <HAL_ADC_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007a4:	f000 f9d2 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20004a9c 	.word	0x20004a9c
 80007b4:	40012000 	.word	0x40012000
 80007b8:	0f000001 	.word	0x0f000001

080007bc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007c2:	463b      	mov	r3, r7
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_ADC3_Init+0x98>)
 80007d0:	4a21      	ldr	r2, [pc, #132]	; (8000858 <MX_ADC3_Init+0x9c>)
 80007d2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007d4:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <MX_ADC3_Init+0x98>)
 80007d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007da:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007dc:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <MX_ADC3_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_ADC3_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_ADC3_Init+0x98>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <MX_ADC3_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_ADC3_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_ADC3_Init+0x98>)
 80007fe:	4a17      	ldr	r2, [pc, #92]	; (800085c <MX_ADC3_Init+0xa0>)
 8000800:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_ADC3_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_ADC3_Init+0x98>)
 800080a:	2201      	movs	r2, #1
 800080c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_ADC3_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_ADC3_Init+0x98>)
 8000818:	2201      	movs	r2, #1
 800081a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800081c:	480d      	ldr	r0, [pc, #52]	; (8000854 <MX_ADC3_Init+0x98>)
 800081e:	f000 fc79 	bl	8001114 <HAL_ADC_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000828:	f000 f990 	bl	8000b4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800082c:	2308      	movs	r3, #8
 800082e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000830:	2301      	movs	r3, #1
 8000832:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000834:	2305      	movs	r3, #5
 8000836:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000838:	463b      	mov	r3, r7
 800083a:	4619      	mov	r1, r3
 800083c:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_ADC3_Init+0x98>)
 800083e:	f000 fe33 	bl	80014a8 <HAL_ADC_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000848:	f000 f980 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20004ae4 	.word	0x20004ae4
 8000858:	40012200 	.word	0x40012200
 800085c:	0f000001 	.word	0x0f000001

08000860 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <MX_I2C1_Init+0x78>)
 8000868:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_I2C1_Init+0x74>)
 800086c:	4a1b      	ldr	r2, [pc, #108]	; (80008dc <MX_I2C1_Init+0x7c>)
 800086e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000878:	2201      	movs	r2, #1
 800087a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_I2C1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800089a:	480e      	ldr	r0, [pc, #56]	; (80008d4 <MX_I2C1_Init+0x74>)
 800089c:	f001 fb0e 	bl	8001ebc <HAL_I2C_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008a6:	f000 f951 	bl	8000b4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008aa:	2100      	movs	r1, #0
 80008ac:	4809      	ldr	r0, [pc, #36]	; (80008d4 <MX_I2C1_Init+0x74>)
 80008ae:	f001 ff05 	bl	80026bc <HAL_I2CEx_ConfigAnalogFilter>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008b8:	f000 f948 	bl	8000b4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008bc:	2100      	movs	r1, #0
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_I2C1_Init+0x74>)
 80008c0:	f001 ff47 	bl	8002752 <HAL_I2CEx_ConfigDigitalFilter>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ca:	f000 f93f 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20004a50 	.word	0x20004a50
 80008d8:	40005400 	.word	0x40005400
 80008dc:	20404768 	.word	0x20404768

080008e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e6:	f107 0310 	add.w	r3, r7, #16
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008fe:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_TIM2_Init+0x98>)
 8000900:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000904:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 53999;
 8000906:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <MX_TIM2_Init+0x98>)
 8000908:	f24d 22ef 	movw	r2, #53999	; 0xd2ef
 800090c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_TIM2_Init+0x98>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_TIM2_Init+0x98>)
 8000916:	2201      	movs	r2, #1
 8000918:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_TIM2_Init+0x98>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_TIM2_Init+0x98>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000926:	4814      	ldr	r0, [pc, #80]	; (8000978 <MX_TIM2_Init+0x98>)
 8000928:	f003 f846 	bl	80039b8 <HAL_TIM_Base_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000932:	f000 f90b 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	4619      	mov	r1, r3
 8000942:	480d      	ldr	r0, [pc, #52]	; (8000978 <MX_TIM2_Init+0x98>)
 8000944:	f003 f9ae 	bl	8003ca4 <HAL_TIM_ConfigClockSource>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800094e:	f000 f8fd 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000952:	2320      	movs	r3, #32
 8000954:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	4619      	mov	r1, r3
 800095e:	4806      	ldr	r0, [pc, #24]	; (8000978 <MX_TIM2_Init+0x98>)
 8000960:	f003 fbbc 	bl	80040dc <HAL_TIMEx_MasterConfigSynchronization>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800096a:	f000 f8ef 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	3720      	adds	r7, #32
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20004bac 	.word	0x20004bac

0800097c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_UART7_Init+0x58>)
 8000982:	4a15      	ldr	r2, [pc, #84]	; (80009d8 <MX_UART7_Init+0x5c>)
 8000984:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 57600;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_UART7_Init+0x58>)
 8000988:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800098c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_UART7_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_UART7_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_UART7_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_UART7_Init+0x58>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_UART7_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_UART7_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_UART7_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_UART7_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_UART7_Init+0x58>)
 80009c0:	f003 fc38 	bl	8004234 <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_UART7_Init+0x52>
  {
    Error_Handler();
 80009ca:	f000 f8bf 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200049d0 	.word	0x200049d0
 80009d8:	40007800 	.word	0x40007800

080009dc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_USART6_UART_Init+0x58>)
 80009e2:	4a15      	ldr	r2, [pc, #84]	; (8000a38 <MX_USART6_UART_Init+0x5c>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57600;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_USART6_UART_Init+0x58>)
 80009e8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80009ec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_USART6_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_USART6_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_USART6_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_USART6_UART_Init+0x58>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_USART6_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_USART6_UART_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_USART6_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_USART6_UART_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_USART6_UART_Init+0x58>)
 8000a20:	f003 fc08 	bl	8004234 <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000a2a:	f000 f88f 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20004b2c 	.word	0x20004b2c
 8000a38:	40011400 	.word	0x40011400

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	; 0x30
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b32      	ldr	r3, [pc, #200]	; (8000b1c <MX_GPIO_Init+0xe0>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a31      	ldr	r2, [pc, #196]	; (8000b1c <MX_GPIO_Init+0xe0>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b2f      	ldr	r3, [pc, #188]	; (8000b1c <MX_GPIO_Init+0xe0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	61bb      	str	r3, [r7, #24]
 8000a68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <MX_GPIO_Init+0xe0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a2b      	ldr	r2, [pc, #172]	; (8000b1c <MX_GPIO_Init+0xe0>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <MX_GPIO_Init+0xe0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a82:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <MX_GPIO_Init+0xe0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a25      	ldr	r2, [pc, #148]	; (8000b1c <MX_GPIO_Init+0xe0>)
 8000a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <MX_GPIO_Init+0xe0>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9a:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <MX_GPIO_Init+0xe0>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a1f      	ldr	r2, [pc, #124]	; (8000b1c <MX_GPIO_Init+0xe0>)
 8000aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <MX_GPIO_Init+0xe0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <MX_GPIO_Init+0xe0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a19      	ldr	r2, [pc, #100]	; (8000b1c <MX_GPIO_Init+0xe0>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_GPIO_Init+0xe0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_GPIO_Init+0xe0>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a13      	ldr	r2, [pc, #76]	; (8000b1c <MX_GPIO_Init+0xe0>)
 8000ad0:	f043 0320 	orr.w	r3, r3, #32
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_GPIO_Init+0xe0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0320 	and.w	r3, r3, #32
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : select_Pin */
  GPIO_InitStruct.Pin = select_Pin;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(select_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	480a      	ldr	r0, [pc, #40]	; (8000b20 <MX_GPIO_Init+0xe4>)
 8000af6:	f001 f81f 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : plus_Pin minus_Pin */
  GPIO_InitStruct.Pin = plus_Pin|minus_Pin;
 8000afa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_GPIO_Init+0xe8>)
 8000b10:	f001 f812 	bl	8001b38 <HAL_GPIO_Init>

}
 8000b14:	bf00      	nop
 8000b16:	3730      	adds	r7, #48	; 0x30
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40022000 	.word	0x40022000
 8000b24:	40020400 	.word	0x40020400

08000b28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d101      	bne.n	8000b3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b3a:	f000 faa9 	bl	8001090 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40010000 	.word	0x40010000

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <Error_Handler+0x6>

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	4a10      	ldr	r2, [pc, #64]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b64:	6413      	str	r3, [r2, #64]	; 0x40
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	210f      	movs	r1, #15
 8000b8e:	f06f 0001 	mvn.w	r0, #1
 8000b92:	f000 ff85 	bl	8001aa0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	; 0x30
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a2a      	ldr	r2, [pc, #168]	; (8000c6c <HAL_ADC_MspInit+0xc8>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d124      	bne.n	8000c10 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <HAL_ADC_MspInit+0xcc>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	4a29      	ldr	r2, [pc, #164]	; (8000c70 <HAL_ADC_MspInit+0xcc>)
 8000bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd2:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <HAL_ADC_MspInit+0xcc>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <HAL_ADC_MspInit+0xcc>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a23      	ldr	r2, [pc, #140]	; (8000c70 <HAL_ADC_MspInit+0xcc>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <HAL_ADC_MspInit+0xcc>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	481a      	ldr	r0, [pc, #104]	; (8000c74 <HAL_ADC_MspInit+0xd0>)
 8000c0a:	f000 ff95 	bl	8001b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000c0e:	e029      	b.n	8000c64 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <HAL_ADC_MspInit+0xd4>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d124      	bne.n	8000c64 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_ADC_MspInit+0xcc>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <HAL_ADC_MspInit+0xcc>)
 8000c20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_ADC_MspInit+0xcc>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <HAL_ADC_MspInit+0xcc>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <HAL_ADC_MspInit+0xcc>)
 8000c38:	f043 0320 	orr.w	r3, r3, #32
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_ADC_MspInit+0xcc>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0320 	and.w	r3, r3, #32
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c50:	2303      	movs	r3, #3
 8000c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4807      	ldr	r0, [pc, #28]	; (8000c7c <HAL_ADC_MspInit+0xd8>)
 8000c60:	f000 ff6a 	bl	8001b38 <HAL_GPIO_Init>
}
 8000c64:	bf00      	nop
 8000c66:	3730      	adds	r7, #48	; 0x30
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40012000 	.word	0x40012000
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020000 	.word	0x40020000
 8000c78:	40012200 	.word	0x40012200
 8000c7c:	40021400 	.word	0x40021400

08000c80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a17      	ldr	r2, [pc, #92]	; (8000cfc <HAL_I2C_MspInit+0x7c>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d128      	bne.n	8000cf4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_I2C_MspInit+0x80>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a16      	ldr	r2, [pc, #88]	; (8000d00 <HAL_I2C_MspInit+0x80>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <HAL_I2C_MspInit+0x80>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc0:	2312      	movs	r3, #18
 8000cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ccc:	2304      	movs	r3, #4
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480b      	ldr	r0, [pc, #44]	; (8000d04 <HAL_I2C_MspInit+0x84>)
 8000cd8:	f000 ff2e 	bl	8001b38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <HAL_I2C_MspInit+0x80>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <HAL_I2C_MspInit+0x80>)
 8000ce2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_I2C_MspInit+0x80>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cf4:	bf00      	nop
 8000cf6:	3728      	adds	r7, #40	; 0x28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40005400 	.word	0x40005400
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020400 	.word	0x40020400

08000d08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d18:	d113      	bne.n	8000d42 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_TIM_Base_MspInit+0x44>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <HAL_TIM_Base_MspInit+0x44>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6413      	str	r3, [r2, #64]	; 0x40
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_TIM_Base_MspInit+0x44>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2105      	movs	r1, #5
 8000d36:	201c      	movs	r0, #28
 8000d38:	f000 feb2 	bl	8001aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d3c:	201c      	movs	r0, #28
 8000d3e:	f000 fecb 	bl	8001ad8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800

08000d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08c      	sub	sp, #48	; 0x30
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a36      	ldr	r2, [pc, #216]	; (8000e48 <HAL_UART_MspInit+0xf8>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d130      	bne.n	8000dd4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000d72:	4b36      	ldr	r3, [pc, #216]	; (8000e4c <HAL_UART_MspInit+0xfc>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a35      	ldr	r2, [pc, #212]	; (8000e4c <HAL_UART_MspInit+0xfc>)
 8000d78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b33      	ldr	r3, [pc, #204]	; (8000e4c <HAL_UART_MspInit+0xfc>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000d86:	61bb      	str	r3, [r7, #24]
 8000d88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d8a:	4b30      	ldr	r3, [pc, #192]	; (8000e4c <HAL_UART_MspInit+0xfc>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a2f      	ldr	r2, [pc, #188]	; (8000e4c <HAL_UART_MspInit+0xfc>)
 8000d90:	f043 0320 	orr.w	r3, r3, #32
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <HAL_UART_MspInit+0xfc>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0320 	and.w	r3, r3, #32
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000da2:	23c0      	movs	r3, #192	; 0xc0
 8000da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000db2:	2308      	movs	r3, #8
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4824      	ldr	r0, [pc, #144]	; (8000e50 <HAL_UART_MspInit+0x100>)
 8000dbe:	f000 febb 	bl	8001b38 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2105      	movs	r1, #5
 8000dc6:	2052      	movs	r0, #82	; 0x52
 8000dc8:	f000 fe6a 	bl	8001aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8000dcc:	2052      	movs	r0, #82	; 0x52
 8000dce:	f000 fe83 	bl	8001ad8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000dd2:	e034      	b.n	8000e3e <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a1e      	ldr	r2, [pc, #120]	; (8000e54 <HAL_UART_MspInit+0x104>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d12f      	bne.n	8000e3e <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000dde:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <HAL_UART_MspInit+0xfc>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a1a      	ldr	r2, [pc, #104]	; (8000e4c <HAL_UART_MspInit+0xfc>)
 8000de4:	f043 0320 	orr.w	r3, r3, #32
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <HAL_UART_MspInit+0xfc>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f003 0320 	and.w	r3, r3, #32
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <HAL_UART_MspInit+0xfc>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <HAL_UART_MspInit+0xfc>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_UART_MspInit+0xfc>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000e0e:	23c0      	movs	r3, #192	; 0xc0
 8000e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e1e:	2308      	movs	r3, #8
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	4619      	mov	r1, r3
 8000e28:	480b      	ldr	r0, [pc, #44]	; (8000e58 <HAL_UART_MspInit+0x108>)
 8000e2a:	f000 fe85 	bl	8001b38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2105      	movs	r1, #5
 8000e32:	2047      	movs	r0, #71	; 0x47
 8000e34:	f000 fe34 	bl	8001aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000e38:	2047      	movs	r0, #71	; 0x47
 8000e3a:	f000 fe4d 	bl	8001ad8 <HAL_NVIC_EnableIRQ>
}
 8000e3e:	bf00      	nop
 8000e40:	3730      	adds	r7, #48	; 0x30
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40007800 	.word	0x40007800
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40021400 	.word	0x40021400
 8000e54:	40011400 	.word	0x40011400
 8000e58:	40020800 	.word	0x40020800

08000e5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08c      	sub	sp, #48	; 0x30
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	2019      	movs	r0, #25
 8000e72:	f000 fe15 	bl	8001aa0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e76:	2019      	movs	r0, #25
 8000e78:	f000 fe2e 	bl	8001ad8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <HAL_InitTick+0xa0>)
 8000e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e80:	4a1e      	ldr	r2, [pc, #120]	; (8000efc <HAL_InitTick+0xa0>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6453      	str	r3, [r2, #68]	; 0x44
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <HAL_InitTick+0xa0>)
 8000e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e94:	f107 0210 	add.w	r2, r7, #16
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f002 f96a 	bl	8003178 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ea4:	f002 f954 	bl	8003150 <HAL_RCC_GetPCLK2Freq>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb0:	4a13      	ldr	r2, [pc, #76]	; (8000f00 <HAL_InitTick+0xa4>)
 8000eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb6:	0c9b      	lsrs	r3, r3, #18
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <HAL_InitTick+0xa8>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <HAL_InitTick+0xac>)
 8000ec0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <HAL_InitTick+0xa8>)
 8000ec4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ec8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000eca:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <HAL_InitTick+0xa8>)
 8000ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ece:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_InitTick+0xa8>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_InitTick+0xa8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000edc:	4809      	ldr	r0, [pc, #36]	; (8000f04 <HAL_InitTick+0xa8>)
 8000ede:	f002 fd6b 	bl	80039b8 <HAL_TIM_Base_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d104      	bne.n	8000ef2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ee8:	4806      	ldr	r0, [pc, #24]	; (8000f04 <HAL_InitTick+0xa8>)
 8000eea:	f002 fd91 	bl	8003a10 <HAL_TIM_Base_Start_IT>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	e000      	b.n	8000ef4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3730      	adds	r7, #48	; 0x30
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40023800 	.word	0x40023800
 8000f00:	431bde83 	.word	0x431bde83
 8000f04:	20004bec 	.word	0x20004bec
 8000f08:	40010000 	.word	0x40010000

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <NMI_Handler+0x4>

08000f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <MemManage_Handler+0x4>

08000f1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f3e:	f002 fd91 	bl	8003a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20004bec 	.word	0x20004bec

08000f4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f50:	4803      	ldr	r0, [pc, #12]	; (8000f60 <TIM2_IRQHandler+0x14>)
 8000f52:	f002 fd87 	bl	8003a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  buttonCounterIncrease();
 8000f56:	f006 fe1f 	bl	8007b98 <buttonCounterIncrease>

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20004bac 	.word	0x20004bac

08000f64 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <USART6_IRQHandler+0x10>)
 8000f6a:	f003 fae5 	bl	8004538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20004b2c 	.word	0x20004b2c

08000f78 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <UART7_IRQHandler+0x10>)
 8000f7e:	f003 fadb 	bl	8004538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200049d0 	.word	0x200049d0

08000f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f94:	4a14      	ldr	r2, [pc, #80]	; (8000fe8 <_sbrk+0x5c>)
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <_sbrk+0x60>)
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <_sbrk+0x64>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <_sbrk+0x68>)
 8000fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d207      	bcs.n	8000fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fbc:	f008 f814 	bl	8008fe8 <__errno>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	230c      	movs	r3, #12
 8000fc4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fca:	e009      	b.n	8000fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <_sbrk+0x64>)
 8000fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20050000 	.word	0x20050000
 8000fec:	00000400 	.word	0x00000400
 8000ff0:	20000094 	.word	0x20000094
 8000ff4:	20004d10 	.word	0x20004d10

08000ff8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <SystemInit+0x28>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001002:	4a07      	ldr	r2, [pc, #28]	; (8001020 <SystemInit+0x28>)
 8001004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <SystemInit+0x28>)
 800100e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001012:	609a      	str	r2, [r3, #8]
#endif
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800105c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001028:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800102a:	e003      	b.n	8001034 <LoopCopyDataInit>

0800102c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800102e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001030:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001032:	3104      	adds	r1, #4

08001034 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001034:	480b      	ldr	r0, [pc, #44]	; (8001064 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001038:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800103a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800103c:	d3f6      	bcc.n	800102c <CopyDataInit>
  ldr  r2, =_sbss
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001040:	e002      	b.n	8001048 <LoopFillZerobss>

08001042 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001042:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001044:	f842 3b04 	str.w	r3, [r2], #4

08001048 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800104a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800104c:	d3f9      	bcc.n	8001042 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800104e:	f7ff ffd3 	bl	8000ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001052:	f007 ffcf 	bl	8008ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001056:	f7ff fab3 	bl	80005c0 <main>
  bx  lr    
 800105a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800105c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001060:	080099d8 	.word	0x080099d8
  ldr  r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001068:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 800106c:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001070:	20004d10 	.word	0x20004d10

08001074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC_IRQHandler>

08001076 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107a:	2003      	movs	r0, #3
 800107c:	f000 fd05 	bl	8001a8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff feeb 	bl	8000e5c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001086:	f7ff fd65 	bl	8000b54 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x20>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x24>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4413      	add	r3, r2
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_IncTick+0x24>)
 80010a2:	6013      	str	r3, [r2, #0]
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008
 80010b4:	20004c2c 	.word	0x20004c2c

080010b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return uwTick;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <HAL_GetTick+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20004c2c 	.word	0x20004c2c

080010d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d8:	f7ff ffee 	bl	80010b8 <HAL_GetTick>
 80010dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010e8:	d005      	beq.n	80010f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_Delay+0x40>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010f6:	bf00      	nop
 80010f8:	f7ff ffde 	bl	80010b8 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	429a      	cmp	r2, r3
 8001106:	d8f7      	bhi.n	80010f8 <HAL_Delay+0x28>
  {
  }
}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000008 	.word	0x20000008

08001114 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e031      	b.n	800118e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	2b00      	cmp	r3, #0
 8001130:	d109      	bne.n	8001146 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff fd36 	bl	8000ba4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f003 0310 	and.w	r3, r3, #16
 800114e:	2b00      	cmp	r3, #0
 8001150:	d116      	bne.n	8001180 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <HAL_ADC_Init+0x84>)
 8001158:	4013      	ands	r3, r2
 800115a:	f043 0202 	orr.w	r2, r3, #2
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 faea 	bl	800173c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f023 0303 	bic.w	r3, r3, #3
 8001176:	f043 0201 	orr.w	r2, r3, #1
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	641a      	str	r2, [r3, #64]	; 0x40
 800117e:	e001      	b.n	8001184 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	ffffeefd 	.word	0xffffeefd

0800119c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d101      	bne.n	80011b6 <HAL_ADC_Start+0x1a>
 80011b2:	2302      	movs	r3, #2
 80011b4:	e0a0      	b.n	80012f8 <HAL_ADC_Start+0x15c>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d018      	beq.n	80011fe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0201 	orr.w	r2, r2, #1
 80011da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80011dc:	4b49      	ldr	r3, [pc, #292]	; (8001304 <HAL_ADC_Start+0x168>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a49      	ldr	r2, [pc, #292]	; (8001308 <HAL_ADC_Start+0x16c>)
 80011e2:	fba2 2303 	umull	r2, r3, r2, r3
 80011e6:	0c9a      	lsrs	r2, r3, #18
 80011e8:	4613      	mov	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80011f0:	e002      	b.n	80011f8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f9      	bne.n	80011f2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b01      	cmp	r3, #1
 800120a:	d174      	bne.n	80012f6 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001210:	4b3e      	ldr	r3, [pc, #248]	; (800130c <HAL_ADC_Start+0x170>)
 8001212:	4013      	ands	r3, r2
 8001214:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001226:	2b00      	cmp	r3, #0
 8001228:	d007      	beq.n	800123a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001232:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001246:	d106      	bne.n	8001256 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124c:	f023 0206 	bic.w	r2, r3, #6
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	645a      	str	r2, [r3, #68]	; 0x44
 8001254:	e002      	b.n	800125c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800126c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800126e:	4b28      	ldr	r3, [pc, #160]	; (8001310 <HAL_ADC_Start+0x174>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 031f 	and.w	r3, r3, #31
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10f      	bne.n	800129a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d136      	bne.n	80012f6 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	e02d      	b.n	80012f6 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a1d      	ldr	r2, [pc, #116]	; (8001314 <HAL_ADC_Start+0x178>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d10e      	bne.n	80012c2 <HAL_ADC_Start+0x126>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d107      	bne.n	80012c2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012c0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <HAL_ADC_Start+0x174>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 0310 	and.w	r3, r3, #16
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d113      	bne.n	80012f6 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a11      	ldr	r2, [pc, #68]	; (8001318 <HAL_ADC_Start+0x17c>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d10e      	bne.n	80012f6 <HAL_ADC_Start+0x15a>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d107      	bne.n	80012f6 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012f4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	20000000 	.word	0x20000000
 8001308:	431bde83 	.word	0x431bde83
 800130c:	fffff8fe 	.word	0xfffff8fe
 8001310:	40012300 	.word	0x40012300
 8001314:	40012000 	.word	0x40012000
 8001318:	40012200 	.word	0x40012200

0800131c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800132a:	2b01      	cmp	r3, #1
 800132c:	d101      	bne.n	8001332 <HAL_ADC_Stop+0x16>
 800132e:	2302      	movs	r3, #2
 8001330:	e01f      	b.n	8001372 <HAL_ADC_Stop+0x56>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2201      	movs	r2, #1
 8001336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 0201 	bic.w	r2, r2, #1
 8001348:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	d107      	bne.n	8001368 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_ADC_Stop+0x64>)
 800135e:	4013      	ands	r3, r2
 8001360:	f043 0201 	orr.w	r2, r3, #1
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	ffffeefe 	.word	0xffffeefe

08001384 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013a0:	d113      	bne.n	80013ca <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013b0:	d10b      	bne.n	80013ca <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f043 0220 	orr.w	r2, r3, #32
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e05c      	b.n	8001484 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80013ca:	f7ff fe75 	bl	80010b8 <HAL_GetTick>
 80013ce:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013d0:	e01a      	b.n	8001408 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013d8:	d016      	beq.n	8001408 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d007      	beq.n	80013f0 <HAL_ADC_PollForConversion+0x6c>
 80013e0:	f7ff fe6a 	bl	80010b8 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d20b      	bcs.n	8001408 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f043 0204 	orr.w	r2, r3, #4
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e03d      	b.n	8001484 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b02      	cmp	r3, #2
 8001414:	d1dd      	bne.n	80013d2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f06f 0212 	mvn.w	r2, #18
 800141e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d123      	bne.n	8001482 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800143e:	2b00      	cmp	r3, #0
 8001440:	d11f      	bne.n	8001482 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001448:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800144c:	2b00      	cmp	r3, #0
 800144e:	d006      	beq.n	800145e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800145a:	2b00      	cmp	r3, #0
 800145c:	d111      	bne.n	8001482 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d105      	bne.n	8001482 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f043 0201 	orr.w	r2, r3, #1
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d101      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1c>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e12a      	b.n	800171a <HAL_ADC_ConfigChannel+0x272>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b09      	cmp	r3, #9
 80014d2:	d93a      	bls.n	800154a <HAL_ADC_ConfigChannel+0xa2>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014dc:	d035      	beq.n	800154a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68d9      	ldr	r1, [r3, #12]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	4613      	mov	r3, r2
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4413      	add	r3, r2
 80014f2:	3b1e      	subs	r3, #30
 80014f4:	2207      	movs	r2, #7
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	400a      	ands	r2, r1
 8001502:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a87      	ldr	r2, [pc, #540]	; (8001728 <HAL_ADC_ConfigChannel+0x280>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d10a      	bne.n	8001524 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68d9      	ldr	r1, [r3, #12]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	061a      	lsls	r2, r3, #24
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001522:	e035      	b.n	8001590 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68d9      	ldr	r1, [r3, #12]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	b29b      	uxth	r3, r3
 8001534:	4618      	mov	r0, r3
 8001536:	4603      	mov	r3, r0
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4403      	add	r3, r0
 800153c:	3b1e      	subs	r3, #30
 800153e:	409a      	lsls	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001548:	e022      	b.n	8001590 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6919      	ldr	r1, [r3, #16]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	b29b      	uxth	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	2207      	movs	r2, #7
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43da      	mvns	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	400a      	ands	r2, r1
 800156c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6919      	ldr	r1, [r3, #16]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	b29b      	uxth	r3, r3
 800157e:	4618      	mov	r0, r3
 8001580:	4603      	mov	r3, r0
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4403      	add	r3, r0
 8001586:	409a      	lsls	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b06      	cmp	r3, #6
 8001596:	d824      	bhi.n	80015e2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	3b05      	subs	r3, #5
 80015aa:	221f      	movs	r2, #31
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43da      	mvns	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	400a      	ands	r2, r1
 80015b8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	4618      	mov	r0, r3
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	3b05      	subs	r3, #5
 80015d4:	fa00 f203 	lsl.w	r2, r0, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	430a      	orrs	r2, r1
 80015de:	635a      	str	r2, [r3, #52]	; 0x34
 80015e0:	e04c      	b.n	800167c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b0c      	cmp	r3, #12
 80015e8:	d824      	bhi.n	8001634 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	3b23      	subs	r3, #35	; 0x23
 80015fc:	221f      	movs	r2, #31
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43da      	mvns	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	400a      	ands	r2, r1
 800160a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	b29b      	uxth	r3, r3
 8001618:	4618      	mov	r0, r3
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	3b23      	subs	r3, #35	; 0x23
 8001626:	fa00 f203 	lsl.w	r2, r0, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	631a      	str	r2, [r3, #48]	; 0x30
 8001632:	e023      	b.n	800167c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	3b41      	subs	r3, #65	; 0x41
 8001646:	221f      	movs	r2, #31
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43da      	mvns	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	400a      	ands	r2, r1
 8001654:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	b29b      	uxth	r3, r3
 8001662:	4618      	mov	r0, r3
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	3b41      	subs	r3, #65	; 0x41
 8001670:	fa00 f203 	lsl.w	r2, r0, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a2a      	ldr	r2, [pc, #168]	; (800172c <HAL_ADC_ConfigChannel+0x284>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d10a      	bne.n	800169c <HAL_ADC_ConfigChannel+0x1f4>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800168e:	d105      	bne.n	800169c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001690:	4b27      	ldr	r3, [pc, #156]	; (8001730 <HAL_ADC_ConfigChannel+0x288>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	4a26      	ldr	r2, [pc, #152]	; (8001730 <HAL_ADC_ConfigChannel+0x288>)
 8001696:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800169a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a22      	ldr	r2, [pc, #136]	; (800172c <HAL_ADC_ConfigChannel+0x284>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d109      	bne.n	80016ba <HAL_ADC_ConfigChannel+0x212>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b12      	cmp	r3, #18
 80016ac:	d105      	bne.n	80016ba <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <HAL_ADC_ConfigChannel+0x288>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4a1f      	ldr	r2, [pc, #124]	; (8001730 <HAL_ADC_ConfigChannel+0x288>)
 80016b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016b8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a1b      	ldr	r2, [pc, #108]	; (800172c <HAL_ADC_ConfigChannel+0x284>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d125      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x268>
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a17      	ldr	r2, [pc, #92]	; (8001728 <HAL_ADC_ConfigChannel+0x280>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d003      	beq.n	80016d6 <HAL_ADC_ConfigChannel+0x22e>
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b11      	cmp	r3, #17
 80016d4:	d11c      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <HAL_ADC_ConfigChannel+0x288>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4a15      	ldr	r2, [pc, #84]	; (8001730 <HAL_ADC_ConfigChannel+0x288>)
 80016dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016e0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a10      	ldr	r2, [pc, #64]	; (8001728 <HAL_ADC_ConfigChannel+0x280>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d111      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_ADC_ConfigChannel+0x28c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a11      	ldr	r2, [pc, #68]	; (8001738 <HAL_ADC_ConfigChannel+0x290>)
 80016f2:	fba2 2303 	umull	r2, r3, r2, r3
 80016f6:	0c9a      	lsrs	r2, r3, #18
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001702:	e002      	b.n	800170a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	3b01      	subs	r3, #1
 8001708:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1f9      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	10000012 	.word	0x10000012
 800172c:	40012000 	.word	0x40012000
 8001730:	40012300 	.word	0x40012300
 8001734:	20000000 	.word	0x20000000
 8001738:	431bde83 	.word	0x431bde83

0800173c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001744:	4b78      	ldr	r3, [pc, #480]	; (8001928 <ADC_Init+0x1ec>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4a77      	ldr	r2, [pc, #476]	; (8001928 <ADC_Init+0x1ec>)
 800174a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800174e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001750:	4b75      	ldr	r3, [pc, #468]	; (8001928 <ADC_Init+0x1ec>)
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	4973      	ldr	r1, [pc, #460]	; (8001928 <ADC_Init+0x1ec>)
 800175a:	4313      	orrs	r3, r2
 800175c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800176c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6859      	ldr	r1, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	021a      	lsls	r2, r3, #8
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001790:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6859      	ldr	r1, [r3, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6899      	ldr	r1, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ca:	4a58      	ldr	r2, [pc, #352]	; (800192c <ADC_Init+0x1f0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d022      	beq.n	8001816 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6899      	ldr	r1, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001800:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6899      	ldr	r1, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	e00f      	b.n	8001836 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001824:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001834:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0202 	bic.w	r2, r2, #2
 8001844:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6899      	ldr	r1, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	005a      	lsls	r2, r3, #1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d01b      	beq.n	800189c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001872:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001882:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6859      	ldr	r1, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188e:	3b01      	subs	r3, #1
 8001890:	035a      	lsls	r2, r3, #13
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	e007      	b.n	80018ac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	051a      	lsls	r2, r3, #20
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6899      	ldr	r1, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018ee:	025a      	lsls	r2, r3, #9
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001906:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6899      	ldr	r1, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	029a      	lsls	r2, r3, #10
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	609a      	str	r2, [r3, #8]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	40012300 	.word	0x40012300
 800192c:	0f000001 	.word	0x0f000001

08001930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <__NVIC_SetPriorityGrouping+0x40>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800194c:	4013      	ands	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 800195a:	4313      	orrs	r3, r2
 800195c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195e:	4a04      	ldr	r2, [pc, #16]	; (8001970 <__NVIC_SetPriorityGrouping+0x40>)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	60d3      	str	r3, [r2, #12]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000ed00 	.word	0xe000ed00
 8001974:	05fa0000 	.word	0x05fa0000

08001978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <__NVIC_GetPriorityGrouping+0x18>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	f003 0307 	and.w	r3, r3, #7
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	db0b      	blt.n	80019be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	f003 021f 	and.w	r2, r3, #31
 80019ac:	4907      	ldr	r1, [pc, #28]	; (80019cc <__NVIC_EnableIRQ+0x38>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	095b      	lsrs	r3, r3, #5
 80019b4:	2001      	movs	r0, #1
 80019b6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000e100 	.word	0xe000e100

080019d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	6039      	str	r1, [r7, #0]
 80019da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	db0a      	blt.n	80019fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	490c      	ldr	r1, [pc, #48]	; (8001a1c <__NVIC_SetPriority+0x4c>)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	0112      	lsls	r2, r2, #4
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	440b      	add	r3, r1
 80019f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f8:	e00a      	b.n	8001a10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4908      	ldr	r1, [pc, #32]	; (8001a20 <__NVIC_SetPriority+0x50>)
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	3b04      	subs	r3, #4
 8001a08:	0112      	lsls	r2, r2, #4
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	761a      	strb	r2, [r3, #24]
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000e100 	.word	0xe000e100
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f1c3 0307 	rsb	r3, r3, #7
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	bf28      	it	cs
 8001a42:	2304      	movcs	r3, #4
 8001a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	2b06      	cmp	r3, #6
 8001a4c:	d902      	bls.n	8001a54 <NVIC_EncodePriority+0x30>
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3b03      	subs	r3, #3
 8001a52:	e000      	b.n	8001a56 <NVIC_EncodePriority+0x32>
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43da      	mvns	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	401a      	ands	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	43d9      	mvns	r1, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	4313      	orrs	r3, r2
         );
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3724      	adds	r7, #36	; 0x24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ff4c 	bl	8001930 <__NVIC_SetPriorityGrouping>
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab2:	f7ff ff61 	bl	8001978 <__NVIC_GetPriorityGrouping>
 8001ab6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	68b9      	ldr	r1, [r7, #8]
 8001abc:	6978      	ldr	r0, [r7, #20]
 8001abe:	f7ff ffb1 	bl	8001a24 <NVIC_EncodePriority>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac8:	4611      	mov	r1, r2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff ff80 	bl	80019d0 <__NVIC_SetPriority>
}
 8001ad0:	bf00      	nop
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ff54 	bl	8001994 <__NVIC_EnableIRQ>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d004      	beq.n	8001b12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2280      	movs	r2, #128	; 0x80
 8001b0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00c      	b.n	8001b2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2205      	movs	r2, #5
 8001b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0201 	bic.w	r2, r2, #1
 8001b28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	; 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	e175      	b.n	8001e44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b58:	2201      	movs	r2, #1
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	f040 8164 	bne.w	8001e3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d00b      	beq.n	8001b96 <HAL_GPIO_Init+0x5e>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d007      	beq.n	8001b96 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b8a:	2b11      	cmp	r3, #17
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b12      	cmp	r3, #18
 8001b94:	d130      	bne.n	8001bf8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bcc:	2201      	movs	r2, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 0201 	and.w	r2, r3, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	2203      	movs	r2, #3
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x100>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b12      	cmp	r3, #18
 8001c36:	d123      	bne.n	8001c80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	08da      	lsrs	r2, r3, #3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3208      	adds	r2, #8
 8001c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	220f      	movs	r2, #15
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	08da      	lsrs	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3208      	adds	r2, #8
 8001c7a:	69b9      	ldr	r1, [r7, #24]
 8001c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0203 	and.w	r2, r3, #3
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 80be 	beq.w	8001e3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	4b65      	ldr	r3, [pc, #404]	; (8001e58 <HAL_GPIO_Init+0x320>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	4a64      	ldr	r2, [pc, #400]	; (8001e58 <HAL_GPIO_Init+0x320>)
 8001cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cce:	4b62      	ldr	r3, [pc, #392]	; (8001e58 <HAL_GPIO_Init+0x320>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001cda:	4a60      	ldr	r2, [pc, #384]	; (8001e5c <HAL_GPIO_Init+0x324>)
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a57      	ldr	r2, [pc, #348]	; (8001e60 <HAL_GPIO_Init+0x328>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d037      	beq.n	8001d76 <HAL_GPIO_Init+0x23e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a56      	ldr	r2, [pc, #344]	; (8001e64 <HAL_GPIO_Init+0x32c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d031      	beq.n	8001d72 <HAL_GPIO_Init+0x23a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a55      	ldr	r2, [pc, #340]	; (8001e68 <HAL_GPIO_Init+0x330>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d02b      	beq.n	8001d6e <HAL_GPIO_Init+0x236>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a54      	ldr	r2, [pc, #336]	; (8001e6c <HAL_GPIO_Init+0x334>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d025      	beq.n	8001d6a <HAL_GPIO_Init+0x232>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a53      	ldr	r2, [pc, #332]	; (8001e70 <HAL_GPIO_Init+0x338>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d01f      	beq.n	8001d66 <HAL_GPIO_Init+0x22e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a52      	ldr	r2, [pc, #328]	; (8001e74 <HAL_GPIO_Init+0x33c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d019      	beq.n	8001d62 <HAL_GPIO_Init+0x22a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a51      	ldr	r2, [pc, #324]	; (8001e78 <HAL_GPIO_Init+0x340>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d013      	beq.n	8001d5e <HAL_GPIO_Init+0x226>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a50      	ldr	r2, [pc, #320]	; (8001e7c <HAL_GPIO_Init+0x344>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00d      	beq.n	8001d5a <HAL_GPIO_Init+0x222>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4f      	ldr	r2, [pc, #316]	; (8001e80 <HAL_GPIO_Init+0x348>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d007      	beq.n	8001d56 <HAL_GPIO_Init+0x21e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a4e      	ldr	r2, [pc, #312]	; (8001e84 <HAL_GPIO_Init+0x34c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d101      	bne.n	8001d52 <HAL_GPIO_Init+0x21a>
 8001d4e:	2309      	movs	r3, #9
 8001d50:	e012      	b.n	8001d78 <HAL_GPIO_Init+0x240>
 8001d52:	230a      	movs	r3, #10
 8001d54:	e010      	b.n	8001d78 <HAL_GPIO_Init+0x240>
 8001d56:	2308      	movs	r3, #8
 8001d58:	e00e      	b.n	8001d78 <HAL_GPIO_Init+0x240>
 8001d5a:	2307      	movs	r3, #7
 8001d5c:	e00c      	b.n	8001d78 <HAL_GPIO_Init+0x240>
 8001d5e:	2306      	movs	r3, #6
 8001d60:	e00a      	b.n	8001d78 <HAL_GPIO_Init+0x240>
 8001d62:	2305      	movs	r3, #5
 8001d64:	e008      	b.n	8001d78 <HAL_GPIO_Init+0x240>
 8001d66:	2304      	movs	r3, #4
 8001d68:	e006      	b.n	8001d78 <HAL_GPIO_Init+0x240>
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e004      	b.n	8001d78 <HAL_GPIO_Init+0x240>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e002      	b.n	8001d78 <HAL_GPIO_Init+0x240>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_GPIO_Init+0x240>
 8001d76:	2300      	movs	r3, #0
 8001d78:	69fa      	ldr	r2, [r7, #28]
 8001d7a:	f002 0203 	and.w	r2, r2, #3
 8001d7e:	0092      	lsls	r2, r2, #2
 8001d80:	4093      	lsls	r3, r2
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d88:	4934      	ldr	r1, [pc, #208]	; (8001e5c <HAL_GPIO_Init+0x324>)
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	3302      	adds	r3, #2
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d96:	4b3c      	ldr	r3, [pc, #240]	; (8001e88 <HAL_GPIO_Init+0x350>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dba:	4a33      	ldr	r2, [pc, #204]	; (8001e88 <HAL_GPIO_Init+0x350>)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dc0:	4b31      	ldr	r3, [pc, #196]	; (8001e88 <HAL_GPIO_Init+0x350>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001de4:	4a28      	ldr	r2, [pc, #160]	; (8001e88 <HAL_GPIO_Init+0x350>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dea:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <HAL_GPIO_Init+0x350>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e0e:	4a1e      	ldr	r2, [pc, #120]	; (8001e88 <HAL_GPIO_Init+0x350>)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e14:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <HAL_GPIO_Init+0x350>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e38:	4a13      	ldr	r2, [pc, #76]	; (8001e88 <HAL_GPIO_Init+0x350>)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3301      	adds	r3, #1
 8001e42:	61fb      	str	r3, [r7, #28]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	2b0f      	cmp	r3, #15
 8001e48:	f67f ae86 	bls.w	8001b58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	3724      	adds	r7, #36	; 0x24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40013800 	.word	0x40013800
 8001e60:	40020000 	.word	0x40020000
 8001e64:	40020400 	.word	0x40020400
 8001e68:	40020800 	.word	0x40020800
 8001e6c:	40020c00 	.word	0x40020c00
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40021400 	.word	0x40021400
 8001e78:	40021800 	.word	0x40021800
 8001e7c:	40021c00 	.word	0x40021c00
 8001e80:	40022000 	.word	0x40022000
 8001e84:	40022400 	.word	0x40022400
 8001e88:	40013c00 	.word	0x40013c00

08001e8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	887b      	ldrh	r3, [r7, #2]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d002      	beq.n	8001eaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
 8001ea8:	e001      	b.n	8001eae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e07f      	b.n	8001fce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7fe fecc 	bl	8000c80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2224      	movs	r2, #36	; 0x24
 8001eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0201 	bic.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d107      	bne.n	8001f36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	e006      	b.n	8001f44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d104      	bne.n	8001f56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6859      	ldr	r1, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <HAL_I2C_Init+0x11c>)
 8001f62:	430b      	orrs	r3, r1
 8001f64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691a      	ldr	r2, [r3, #16]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	ea42 0103 	orr.w	r1, r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	021a      	lsls	r2, r3, #8
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69d9      	ldr	r1, [r3, #28]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1a      	ldr	r2, [r3, #32]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0201 	orr.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	02008000 	.word	0x02008000

08001fdc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af02      	add	r7, sp, #8
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	460b      	mov	r3, r1
 8001fea:	817b      	strh	r3, [r7, #10]
 8001fec:	4613      	mov	r3, r2
 8001fee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b20      	cmp	r3, #32
 8001ffa:	f040 80da 	bne.w	80021b2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_I2C_Master_Transmit+0x30>
 8002008:	2302      	movs	r3, #2
 800200a:	e0d3      	b.n	80021b4 <HAL_I2C_Master_Transmit+0x1d8>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002014:	f7ff f850 	bl	80010b8 <HAL_GetTick>
 8002018:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	2319      	movs	r3, #25
 8002020:	2201      	movs	r2, #1
 8002022:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 f9f8 	bl	800241c <I2C_WaitOnFlagUntilTimeout>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e0be      	b.n	80021b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2221      	movs	r2, #33	; 0x21
 800203a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2210      	movs	r2, #16
 8002042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	893a      	ldrh	r2, [r7, #8]
 8002056:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002062:	b29b      	uxth	r3, r3
 8002064:	2bff      	cmp	r3, #255	; 0xff
 8002066:	d90e      	bls.n	8002086 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	22ff      	movs	r2, #255	; 0xff
 800206c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002072:	b2da      	uxtb	r2, r3
 8002074:	8979      	ldrh	r1, [r7, #10]
 8002076:	4b51      	ldr	r3, [pc, #324]	; (80021bc <HAL_I2C_Master_Transmit+0x1e0>)
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 faee 	bl	8002660 <I2C_TransferConfig>
 8002084:	e06c      	b.n	8002160 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002094:	b2da      	uxtb	r2, r3
 8002096:	8979      	ldrh	r1, [r7, #10]
 8002098:	4b48      	ldr	r3, [pc, #288]	; (80021bc <HAL_I2C_Master_Transmit+0x1e0>)
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 fadd 	bl	8002660 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80020a6:	e05b      	b.n	8002160 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	6a39      	ldr	r1, [r7, #32]
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 f9f5 	bl	800249c <I2C_WaitOnTXISFlagUntilTimeout>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e07b      	b.n	80021b4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	781a      	ldrb	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	3b01      	subs	r3, #1
 80020da:	b29a      	uxth	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d034      	beq.n	8002160 <HAL_I2C_Master_Transmit+0x184>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d130      	bne.n	8002160 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	2200      	movs	r2, #0
 8002106:	2180      	movs	r1, #128	; 0x80
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 f987 	bl	800241c <I2C_WaitOnFlagUntilTimeout>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e04d      	b.n	80021b4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211c:	b29b      	uxth	r3, r3
 800211e:	2bff      	cmp	r3, #255	; 0xff
 8002120:	d90e      	bls.n	8002140 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	22ff      	movs	r2, #255	; 0xff
 8002126:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212c:	b2da      	uxtb	r2, r3
 800212e:	8979      	ldrh	r1, [r7, #10]
 8002130:	2300      	movs	r3, #0
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 fa91 	bl	8002660 <I2C_TransferConfig>
 800213e:	e00f      	b.n	8002160 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002144:	b29a      	uxth	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214e:	b2da      	uxtb	r2, r3
 8002150:	8979      	ldrh	r1, [r7, #10]
 8002152:	2300      	movs	r3, #0
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 fa80 	bl	8002660 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002164:	b29b      	uxth	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d19e      	bne.n	80020a8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	6a39      	ldr	r1, [r7, #32]
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 f9d4 	bl	800251c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e01a      	b.n	80021b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2220      	movs	r2, #32
 8002184:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6859      	ldr	r1, [r3, #4]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <HAL_I2C_Master_Transmit+0x1e4>)
 8002192:	400b      	ands	r3, r1
 8002194:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2220      	movs	r2, #32
 800219a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e000      	b.n	80021b4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80021b2:	2302      	movs	r3, #2
  }
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	80002000 	.word	0x80002000
 80021c0:	fe00e800 	.word	0xfe00e800

080021c4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	; 0x28
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	460b      	mov	r3, r1
 80021d2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b20      	cmp	r3, #32
 80021e2:	f040 80ef 	bne.w	80023c4 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021f4:	d101      	bne.n	80021fa <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80021f6:	2302      	movs	r3, #2
 80021f8:	e0e5      	b.n	80023c6 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_I2C_IsDeviceReady+0x44>
 8002204:	2302      	movs	r3, #2
 8002206:	e0de      	b.n	80023c6 <HAL_I2C_IsDeviceReady+0x202>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2224      	movs	r2, #36	; 0x24
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d105      	bne.n	8002232 <HAL_I2C_IsDeviceReady+0x6e>
 8002226:	897b      	ldrh	r3, [r7, #10]
 8002228:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800222c:	4b68      	ldr	r3, [pc, #416]	; (80023d0 <HAL_I2C_IsDeviceReady+0x20c>)
 800222e:	4313      	orrs	r3, r2
 8002230:	e004      	b.n	800223c <HAL_I2C_IsDeviceReady+0x78>
 8002232:	897b      	ldrh	r3, [r7, #10]
 8002234:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002238:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002242:	f7fe ff39 	bl	80010b8 <HAL_GetTick>
 8002246:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	2b20      	cmp	r3, #32
 8002254:	bf0c      	ite	eq
 8002256:	2301      	moveq	r3, #1
 8002258:	2300      	movne	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b10      	cmp	r3, #16
 800226a:	bf0c      	ite	eq
 800226c:	2301      	moveq	r3, #1
 800226e:	2300      	movne	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002274:	e034      	b.n	80022e0 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800227c:	d01a      	beq.n	80022b4 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800227e:	f7fe ff1b 	bl	80010b8 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d302      	bcc.n	8002294 <HAL_I2C_IsDeviceReady+0xd0>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10f      	bne.n	80022b4 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a0:	f043 0220 	orr.w	r2, r3, #32
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e088      	b.n	80023c6 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b20      	cmp	r3, #32
 80022c0:	bf0c      	ite	eq
 80022c2:	2301      	moveq	r3, #1
 80022c4:	2300      	movne	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	2b10      	cmp	r3, #16
 80022d6:	bf0c      	ite	eq
 80022d8:	2301      	moveq	r3, #1
 80022da:	2300      	movne	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80022e0:	7ffb      	ldrb	r3, [r7, #31]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d102      	bne.n	80022ec <HAL_I2C_IsDeviceReady+0x128>
 80022e6:	7fbb      	ldrb	r3, [r7, #30]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0c4      	beq.n	8002276 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	2b10      	cmp	r3, #16
 80022f8:	d01a      	beq.n	8002330 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2200      	movs	r2, #0
 8002302:	2120      	movs	r1, #32
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 f889 	bl	800241c <I2C_WaitOnFlagUntilTimeout>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e058      	b.n	80023c6 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2220      	movs	r2, #32
 800231a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	e04a      	b.n	80023c6 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	2200      	movs	r2, #0
 8002338:	2120      	movs	r1, #32
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 f86e 	bl	800241c <I2C_WaitOnFlagUntilTimeout>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e03d      	b.n	80023c6 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2210      	movs	r2, #16
 8002350:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2220      	movs	r2, #32
 8002358:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	429a      	cmp	r2, r3
 8002360:	d118      	bne.n	8002394 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002370:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2200      	movs	r2, #0
 800237a:	2120      	movs	r1, #32
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 f84d 	bl	800241c <I2C_WaitOnFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e01c      	b.n	80023c6 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2220      	movs	r2, #32
 8002392:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	3301      	adds	r3, #1
 8002398:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	429a      	cmp	r2, r3
 80023a0:	f63f af3d 	bhi.w	800221e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b0:	f043 0220 	orr.w	r2, r3, #32
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 80023c4:	2302      	movs	r3, #2
  }
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3720      	adds	r7, #32
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	02002000 	.word	0x02002000

080023d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d103      	bne.n	80023f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2200      	movs	r2, #0
 80023f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d007      	beq.n	8002410 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699a      	ldr	r2, [r3, #24]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0201 	orr.w	r2, r2, #1
 800240e:	619a      	str	r2, [r3, #24]
  }
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	4613      	mov	r3, r2
 800242a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800242c:	e022      	b.n	8002474 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002434:	d01e      	beq.n	8002474 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002436:	f7fe fe3f 	bl	80010b8 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d302      	bcc.n	800244c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d113      	bne.n	8002474 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002450:	f043 0220 	orr.w	r2, r3, #32
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e00f      	b.n	8002494 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699a      	ldr	r2, [r3, #24]
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	4013      	ands	r3, r2
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	429a      	cmp	r2, r3
 8002482:	bf0c      	ite	eq
 8002484:	2301      	moveq	r3, #1
 8002486:	2300      	movne	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	461a      	mov	r2, r3
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	429a      	cmp	r2, r3
 8002490:	d0cd      	beq.n	800242e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024a8:	e02c      	b.n	8002504 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68b9      	ldr	r1, [r7, #8]
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f870 	bl	8002594 <I2C_IsAcknowledgeFailed>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e02a      	b.n	8002514 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024c4:	d01e      	beq.n	8002504 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024c6:	f7fe fdf7 	bl	80010b8 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d302      	bcc.n	80024dc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d113      	bne.n	8002504 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e0:	f043 0220 	orr.w	r2, r3, #32
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e007      	b.n	8002514 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b02      	cmp	r3, #2
 8002510:	d1cb      	bne.n	80024aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002528:	e028      	b.n	800257c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f830 	bl	8002594 <I2C_IsAcknowledgeFailed>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e026      	b.n	800258c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253e:	f7fe fdbb 	bl	80010b8 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	429a      	cmp	r2, r3
 800254c:	d302      	bcc.n	8002554 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d113      	bne.n	800257c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002558:	f043 0220 	orr.w	r2, r3, #32
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e007      	b.n	800258c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	2b20      	cmp	r3, #32
 8002588:	d1cf      	bne.n	800252a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	2b10      	cmp	r3, #16
 80025ac:	d151      	bne.n	8002652 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025ae:	e022      	b.n	80025f6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025b6:	d01e      	beq.n	80025f6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b8:	f7fe fd7e 	bl	80010b8 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d302      	bcc.n	80025ce <I2C_IsAcknowledgeFailed+0x3a>
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d113      	bne.n	80025f6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	f043 0220 	orr.w	r2, r3, #32
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2220      	movs	r2, #32
 80025de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e02e      	b.n	8002654 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b20      	cmp	r3, #32
 8002602:	d1d5      	bne.n	80025b0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2210      	movs	r2, #16
 800260a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2220      	movs	r2, #32
 8002612:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f7ff fedd 	bl	80023d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6859      	ldr	r1, [r3, #4]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b0d      	ldr	r3, [pc, #52]	; (800265c <I2C_IsAcknowledgeFailed+0xc8>)
 8002626:	400b      	ands	r3, r1
 8002628:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f043 0204 	orr.w	r2, r3, #4
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2220      	movs	r2, #32
 800263a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	fe00e800 	.word	0xfe00e800

08002660 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	607b      	str	r3, [r7, #4]
 800266a:	460b      	mov	r3, r1
 800266c:	817b      	strh	r3, [r7, #10]
 800266e:	4613      	mov	r3, r2
 8002670:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	0d5b      	lsrs	r3, r3, #21
 800267c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002680:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <I2C_TransferConfig+0x58>)
 8002682:	430b      	orrs	r3, r1
 8002684:	43db      	mvns	r3, r3
 8002686:	ea02 0103 	and.w	r1, r2, r3
 800268a:	897b      	ldrh	r3, [r7, #10]
 800268c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002690:	7a7b      	ldrb	r3, [r7, #9]
 8002692:	041b      	lsls	r3, r3, #16
 8002694:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	431a      	orrs	r2, r3
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	431a      	orrs	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80026aa:	bf00      	nop
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	03ff63ff 	.word	0x03ff63ff

080026bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	d138      	bne.n	8002744 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026dc:	2302      	movs	r3, #2
 80026de:	e032      	b.n	8002746 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2224      	movs	r2, #36	; 0x24
 80026ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0201 	bic.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800270e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6819      	ldr	r1, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	e000      	b.n	8002746 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002744:	2302      	movs	r3, #2
  }
}
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002752:	b480      	push	{r7}
 8002754:	b085      	sub	sp, #20
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b20      	cmp	r3, #32
 8002766:	d139      	bne.n	80027dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002772:	2302      	movs	r3, #2
 8002774:	e033      	b.n	80027de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2224      	movs	r2, #36	; 0x24
 8002782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0201 	bic.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	021b      	lsls	r3, r3, #8
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	e000      	b.n	80027de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027dc:	2302      	movs	r3, #2
  }
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80027f6:	4b23      	ldr	r3, [pc, #140]	; (8002884 <HAL_PWREx_EnableOverDrive+0x98>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	4a22      	ldr	r2, [pc, #136]	; (8002884 <HAL_PWREx_EnableOverDrive+0x98>)
 80027fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002800:	6413      	str	r3, [r2, #64]	; 0x40
 8002802:	4b20      	ldr	r3, [pc, #128]	; (8002884 <HAL_PWREx_EnableOverDrive+0x98>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280a:	603b      	str	r3, [r7, #0]
 800280c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800280e:	4b1e      	ldr	r3, [pc, #120]	; (8002888 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a1d      	ldr	r2, [pc, #116]	; (8002888 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002818:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800281a:	f7fe fc4d 	bl	80010b8 <HAL_GetTick>
 800281e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002820:	e009      	b.n	8002836 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002822:	f7fe fc49 	bl	80010b8 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002830:	d901      	bls.n	8002836 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e022      	b.n	800287c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002836:	4b14      	ldr	r3, [pc, #80]	; (8002888 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002842:	d1ee      	bne.n	8002822 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002844:	4b10      	ldr	r3, [pc, #64]	; (8002888 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0f      	ldr	r2, [pc, #60]	; (8002888 <HAL_PWREx_EnableOverDrive+0x9c>)
 800284a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800284e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002850:	f7fe fc32 	bl	80010b8 <HAL_GetTick>
 8002854:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002856:	e009      	b.n	800286c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002858:	f7fe fc2e 	bl	80010b8 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002866:	d901      	bls.n	800286c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e007      	b.n	800287c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <HAL_PWREx_EnableOverDrive+0x9c>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002874:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002878:	d1ee      	bne.n	8002858 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40023800 	.word	0x40023800
 8002888:	40007000 	.word	0x40007000

0800288c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002894:	2300      	movs	r3, #0
 8002896:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e291      	b.n	8002dc6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 8087 	beq.w	80029be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028b0:	4b96      	ldr	r3, [pc, #600]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 030c 	and.w	r3, r3, #12
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d00c      	beq.n	80028d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028bc:	4b93      	ldr	r3, [pc, #588]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 030c 	and.w	r3, r3, #12
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d112      	bne.n	80028ee <HAL_RCC_OscConfig+0x62>
 80028c8:	4b90      	ldr	r3, [pc, #576]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028d4:	d10b      	bne.n	80028ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d6:	4b8d      	ldr	r3, [pc, #564]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d06c      	beq.n	80029bc <HAL_RCC_OscConfig+0x130>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d168      	bne.n	80029bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e26b      	b.n	8002dc6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_OscConfig+0x7a>
 80028f8:	4b84      	ldr	r3, [pc, #528]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a83      	ldr	r2, [pc, #524]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 80028fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	e02e      	b.n	8002964 <HAL_RCC_OscConfig+0xd8>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10c      	bne.n	8002928 <HAL_RCC_OscConfig+0x9c>
 800290e:	4b7f      	ldr	r3, [pc, #508]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a7e      	ldr	r2, [pc, #504]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	4b7c      	ldr	r3, [pc, #496]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a7b      	ldr	r2, [pc, #492]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002920:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	e01d      	b.n	8002964 <HAL_RCC_OscConfig+0xd8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002930:	d10c      	bne.n	800294c <HAL_RCC_OscConfig+0xc0>
 8002932:	4b76      	ldr	r3, [pc, #472]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a75      	ldr	r2, [pc, #468]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	4b73      	ldr	r3, [pc, #460]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a72      	ldr	r2, [pc, #456]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	e00b      	b.n	8002964 <HAL_RCC_OscConfig+0xd8>
 800294c:	4b6f      	ldr	r3, [pc, #444]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a6e      	ldr	r2, [pc, #440]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	4b6c      	ldr	r3, [pc, #432]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a6b      	ldr	r2, [pc, #428]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 800295e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d013      	beq.n	8002994 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe fba4 	bl	80010b8 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002974:	f7fe fba0 	bl	80010b8 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b64      	cmp	r3, #100	; 0x64
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e21f      	b.n	8002dc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002986:	4b61      	ldr	r3, [pc, #388]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0xe8>
 8002992:	e014      	b.n	80029be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f7fe fb90 	bl	80010b8 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800299c:	f7fe fb8c 	bl	80010b8 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b64      	cmp	r3, #100	; 0x64
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e20b      	b.n	8002dc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ae:	4b57      	ldr	r3, [pc, #348]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x110>
 80029ba:	e000      	b.n	80029be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d069      	beq.n	8002a9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ca:	4b50      	ldr	r3, [pc, #320]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00b      	beq.n	80029ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029d6:	4b4d      	ldr	r3, [pc, #308]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d11c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x190>
 80029e2:	4b4a      	ldr	r3, [pc, #296]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d116      	bne.n	8002a1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ee:	4b47      	ldr	r3, [pc, #284]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d005      	beq.n	8002a06 <HAL_RCC_OscConfig+0x17a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d001      	beq.n	8002a06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e1df      	b.n	8002dc6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a06:	4b41      	ldr	r3, [pc, #260]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	493d      	ldr	r1, [pc, #244]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1a:	e040      	b.n	8002a9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d023      	beq.n	8002a6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a24:	4b39      	ldr	r3, [pc, #228]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a38      	ldr	r2, [pc, #224]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7fe fb42 	bl	80010b8 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a38:	f7fe fb3e 	bl	80010b8 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e1bd      	b.n	8002dc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4a:	4b30      	ldr	r3, [pc, #192]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a56:	4b2d      	ldr	r3, [pc, #180]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4929      	ldr	r1, [pc, #164]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	600b      	str	r3, [r1, #0]
 8002a6a:	e018      	b.n	8002a9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a6c:	4b27      	ldr	r3, [pc, #156]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a26      	ldr	r2, [pc, #152]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002a72:	f023 0301 	bic.w	r3, r3, #1
 8002a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7fe fb1e 	bl	80010b8 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a80:	f7fe fb1a 	bl	80010b8 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e199      	b.n	8002dc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a92:	4b1e      	ldr	r3, [pc, #120]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d038      	beq.n	8002b1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d019      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab2:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab6:	4a15      	ldr	r2, [pc, #84]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abe:	f7fe fafb 	bl	80010b8 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac6:	f7fe faf7 	bl	80010b8 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e176      	b.n	8002dc6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x23a>
 8002ae4:	e01a      	b.n	8002b1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae6:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aea:	4a08      	ldr	r2, [pc, #32]	; (8002b0c <HAL_RCC_OscConfig+0x280>)
 8002aec:	f023 0301 	bic.w	r3, r3, #1
 8002af0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af2:	f7fe fae1 	bl	80010b8 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af8:	e00a      	b.n	8002b10 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002afa:	f7fe fadd 	bl	80010b8 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d903      	bls.n	8002b10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e15c      	b.n	8002dc6 <HAL_RCC_OscConfig+0x53a>
 8002b0c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b10:	4b91      	ldr	r3, [pc, #580]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1ee      	bne.n	8002afa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 80a4 	beq.w	8002c72 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b2a:	4b8b      	ldr	r3, [pc, #556]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10d      	bne.n	8002b52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b36:	4b88      	ldr	r3, [pc, #544]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	4a87      	ldr	r2, [pc, #540]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b40:	6413      	str	r3, [r2, #64]	; 0x40
 8002b42:	4b85      	ldr	r3, [pc, #532]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b52:	4b82      	ldr	r3, [pc, #520]	; (8002d5c <HAL_RCC_OscConfig+0x4d0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d118      	bne.n	8002b90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b5e:	4b7f      	ldr	r3, [pc, #508]	; (8002d5c <HAL_RCC_OscConfig+0x4d0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a7e      	ldr	r2, [pc, #504]	; (8002d5c <HAL_RCC_OscConfig+0x4d0>)
 8002b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b6a:	f7fe faa5 	bl	80010b8 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b72:	f7fe faa1 	bl	80010b8 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b64      	cmp	r3, #100	; 0x64
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e120      	b.n	8002dc6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b84:	4b75      	ldr	r3, [pc, #468]	; (8002d5c <HAL_RCC_OscConfig+0x4d0>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d106      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x31a>
 8002b98:	4b6f      	ldr	r3, [pc, #444]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9c:	4a6e      	ldr	r2, [pc, #440]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba4:	e02d      	b.n	8002c02 <HAL_RCC_OscConfig+0x376>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x33c>
 8002bae:	4b6a      	ldr	r3, [pc, #424]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb2:	4a69      	ldr	r2, [pc, #420]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002bb4:	f023 0301 	bic.w	r3, r3, #1
 8002bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bba:	4b67      	ldr	r3, [pc, #412]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbe:	4a66      	ldr	r2, [pc, #408]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002bc0:	f023 0304 	bic.w	r3, r3, #4
 8002bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc6:	e01c      	b.n	8002c02 <HAL_RCC_OscConfig+0x376>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b05      	cmp	r3, #5
 8002bce:	d10c      	bne.n	8002bea <HAL_RCC_OscConfig+0x35e>
 8002bd0:	4b61      	ldr	r3, [pc, #388]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd4:	4a60      	ldr	r2, [pc, #384]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002bd6:	f043 0304 	orr.w	r3, r3, #4
 8002bda:	6713      	str	r3, [r2, #112]	; 0x70
 8002bdc:	4b5e      	ldr	r3, [pc, #376]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be0:	4a5d      	ldr	r2, [pc, #372]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6713      	str	r3, [r2, #112]	; 0x70
 8002be8:	e00b      	b.n	8002c02 <HAL_RCC_OscConfig+0x376>
 8002bea:	4b5b      	ldr	r3, [pc, #364]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	4a5a      	ldr	r2, [pc, #360]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002bf0:	f023 0301 	bic.w	r3, r3, #1
 8002bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf6:	4b58      	ldr	r3, [pc, #352]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfa:	4a57      	ldr	r2, [pc, #348]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002bfc:	f023 0304 	bic.w	r3, r3, #4
 8002c00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d015      	beq.n	8002c36 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0a:	f7fe fa55 	bl	80010b8 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c10:	e00a      	b.n	8002c28 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c12:	f7fe fa51 	bl	80010b8 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e0ce      	b.n	8002dc6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c28:	4b4b      	ldr	r3, [pc, #300]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0ee      	beq.n	8002c12 <HAL_RCC_OscConfig+0x386>
 8002c34:	e014      	b.n	8002c60 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c36:	f7fe fa3f 	bl	80010b8 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3e:	f7fe fa3b 	bl	80010b8 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e0b8      	b.n	8002dc6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c54:	4b40      	ldr	r3, [pc, #256]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1ee      	bne.n	8002c3e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d105      	bne.n	8002c72 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c66:	4b3c      	ldr	r3, [pc, #240]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	4a3b      	ldr	r2, [pc, #236]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 80a4 	beq.w	8002dc4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c7c:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 030c 	and.w	r3, r3, #12
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d06b      	beq.n	8002d60 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d149      	bne.n	8002d24 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c90:	4b31      	ldr	r3, [pc, #196]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a30      	ldr	r2, [pc, #192]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002c96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fa0c 	bl	80010b8 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca4:	f7fe fa08 	bl	80010b8 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e087      	b.n	8002dc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb6:	4b28      	ldr	r3, [pc, #160]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69da      	ldr	r2, [r3, #28]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	019b      	lsls	r3, r3, #6
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd8:	085b      	lsrs	r3, r3, #1
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	041b      	lsls	r3, r3, #16
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	061b      	lsls	r3, r3, #24
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	4a1b      	ldr	r2, [pc, #108]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002cea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf0:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a18      	ldr	r2, [pc, #96]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7fe f9dc 	bl	80010b8 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d04:	f7fe f9d8 	bl	80010b8 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e057      	b.n	8002dc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d16:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0x478>
 8002d22:	e04f      	b.n	8002dc4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a0b      	ldr	r2, [pc, #44]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7fe f9c2 	bl	80010b8 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d38:	f7fe f9be 	bl	80010b8 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e03d      	b.n	8002dc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4a:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <HAL_RCC_OscConfig+0x4cc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x4ac>
 8002d56:	e035      	b.n	8002dc4 <HAL_RCC_OscConfig+0x538>
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d60:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <HAL_RCC_OscConfig+0x544>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d028      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d121      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d11a      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d90:	4013      	ands	r3, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d96:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d111      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da6:	085b      	lsrs	r3, r3, #1
 8002da8:	3b01      	subs	r3, #1
 8002daa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d107      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800

08002dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0d0      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dec:	4b6a      	ldr	r3, [pc, #424]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d910      	bls.n	8002e1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfa:	4b67      	ldr	r3, [pc, #412]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 020f 	bic.w	r2, r3, #15
 8002e02:	4965      	ldr	r1, [pc, #404]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0a:	4b63      	ldr	r3, [pc, #396]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0b8      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d020      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e34:	4b59      	ldr	r3, [pc, #356]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4a58      	ldr	r2, [pc, #352]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e4c:	4b53      	ldr	r3, [pc, #332]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a52      	ldr	r2, [pc, #328]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e58:	4b50      	ldr	r3, [pc, #320]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	494d      	ldr	r1, [pc, #308]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d040      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d107      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7e:	4b47      	ldr	r3, [pc, #284]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d115      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e07f      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d107      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e96:	4b41      	ldr	r3, [pc, #260]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d109      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e073      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea6:	4b3d      	ldr	r3, [pc, #244]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e06b      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eb6:	4b39      	ldr	r3, [pc, #228]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f023 0203 	bic.w	r2, r3, #3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	4936      	ldr	r1, [pc, #216]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec8:	f7fe f8f6 	bl	80010b8 <HAL_GetTick>
 8002ecc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ece:	e00a      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed0:	f7fe f8f2 	bl	80010b8 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e053      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee6:	4b2d      	ldr	r3, [pc, #180]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 020c 	and.w	r2, r3, #12
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d1eb      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef8:	4b27      	ldr	r3, [pc, #156]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 030f 	and.w	r3, r3, #15
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d210      	bcs.n	8002f28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f06:	4b24      	ldr	r3, [pc, #144]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 020f 	bic.w	r2, r3, #15
 8002f0e:	4922      	ldr	r1, [pc, #136]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f16:	4b20      	ldr	r3, [pc, #128]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d001      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e032      	b.n	8002f8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f34:	4b19      	ldr	r3, [pc, #100]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	4916      	ldr	r1, [pc, #88]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d009      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f52:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	490e      	ldr	r1, [pc, #56]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f66:	f000 f821 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 8002f6a:	4601      	mov	r1, r0
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	091b      	lsrs	r3, r3, #4
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <HAL_RCC_ClockConfig+0x1cc>)
 8002f78:	5cd3      	ldrb	r3, [r2, r3]
 8002f7a:	fa21 f303 	lsr.w	r3, r1, r3
 8002f7e:	4a09      	ldr	r2, [pc, #36]	; (8002fa4 <HAL_RCC_ClockConfig+0x1d0>)
 8002f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <HAL_RCC_ClockConfig+0x1d4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd ff68 	bl	8000e5c <HAL_InitTick>

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40023c00 	.word	0x40023c00
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	0800995c 	.word	0x0800995c
 8002fa4:	20000000 	.word	0x20000000
 8002fa8:	20000004 	.word	0x20000004

08002fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fc2:	4b50      	ldr	r3, [pc, #320]	; (8003104 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d007      	beq.n	8002fde <HAL_RCC_GetSysClockFreq+0x32>
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d008      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x38>
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f040 808d 	bne.w	80030f2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fd8:	4b4b      	ldr	r3, [pc, #300]	; (8003108 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002fda:	60bb      	str	r3, [r7, #8]
      break;
 8002fdc:	e08c      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fde:	4b4b      	ldr	r3, [pc, #300]	; (800310c <HAL_RCC_GetSysClockFreq+0x160>)
 8002fe0:	60bb      	str	r3, [r7, #8]
      break;
 8002fe2:	e089      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fe4:	4b47      	ldr	r3, [pc, #284]	; (8003104 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fec:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fee:	4b45      	ldr	r3, [pc, #276]	; (8003104 <HAL_RCC_GetSysClockFreq+0x158>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d023      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ffa:	4b42      	ldr	r3, [pc, #264]	; (8003104 <HAL_RCC_GetSysClockFreq+0x158>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	099b      	lsrs	r3, r3, #6
 8003000:	f04f 0400 	mov.w	r4, #0
 8003004:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	ea03 0501 	and.w	r5, r3, r1
 8003010:	ea04 0602 	and.w	r6, r4, r2
 8003014:	4a3d      	ldr	r2, [pc, #244]	; (800310c <HAL_RCC_GetSysClockFreq+0x160>)
 8003016:	fb02 f106 	mul.w	r1, r2, r6
 800301a:	2200      	movs	r2, #0
 800301c:	fb02 f205 	mul.w	r2, r2, r5
 8003020:	440a      	add	r2, r1
 8003022:	493a      	ldr	r1, [pc, #232]	; (800310c <HAL_RCC_GetSysClockFreq+0x160>)
 8003024:	fba5 0101 	umull	r0, r1, r5, r1
 8003028:	1853      	adds	r3, r2, r1
 800302a:	4619      	mov	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f04f 0400 	mov.w	r4, #0
 8003032:	461a      	mov	r2, r3
 8003034:	4623      	mov	r3, r4
 8003036:	f7fd f943 	bl	80002c0 <__aeabi_uldivmod>
 800303a:	4603      	mov	r3, r0
 800303c:	460c      	mov	r4, r1
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	e049      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003042:	4b30      	ldr	r3, [pc, #192]	; (8003104 <HAL_RCC_GetSysClockFreq+0x158>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	099b      	lsrs	r3, r3, #6
 8003048:	f04f 0400 	mov.w	r4, #0
 800304c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	ea03 0501 	and.w	r5, r3, r1
 8003058:	ea04 0602 	and.w	r6, r4, r2
 800305c:	4629      	mov	r1, r5
 800305e:	4632      	mov	r2, r6
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	f04f 0400 	mov.w	r4, #0
 8003068:	0154      	lsls	r4, r2, #5
 800306a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800306e:	014b      	lsls	r3, r1, #5
 8003070:	4619      	mov	r1, r3
 8003072:	4622      	mov	r2, r4
 8003074:	1b49      	subs	r1, r1, r5
 8003076:	eb62 0206 	sbc.w	r2, r2, r6
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	f04f 0400 	mov.w	r4, #0
 8003082:	0194      	lsls	r4, r2, #6
 8003084:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003088:	018b      	lsls	r3, r1, #6
 800308a:	1a5b      	subs	r3, r3, r1
 800308c:	eb64 0402 	sbc.w	r4, r4, r2
 8003090:	f04f 0100 	mov.w	r1, #0
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	00e2      	lsls	r2, r4, #3
 800309a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800309e:	00d9      	lsls	r1, r3, #3
 80030a0:	460b      	mov	r3, r1
 80030a2:	4614      	mov	r4, r2
 80030a4:	195b      	adds	r3, r3, r5
 80030a6:	eb44 0406 	adc.w	r4, r4, r6
 80030aa:	f04f 0100 	mov.w	r1, #0
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	02a2      	lsls	r2, r4, #10
 80030b4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80030b8:	0299      	lsls	r1, r3, #10
 80030ba:	460b      	mov	r3, r1
 80030bc:	4614      	mov	r4, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	4621      	mov	r1, r4
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f04f 0400 	mov.w	r4, #0
 80030c8:	461a      	mov	r2, r3
 80030ca:	4623      	mov	r3, r4
 80030cc:	f7fd f8f8 	bl	80002c0 <__aeabi_uldivmod>
 80030d0:	4603      	mov	r3, r0
 80030d2:	460c      	mov	r4, r1
 80030d4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_RCC_GetSysClockFreq+0x158>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	0c1b      	lsrs	r3, r3, #16
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	3301      	adds	r3, #1
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ee:	60bb      	str	r3, [r7, #8]
      break;
 80030f0:	e002      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030f2:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_RCC_GetSysClockFreq+0x15c>)
 80030f4:	60bb      	str	r3, [r7, #8]
      break;
 80030f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f8:	68bb      	ldr	r3, [r7, #8]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800
 8003108:	00f42400 	.word	0x00f42400
 800310c:	017d7840 	.word	0x017d7840

08003110 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <HAL_RCC_GetHCLKFreq+0x14>)
 8003116:	681b      	ldr	r3, [r3, #0]
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	20000000 	.word	0x20000000

08003128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800312c:	f7ff fff0 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8003130:	4601      	mov	r1, r0
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	0a9b      	lsrs	r3, r3, #10
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	4a03      	ldr	r2, [pc, #12]	; (800314c <HAL_RCC_GetPCLK1Freq+0x24>)
 800313e:	5cd3      	ldrb	r3, [r2, r3]
 8003140:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40023800 	.word	0x40023800
 800314c:	0800996c 	.word	0x0800996c

08003150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003154:	f7ff ffdc 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8003158:	4601      	mov	r1, r0
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	0b5b      	lsrs	r3, r3, #13
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	4a03      	ldr	r2, [pc, #12]	; (8003174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003166:	5cd3      	ldrb	r3, [r2, r3]
 8003168:	fa21 f303 	lsr.w	r3, r1, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40023800 	.word	0x40023800
 8003174:	0800996c 	.word	0x0800996c

08003178 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	220f      	movs	r2, #15
 8003186:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003188:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <HAL_RCC_GetClockConfig+0x5c>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 0203 	and.w	r2, r3, #3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003194:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <HAL_RCC_GetClockConfig+0x5c>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80031a0:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <HAL_RCC_GetClockConfig+0x5c>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80031ac:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <HAL_RCC_GetClockConfig+0x5c>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	08db      	lsrs	r3, r3, #3
 80031b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031ba:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <HAL_RCC_GetClockConfig+0x60>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 020f 	and.w	r2, r3, #15
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	601a      	str	r2, [r3, #0]
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40023c00 	.word	0x40023c00

080031dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d012      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003204:	4b69      	ldr	r3, [pc, #420]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	4a68      	ldr	r2, [pc, #416]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800320e:	6093      	str	r3, [r2, #8]
 8003210:	4b66      	ldr	r3, [pc, #408]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003218:	4964      	ldr	r1, [pc, #400]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003226:	2301      	movs	r3, #1
 8003228:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d017      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003236:	4b5d      	ldr	r3, [pc, #372]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800323c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003244:	4959      	ldr	r1, [pc, #356]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003250:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003254:	d101      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003256:	2301      	movs	r3, #1
 8003258:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003262:	2301      	movs	r3, #1
 8003264:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d017      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003272:	4b4e      	ldr	r3, [pc, #312]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003278:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	494a      	ldr	r1, [pc, #296]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003290:	d101      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003292:	2301      	movs	r3, #1
 8003294:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800329e:	2301      	movs	r3, #1
 80032a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80032ae:	2301      	movs	r3, #1
 80032b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0320 	and.w	r3, r3, #32
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 808b 	beq.w	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032c0:	4b3a      	ldr	r3, [pc, #232]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	4a39      	ldr	r2, [pc, #228]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ca:	6413      	str	r3, [r2, #64]	; 0x40
 80032cc:	4b37      	ldr	r3, [pc, #220]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032d8:	4b35      	ldr	r3, [pc, #212]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a34      	ldr	r2, [pc, #208]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032e4:	f7fd fee8 	bl	80010b8 <HAL_GetTick>
 80032e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ec:	f7fd fee4 	bl	80010b8 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e355      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032fe:	4b2c      	ldr	r3, [pc, #176]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800330a:	4b28      	ldr	r3, [pc, #160]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003312:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d035      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	429a      	cmp	r2, r3
 8003326:	d02e      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003328:	4b20      	ldr	r3, [pc, #128]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003330:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003332:	4b1e      	ldr	r3, [pc, #120]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	4a1d      	ldr	r2, [pc, #116]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800333e:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	4a1a      	ldr	r2, [pc, #104]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003348:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800334a:	4a18      	ldr	r2, [pc, #96]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003350:	4b16      	ldr	r3, [pc, #88]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b01      	cmp	r3, #1
 800335a:	d114      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335c:	f7fd feac 	bl	80010b8 <HAL_GetTick>
 8003360:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003362:	e00a      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003364:	f7fd fea8 	bl	80010b8 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003372:	4293      	cmp	r3, r2
 8003374:	d901      	bls.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e317      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337a:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0ee      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003392:	d111      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033a2:	400b      	ands	r3, r1
 80033a4:	4901      	ldr	r1, [pc, #4]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	608b      	str	r3, [r1, #8]
 80033aa:	e00b      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40007000 	.word	0x40007000
 80033b4:	0ffffcff 	.word	0x0ffffcff
 80033b8:	4bb0      	ldr	r3, [pc, #704]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	4aaf      	ldr	r2, [pc, #700]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033c2:	6093      	str	r3, [r2, #8]
 80033c4:	4bad      	ldr	r3, [pc, #692]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d0:	49aa      	ldr	r1, [pc, #680]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d010      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033e2:	4ba6      	ldr	r3, [pc, #664]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033e8:	4aa4      	ldr	r2, [pc, #656]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80033f2:	4ba2      	ldr	r3, [pc, #648]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	499f      	ldr	r1, [pc, #636]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003410:	4b9a      	ldr	r3, [pc, #616]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003416:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800341e:	4997      	ldr	r1, [pc, #604]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003432:	4b92      	ldr	r3, [pc, #584]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003438:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003440:	498e      	ldr	r1, [pc, #568]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003454:	4b89      	ldr	r3, [pc, #548]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003462:	4986      	ldr	r1, [pc, #536]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003476:	4b81      	ldr	r3, [pc, #516]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	497d      	ldr	r1, [pc, #500]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003498:	4b78      	ldr	r3, [pc, #480]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349e:	f023 0203 	bic.w	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	4975      	ldr	r1, [pc, #468]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034ba:	4b70      	ldr	r3, [pc, #448]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c0:	f023 020c 	bic.w	r2, r3, #12
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c8:	496c      	ldr	r1, [pc, #432]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034dc:	4b67      	ldr	r3, [pc, #412]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ea:	4964      	ldr	r1, [pc, #400]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034fe:	4b5f      	ldr	r3, [pc, #380]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003504:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350c:	495b      	ldr	r1, [pc, #364]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003520:	4b56      	ldr	r3, [pc, #344]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352e:	4953      	ldr	r1, [pc, #332]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003542:	4b4e      	ldr	r3, [pc, #312]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003548:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	494a      	ldr	r1, [pc, #296]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003564:	4b45      	ldr	r3, [pc, #276]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003572:	4942      	ldr	r1, [pc, #264]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003586:	4b3d      	ldr	r3, [pc, #244]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003594:	4939      	ldr	r1, [pc, #228]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035a8:	4b34      	ldr	r3, [pc, #208]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035b6:	4931      	ldr	r1, [pc, #196]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d011      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80035ca:	4b2c      	ldr	r3, [pc, #176]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035d8:	4928      	ldr	r1, [pc, #160]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035e8:	d101      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80035ea:	2301      	movs	r3, #1
 80035ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80035fa:	2301      	movs	r3, #1
 80035fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800360a:	4b1c      	ldr	r3, [pc, #112]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800360c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003610:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003618:	4918      	ldr	r1, [pc, #96]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00b      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800362c:	4b13      	ldr	r3, [pc, #76]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800362e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003632:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800363c:	490f      	ldr	r1, [pc, #60]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d005      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003652:	f040 80d8 	bne.w	8003806 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003656:	4b09      	ldr	r3, [pc, #36]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a08      	ldr	r2, [pc, #32]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800365c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003660:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003662:	f7fd fd29 	bl	80010b8 <HAL_GetTick>
 8003666:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003668:	e00a      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800366a:	f7fd fd25 	bl	80010b8 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b64      	cmp	r3, #100	; 0x64
 8003676:	d903      	bls.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e196      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800367c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003680:	4b6c      	ldr	r3, [pc, #432]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1ee      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d021      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369c:	2b00      	cmp	r3, #0
 800369e:	d11d      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036a0:	4b64      	ldr	r3, [pc, #400]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80036a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a6:	0c1b      	lsrs	r3, r3, #16
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036ae:	4b61      	ldr	r3, [pc, #388]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80036b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036b4:	0e1b      	lsrs	r3, r3, #24
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	019a      	lsls	r2, r3, #6
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	041b      	lsls	r3, r3, #16
 80036c6:	431a      	orrs	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	061b      	lsls	r3, r3, #24
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	071b      	lsls	r3, r3, #28
 80036d4:	4957      	ldr	r1, [pc, #348]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d004      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036f0:	d00a      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d02e      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003706:	d129      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003708:	4b4a      	ldr	r3, [pc, #296]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800370a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800370e:	0c1b      	lsrs	r3, r3, #16
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003716:	4b47      	ldr	r3, [pc, #284]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800371c:	0f1b      	lsrs	r3, r3, #28
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	019a      	lsls	r2, r3, #6
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	041b      	lsls	r3, r3, #16
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	061b      	lsls	r3, r3, #24
 8003736:	431a      	orrs	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	071b      	lsls	r3, r3, #28
 800373c:	493d      	ldr	r1, [pc, #244]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003744:	4b3b      	ldr	r3, [pc, #236]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800374a:	f023 021f 	bic.w	r2, r3, #31
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	3b01      	subs	r3, #1
 8003754:	4937      	ldr	r1, [pc, #220]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d01d      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003768:	4b32      	ldr	r3, [pc, #200]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800376a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800376e:	0e1b      	lsrs	r3, r3, #24
 8003770:	f003 030f 	and.w	r3, r3, #15
 8003774:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003776:	4b2f      	ldr	r3, [pc, #188]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800377c:	0f1b      	lsrs	r3, r3, #28
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	019a      	lsls	r2, r3, #6
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	041b      	lsls	r3, r3, #16
 8003790:	431a      	orrs	r2, r3
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	061b      	lsls	r3, r3, #24
 8003796:	431a      	orrs	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	071b      	lsls	r3, r3, #28
 800379c:	4925      	ldr	r1, [pc, #148]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d011      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	019a      	lsls	r2, r3, #6
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	041b      	lsls	r3, r3, #16
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	061b      	lsls	r3, r3, #24
 80037c4:	431a      	orrs	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	071b      	lsls	r3, r3, #28
 80037cc:	4919      	ldr	r1, [pc, #100]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037d4:	4b17      	ldr	r3, [pc, #92]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a16      	ldr	r2, [pc, #88]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e0:	f7fd fc6a 	bl	80010b8 <HAL_GetTick>
 80037e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037e8:	f7fd fc66 	bl	80010b8 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b64      	cmp	r3, #100	; 0x64
 80037f4:	d901      	bls.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e0d7      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037fa:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	2b01      	cmp	r3, #1
 800380a:	f040 80cd 	bne.w	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800380e:	4b09      	ldr	r3, [pc, #36]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a08      	ldr	r2, [pc, #32]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003818:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800381a:	f7fd fc4d 	bl	80010b8 <HAL_GetTick>
 800381e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003820:	e00a      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003822:	f7fd fc49 	bl	80010b8 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b64      	cmp	r3, #100	; 0x64
 800382e:	d903      	bls.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e0ba      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003834:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003838:	4b5e      	ldr	r3, [pc, #376]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003844:	d0ed      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d009      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003862:	2b00      	cmp	r3, #0
 8003864:	d02e      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	d12a      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800386e:	4b51      	ldr	r3, [pc, #324]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800387c:	4b4d      	ldr	r3, [pc, #308]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003882:	0f1b      	lsrs	r3, r3, #28
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	019a      	lsls	r2, r3, #6
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	041b      	lsls	r3, r3, #16
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	061b      	lsls	r3, r3, #24
 800389c:	431a      	orrs	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	071b      	lsls	r3, r3, #28
 80038a2:	4944      	ldr	r1, [pc, #272]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80038aa:	4b42      	ldr	r3, [pc, #264]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b8:	3b01      	subs	r3, #1
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	493d      	ldr	r1, [pc, #244]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d022      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038d8:	d11d      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038da:	4b36      	ldr	r3, [pc, #216]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	0e1b      	lsrs	r3, r3, #24
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038e8:	4b32      	ldr	r3, [pc, #200]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ee:	0f1b      	lsrs	r3, r3, #28
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	019a      	lsls	r2, r3, #6
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	041b      	lsls	r3, r3, #16
 8003902:	431a      	orrs	r2, r3
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	061b      	lsls	r3, r3, #24
 8003908:	431a      	orrs	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	071b      	lsls	r3, r3, #28
 800390e:	4929      	ldr	r1, [pc, #164]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d028      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003922:	4b24      	ldr	r3, [pc, #144]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003928:	0e1b      	lsrs	r3, r3, #24
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003930:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003936:	0c1b      	lsrs	r3, r3, #16
 8003938:	f003 0303 	and.w	r3, r3, #3
 800393c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	019a      	lsls	r2, r3, #6
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	041b      	lsls	r3, r3, #16
 8003948:	431a      	orrs	r2, r3
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	061b      	lsls	r3, r3, #24
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	071b      	lsls	r3, r3, #28
 8003956:	4917      	ldr	r1, [pc, #92]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800395e:	4b15      	ldr	r3, [pc, #84]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003964:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	4911      	ldr	r1, [pc, #68]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003974:	4b0f      	ldr	r3, [pc, #60]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a0e      	ldr	r2, [pc, #56]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800397a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003980:	f7fd fb9a 	bl	80010b8 <HAL_GetTick>
 8003984:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003986:	e008      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003988:	f7fd fb96 	bl	80010b8 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b64      	cmp	r3, #100	; 0x64
 8003994:	d901      	bls.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e007      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800399a:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039a6:	d1ef      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40023800 	.word	0x40023800

080039b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e01d      	b.n	8003a06 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fd f992 	bl	8000d08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3304      	adds	r3, #4
 80039f4:	4619      	mov	r1, r3
 80039f6:	4610      	mov	r0, r2
 80039f8:	f000 fa36 	bl	8003e68 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <HAL_TIM_Base_Start_IT+0x50>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2b06      	cmp	r3, #6
 8003a38:	d00b      	beq.n	8003a52 <HAL_TIM_Base_Start_IT+0x42>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a40:	d007      	beq.n	8003a52 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0201 	orr.w	r2, r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	00010007 	.word	0x00010007

08003a64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d122      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d11b      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0202 	mvn.w	r2, #2
 8003a90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f9c0 	bl	8003e2c <HAL_TIM_IC_CaptureCallback>
 8003aac:	e005      	b.n	8003aba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f9b2 	bl	8003e18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f9c3 	bl	8003e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d122      	bne.n	8003b14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d11b      	bne.n	8003b14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0204 	mvn.w	r2, #4
 8003ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f996 	bl	8003e2c <HAL_TIM_IC_CaptureCallback>
 8003b00:	e005      	b.n	8003b0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f988 	bl	8003e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f999 	bl	8003e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d122      	bne.n	8003b68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d11b      	bne.n	8003b68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0208 	mvn.w	r2, #8
 8003b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f96c 	bl	8003e2c <HAL_TIM_IC_CaptureCallback>
 8003b54:	e005      	b.n	8003b62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f95e 	bl	8003e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f96f 	bl	8003e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	2b10      	cmp	r3, #16
 8003b74:	d122      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	2b10      	cmp	r3, #16
 8003b82:	d11b      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0210 	mvn.w	r2, #16
 8003b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2208      	movs	r2, #8
 8003b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f942 	bl	8003e2c <HAL_TIM_IC_CaptureCallback>
 8003ba8:	e005      	b.n	8003bb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f934 	bl	8003e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f945 	bl	8003e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d10e      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d107      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0201 	mvn.w	r2, #1
 8003be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7fc ffa0 	bl	8000b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf2:	2b80      	cmp	r3, #128	; 0x80
 8003bf4:	d10e      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c00:	2b80      	cmp	r3, #128	; 0x80
 8003c02:	d107      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fafc 	bl	800420c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c22:	d10e      	bne.n	8003c42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2e:	2b80      	cmp	r3, #128	; 0x80
 8003c30:	d107      	bne.n	8003c42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 faef 	bl	8004220 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b40      	cmp	r3, #64	; 0x40
 8003c4e:	d10e      	bne.n	8003c6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b40      	cmp	r3, #64	; 0x40
 8003c5c:	d107      	bne.n	8003c6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f8f3 	bl	8003e54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d10e      	bne.n	8003c9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	d107      	bne.n	8003c9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f06f 0220 	mvn.w	r2, #32
 8003c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 faaf 	bl	80041f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_TIM_ConfigClockSource+0x18>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e0a6      	b.n	8003e0a <HAL_TIM_ConfigClockSource+0x166>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4b4f      	ldr	r3, [pc, #316]	; (8003e14 <HAL_TIM_ConfigClockSource+0x170>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ce2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b40      	cmp	r3, #64	; 0x40
 8003cf2:	d067      	beq.n	8003dc4 <HAL_TIM_ConfigClockSource+0x120>
 8003cf4:	2b40      	cmp	r3, #64	; 0x40
 8003cf6:	d80b      	bhi.n	8003d10 <HAL_TIM_ConfigClockSource+0x6c>
 8003cf8:	2b10      	cmp	r3, #16
 8003cfa:	d073      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0x140>
 8003cfc:	2b10      	cmp	r3, #16
 8003cfe:	d802      	bhi.n	8003d06 <HAL_TIM_ConfigClockSource+0x62>
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d06f      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d04:	e078      	b.n	8003df8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d06c      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0x140>
 8003d0a:	2b30      	cmp	r3, #48	; 0x30
 8003d0c:	d06a      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d0e:	e073      	b.n	8003df8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d10:	2b70      	cmp	r3, #112	; 0x70
 8003d12:	d00d      	beq.n	8003d30 <HAL_TIM_ConfigClockSource+0x8c>
 8003d14:	2b70      	cmp	r3, #112	; 0x70
 8003d16:	d804      	bhi.n	8003d22 <HAL_TIM_ConfigClockSource+0x7e>
 8003d18:	2b50      	cmp	r3, #80	; 0x50
 8003d1a:	d033      	beq.n	8003d84 <HAL_TIM_ConfigClockSource+0xe0>
 8003d1c:	2b60      	cmp	r3, #96	; 0x60
 8003d1e:	d041      	beq.n	8003da4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d20:	e06a      	b.n	8003df8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d26:	d066      	beq.n	8003df6 <HAL_TIM_ConfigClockSource+0x152>
 8003d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d2c:	d017      	beq.n	8003d5e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d2e:	e063      	b.n	8003df8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	6899      	ldr	r1, [r3, #8]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f000 f9ac 	bl	800409c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d52:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	609a      	str	r2, [r3, #8]
      break;
 8003d5c:	e04c      	b.n	8003df8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	6899      	ldr	r1, [r3, #8]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f000 f995 	bl	800409c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d80:	609a      	str	r2, [r3, #8]
      break;
 8003d82:	e039      	b.n	8003df8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	6859      	ldr	r1, [r3, #4]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	461a      	mov	r2, r3
 8003d92:	f000 f909 	bl	8003fa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2150      	movs	r1, #80	; 0x50
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 f962 	bl	8004066 <TIM_ITRx_SetConfig>
      break;
 8003da2:	e029      	b.n	8003df8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6818      	ldr	r0, [r3, #0]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	6859      	ldr	r1, [r3, #4]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	461a      	mov	r2, r3
 8003db2:	f000 f928 	bl	8004006 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2160      	movs	r1, #96	; 0x60
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 f952 	bl	8004066 <TIM_ITRx_SetConfig>
      break;
 8003dc2:	e019      	b.n	8003df8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	6859      	ldr	r1, [r3, #4]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	f000 f8e9 	bl	8003fa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2140      	movs	r1, #64	; 0x40
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 f942 	bl	8004066 <TIM_ITRx_SetConfig>
      break;
 8003de2:	e009      	b.n	8003df8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4619      	mov	r1, r3
 8003dee:	4610      	mov	r0, r2
 8003df0:	f000 f939 	bl	8004066 <TIM_ITRx_SetConfig>
      break;
 8003df4:	e000      	b.n	8003df8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003df6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	fffeff88 	.word	0xfffeff88

08003e18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a40      	ldr	r2, [pc, #256]	; (8003f7c <TIM_Base_SetConfig+0x114>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d013      	beq.n	8003ea8 <TIM_Base_SetConfig+0x40>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e86:	d00f      	beq.n	8003ea8 <TIM_Base_SetConfig+0x40>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a3d      	ldr	r2, [pc, #244]	; (8003f80 <TIM_Base_SetConfig+0x118>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00b      	beq.n	8003ea8 <TIM_Base_SetConfig+0x40>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a3c      	ldr	r2, [pc, #240]	; (8003f84 <TIM_Base_SetConfig+0x11c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d007      	beq.n	8003ea8 <TIM_Base_SetConfig+0x40>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a3b      	ldr	r2, [pc, #236]	; (8003f88 <TIM_Base_SetConfig+0x120>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d003      	beq.n	8003ea8 <TIM_Base_SetConfig+0x40>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a3a      	ldr	r2, [pc, #232]	; (8003f8c <TIM_Base_SetConfig+0x124>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d108      	bne.n	8003eba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a2f      	ldr	r2, [pc, #188]	; (8003f7c <TIM_Base_SetConfig+0x114>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d02b      	beq.n	8003f1a <TIM_Base_SetConfig+0xb2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec8:	d027      	beq.n	8003f1a <TIM_Base_SetConfig+0xb2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a2c      	ldr	r2, [pc, #176]	; (8003f80 <TIM_Base_SetConfig+0x118>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d023      	beq.n	8003f1a <TIM_Base_SetConfig+0xb2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a2b      	ldr	r2, [pc, #172]	; (8003f84 <TIM_Base_SetConfig+0x11c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d01f      	beq.n	8003f1a <TIM_Base_SetConfig+0xb2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a2a      	ldr	r2, [pc, #168]	; (8003f88 <TIM_Base_SetConfig+0x120>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d01b      	beq.n	8003f1a <TIM_Base_SetConfig+0xb2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a29      	ldr	r2, [pc, #164]	; (8003f8c <TIM_Base_SetConfig+0x124>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d017      	beq.n	8003f1a <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a28      	ldr	r2, [pc, #160]	; (8003f90 <TIM_Base_SetConfig+0x128>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d013      	beq.n	8003f1a <TIM_Base_SetConfig+0xb2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a27      	ldr	r2, [pc, #156]	; (8003f94 <TIM_Base_SetConfig+0x12c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d00f      	beq.n	8003f1a <TIM_Base_SetConfig+0xb2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a26      	ldr	r2, [pc, #152]	; (8003f98 <TIM_Base_SetConfig+0x130>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00b      	beq.n	8003f1a <TIM_Base_SetConfig+0xb2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a25      	ldr	r2, [pc, #148]	; (8003f9c <TIM_Base_SetConfig+0x134>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d007      	beq.n	8003f1a <TIM_Base_SetConfig+0xb2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a24      	ldr	r2, [pc, #144]	; (8003fa0 <TIM_Base_SetConfig+0x138>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d003      	beq.n	8003f1a <TIM_Base_SetConfig+0xb2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a23      	ldr	r2, [pc, #140]	; (8003fa4 <TIM_Base_SetConfig+0x13c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d108      	bne.n	8003f2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a0a      	ldr	r2, [pc, #40]	; (8003f7c <TIM_Base_SetConfig+0x114>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d003      	beq.n	8003f60 <TIM_Base_SetConfig+0xf8>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a0c      	ldr	r2, [pc, #48]	; (8003f8c <TIM_Base_SetConfig+0x124>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d103      	bne.n	8003f68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	615a      	str	r2, [r3, #20]
}
 8003f6e:	bf00      	nop
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40010000 	.word	0x40010000
 8003f80:	40000400 	.word	0x40000400
 8003f84:	40000800 	.word	0x40000800
 8003f88:	40000c00 	.word	0x40000c00
 8003f8c:	40010400 	.word	0x40010400
 8003f90:	40014000 	.word	0x40014000
 8003f94:	40014400 	.word	0x40014400
 8003f98:	40014800 	.word	0x40014800
 8003f9c:	40001800 	.word	0x40001800
 8003fa0:	40001c00 	.word	0x40001c00
 8003fa4:	40002000 	.word	0x40002000

08003fa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	f023 0201 	bic.w	r2, r3, #1
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f023 030a 	bic.w	r3, r3, #10
 8003fe4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	621a      	str	r2, [r3, #32]
}
 8003ffa:	bf00      	nop
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004006:	b480      	push	{r7}
 8004008:	b087      	sub	sp, #28
 800400a:	af00      	add	r7, sp, #0
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	f023 0210 	bic.w	r2, r3, #16
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004030:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	031b      	lsls	r3, r3, #12
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	4313      	orrs	r3, r2
 800403a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004042:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	621a      	str	r2, [r3, #32]
}
 800405a:	bf00      	nop
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004066:	b480      	push	{r7}
 8004068:	b085      	sub	sp, #20
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	f043 0307 	orr.w	r3, r3, #7
 8004088:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	609a      	str	r2, [r3, #8]
}
 8004090:	bf00      	nop
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	021a      	lsls	r2, r3, #8
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	431a      	orrs	r2, r3
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	609a      	str	r2, [r3, #8]
}
 80040d0:	bf00      	nop
 80040d2:	371c      	adds	r7, #28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e06d      	b.n	80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a30      	ldr	r2, [pc, #192]	; (80041dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d004      	beq.n	8004128 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a2f      	ldr	r2, [pc, #188]	; (80041e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d108      	bne.n	800413a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800412e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004140:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	4313      	orrs	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a20      	ldr	r2, [pc, #128]	; (80041dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d022      	beq.n	80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004166:	d01d      	beq.n	80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a1d      	ldr	r2, [pc, #116]	; (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d018      	beq.n	80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a1c      	ldr	r2, [pc, #112]	; (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d013      	beq.n	80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a1a      	ldr	r2, [pc, #104]	; (80041ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00e      	beq.n	80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a15      	ldr	r2, [pc, #84]	; (80041e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d009      	beq.n	80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a16      	ldr	r2, [pc, #88]	; (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d004      	beq.n	80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a15      	ldr	r2, [pc, #84]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d10c      	bne.n	80041be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	40010000 	.word	0x40010000
 80041e0:	40010400 	.word	0x40010400
 80041e4:	40000400 	.word	0x40000400
 80041e8:	40000800 	.word	0x40000800
 80041ec:	40000c00 	.word	0x40000c00
 80041f0:	40014000 	.word	0x40014000
 80041f4:	40001800 	.word	0x40001800

080041f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e040      	b.n	80042c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fc fd7a 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2224      	movs	r2, #36	; 0x24
 8004260:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0201 	bic.w	r2, r2, #1
 8004270:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fab0 	bl	80047d8 <UART_SetConfig>
 8004278:	4603      	mov	r3, r0
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e022      	b.n	80042c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fd4e 	bl	8004d2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800429e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fdd5 	bl	8004e70 <UART_CheckIdleState>
 80042c6:	4603      	mov	r3, r0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08a      	sub	sp, #40	; 0x28
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	4613      	mov	r3, r2
 80042de:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d17f      	bne.n	80043e8 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <HAL_UART_Transmit+0x24>
 80042ee:	88fb      	ldrh	r3, [r7, #6]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e078      	b.n	80043ea <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_UART_Transmit+0x36>
 8004302:	2302      	movs	r3, #2
 8004304:	e071      	b.n	80043ea <HAL_UART_Transmit+0x11a>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2221      	movs	r2, #33	; 0x21
 8004318:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800431a:	f7fc fecd 	bl	80010b8 <HAL_GetTick>
 800431e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	88fa      	ldrh	r2, [r7, #6]
 8004324:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	88fa      	ldrh	r2, [r7, #6]
 800432c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004338:	d108      	bne.n	800434c <HAL_UART_Transmit+0x7c>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d104      	bne.n	800434c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8004342:	2300      	movs	r3, #0
 8004344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	61bb      	str	r3, [r7, #24]
 800434a:	e003      	b.n	8004354 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004350:	2300      	movs	r3, #0
 8004352:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800435c:	e02c      	b.n	80043b8 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2200      	movs	r2, #0
 8004366:	2180      	movs	r1, #128	; 0x80
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 fdb0 	bl	8004ece <UART_WaitOnFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e038      	b.n	80043ea <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10b      	bne.n	8004396 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800438c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	3302      	adds	r3, #2
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	e007      	b.n	80043a6 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	781a      	ldrb	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	3301      	adds	r3, #1
 80043a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1cc      	bne.n	800435e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	2200      	movs	r2, #0
 80043cc:	2140      	movs	r1, #64	; 0x40
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 fd7d 	bl	8004ece <UART_WaitOnFlagUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e005      	b.n	80043ea <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2220      	movs	r2, #32
 80043e2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	e000      	b.n	80043ea <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80043e8:	2302      	movs	r3, #2
  }
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3720      	adds	r7, #32
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
	...

080043f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	4613      	mov	r3, r2
 8004400:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004406:	2b20      	cmp	r3, #32
 8004408:	f040 808a 	bne.w	8004520 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <HAL_UART_Receive_IT+0x24>
 8004412:	88fb      	ldrh	r3, [r7, #6]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e082      	b.n	8004522 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <HAL_UART_Receive_IT+0x36>
 8004426:	2302      	movs	r3, #2
 8004428:	e07b      	b.n	8004522 <HAL_UART_Receive_IT+0x12e>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	88fa      	ldrh	r2, [r7, #6]
 800443c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	88fa      	ldrh	r2, [r7, #6]
 8004444:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004456:	d10e      	bne.n	8004476 <HAL_UART_Receive_IT+0x82>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d105      	bne.n	800446c <HAL_UART_Receive_IT+0x78>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004466:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800446a:	e02d      	b.n	80044c8 <HAL_UART_Receive_IT+0xd4>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	22ff      	movs	r2, #255	; 0xff
 8004470:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004474:	e028      	b.n	80044c8 <HAL_UART_Receive_IT+0xd4>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10d      	bne.n	800449a <HAL_UART_Receive_IT+0xa6>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d104      	bne.n	8004490 <HAL_UART_Receive_IT+0x9c>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	22ff      	movs	r2, #255	; 0xff
 800448a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800448e:	e01b      	b.n	80044c8 <HAL_UART_Receive_IT+0xd4>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	227f      	movs	r2, #127	; 0x7f
 8004494:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004498:	e016      	b.n	80044c8 <HAL_UART_Receive_IT+0xd4>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044a2:	d10d      	bne.n	80044c0 <HAL_UART_Receive_IT+0xcc>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d104      	bne.n	80044b6 <HAL_UART_Receive_IT+0xc2>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	227f      	movs	r2, #127	; 0x7f
 80044b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044b4:	e008      	b.n	80044c8 <HAL_UART_Receive_IT+0xd4>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	223f      	movs	r2, #63	; 0x3f
 80044ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044be:	e003      	b.n	80044c8 <HAL_UART_Receive_IT+0xd4>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2222      	movs	r2, #34	; 0x22
 80044d2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ec:	d107      	bne.n	80044fe <HAL_UART_Receive_IT+0x10a>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d103      	bne.n	80044fe <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4a0d      	ldr	r2, [pc, #52]	; (8004530 <HAL_UART_Receive_IT+0x13c>)
 80044fa:	661a      	str	r2, [r3, #96]	; 0x60
 80044fc:	e002      	b.n	8004504 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4a0c      	ldr	r2, [pc, #48]	; (8004534 <HAL_UART_Receive_IT+0x140>)
 8004502:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800451a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800451c:	2300      	movs	r3, #0
 800451e:	e000      	b.n	8004522 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004520:	2302      	movs	r3, #2
  }
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	08005109 	.word	0x08005109
 8004534:	08005063 	.word	0x08005063

08004538 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	f640 030f 	movw	r3, #2063	; 0x80f
 800455e:	4013      	ands	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d113      	bne.n	8004590 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f003 0320 	and.w	r3, r3, #32
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00e      	beq.n	8004590 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b00      	cmp	r3, #0
 800457a:	d009      	beq.n	8004590 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 8100 	beq.w	8004786 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	4798      	blx	r3
      }
      return;
 800458e:	e0fa      	b.n	8004786 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 80d5 	beq.w	8004742 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d105      	bne.n	80045ae <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 80ca 	beq.w	8004742 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00e      	beq.n	80045d6 <HAL_UART_IRQHandler+0x9e>
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d009      	beq.n	80045d6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2201      	movs	r2, #1
 80045c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045ce:	f043 0201 	orr.w	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00e      	beq.n	80045fe <HAL_UART_IRQHandler+0xc6>
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d009      	beq.n	80045fe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2202      	movs	r2, #2
 80045f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045f6:	f043 0204 	orr.w	r2, r3, #4
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00e      	beq.n	8004626 <HAL_UART_IRQHandler+0xee>
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2204      	movs	r2, #4
 8004618:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800461e:	f043 0202 	orr.w	r2, r3, #2
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	f003 0308 	and.w	r3, r3, #8
 800462c:	2b00      	cmp	r3, #0
 800462e:	d013      	beq.n	8004658 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	d104      	bne.n	8004644 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004640:	2b00      	cmp	r3, #0
 8004642:	d009      	beq.n	8004658 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2208      	movs	r2, #8
 800464a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004650:	f043 0208 	orr.w	r2, r3, #8
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00f      	beq.n	8004682 <HAL_UART_IRQHandler+0x14a>
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004674:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800467a:	f043 0220 	orr.w	r2, r3, #32
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d07f      	beq.n	800478a <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00c      	beq.n	80046ae <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b00      	cmp	r3, #0
 800469c:	d007      	beq.n	80046ae <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046b2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046be:	2b40      	cmp	r3, #64	; 0x40
 80046c0:	d004      	beq.n	80046cc <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d031      	beq.n	8004730 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 fc79 	bl	8004fc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046dc:	2b40      	cmp	r3, #64	; 0x40
 80046de:	d123      	bne.n	8004728 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ee:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d013      	beq.n	8004720 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046fc:	4a26      	ldr	r2, [pc, #152]	; (8004798 <HAL_UART_IRQHandler+0x260>)
 80046fe:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004704:	4618      	mov	r0, r3
 8004706:	f7fd f9f5 	bl	8001af4 <HAL_DMA_Abort_IT>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d016      	beq.n	800473e <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800471a:	4610      	mov	r0, r2
 800471c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800471e:	e00e      	b.n	800473e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f84f 	bl	80047c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004726:	e00a      	b.n	800473e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f84b 	bl	80047c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800472e:	e006      	b.n	800473e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f847 	bl	80047c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800473c:	e025      	b.n	800478a <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800473e:	bf00      	nop
    return;
 8004740:	e023      	b.n	800478a <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00d      	beq.n	8004768 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004752:	2b00      	cmp	r3, #0
 8004754:	d008      	beq.n	8004768 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800475a:	2b00      	cmp	r3, #0
 800475c:	d017      	beq.n	800478e <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	4798      	blx	r3
    }
    return;
 8004766:	e012      	b.n	800478e <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00e      	beq.n	8004790 <HAL_UART_IRQHandler+0x258>
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004778:	2b00      	cmp	r3, #0
 800477a:	d009      	beq.n	8004790 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fc57 	bl	8005030 <UART_EndTransmit_IT>
    return;
 8004782:	bf00      	nop
 8004784:	e004      	b.n	8004790 <HAL_UART_IRQHandler+0x258>
      return;
 8004786:	bf00      	nop
 8004788:	e002      	b.n	8004790 <HAL_UART_IRQHandler+0x258>
    return;
 800478a:	bf00      	nop
 800478c:	e000      	b.n	8004790 <HAL_UART_IRQHandler+0x258>
    return;
 800478e:	bf00      	nop
  }

}
 8004790:	3720      	adds	r7, #32
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	08005005 	.word	0x08005005

0800479c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	4bb1      	ldr	r3, [pc, #708]	; (8004acc <UART_SetConfig+0x2f4>)
 8004808:	4013      	ands	r3, r2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6812      	ldr	r2, [r2, #0]
 800480e:	6939      	ldr	r1, [r7, #16]
 8004810:	430b      	orrs	r3, r1
 8004812:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4313      	orrs	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	430a      	orrs	r2, r1
 800484c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a9f      	ldr	r2, [pc, #636]	; (8004ad0 <UART_SetConfig+0x2f8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d121      	bne.n	800489c <UART_SetConfig+0xc4>
 8004858:	4b9e      	ldr	r3, [pc, #632]	; (8004ad4 <UART_SetConfig+0x2fc>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	2b03      	cmp	r3, #3
 8004864:	d816      	bhi.n	8004894 <UART_SetConfig+0xbc>
 8004866:	a201      	add	r2, pc, #4	; (adr r2, 800486c <UART_SetConfig+0x94>)
 8004868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486c:	0800487d 	.word	0x0800487d
 8004870:	08004889 	.word	0x08004889
 8004874:	08004883 	.word	0x08004883
 8004878:	0800488f 	.word	0x0800488f
 800487c:	2301      	movs	r3, #1
 800487e:	77fb      	strb	r3, [r7, #31]
 8004880:	e151      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004882:	2302      	movs	r3, #2
 8004884:	77fb      	strb	r3, [r7, #31]
 8004886:	e14e      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004888:	2304      	movs	r3, #4
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	e14b      	b.n	8004b26 <UART_SetConfig+0x34e>
 800488e:	2308      	movs	r3, #8
 8004890:	77fb      	strb	r3, [r7, #31]
 8004892:	e148      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004894:	2310      	movs	r3, #16
 8004896:	77fb      	strb	r3, [r7, #31]
 8004898:	bf00      	nop
 800489a:	e144      	b.n	8004b26 <UART_SetConfig+0x34e>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a8d      	ldr	r2, [pc, #564]	; (8004ad8 <UART_SetConfig+0x300>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d134      	bne.n	8004910 <UART_SetConfig+0x138>
 80048a6:	4b8b      	ldr	r3, [pc, #556]	; (8004ad4 <UART_SetConfig+0x2fc>)
 80048a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ac:	f003 030c 	and.w	r3, r3, #12
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	d829      	bhi.n	8004908 <UART_SetConfig+0x130>
 80048b4:	a201      	add	r2, pc, #4	; (adr r2, 80048bc <UART_SetConfig+0xe4>)
 80048b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ba:	bf00      	nop
 80048bc:	080048f1 	.word	0x080048f1
 80048c0:	08004909 	.word	0x08004909
 80048c4:	08004909 	.word	0x08004909
 80048c8:	08004909 	.word	0x08004909
 80048cc:	080048fd 	.word	0x080048fd
 80048d0:	08004909 	.word	0x08004909
 80048d4:	08004909 	.word	0x08004909
 80048d8:	08004909 	.word	0x08004909
 80048dc:	080048f7 	.word	0x080048f7
 80048e0:	08004909 	.word	0x08004909
 80048e4:	08004909 	.word	0x08004909
 80048e8:	08004909 	.word	0x08004909
 80048ec:	08004903 	.word	0x08004903
 80048f0:	2300      	movs	r3, #0
 80048f2:	77fb      	strb	r3, [r7, #31]
 80048f4:	e117      	b.n	8004b26 <UART_SetConfig+0x34e>
 80048f6:	2302      	movs	r3, #2
 80048f8:	77fb      	strb	r3, [r7, #31]
 80048fa:	e114      	b.n	8004b26 <UART_SetConfig+0x34e>
 80048fc:	2304      	movs	r3, #4
 80048fe:	77fb      	strb	r3, [r7, #31]
 8004900:	e111      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004902:	2308      	movs	r3, #8
 8004904:	77fb      	strb	r3, [r7, #31]
 8004906:	e10e      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004908:	2310      	movs	r3, #16
 800490a:	77fb      	strb	r3, [r7, #31]
 800490c:	bf00      	nop
 800490e:	e10a      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a71      	ldr	r2, [pc, #452]	; (8004adc <UART_SetConfig+0x304>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d120      	bne.n	800495c <UART_SetConfig+0x184>
 800491a:	4b6e      	ldr	r3, [pc, #440]	; (8004ad4 <UART_SetConfig+0x2fc>)
 800491c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004920:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004924:	2b10      	cmp	r3, #16
 8004926:	d00f      	beq.n	8004948 <UART_SetConfig+0x170>
 8004928:	2b10      	cmp	r3, #16
 800492a:	d802      	bhi.n	8004932 <UART_SetConfig+0x15a>
 800492c:	2b00      	cmp	r3, #0
 800492e:	d005      	beq.n	800493c <UART_SetConfig+0x164>
 8004930:	e010      	b.n	8004954 <UART_SetConfig+0x17c>
 8004932:	2b20      	cmp	r3, #32
 8004934:	d005      	beq.n	8004942 <UART_SetConfig+0x16a>
 8004936:	2b30      	cmp	r3, #48	; 0x30
 8004938:	d009      	beq.n	800494e <UART_SetConfig+0x176>
 800493a:	e00b      	b.n	8004954 <UART_SetConfig+0x17c>
 800493c:	2300      	movs	r3, #0
 800493e:	77fb      	strb	r3, [r7, #31]
 8004940:	e0f1      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004942:	2302      	movs	r3, #2
 8004944:	77fb      	strb	r3, [r7, #31]
 8004946:	e0ee      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004948:	2304      	movs	r3, #4
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e0eb      	b.n	8004b26 <UART_SetConfig+0x34e>
 800494e:	2308      	movs	r3, #8
 8004950:	77fb      	strb	r3, [r7, #31]
 8004952:	e0e8      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004954:	2310      	movs	r3, #16
 8004956:	77fb      	strb	r3, [r7, #31]
 8004958:	bf00      	nop
 800495a:	e0e4      	b.n	8004b26 <UART_SetConfig+0x34e>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a5f      	ldr	r2, [pc, #380]	; (8004ae0 <UART_SetConfig+0x308>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d120      	bne.n	80049a8 <UART_SetConfig+0x1d0>
 8004966:	4b5b      	ldr	r3, [pc, #364]	; (8004ad4 <UART_SetConfig+0x2fc>)
 8004968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004970:	2b40      	cmp	r3, #64	; 0x40
 8004972:	d00f      	beq.n	8004994 <UART_SetConfig+0x1bc>
 8004974:	2b40      	cmp	r3, #64	; 0x40
 8004976:	d802      	bhi.n	800497e <UART_SetConfig+0x1a6>
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <UART_SetConfig+0x1b0>
 800497c:	e010      	b.n	80049a0 <UART_SetConfig+0x1c8>
 800497e:	2b80      	cmp	r3, #128	; 0x80
 8004980:	d005      	beq.n	800498e <UART_SetConfig+0x1b6>
 8004982:	2bc0      	cmp	r3, #192	; 0xc0
 8004984:	d009      	beq.n	800499a <UART_SetConfig+0x1c2>
 8004986:	e00b      	b.n	80049a0 <UART_SetConfig+0x1c8>
 8004988:	2300      	movs	r3, #0
 800498a:	77fb      	strb	r3, [r7, #31]
 800498c:	e0cb      	b.n	8004b26 <UART_SetConfig+0x34e>
 800498e:	2302      	movs	r3, #2
 8004990:	77fb      	strb	r3, [r7, #31]
 8004992:	e0c8      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004994:	2304      	movs	r3, #4
 8004996:	77fb      	strb	r3, [r7, #31]
 8004998:	e0c5      	b.n	8004b26 <UART_SetConfig+0x34e>
 800499a:	2308      	movs	r3, #8
 800499c:	77fb      	strb	r3, [r7, #31]
 800499e:	e0c2      	b.n	8004b26 <UART_SetConfig+0x34e>
 80049a0:	2310      	movs	r3, #16
 80049a2:	77fb      	strb	r3, [r7, #31]
 80049a4:	bf00      	nop
 80049a6:	e0be      	b.n	8004b26 <UART_SetConfig+0x34e>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a4d      	ldr	r2, [pc, #308]	; (8004ae4 <UART_SetConfig+0x30c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d124      	bne.n	80049fc <UART_SetConfig+0x224>
 80049b2:	4b48      	ldr	r3, [pc, #288]	; (8004ad4 <UART_SetConfig+0x2fc>)
 80049b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c0:	d012      	beq.n	80049e8 <UART_SetConfig+0x210>
 80049c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c6:	d802      	bhi.n	80049ce <UART_SetConfig+0x1f6>
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <UART_SetConfig+0x204>
 80049cc:	e012      	b.n	80049f4 <UART_SetConfig+0x21c>
 80049ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d2:	d006      	beq.n	80049e2 <UART_SetConfig+0x20a>
 80049d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049d8:	d009      	beq.n	80049ee <UART_SetConfig+0x216>
 80049da:	e00b      	b.n	80049f4 <UART_SetConfig+0x21c>
 80049dc:	2300      	movs	r3, #0
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e0a1      	b.n	8004b26 <UART_SetConfig+0x34e>
 80049e2:	2302      	movs	r3, #2
 80049e4:	77fb      	strb	r3, [r7, #31]
 80049e6:	e09e      	b.n	8004b26 <UART_SetConfig+0x34e>
 80049e8:	2304      	movs	r3, #4
 80049ea:	77fb      	strb	r3, [r7, #31]
 80049ec:	e09b      	b.n	8004b26 <UART_SetConfig+0x34e>
 80049ee:	2308      	movs	r3, #8
 80049f0:	77fb      	strb	r3, [r7, #31]
 80049f2:	e098      	b.n	8004b26 <UART_SetConfig+0x34e>
 80049f4:	2310      	movs	r3, #16
 80049f6:	77fb      	strb	r3, [r7, #31]
 80049f8:	bf00      	nop
 80049fa:	e094      	b.n	8004b26 <UART_SetConfig+0x34e>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a39      	ldr	r2, [pc, #228]	; (8004ae8 <UART_SetConfig+0x310>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d124      	bne.n	8004a50 <UART_SetConfig+0x278>
 8004a06:	4b33      	ldr	r3, [pc, #204]	; (8004ad4 <UART_SetConfig+0x2fc>)
 8004a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a14:	d012      	beq.n	8004a3c <UART_SetConfig+0x264>
 8004a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a1a:	d802      	bhi.n	8004a22 <UART_SetConfig+0x24a>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d007      	beq.n	8004a30 <UART_SetConfig+0x258>
 8004a20:	e012      	b.n	8004a48 <UART_SetConfig+0x270>
 8004a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a26:	d006      	beq.n	8004a36 <UART_SetConfig+0x25e>
 8004a28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a2c:	d009      	beq.n	8004a42 <UART_SetConfig+0x26a>
 8004a2e:	e00b      	b.n	8004a48 <UART_SetConfig+0x270>
 8004a30:	2301      	movs	r3, #1
 8004a32:	77fb      	strb	r3, [r7, #31]
 8004a34:	e077      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004a36:	2302      	movs	r3, #2
 8004a38:	77fb      	strb	r3, [r7, #31]
 8004a3a:	e074      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004a3c:	2304      	movs	r3, #4
 8004a3e:	77fb      	strb	r3, [r7, #31]
 8004a40:	e071      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004a42:	2308      	movs	r3, #8
 8004a44:	77fb      	strb	r3, [r7, #31]
 8004a46:	e06e      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004a48:	2310      	movs	r3, #16
 8004a4a:	77fb      	strb	r3, [r7, #31]
 8004a4c:	bf00      	nop
 8004a4e:	e06a      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a25      	ldr	r2, [pc, #148]	; (8004aec <UART_SetConfig+0x314>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d124      	bne.n	8004aa4 <UART_SetConfig+0x2cc>
 8004a5a:	4b1e      	ldr	r3, [pc, #120]	; (8004ad4 <UART_SetConfig+0x2fc>)
 8004a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a60:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a68:	d012      	beq.n	8004a90 <UART_SetConfig+0x2b8>
 8004a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6e:	d802      	bhi.n	8004a76 <UART_SetConfig+0x29e>
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d007      	beq.n	8004a84 <UART_SetConfig+0x2ac>
 8004a74:	e012      	b.n	8004a9c <UART_SetConfig+0x2c4>
 8004a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a7a:	d006      	beq.n	8004a8a <UART_SetConfig+0x2b2>
 8004a7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a80:	d009      	beq.n	8004a96 <UART_SetConfig+0x2be>
 8004a82:	e00b      	b.n	8004a9c <UART_SetConfig+0x2c4>
 8004a84:	2300      	movs	r3, #0
 8004a86:	77fb      	strb	r3, [r7, #31]
 8004a88:	e04d      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	77fb      	strb	r3, [r7, #31]
 8004a8e:	e04a      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004a90:	2304      	movs	r3, #4
 8004a92:	77fb      	strb	r3, [r7, #31]
 8004a94:	e047      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004a96:	2308      	movs	r3, #8
 8004a98:	77fb      	strb	r3, [r7, #31]
 8004a9a:	e044      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004a9c:	2310      	movs	r3, #16
 8004a9e:	77fb      	strb	r3, [r7, #31]
 8004aa0:	bf00      	nop
 8004aa2:	e040      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a11      	ldr	r2, [pc, #68]	; (8004af0 <UART_SetConfig+0x318>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d139      	bne.n	8004b22 <UART_SetConfig+0x34a>
 8004aae:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <UART_SetConfig+0x2fc>)
 8004ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ab8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004abc:	d027      	beq.n	8004b0e <UART_SetConfig+0x336>
 8004abe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ac2:	d817      	bhi.n	8004af4 <UART_SetConfig+0x31c>
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01c      	beq.n	8004b02 <UART_SetConfig+0x32a>
 8004ac8:	e027      	b.n	8004b1a <UART_SetConfig+0x342>
 8004aca:	bf00      	nop
 8004acc:	efff69f3 	.word	0xefff69f3
 8004ad0:	40011000 	.word	0x40011000
 8004ad4:	40023800 	.word	0x40023800
 8004ad8:	40004400 	.word	0x40004400
 8004adc:	40004800 	.word	0x40004800
 8004ae0:	40004c00 	.word	0x40004c00
 8004ae4:	40005000 	.word	0x40005000
 8004ae8:	40011400 	.word	0x40011400
 8004aec:	40007800 	.word	0x40007800
 8004af0:	40007c00 	.word	0x40007c00
 8004af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af8:	d006      	beq.n	8004b08 <UART_SetConfig+0x330>
 8004afa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004afe:	d009      	beq.n	8004b14 <UART_SetConfig+0x33c>
 8004b00:	e00b      	b.n	8004b1a <UART_SetConfig+0x342>
 8004b02:	2300      	movs	r3, #0
 8004b04:	77fb      	strb	r3, [r7, #31]
 8004b06:	e00e      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	e00b      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004b0e:	2304      	movs	r3, #4
 8004b10:	77fb      	strb	r3, [r7, #31]
 8004b12:	e008      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004b14:	2308      	movs	r3, #8
 8004b16:	77fb      	strb	r3, [r7, #31]
 8004b18:	e005      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004b1a:	2310      	movs	r3, #16
 8004b1c:	77fb      	strb	r3, [r7, #31]
 8004b1e:	bf00      	nop
 8004b20:	e001      	b.n	8004b26 <UART_SetConfig+0x34e>
 8004b22:	2310      	movs	r3, #16
 8004b24:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b2e:	d17f      	bne.n	8004c30 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004b30:	7ffb      	ldrb	r3, [r7, #31]
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d85c      	bhi.n	8004bf0 <UART_SetConfig+0x418>
 8004b36:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <UART_SetConfig+0x364>)
 8004b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3c:	08004b61 	.word	0x08004b61
 8004b40:	08004b81 	.word	0x08004b81
 8004b44:	08004ba1 	.word	0x08004ba1
 8004b48:	08004bf1 	.word	0x08004bf1
 8004b4c:	08004bb9 	.word	0x08004bb9
 8004b50:	08004bf1 	.word	0x08004bf1
 8004b54:	08004bf1 	.word	0x08004bf1
 8004b58:	08004bf1 	.word	0x08004bf1
 8004b5c:	08004bd9 	.word	0x08004bd9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b60:	f7fe fae2 	bl	8003128 <HAL_RCC_GetPCLK1Freq>
 8004b64:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	005a      	lsls	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	085b      	lsrs	r3, r3, #1
 8004b70:	441a      	add	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	61bb      	str	r3, [r7, #24]
        break;
 8004b7e:	e03a      	b.n	8004bf6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b80:	f7fe fae6 	bl	8003150 <HAL_RCC_GetPCLK2Freq>
 8004b84:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	005a      	lsls	r2, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	085b      	lsrs	r3, r3, #1
 8004b90:	441a      	add	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	61bb      	str	r3, [r7, #24]
        break;
 8004b9e:	e02a      	b.n	8004bf6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	085a      	lsrs	r2, r3, #1
 8004ba6:	4b5f      	ldr	r3, [pc, #380]	; (8004d24 <UART_SetConfig+0x54c>)
 8004ba8:	4413      	add	r3, r2
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6852      	ldr	r2, [r2, #4]
 8004bae:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	61bb      	str	r3, [r7, #24]
        break;
 8004bb6:	e01e      	b.n	8004bf6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb8:	f7fe f9f8 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 8004bbc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	005a      	lsls	r2, r3, #1
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	085b      	lsrs	r3, r3, #1
 8004bc8:	441a      	add	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	61bb      	str	r3, [r7, #24]
        break;
 8004bd6:	e00e      	b.n	8004bf6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	085b      	lsrs	r3, r3, #1
 8004bde:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	61bb      	str	r3, [r7, #24]
        break;
 8004bee:	e002      	b.n	8004bf6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	75fb      	strb	r3, [r7, #23]
        break;
 8004bf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	2b0f      	cmp	r3, #15
 8004bfa:	d916      	bls.n	8004c2a <UART_SetConfig+0x452>
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c02:	d212      	bcs.n	8004c2a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	f023 030f 	bic.w	r3, r3, #15
 8004c0c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	085b      	lsrs	r3, r3, #1
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	897b      	ldrh	r3, [r7, #10]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	897a      	ldrh	r2, [r7, #10]
 8004c26:	60da      	str	r2, [r3, #12]
 8004c28:	e070      	b.n	8004d0c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	75fb      	strb	r3, [r7, #23]
 8004c2e:	e06d      	b.n	8004d0c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8004c30:	7ffb      	ldrb	r3, [r7, #31]
 8004c32:	2b08      	cmp	r3, #8
 8004c34:	d859      	bhi.n	8004cea <UART_SetConfig+0x512>
 8004c36:	a201      	add	r2, pc, #4	; (adr r2, 8004c3c <UART_SetConfig+0x464>)
 8004c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3c:	08004c61 	.word	0x08004c61
 8004c40:	08004c7f 	.word	0x08004c7f
 8004c44:	08004c9d 	.word	0x08004c9d
 8004c48:	08004ceb 	.word	0x08004ceb
 8004c4c:	08004cb5 	.word	0x08004cb5
 8004c50:	08004ceb 	.word	0x08004ceb
 8004c54:	08004ceb 	.word	0x08004ceb
 8004c58:	08004ceb 	.word	0x08004ceb
 8004c5c:	08004cd3 	.word	0x08004cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c60:	f7fe fa62 	bl	8003128 <HAL_RCC_GetPCLK1Freq>
 8004c64:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	085a      	lsrs	r2, r3, #1
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	441a      	add	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	61bb      	str	r3, [r7, #24]
        break;
 8004c7c:	e038      	b.n	8004cf0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c7e:	f7fe fa67 	bl	8003150 <HAL_RCC_GetPCLK2Freq>
 8004c82:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	085a      	lsrs	r2, r3, #1
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	441a      	add	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	61bb      	str	r3, [r7, #24]
        break;
 8004c9a:	e029      	b.n	8004cf0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	085a      	lsrs	r2, r3, #1
 8004ca2:	4b21      	ldr	r3, [pc, #132]	; (8004d28 <UART_SetConfig+0x550>)
 8004ca4:	4413      	add	r3, r2
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6852      	ldr	r2, [r2, #4]
 8004caa:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	61bb      	str	r3, [r7, #24]
        break;
 8004cb2:	e01d      	b.n	8004cf0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cb4:	f7fe f97a 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 8004cb8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	085a      	lsrs	r2, r3, #1
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	441a      	add	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	61bb      	str	r3, [r7, #24]
        break;
 8004cd0:	e00e      	b.n	8004cf0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	085b      	lsrs	r3, r3, #1
 8004cd8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	61bb      	str	r3, [r7, #24]
        break;
 8004ce8:	e002      	b.n	8004cf0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	75fb      	strb	r3, [r7, #23]
        break;
 8004cee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	2b0f      	cmp	r3, #15
 8004cf4:	d908      	bls.n	8004d08 <UART_SetConfig+0x530>
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cfc:	d204      	bcs.n	8004d08 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	60da      	str	r2, [r3, #12]
 8004d06:	e001      	b.n	8004d0c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3720      	adds	r7, #32
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	01e84800 	.word	0x01e84800
 8004d28:	00f42400 	.word	0x00f42400

08004d2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00a      	beq.n	8004d56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00a      	beq.n	8004d9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	f003 0310 	and.w	r3, r3, #16
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00a      	beq.n	8004dde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d01a      	beq.n	8004e42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e2a:	d10a      	bne.n	8004e42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	605a      	str	r2, [r3, #4]
  }
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af02      	add	r7, sp, #8
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004e7e:	f7fc f91b 	bl	80010b8 <HAL_GetTick>
 8004e82:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d10e      	bne.n	8004eb0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f814 	bl	8004ece <UART_WaitOnFlagUntilTimeout>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e00a      	b.n	8004ec6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	603b      	str	r3, [r7, #0]
 8004eda:	4613      	mov	r3, r2
 8004edc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ede:	e05d      	b.n	8004f9c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ee6:	d059      	beq.n	8004f9c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee8:	f7fc f8e6 	bl	80010b8 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d302      	bcc.n	8004efe <UART_WaitOnFlagUntilTimeout+0x30>
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d11b      	bne.n	8004f36 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f0c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0201 	bic.w	r2, r2, #1
 8004f1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2220      	movs	r2, #32
 8004f28:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e042      	b.n	8004fbc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d02b      	beq.n	8004f9c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f52:	d123      	bne.n	8004f9c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f5c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f6c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 0201 	bic.w	r2, r2, #1
 8004f7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2220      	movs	r2, #32
 8004f82:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2220      	movs	r2, #32
 8004f88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e00f      	b.n	8004fbc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69da      	ldr	r2, [r3, #28]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	bf0c      	ite	eq
 8004fac:	2301      	moveq	r3, #1
 8004fae:	2300      	movne	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d092      	beq.n	8004ee0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fda:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 0201 	bic.w	r2, r2, #1
 8004fea:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f7ff fbce 	bl	80047c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005028:	bf00      	nop
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005046:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2220      	movs	r2, #32
 800504c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7ff fba1 	bl	800479c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800505a:	bf00      	nop
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b084      	sub	sp, #16
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005070:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005076:	2b22      	cmp	r3, #34	; 0x22
 8005078:	d13a      	bne.n	80050f0 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005082:	89bb      	ldrh	r3, [r7, #12]
 8005084:	b2d9      	uxtb	r1, r3
 8005086:	89fb      	ldrh	r3, [r7, #14]
 8005088:	b2da      	uxtb	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508e:	400a      	ands	r2, r1
 8005090:	b2d2      	uxtb	r2, r2
 8005092:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d121      	bne.n	8005100 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050ca:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0201 	bic.w	r2, r2, #1
 80050da:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff fb61 	bl	80047b0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80050ee:	e007      	b.n	8005100 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699a      	ldr	r2, [r3, #24]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0208 	orr.w	r2, r2, #8
 80050fe:	619a      	str	r2, [r3, #24]
}
 8005100:	bf00      	nop
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005116:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800511c:	2b22      	cmp	r3, #34	; 0x22
 800511e:	d13a      	bne.n	8005196 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800512e:	89ba      	ldrh	r2, [r7, #12]
 8005130:	89fb      	ldrh	r3, [r7, #14]
 8005132:	4013      	ands	r3, r2
 8005134:	b29a      	uxth	r2, r3
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513e:	1c9a      	adds	r2, r3, #2
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d121      	bne.n	80051a6 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005170:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0201 	bic.w	r2, r2, #1
 8005180:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2220      	movs	r2, #32
 8005186:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7ff fb0e 	bl	80047b0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005194:	e007      	b.n	80051a6 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	699a      	ldr	r2, [r3, #24]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0208 	orr.w	r2, r2, #8
 80051a4:	619a      	str	r2, [r3, #24]
}
 80051a6:	bf00      	nop
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4a07      	ldr	r2, [pc, #28]	; (80051dc <vApplicationGetIdleTaskMemory+0x2c>)
 80051c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	4a06      	ldr	r2, [pc, #24]	; (80051e0 <vApplicationGetIdleTaskMemory+0x30>)
 80051c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2280      	movs	r2, #128	; 0x80
 80051cc:	601a      	str	r2, [r3, #0]
}
 80051ce:	bf00      	nop
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	20000098 	.word	0x20000098
 80051e0:	200000f4 	.word	0x200000f4

080051e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4a07      	ldr	r2, [pc, #28]	; (8005210 <vApplicationGetTimerTaskMemory+0x2c>)
 80051f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	4a06      	ldr	r2, [pc, #24]	; (8005214 <vApplicationGetTimerTaskMemory+0x30>)
 80051fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005202:	601a      	str	r2, [r3, #0]
}
 8005204:	bf00      	nop
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	200002f4 	.word	0x200002f4
 8005214:	20000350 	.word	0x20000350

08005218 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f103 0208 	add.w	r2, r3, #8
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005230:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f103 0208 	add.w	r2, r3, #8
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f103 0208 	add.w	r2, r3, #8
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005272:	b480      	push	{r7}
 8005274:	b085      	sub	sp, #20
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	683a      	ldr	r2, [r7, #0]
 8005296:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	601a      	str	r2, [r3, #0]
}
 80052ae:	bf00      	nop
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052ba:	b480      	push	{r7}
 80052bc:	b085      	sub	sp, #20
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052d0:	d103      	bne.n	80052da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	e00c      	b.n	80052f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3308      	adds	r3, #8
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	e002      	b.n	80052e8 <vListInsert+0x2e>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d2f6      	bcs.n	80052e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	1c5a      	adds	r2, r3, #1
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	601a      	str	r2, [r3, #0]
}
 8005320:	bf00      	nop
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6892      	ldr	r2, [r2, #8]
 8005342:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6852      	ldr	r2, [r2, #4]
 800534c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	429a      	cmp	r2, r3
 8005356:	d103      	bne.n	8005360 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	1e5a      	subs	r2, r3, #1
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10b      	bne.n	80053ac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005398:	b672      	cpsid	i
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	b662      	cpsie	i
 80053a8:	60bb      	str	r3, [r7, #8]
 80053aa:	e7fe      	b.n	80053aa <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80053ac:	f002 f884 	bl	80074b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b8:	68f9      	ldr	r1, [r7, #12]
 80053ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053bc:	fb01 f303 	mul.w	r3, r1, r3
 80053c0:	441a      	add	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053dc:	3b01      	subs	r3, #1
 80053de:	68f9      	ldr	r1, [r7, #12]
 80053e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053e2:	fb01 f303 	mul.w	r3, r1, r3
 80053e6:	441a      	add	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	22ff      	movs	r2, #255	; 0xff
 80053f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	22ff      	movs	r2, #255	; 0xff
 80053f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d114      	bne.n	800542c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d01a      	beq.n	8005440 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	3310      	adds	r3, #16
 800540e:	4618      	mov	r0, r3
 8005410:	f001 f958 	bl	80066c4 <xTaskRemoveFromEventList>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d012      	beq.n	8005440 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800541a:	4b0d      	ldr	r3, [pc, #52]	; (8005450 <xQueueGenericReset+0xd0>)
 800541c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	e009      	b.n	8005440 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	3310      	adds	r3, #16
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff fef1 	bl	8005218 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3324      	adds	r3, #36	; 0x24
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff feec 	bl	8005218 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005440:	f002 f86c 	bl	800751c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005444:	2301      	movs	r3, #1
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	e000ed04 	.word	0xe000ed04

08005454 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005454:	b580      	push	{r7, lr}
 8005456:	b08e      	sub	sp, #56	; 0x38
 8005458:	af02      	add	r7, sp, #8
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
 8005460:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10b      	bne.n	8005480 <xQueueGenericCreateStatic+0x2c>
 8005468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546c:	b672      	cpsid	i
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	b662      	cpsie	i
 800547c:	62bb      	str	r3, [r7, #40]	; 0x28
 800547e:	e7fe      	b.n	800547e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10b      	bne.n	800549e <xQueueGenericCreateStatic+0x4a>
 8005486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548a:	b672      	cpsid	i
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	b662      	cpsie	i
 800549a:	627b      	str	r3, [r7, #36]	; 0x24
 800549c:	e7fe      	b.n	800549c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <xQueueGenericCreateStatic+0x56>
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <xQueueGenericCreateStatic+0x5a>
 80054aa:	2301      	movs	r3, #1
 80054ac:	e000      	b.n	80054b0 <xQueueGenericCreateStatic+0x5c>
 80054ae:	2300      	movs	r3, #0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10b      	bne.n	80054cc <xQueueGenericCreateStatic+0x78>
 80054b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b8:	b672      	cpsid	i
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	b662      	cpsie	i
 80054c8:	623b      	str	r3, [r7, #32]
 80054ca:	e7fe      	b.n	80054ca <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d102      	bne.n	80054d8 <xQueueGenericCreateStatic+0x84>
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <xQueueGenericCreateStatic+0x88>
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <xQueueGenericCreateStatic+0x8a>
 80054dc:	2300      	movs	r3, #0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10b      	bne.n	80054fa <xQueueGenericCreateStatic+0xa6>
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	b672      	cpsid	i
 80054e8:	f383 8811 	msr	BASEPRI, r3
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	b662      	cpsie	i
 80054f6:	61fb      	str	r3, [r7, #28]
 80054f8:	e7fe      	b.n	80054f8 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80054fa:	2350      	movs	r3, #80	; 0x50
 80054fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b50      	cmp	r3, #80	; 0x50
 8005502:	d00b      	beq.n	800551c <xQueueGenericCreateStatic+0xc8>
 8005504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005508:	b672      	cpsid	i
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	b662      	cpsie	i
 8005518:	61bb      	str	r3, [r7, #24]
 800551a:	e7fe      	b.n	800551a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800551c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00d      	beq.n	8005544 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005530:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	4613      	mov	r3, r2
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	68b9      	ldr	r1, [r7, #8]
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f000 f846 	bl	80055d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005546:	4618      	mov	r0, r3
 8005548:	3730      	adds	r7, #48	; 0x30
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800554e:	b580      	push	{r7, lr}
 8005550:	b08a      	sub	sp, #40	; 0x28
 8005552:	af02      	add	r7, sp, #8
 8005554:	60f8      	str	r0, [r7, #12]
 8005556:	60b9      	str	r1, [r7, #8]
 8005558:	4613      	mov	r3, r2
 800555a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10b      	bne.n	800557a <xQueueGenericCreate+0x2c>
 8005562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005566:	b672      	cpsid	i
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	b662      	cpsie	i
 8005576:	613b      	str	r3, [r7, #16]
 8005578:	e7fe      	b.n	8005578 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d102      	bne.n	8005586 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005580:	2300      	movs	r3, #0
 8005582:	61fb      	str	r3, [r7, #28]
 8005584:	e004      	b.n	8005590 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	fb02 f303 	mul.w	r3, r2, r3
 800558e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	3350      	adds	r3, #80	; 0x50
 8005594:	4618      	mov	r0, r3
 8005596:	f002 f8b1 	bl	80076fc <pvPortMalloc>
 800559a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d011      	beq.n	80055c6 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	3350      	adds	r3, #80	; 0x50
 80055aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055b4:	79fa      	ldrb	r2, [r7, #7]
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	4613      	mov	r3, r2
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 f805 	bl	80055d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055c6:	69bb      	ldr	r3, [r7, #24]
	}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3720      	adds	r7, #32
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d103      	bne.n	80055ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	e002      	b.n	80055f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055fe:	2101      	movs	r1, #1
 8005600:	69b8      	ldr	r0, [r7, #24]
 8005602:	f7ff febd 	bl	8005380 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	78fa      	ldrb	r2, [r7, #3]
 800560a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800560e:	bf00      	nop
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b08e      	sub	sp, #56	; 0x38
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005626:	2300      	movs	r3, #0
 8005628:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10b      	bne.n	800564c <xQueueGenericSend+0x34>
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	b672      	cpsid	i
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	b662      	cpsie	i
 8005648:	62bb      	str	r3, [r7, #40]	; 0x28
 800564a:	e7fe      	b.n	800564a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d103      	bne.n	800565a <xQueueGenericSend+0x42>
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <xQueueGenericSend+0x46>
 800565a:	2301      	movs	r3, #1
 800565c:	e000      	b.n	8005660 <xQueueGenericSend+0x48>
 800565e:	2300      	movs	r3, #0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10b      	bne.n	800567c <xQueueGenericSend+0x64>
 8005664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005668:	b672      	cpsid	i
 800566a:	f383 8811 	msr	BASEPRI, r3
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	b662      	cpsie	i
 8005678:	627b      	str	r3, [r7, #36]	; 0x24
 800567a:	e7fe      	b.n	800567a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2b02      	cmp	r3, #2
 8005680:	d103      	bne.n	800568a <xQueueGenericSend+0x72>
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005686:	2b01      	cmp	r3, #1
 8005688:	d101      	bne.n	800568e <xQueueGenericSend+0x76>
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <xQueueGenericSend+0x78>
 800568e:	2300      	movs	r3, #0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10b      	bne.n	80056ac <xQueueGenericSend+0x94>
 8005694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005698:	b672      	cpsid	i
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	b662      	cpsie	i
 80056a8:	623b      	str	r3, [r7, #32]
 80056aa:	e7fe      	b.n	80056aa <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056ac:	f001 f9c8 	bl	8006a40 <xTaskGetSchedulerState>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d102      	bne.n	80056bc <xQueueGenericSend+0xa4>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <xQueueGenericSend+0xa8>
 80056bc:	2301      	movs	r3, #1
 80056be:	e000      	b.n	80056c2 <xQueueGenericSend+0xaa>
 80056c0:	2300      	movs	r3, #0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10b      	bne.n	80056de <xQueueGenericSend+0xc6>
 80056c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ca:	b672      	cpsid	i
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	b662      	cpsie	i
 80056da:	61fb      	str	r3, [r7, #28]
 80056dc:	e7fe      	b.n	80056dc <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056de:	f001 feeb 	bl	80074b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d302      	bcc.n	80056f4 <xQueueGenericSend+0xdc>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d129      	bne.n	8005748 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	68b9      	ldr	r1, [r7, #8]
 80056f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056fa:	f000 fa0d 	bl	8005b18 <prvCopyDataToQueue>
 80056fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	2b00      	cmp	r3, #0
 8005706:	d010      	beq.n	800572a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570a:	3324      	adds	r3, #36	; 0x24
 800570c:	4618      	mov	r0, r3
 800570e:	f000 ffd9 	bl	80066c4 <xTaskRemoveFromEventList>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d013      	beq.n	8005740 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005718:	4b3f      	ldr	r3, [pc, #252]	; (8005818 <xQueueGenericSend+0x200>)
 800571a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	e00a      	b.n	8005740 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800572a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572c:	2b00      	cmp	r3, #0
 800572e:	d007      	beq.n	8005740 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005730:	4b39      	ldr	r3, [pc, #228]	; (8005818 <xQueueGenericSend+0x200>)
 8005732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005740:	f001 feec 	bl	800751c <vPortExitCritical>
				return pdPASS;
 8005744:	2301      	movs	r3, #1
 8005746:	e063      	b.n	8005810 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d103      	bne.n	8005756 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800574e:	f001 fee5 	bl	800751c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005752:	2300      	movs	r3, #0
 8005754:	e05c      	b.n	8005810 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005758:	2b00      	cmp	r3, #0
 800575a:	d106      	bne.n	800576a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800575c:	f107 0314 	add.w	r3, r7, #20
 8005760:	4618      	mov	r0, r3
 8005762:	f001 f813 	bl	800678c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005766:	2301      	movs	r3, #1
 8005768:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800576a:	f001 fed7 	bl	800751c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800576e:	f000 fd83 	bl	8006278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005772:	f001 fea1 	bl	80074b8 <vPortEnterCritical>
 8005776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005778:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800577c:	b25b      	sxtb	r3, r3
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005782:	d103      	bne.n	800578c <xQueueGenericSend+0x174>
 8005784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800578c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005792:	b25b      	sxtb	r3, r3
 8005794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005798:	d103      	bne.n	80057a2 <xQueueGenericSend+0x18a>
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057a2:	f001 febb 	bl	800751c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057a6:	1d3a      	adds	r2, r7, #4
 80057a8:	f107 0314 	add.w	r3, r7, #20
 80057ac:	4611      	mov	r1, r2
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 f802 	bl	80067b8 <xTaskCheckForTimeOut>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d124      	bne.n	8005804 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057bc:	f000 faa4 	bl	8005d08 <prvIsQueueFull>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d018      	beq.n	80057f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c8:	3310      	adds	r3, #16
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	4611      	mov	r1, r2
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 ff26 	bl	8006620 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057d6:	f000 fa2f 	bl	8005c38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057da:	f000 fd5b 	bl	8006294 <xTaskResumeAll>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f47f af7c 	bne.w	80056de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80057e6:	4b0c      	ldr	r3, [pc, #48]	; (8005818 <xQueueGenericSend+0x200>)
 80057e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	e772      	b.n	80056de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057fa:	f000 fa1d 	bl	8005c38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057fe:	f000 fd49 	bl	8006294 <xTaskResumeAll>
 8005802:	e76c      	b.n	80056de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005804:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005806:	f000 fa17 	bl	8005c38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800580a:	f000 fd43 	bl	8006294 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800580e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005810:	4618      	mov	r0, r3
 8005812:	3738      	adds	r7, #56	; 0x38
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	e000ed04 	.word	0xe000ed04

0800581c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08e      	sub	sp, #56	; 0x38
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10b      	bne.n	800584c <xQueueGenericSendFromISR+0x30>
 8005834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005838:	b672      	cpsid	i
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	b662      	cpsie	i
 8005848:	627b      	str	r3, [r7, #36]	; 0x24
 800584a:	e7fe      	b.n	800584a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d103      	bne.n	800585a <xQueueGenericSendFromISR+0x3e>
 8005852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <xQueueGenericSendFromISR+0x42>
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <xQueueGenericSendFromISR+0x44>
 800585e:	2300      	movs	r3, #0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10b      	bne.n	800587c <xQueueGenericSendFromISR+0x60>
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	b672      	cpsid	i
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	b662      	cpsie	i
 8005878:	623b      	str	r3, [r7, #32]
 800587a:	e7fe      	b.n	800587a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d103      	bne.n	800588a <xQueueGenericSendFromISR+0x6e>
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005886:	2b01      	cmp	r3, #1
 8005888:	d101      	bne.n	800588e <xQueueGenericSendFromISR+0x72>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <xQueueGenericSendFromISR+0x74>
 800588e:	2300      	movs	r3, #0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10b      	bne.n	80058ac <xQueueGenericSendFromISR+0x90>
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	b672      	cpsid	i
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	b662      	cpsie	i
 80058a8:	61fb      	str	r3, [r7, #28]
 80058aa:	e7fe      	b.n	80058aa <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058ac:	f001 fee4 	bl	8007678 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058b0:	f3ef 8211 	mrs	r2, BASEPRI
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	b672      	cpsid	i
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	b662      	cpsie	i
 80058c8:	61ba      	str	r2, [r7, #24]
 80058ca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d8:	429a      	cmp	r2, r3
 80058da:	d302      	bcc.n	80058e2 <xQueueGenericSendFromISR+0xc6>
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d12c      	bne.n	800593c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	68b9      	ldr	r1, [r7, #8]
 80058f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058f2:	f000 f911 	bl	8005b18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80058fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058fe:	d112      	bne.n	8005926 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	2b00      	cmp	r3, #0
 8005906:	d016      	beq.n	8005936 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	3324      	adds	r3, #36	; 0x24
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fed9 	bl	80066c4 <xTaskRemoveFromEventList>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00e      	beq.n	8005936 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00b      	beq.n	8005936 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	e007      	b.n	8005936 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005926:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800592a:	3301      	adds	r3, #1
 800592c:	b2db      	uxtb	r3, r3
 800592e:	b25a      	sxtb	r2, r3
 8005930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005936:	2301      	movs	r3, #1
 8005938:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800593a:	e001      	b.n	8005940 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800593c:	2300      	movs	r3, #0
 800593e:	637b      	str	r3, [r7, #52]	; 0x34
 8005940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005942:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800594a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800594c:	4618      	mov	r0, r3
 800594e:	3738      	adds	r7, #56	; 0x38
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b08c      	sub	sp, #48	; 0x30
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005960:	2300      	movs	r3, #0
 8005962:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10b      	bne.n	8005986 <xQueueReceive+0x32>
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005972:	b672      	cpsid	i
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	b662      	cpsie	i
 8005982:	623b      	str	r3, [r7, #32]
 8005984:	e7fe      	b.n	8005984 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d103      	bne.n	8005994 <xQueueReceive+0x40>
 800598c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <xQueueReceive+0x44>
 8005994:	2301      	movs	r3, #1
 8005996:	e000      	b.n	800599a <xQueueReceive+0x46>
 8005998:	2300      	movs	r3, #0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10b      	bne.n	80059b6 <xQueueReceive+0x62>
 800599e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a2:	b672      	cpsid	i
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	b662      	cpsie	i
 80059b2:	61fb      	str	r3, [r7, #28]
 80059b4:	e7fe      	b.n	80059b4 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059b6:	f001 f843 	bl	8006a40 <xTaskGetSchedulerState>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d102      	bne.n	80059c6 <xQueueReceive+0x72>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <xQueueReceive+0x76>
 80059c6:	2301      	movs	r3, #1
 80059c8:	e000      	b.n	80059cc <xQueueReceive+0x78>
 80059ca:	2300      	movs	r3, #0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10b      	bne.n	80059e8 <xQueueReceive+0x94>
 80059d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d4:	b672      	cpsid	i
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	b662      	cpsie	i
 80059e4:	61bb      	str	r3, [r7, #24]
 80059e6:	e7fe      	b.n	80059e6 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059e8:	f001 fd66 	bl	80074b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d01f      	beq.n	8005a38 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059f8:	68b9      	ldr	r1, [r7, #8]
 80059fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059fc:	f000 f8f6 	bl	8005bec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	1e5a      	subs	r2, r3, #1
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00f      	beq.n	8005a30 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	3310      	adds	r3, #16
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 fe55 	bl	80066c4 <xTaskRemoveFromEventList>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d007      	beq.n	8005a30 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a20:	4b3c      	ldr	r3, [pc, #240]	; (8005b14 <xQueueReceive+0x1c0>)
 8005a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a30:	f001 fd74 	bl	800751c <vPortExitCritical>
				return pdPASS;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e069      	b.n	8005b0c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d103      	bne.n	8005a46 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a3e:	f001 fd6d 	bl	800751c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a42:	2300      	movs	r3, #0
 8005a44:	e062      	b.n	8005b0c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d106      	bne.n	8005a5a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a4c:	f107 0310 	add.w	r3, r7, #16
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 fe9b 	bl	800678c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a56:	2301      	movs	r3, #1
 8005a58:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a5a:	f001 fd5f 	bl	800751c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a5e:	f000 fc0b 	bl	8006278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a62:	f001 fd29 	bl	80074b8 <vPortEnterCritical>
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a6c:	b25b      	sxtb	r3, r3
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a72:	d103      	bne.n	8005a7c <xQueueReceive+0x128>
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a82:	b25b      	sxtb	r3, r3
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a88:	d103      	bne.n	8005a92 <xQueueReceive+0x13e>
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a92:	f001 fd43 	bl	800751c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a96:	1d3a      	adds	r2, r7, #4
 8005a98:	f107 0310 	add.w	r3, r7, #16
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fe8a 	bl	80067b8 <xTaskCheckForTimeOut>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d123      	bne.n	8005af2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aac:	f000 f916 	bl	8005cdc <prvIsQueueEmpty>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d017      	beq.n	8005ae6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab8:	3324      	adds	r3, #36	; 0x24
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	4611      	mov	r1, r2
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fdae 	bl	8006620 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ac6:	f000 f8b7 	bl	8005c38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005aca:	f000 fbe3 	bl	8006294 <xTaskResumeAll>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d189      	bne.n	80059e8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005ad4:	4b0f      	ldr	r3, [pc, #60]	; (8005b14 <xQueueReceive+0x1c0>)
 8005ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	e780      	b.n	80059e8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ae8:	f000 f8a6 	bl	8005c38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005aec:	f000 fbd2 	bl	8006294 <xTaskResumeAll>
 8005af0:	e77a      	b.n	80059e8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005af4:	f000 f8a0 	bl	8005c38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005af8:	f000 fbcc 	bl	8006294 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005afe:	f000 f8ed 	bl	8005cdc <prvIsQueueEmpty>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f43f af6f 	beq.w	80059e8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3730      	adds	r7, #48	; 0x30
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	e000ed04 	.word	0xe000ed04

08005b18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b24:	2300      	movs	r3, #0
 8005b26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10d      	bne.n	8005b52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d14d      	bne.n	8005bda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 ff9a 	bl	8006a7c <xTaskPriorityDisinherit>
 8005b48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	609a      	str	r2, [r3, #8]
 8005b50:	e043      	b.n	8005bda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d119      	bne.n	8005b8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6858      	ldr	r0, [r3, #4]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	461a      	mov	r2, r3
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	f003 fa6a 	bl	800903c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	441a      	add	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d32b      	bcc.n	8005bda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	605a      	str	r2, [r3, #4]
 8005b8a:	e026      	b.n	8005bda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	68d8      	ldr	r0, [r3, #12]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b94:	461a      	mov	r2, r3
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	f003 fa50 	bl	800903c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba4:	425b      	negs	r3, r3
 8005ba6:	441a      	add	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d207      	bcs.n	8005bc8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc0:	425b      	negs	r3, r3
 8005bc2:	441a      	add	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d105      	bne.n	8005bda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005be2:	697b      	ldr	r3, [r7, #20]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d018      	beq.n	8005c30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	441a      	add	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d303      	bcc.n	8005c20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68d9      	ldr	r1, [r3, #12]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	461a      	mov	r2, r3
 8005c2a:	6838      	ldr	r0, [r7, #0]
 8005c2c:	f003 fa06 	bl	800903c <memcpy>
	}
}
 8005c30:	bf00      	nop
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c40:	f001 fc3a 	bl	80074b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c4c:	e011      	b.n	8005c72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d012      	beq.n	8005c7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3324      	adds	r3, #36	; 0x24
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fd32 	bl	80066c4 <xTaskRemoveFromEventList>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c66:	f000 fe0b 	bl	8006880 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	dce9      	bgt.n	8005c4e <prvUnlockQueue+0x16>
 8005c7a:	e000      	b.n	8005c7e <prvUnlockQueue+0x46>
					break;
 8005c7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	22ff      	movs	r2, #255	; 0xff
 8005c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005c86:	f001 fc49 	bl	800751c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c8a:	f001 fc15 	bl	80074b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c96:	e011      	b.n	8005cbc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d012      	beq.n	8005cc6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3310      	adds	r3, #16
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 fd0d 	bl	80066c4 <xTaskRemoveFromEventList>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005cb0:	f000 fde6 	bl	8006880 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005cb4:	7bbb      	ldrb	r3, [r7, #14]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	dce9      	bgt.n	8005c98 <prvUnlockQueue+0x60>
 8005cc4:	e000      	b.n	8005cc8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005cc6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	22ff      	movs	r2, #255	; 0xff
 8005ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005cd0:	f001 fc24 	bl	800751c <vPortExitCritical>
}
 8005cd4:	bf00      	nop
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ce4:	f001 fbe8 	bl	80074b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d102      	bne.n	8005cf6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	e001      	b.n	8005cfa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cfa:	f001 fc0f 	bl	800751c <vPortExitCritical>

	return xReturn;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d10:	f001 fbd2 	bl	80074b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d102      	bne.n	8005d26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d20:	2301      	movs	r3, #1
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	e001      	b.n	8005d2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d26:	2300      	movs	r3, #0
 8005d28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d2a:	f001 fbf7 	bl	800751c <vPortExitCritical>

	return xReturn;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	e014      	b.n	8005d72 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d48:	4a0e      	ldr	r2, [pc, #56]	; (8005d84 <vQueueAddToRegistry+0x4c>)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10b      	bne.n	8005d6c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d54:	490b      	ldr	r1, [pc, #44]	; (8005d84 <vQueueAddToRegistry+0x4c>)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d5e:	4a09      	ldr	r2, [pc, #36]	; (8005d84 <vQueueAddToRegistry+0x4c>)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	4413      	add	r3, r2
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d6a:	e005      	b.n	8005d78 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b07      	cmp	r3, #7
 8005d76:	d9e7      	bls.n	8005d48 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d78:	bf00      	nop
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	20004c30 	.word	0x20004c30

08005d88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d98:	f001 fb8e 	bl	80074b8 <vPortEnterCritical>
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005da2:	b25b      	sxtb	r3, r3
 8005da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005da8:	d103      	bne.n	8005db2 <vQueueWaitForMessageRestricted+0x2a>
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005db8:	b25b      	sxtb	r3, r3
 8005dba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dbe:	d103      	bne.n	8005dc8 <vQueueWaitForMessageRestricted+0x40>
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dc8:	f001 fba8 	bl	800751c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d106      	bne.n	8005de2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	3324      	adds	r3, #36	; 0x24
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	68b9      	ldr	r1, [r7, #8]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 fc45 	bl	800666c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005de2:	6978      	ldr	r0, [r7, #20]
 8005de4:	f7ff ff28 	bl	8005c38 <prvUnlockQueue>
	}
 8005de8:	bf00      	nop
 8005dea:	3718      	adds	r7, #24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b08e      	sub	sp, #56	; 0x38
 8005df4:	af04      	add	r7, sp, #16
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
 8005dfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10b      	bne.n	8005e1c <xTaskCreateStatic+0x2c>
 8005e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e08:	b672      	cpsid	i
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	b662      	cpsie	i
 8005e18:	623b      	str	r3, [r7, #32]
 8005e1a:	e7fe      	b.n	8005e1a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10b      	bne.n	8005e3a <xTaskCreateStatic+0x4a>
 8005e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e26:	b672      	cpsid	i
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	b662      	cpsie	i
 8005e36:	61fb      	str	r3, [r7, #28]
 8005e38:	e7fe      	b.n	8005e38 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e3a:	235c      	movs	r3, #92	; 0x5c
 8005e3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	2b5c      	cmp	r3, #92	; 0x5c
 8005e42:	d00b      	beq.n	8005e5c <xTaskCreateStatic+0x6c>
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	b672      	cpsid	i
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	b662      	cpsie	i
 8005e58:	61bb      	str	r3, [r7, #24]
 8005e5a:	e7fe      	b.n	8005e5a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e5c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d01e      	beq.n	8005ea2 <xTaskCreateStatic+0xb2>
 8005e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d01b      	beq.n	8005ea2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e72:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	9303      	str	r3, [sp, #12]
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	9302      	str	r3, [sp, #8]
 8005e84:	f107 0314 	add.w	r3, r7, #20
 8005e88:	9301      	str	r3, [sp, #4]
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	68b9      	ldr	r1, [r7, #8]
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 f850 	bl	8005f3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e9c:	f000 f8de 	bl	800605c <prvAddNewTaskToReadyList>
 8005ea0:	e001      	b.n	8005ea6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ea6:	697b      	ldr	r3, [r7, #20]
	}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3728      	adds	r7, #40	; 0x28
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08c      	sub	sp, #48	; 0x30
 8005eb4:	af04      	add	r7, sp, #16
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	603b      	str	r3, [r7, #0]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ec0:	88fb      	ldrh	r3, [r7, #6]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f001 fc19 	bl	80076fc <pvPortMalloc>
 8005eca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00e      	beq.n	8005ef0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ed2:	205c      	movs	r0, #92	; 0x5c
 8005ed4:	f001 fc12 	bl	80076fc <pvPortMalloc>
 8005ed8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	631a      	str	r2, [r3, #48]	; 0x30
 8005ee6:	e005      	b.n	8005ef4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ee8:	6978      	ldr	r0, [r7, #20]
 8005eea:	f001 fccf 	bl	800788c <vPortFree>
 8005eee:	e001      	b.n	8005ef4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d017      	beq.n	8005f2a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f02:	88fa      	ldrh	r2, [r7, #6]
 8005f04:	2300      	movs	r3, #0
 8005f06:	9303      	str	r3, [sp, #12]
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	9302      	str	r3, [sp, #8]
 8005f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0e:	9301      	str	r3, [sp, #4]
 8005f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	68b9      	ldr	r1, [r7, #8]
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 f80e 	bl	8005f3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f1e:	69f8      	ldr	r0, [r7, #28]
 8005f20:	f000 f89c 	bl	800605c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f24:	2301      	movs	r3, #1
 8005f26:	61bb      	str	r3, [r7, #24]
 8005f28:	e002      	b.n	8005f30 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f2e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f30:	69bb      	ldr	r3, [r7, #24]
	}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3720      	adds	r7, #32
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b088      	sub	sp, #32
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	60f8      	str	r0, [r7, #12]
 8005f42:	60b9      	str	r1, [r7, #8]
 8005f44:	607a      	str	r2, [r7, #4]
 8005f46:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	461a      	mov	r2, r3
 8005f52:	21a5      	movs	r1, #165	; 0xa5
 8005f54:	f003 f87d 	bl	8009052 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f5c:	6879      	ldr	r1, [r7, #4]
 8005f5e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005f62:	440b      	add	r3, r1
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	f023 0307 	bic.w	r3, r3, #7
 8005f70:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	f003 0307 	and.w	r3, r3, #7
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00b      	beq.n	8005f94 <prvInitialiseNewTask+0x5a>
 8005f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f80:	b672      	cpsid	i
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	b662      	cpsie	i
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	e7fe      	b.n	8005f92 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d01f      	beq.n	8005fda <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	61fb      	str	r3, [r7, #28]
 8005f9e:	e012      	b.n	8005fc6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	7819      	ldrb	r1, [r3, #0]
 8005fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	4413      	add	r3, r2
 8005fae:	3334      	adds	r3, #52	; 0x34
 8005fb0:	460a      	mov	r2, r1
 8005fb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	4413      	add	r3, r2
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d006      	beq.n	8005fce <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	61fb      	str	r3, [r7, #28]
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	2b0f      	cmp	r3, #15
 8005fca:	d9e9      	bls.n	8005fa0 <prvInitialiseNewTask+0x66>
 8005fcc:	e000      	b.n	8005fd0 <prvInitialiseNewTask+0x96>
			{
				break;
 8005fce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fd8:	e003      	b.n	8005fe2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	2b37      	cmp	r3, #55	; 0x37
 8005fe6:	d901      	bls.n	8005fec <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005fe8:	2337      	movs	r3, #55	; 0x37
 8005fea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ff0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ff6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006000:	3304      	adds	r3, #4
 8006002:	4618      	mov	r0, r3
 8006004:	f7ff f928 	bl	8005258 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600a:	3318      	adds	r3, #24
 800600c:	4618      	mov	r0, r3
 800600e:	f7ff f923 	bl	8005258 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006016:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006026:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602a:	2200      	movs	r2, #0
 800602c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	68f9      	ldr	r1, [r7, #12]
 800603a:	69b8      	ldr	r0, [r7, #24]
 800603c:	f001 f936 	bl	80072ac <pxPortInitialiseStack>
 8006040:	4602      	mov	r2, r0
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006050:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006052:	bf00      	nop
 8006054:	3720      	adds	r7, #32
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006064:	f001 fa28 	bl	80074b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006068:	4b2d      	ldr	r3, [pc, #180]	; (8006120 <prvAddNewTaskToReadyList+0xc4>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	3301      	adds	r3, #1
 800606e:	4a2c      	ldr	r2, [pc, #176]	; (8006120 <prvAddNewTaskToReadyList+0xc4>)
 8006070:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006072:	4b2c      	ldr	r3, [pc, #176]	; (8006124 <prvAddNewTaskToReadyList+0xc8>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d109      	bne.n	800608e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800607a:	4a2a      	ldr	r2, [pc, #168]	; (8006124 <prvAddNewTaskToReadyList+0xc8>)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006080:	4b27      	ldr	r3, [pc, #156]	; (8006120 <prvAddNewTaskToReadyList+0xc4>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d110      	bne.n	80060aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006088:	f000 fc1e 	bl	80068c8 <prvInitialiseTaskLists>
 800608c:	e00d      	b.n	80060aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800608e:	4b26      	ldr	r3, [pc, #152]	; (8006128 <prvAddNewTaskToReadyList+0xcc>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d109      	bne.n	80060aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006096:	4b23      	ldr	r3, [pc, #140]	; (8006124 <prvAddNewTaskToReadyList+0xc8>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d802      	bhi.n	80060aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060a4:	4a1f      	ldr	r2, [pc, #124]	; (8006124 <prvAddNewTaskToReadyList+0xc8>)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060aa:	4b20      	ldr	r3, [pc, #128]	; (800612c <prvAddNewTaskToReadyList+0xd0>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3301      	adds	r3, #1
 80060b0:	4a1e      	ldr	r2, [pc, #120]	; (800612c <prvAddNewTaskToReadyList+0xd0>)
 80060b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80060b4:	4b1d      	ldr	r3, [pc, #116]	; (800612c <prvAddNewTaskToReadyList+0xd0>)
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c0:	4b1b      	ldr	r3, [pc, #108]	; (8006130 <prvAddNewTaskToReadyList+0xd4>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d903      	bls.n	80060d0 <prvAddNewTaskToReadyList+0x74>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060cc:	4a18      	ldr	r2, [pc, #96]	; (8006130 <prvAddNewTaskToReadyList+0xd4>)
 80060ce:	6013      	str	r3, [r2, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d4:	4613      	mov	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4a15      	ldr	r2, [pc, #84]	; (8006134 <prvAddNewTaskToReadyList+0xd8>)
 80060de:	441a      	add	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3304      	adds	r3, #4
 80060e4:	4619      	mov	r1, r3
 80060e6:	4610      	mov	r0, r2
 80060e8:	f7ff f8c3 	bl	8005272 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060ec:	f001 fa16 	bl	800751c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060f0:	4b0d      	ldr	r3, [pc, #52]	; (8006128 <prvAddNewTaskToReadyList+0xcc>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00e      	beq.n	8006116 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060f8:	4b0a      	ldr	r3, [pc, #40]	; (8006124 <prvAddNewTaskToReadyList+0xc8>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006102:	429a      	cmp	r2, r3
 8006104:	d207      	bcs.n	8006116 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006106:	4b0c      	ldr	r3, [pc, #48]	; (8006138 <prvAddNewTaskToReadyList+0xdc>)
 8006108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006116:	bf00      	nop
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	20000c24 	.word	0x20000c24
 8006124:	20000750 	.word	0x20000750
 8006128:	20000c30 	.word	0x20000c30
 800612c:	20000c40 	.word	0x20000c40
 8006130:	20000c2c 	.word	0x20000c2c
 8006134:	20000754 	.word	0x20000754
 8006138:	e000ed04 	.word	0xe000ed04

0800613c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006144:	2300      	movs	r3, #0
 8006146:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d018      	beq.n	8006180 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800614e:	4b14      	ldr	r3, [pc, #80]	; (80061a0 <vTaskDelay+0x64>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00b      	beq.n	800616e <vTaskDelay+0x32>
 8006156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615a:	b672      	cpsid	i
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	b662      	cpsie	i
 800616a:	60bb      	str	r3, [r7, #8]
 800616c:	e7fe      	b.n	800616c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800616e:	f000 f883 	bl	8006278 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006172:	2100      	movs	r1, #0
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fcf1 	bl	8006b5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800617a:	f000 f88b 	bl	8006294 <xTaskResumeAll>
 800617e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d107      	bne.n	8006196 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006186:	4b07      	ldr	r3, [pc, #28]	; (80061a4 <vTaskDelay+0x68>)
 8006188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006196:	bf00      	nop
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20000c4c 	.word	0x20000c4c
 80061a4:	e000ed04 	.word	0xe000ed04

080061a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b08a      	sub	sp, #40	; 0x28
 80061ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061b6:	463a      	mov	r2, r7
 80061b8:	1d39      	adds	r1, r7, #4
 80061ba:	f107 0308 	add.w	r3, r7, #8
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fe fff6 	bl	80051b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	9202      	str	r2, [sp, #8]
 80061cc:	9301      	str	r3, [sp, #4]
 80061ce:	2300      	movs	r3, #0
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	2300      	movs	r3, #0
 80061d4:	460a      	mov	r2, r1
 80061d6:	4922      	ldr	r1, [pc, #136]	; (8006260 <vTaskStartScheduler+0xb8>)
 80061d8:	4822      	ldr	r0, [pc, #136]	; (8006264 <vTaskStartScheduler+0xbc>)
 80061da:	f7ff fe09 	bl	8005df0 <xTaskCreateStatic>
 80061de:	4602      	mov	r2, r0
 80061e0:	4b21      	ldr	r3, [pc, #132]	; (8006268 <vTaskStartScheduler+0xc0>)
 80061e2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061e4:	4b20      	ldr	r3, [pc, #128]	; (8006268 <vTaskStartScheduler+0xc0>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d002      	beq.n	80061f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061ec:	2301      	movs	r3, #1
 80061ee:	617b      	str	r3, [r7, #20]
 80061f0:	e001      	b.n	80061f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d102      	bne.n	8006202 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80061fc:	f000 fd02 	bl	8006c04 <xTimerCreateTimerTask>
 8006200:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d117      	bne.n	8006238 <vTaskStartScheduler+0x90>
 8006208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620c:	b672      	cpsid	i
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	b662      	cpsie	i
 800621c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800621e:	4b13      	ldr	r3, [pc, #76]	; (800626c <vTaskStartScheduler+0xc4>)
 8006220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006224:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006226:	4b12      	ldr	r3, [pc, #72]	; (8006270 <vTaskStartScheduler+0xc8>)
 8006228:	2201      	movs	r2, #1
 800622a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800622c:	4b11      	ldr	r3, [pc, #68]	; (8006274 <vTaskStartScheduler+0xcc>)
 800622e:	2200      	movs	r2, #0
 8006230:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006232:	f001 f8c5 	bl	80073c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006236:	e00f      	b.n	8006258 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800623e:	d10b      	bne.n	8006258 <vTaskStartScheduler+0xb0>
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	b672      	cpsid	i
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	b662      	cpsie	i
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	e7fe      	b.n	8006256 <vTaskStartScheduler+0xae>
}
 8006258:	bf00      	nop
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	08009874 	.word	0x08009874
 8006264:	08006899 	.word	0x08006899
 8006268:	20000c48 	.word	0x20000c48
 800626c:	20000c44 	.word	0x20000c44
 8006270:	20000c30 	.word	0x20000c30
 8006274:	20000c28 	.word	0x20000c28

08006278 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006278:	b480      	push	{r7}
 800627a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800627c:	4b04      	ldr	r3, [pc, #16]	; (8006290 <vTaskSuspendAll+0x18>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3301      	adds	r3, #1
 8006282:	4a03      	ldr	r2, [pc, #12]	; (8006290 <vTaskSuspendAll+0x18>)
 8006284:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006286:	bf00      	nop
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	20000c4c 	.word	0x20000c4c

08006294 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800629e:	2300      	movs	r3, #0
 80062a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062a2:	4b42      	ldr	r3, [pc, #264]	; (80063ac <xTaskResumeAll+0x118>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10b      	bne.n	80062c2 <xTaskResumeAll+0x2e>
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	b672      	cpsid	i
 80062b0:	f383 8811 	msr	BASEPRI, r3
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	b662      	cpsie	i
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	e7fe      	b.n	80062c0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80062c2:	f001 f8f9 	bl	80074b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80062c6:	4b39      	ldr	r3, [pc, #228]	; (80063ac <xTaskResumeAll+0x118>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	4a37      	ldr	r2, [pc, #220]	; (80063ac <xTaskResumeAll+0x118>)
 80062ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062d0:	4b36      	ldr	r3, [pc, #216]	; (80063ac <xTaskResumeAll+0x118>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d162      	bne.n	800639e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062d8:	4b35      	ldr	r3, [pc, #212]	; (80063b0 <xTaskResumeAll+0x11c>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d05e      	beq.n	800639e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062e0:	e02f      	b.n	8006342 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062e2:	4b34      	ldr	r3, [pc, #208]	; (80063b4 <xTaskResumeAll+0x120>)
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3318      	adds	r3, #24
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff f81c 	bl	800532c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	3304      	adds	r3, #4
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7ff f817 	bl	800532c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006302:	4b2d      	ldr	r3, [pc, #180]	; (80063b8 <xTaskResumeAll+0x124>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	429a      	cmp	r2, r3
 8006308:	d903      	bls.n	8006312 <xTaskResumeAll+0x7e>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630e:	4a2a      	ldr	r2, [pc, #168]	; (80063b8 <xTaskResumeAll+0x124>)
 8006310:	6013      	str	r3, [r2, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006316:	4613      	mov	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4a27      	ldr	r2, [pc, #156]	; (80063bc <xTaskResumeAll+0x128>)
 8006320:	441a      	add	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	3304      	adds	r3, #4
 8006326:	4619      	mov	r1, r3
 8006328:	4610      	mov	r0, r2
 800632a:	f7fe ffa2 	bl	8005272 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006332:	4b23      	ldr	r3, [pc, #140]	; (80063c0 <xTaskResumeAll+0x12c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006338:	429a      	cmp	r2, r3
 800633a:	d302      	bcc.n	8006342 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800633c:	4b21      	ldr	r3, [pc, #132]	; (80063c4 <xTaskResumeAll+0x130>)
 800633e:	2201      	movs	r2, #1
 8006340:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006342:	4b1c      	ldr	r3, [pc, #112]	; (80063b4 <xTaskResumeAll+0x120>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1cb      	bne.n	80062e2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006350:	f000 fb56 	bl	8006a00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006354:	4b1c      	ldr	r3, [pc, #112]	; (80063c8 <xTaskResumeAll+0x134>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d010      	beq.n	8006382 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006360:	f000 f846 	bl	80063f0 <xTaskIncrementTick>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d002      	beq.n	8006370 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800636a:	4b16      	ldr	r3, [pc, #88]	; (80063c4 <xTaskResumeAll+0x130>)
 800636c:	2201      	movs	r2, #1
 800636e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	3b01      	subs	r3, #1
 8006374:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1f1      	bne.n	8006360 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800637c:	4b12      	ldr	r3, [pc, #72]	; (80063c8 <xTaskResumeAll+0x134>)
 800637e:	2200      	movs	r2, #0
 8006380:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006382:	4b10      	ldr	r3, [pc, #64]	; (80063c4 <xTaskResumeAll+0x130>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d009      	beq.n	800639e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800638a:	2301      	movs	r3, #1
 800638c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800638e:	4b0f      	ldr	r3, [pc, #60]	; (80063cc <xTaskResumeAll+0x138>)
 8006390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006394:	601a      	str	r2, [r3, #0]
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800639e:	f001 f8bd 	bl	800751c <vPortExitCritical>

	return xAlreadyYielded;
 80063a2:	68bb      	ldr	r3, [r7, #8]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	20000c4c 	.word	0x20000c4c
 80063b0:	20000c24 	.word	0x20000c24
 80063b4:	20000be4 	.word	0x20000be4
 80063b8:	20000c2c 	.word	0x20000c2c
 80063bc:	20000754 	.word	0x20000754
 80063c0:	20000750 	.word	0x20000750
 80063c4:	20000c38 	.word	0x20000c38
 80063c8:	20000c34 	.word	0x20000c34
 80063cc:	e000ed04 	.word	0xe000ed04

080063d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80063d6:	4b05      	ldr	r3, [pc, #20]	; (80063ec <xTaskGetTickCount+0x1c>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80063dc:	687b      	ldr	r3, [r7, #4]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	20000c28 	.word	0x20000c28

080063f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063f6:	2300      	movs	r3, #0
 80063f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063fa:	4b4f      	ldr	r3, [pc, #316]	; (8006538 <xTaskIncrementTick+0x148>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f040 808a 	bne.w	8006518 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006404:	4b4d      	ldr	r3, [pc, #308]	; (800653c <xTaskIncrementTick+0x14c>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3301      	adds	r3, #1
 800640a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800640c:	4a4b      	ldr	r2, [pc, #300]	; (800653c <xTaskIncrementTick+0x14c>)
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d121      	bne.n	800645c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006418:	4b49      	ldr	r3, [pc, #292]	; (8006540 <xTaskIncrementTick+0x150>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00b      	beq.n	800643a <xTaskIncrementTick+0x4a>
 8006422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006426:	b672      	cpsid	i
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	b662      	cpsie	i
 8006436:	603b      	str	r3, [r7, #0]
 8006438:	e7fe      	b.n	8006438 <xTaskIncrementTick+0x48>
 800643a:	4b41      	ldr	r3, [pc, #260]	; (8006540 <xTaskIncrementTick+0x150>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	4b40      	ldr	r3, [pc, #256]	; (8006544 <xTaskIncrementTick+0x154>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a3e      	ldr	r2, [pc, #248]	; (8006540 <xTaskIncrementTick+0x150>)
 8006446:	6013      	str	r3, [r2, #0]
 8006448:	4a3e      	ldr	r2, [pc, #248]	; (8006544 <xTaskIncrementTick+0x154>)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	4b3e      	ldr	r3, [pc, #248]	; (8006548 <xTaskIncrementTick+0x158>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	3301      	adds	r3, #1
 8006454:	4a3c      	ldr	r2, [pc, #240]	; (8006548 <xTaskIncrementTick+0x158>)
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	f000 fad2 	bl	8006a00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800645c:	4b3b      	ldr	r3, [pc, #236]	; (800654c <xTaskIncrementTick+0x15c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	429a      	cmp	r2, r3
 8006464:	d349      	bcc.n	80064fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006466:	4b36      	ldr	r3, [pc, #216]	; (8006540 <xTaskIncrementTick+0x150>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d104      	bne.n	800647a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006470:	4b36      	ldr	r3, [pc, #216]	; (800654c <xTaskIncrementTick+0x15c>)
 8006472:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006476:	601a      	str	r2, [r3, #0]
					break;
 8006478:	e03f      	b.n	80064fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800647a:	4b31      	ldr	r3, [pc, #196]	; (8006540 <xTaskIncrementTick+0x150>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	429a      	cmp	r2, r3
 8006490:	d203      	bcs.n	800649a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006492:	4a2e      	ldr	r2, [pc, #184]	; (800654c <xTaskIncrementTick+0x15c>)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006498:	e02f      	b.n	80064fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	3304      	adds	r3, #4
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fe ff44 	bl	800532c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d004      	beq.n	80064b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	3318      	adds	r3, #24
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7fe ff3b 	bl	800532c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ba:	4b25      	ldr	r3, [pc, #148]	; (8006550 <xTaskIncrementTick+0x160>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d903      	bls.n	80064ca <xTaskIncrementTick+0xda>
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c6:	4a22      	ldr	r2, [pc, #136]	; (8006550 <xTaskIncrementTick+0x160>)
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ce:	4613      	mov	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4a1f      	ldr	r2, [pc, #124]	; (8006554 <xTaskIncrementTick+0x164>)
 80064d8:	441a      	add	r2, r3
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	3304      	adds	r3, #4
 80064de:	4619      	mov	r1, r3
 80064e0:	4610      	mov	r0, r2
 80064e2:	f7fe fec6 	bl	8005272 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ea:	4b1b      	ldr	r3, [pc, #108]	; (8006558 <xTaskIncrementTick+0x168>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d3b8      	bcc.n	8006466 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80064f4:	2301      	movs	r3, #1
 80064f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064f8:	e7b5      	b.n	8006466 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064fa:	4b17      	ldr	r3, [pc, #92]	; (8006558 <xTaskIncrementTick+0x168>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006500:	4914      	ldr	r1, [pc, #80]	; (8006554 <xTaskIncrementTick+0x164>)
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	440b      	add	r3, r1
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d907      	bls.n	8006522 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8006512:	2301      	movs	r3, #1
 8006514:	617b      	str	r3, [r7, #20]
 8006516:	e004      	b.n	8006522 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006518:	4b10      	ldr	r3, [pc, #64]	; (800655c <xTaskIncrementTick+0x16c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3301      	adds	r3, #1
 800651e:	4a0f      	ldr	r2, [pc, #60]	; (800655c <xTaskIncrementTick+0x16c>)
 8006520:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006522:	4b0f      	ldr	r3, [pc, #60]	; (8006560 <xTaskIncrementTick+0x170>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800652a:	2301      	movs	r3, #1
 800652c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800652e:	697b      	ldr	r3, [r7, #20]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	20000c4c 	.word	0x20000c4c
 800653c:	20000c28 	.word	0x20000c28
 8006540:	20000bdc 	.word	0x20000bdc
 8006544:	20000be0 	.word	0x20000be0
 8006548:	20000c3c 	.word	0x20000c3c
 800654c:	20000c44 	.word	0x20000c44
 8006550:	20000c2c 	.word	0x20000c2c
 8006554:	20000754 	.word	0x20000754
 8006558:	20000750 	.word	0x20000750
 800655c:	20000c34 	.word	0x20000c34
 8006560:	20000c38 	.word	0x20000c38

08006564 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800656a:	4b28      	ldr	r3, [pc, #160]	; (800660c <vTaskSwitchContext+0xa8>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006572:	4b27      	ldr	r3, [pc, #156]	; (8006610 <vTaskSwitchContext+0xac>)
 8006574:	2201      	movs	r2, #1
 8006576:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006578:	e042      	b.n	8006600 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800657a:	4b25      	ldr	r3, [pc, #148]	; (8006610 <vTaskSwitchContext+0xac>)
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006580:	4b24      	ldr	r3, [pc, #144]	; (8006614 <vTaskSwitchContext+0xb0>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	60fb      	str	r3, [r7, #12]
 8006586:	e011      	b.n	80065ac <vTaskSwitchContext+0x48>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10b      	bne.n	80065a6 <vTaskSwitchContext+0x42>
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	b672      	cpsid	i
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	b662      	cpsie	i
 80065a2:	607b      	str	r3, [r7, #4]
 80065a4:	e7fe      	b.n	80065a4 <vTaskSwitchContext+0x40>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	491a      	ldr	r1, [pc, #104]	; (8006618 <vTaskSwitchContext+0xb4>)
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4613      	mov	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	440b      	add	r3, r1
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d0e3      	beq.n	8006588 <vTaskSwitchContext+0x24>
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	4613      	mov	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4a13      	ldr	r2, [pc, #76]	; (8006618 <vTaskSwitchContext+0xb4>)
 80065cc:	4413      	add	r3, r2
 80065ce:	60bb      	str	r3, [r7, #8]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	605a      	str	r2, [r3, #4]
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	3308      	adds	r3, #8
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d104      	bne.n	80065f0 <vTaskSwitchContext+0x8c>
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	605a      	str	r2, [r3, #4]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	4a09      	ldr	r2, [pc, #36]	; (800661c <vTaskSwitchContext+0xb8>)
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	4a06      	ldr	r2, [pc, #24]	; (8006614 <vTaskSwitchContext+0xb0>)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6013      	str	r3, [r2, #0]
}
 8006600:	bf00      	nop
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	20000c4c 	.word	0x20000c4c
 8006610:	20000c38 	.word	0x20000c38
 8006614:	20000c2c 	.word	0x20000c2c
 8006618:	20000754 	.word	0x20000754
 800661c:	20000750 	.word	0x20000750

08006620 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10b      	bne.n	8006648 <vTaskPlaceOnEventList+0x28>
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	b672      	cpsid	i
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	b662      	cpsie	i
 8006644:	60fb      	str	r3, [r7, #12]
 8006646:	e7fe      	b.n	8006646 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006648:	4b07      	ldr	r3, [pc, #28]	; (8006668 <vTaskPlaceOnEventList+0x48>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3318      	adds	r3, #24
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7fe fe32 	bl	80052ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006656:	2101      	movs	r1, #1
 8006658:	6838      	ldr	r0, [r7, #0]
 800665a:	f000 fa7f 	bl	8006b5c <prvAddCurrentTaskToDelayedList>
}
 800665e:	bf00      	nop
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	20000750 	.word	0x20000750

0800666c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10b      	bne.n	8006696 <vTaskPlaceOnEventListRestricted+0x2a>
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	b672      	cpsid	i
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	b662      	cpsie	i
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	e7fe      	b.n	8006694 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006696:	4b0a      	ldr	r3, [pc, #40]	; (80066c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3318      	adds	r3, #24
 800669c:	4619      	mov	r1, r3
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f7fe fde7 	bl	8005272 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80066aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	68b8      	ldr	r0, [r7, #8]
 80066b4:	f000 fa52 	bl	8006b5c <prvAddCurrentTaskToDelayedList>
	}
 80066b8:	bf00      	nop
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	20000750 	.word	0x20000750

080066c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10b      	bne.n	80066f2 <xTaskRemoveFromEventList+0x2e>
 80066da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066de:	b672      	cpsid	i
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	b662      	cpsie	i
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	e7fe      	b.n	80066f0 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	3318      	adds	r3, #24
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fe fe18 	bl	800532c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066fc:	4b1d      	ldr	r3, [pc, #116]	; (8006774 <xTaskRemoveFromEventList+0xb0>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d11d      	bne.n	8006740 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	3304      	adds	r3, #4
 8006708:	4618      	mov	r0, r3
 800670a:	f7fe fe0f 	bl	800532c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006712:	4b19      	ldr	r3, [pc, #100]	; (8006778 <xTaskRemoveFromEventList+0xb4>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	429a      	cmp	r2, r3
 8006718:	d903      	bls.n	8006722 <xTaskRemoveFromEventList+0x5e>
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671e:	4a16      	ldr	r2, [pc, #88]	; (8006778 <xTaskRemoveFromEventList+0xb4>)
 8006720:	6013      	str	r3, [r2, #0]
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006726:	4613      	mov	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4a13      	ldr	r2, [pc, #76]	; (800677c <xTaskRemoveFromEventList+0xb8>)
 8006730:	441a      	add	r2, r3
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	3304      	adds	r3, #4
 8006736:	4619      	mov	r1, r3
 8006738:	4610      	mov	r0, r2
 800673a:	f7fe fd9a 	bl	8005272 <vListInsertEnd>
 800673e:	e005      	b.n	800674c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	3318      	adds	r3, #24
 8006744:	4619      	mov	r1, r3
 8006746:	480e      	ldr	r0, [pc, #56]	; (8006780 <xTaskRemoveFromEventList+0xbc>)
 8006748:	f7fe fd93 	bl	8005272 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006750:	4b0c      	ldr	r3, [pc, #48]	; (8006784 <xTaskRemoveFromEventList+0xc0>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006756:	429a      	cmp	r2, r3
 8006758:	d905      	bls.n	8006766 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800675a:	2301      	movs	r3, #1
 800675c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800675e:	4b0a      	ldr	r3, [pc, #40]	; (8006788 <xTaskRemoveFromEventList+0xc4>)
 8006760:	2201      	movs	r2, #1
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	e001      	b.n	800676a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006766:	2300      	movs	r3, #0
 8006768:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800676a:	697b      	ldr	r3, [r7, #20]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	20000c4c 	.word	0x20000c4c
 8006778:	20000c2c 	.word	0x20000c2c
 800677c:	20000754 	.word	0x20000754
 8006780:	20000be4 	.word	0x20000be4
 8006784:	20000750 	.word	0x20000750
 8006788:	20000c38 	.word	0x20000c38

0800678c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006794:	4b06      	ldr	r3, [pc, #24]	; (80067b0 <vTaskInternalSetTimeOutState+0x24>)
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800679c:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <vTaskInternalSetTimeOutState+0x28>)
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	605a      	str	r2, [r3, #4]
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	20000c3c 	.word	0x20000c3c
 80067b4:	20000c28 	.word	0x20000c28

080067b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10b      	bne.n	80067e0 <xTaskCheckForTimeOut+0x28>
 80067c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067cc:	b672      	cpsid	i
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	b662      	cpsie	i
 80067dc:	613b      	str	r3, [r7, #16]
 80067de:	e7fe      	b.n	80067de <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10b      	bne.n	80067fe <xTaskCheckForTimeOut+0x46>
 80067e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ea:	b672      	cpsid	i
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	b662      	cpsie	i
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	e7fe      	b.n	80067fc <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80067fe:	f000 fe5b 	bl	80074b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006802:	4b1d      	ldr	r3, [pc, #116]	; (8006878 <xTaskCheckForTimeOut+0xc0>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800681a:	d102      	bne.n	8006822 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800681c:	2300      	movs	r3, #0
 800681e:	61fb      	str	r3, [r7, #28]
 8006820:	e023      	b.n	800686a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	4b15      	ldr	r3, [pc, #84]	; (800687c <xTaskCheckForTimeOut+0xc4>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	d007      	beq.n	800683e <xTaskCheckForTimeOut+0x86>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	69ba      	ldr	r2, [r7, #24]
 8006834:	429a      	cmp	r2, r3
 8006836:	d302      	bcc.n	800683e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006838:	2301      	movs	r3, #1
 800683a:	61fb      	str	r3, [r7, #28]
 800683c:	e015      	b.n	800686a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	429a      	cmp	r2, r3
 8006846:	d20b      	bcs.n	8006860 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	1ad2      	subs	r2, r2, r3
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7ff ff99 	bl	800678c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800685a:	2300      	movs	r3, #0
 800685c:	61fb      	str	r3, [r7, #28]
 800685e:	e004      	b.n	800686a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006866:	2301      	movs	r3, #1
 8006868:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800686a:	f000 fe57 	bl	800751c <vPortExitCritical>

	return xReturn;
 800686e:	69fb      	ldr	r3, [r7, #28]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3720      	adds	r7, #32
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	20000c28 	.word	0x20000c28
 800687c:	20000c3c 	.word	0x20000c3c

08006880 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006880:	b480      	push	{r7}
 8006882:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006884:	4b03      	ldr	r3, [pc, #12]	; (8006894 <vTaskMissedYield+0x14>)
 8006886:	2201      	movs	r2, #1
 8006888:	601a      	str	r2, [r3, #0]
}
 800688a:	bf00      	nop
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	20000c38 	.word	0x20000c38

08006898 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068a0:	f000 f852 	bl	8006948 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068a4:	4b06      	ldr	r3, [pc, #24]	; (80068c0 <prvIdleTask+0x28>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d9f9      	bls.n	80068a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80068ac:	4b05      	ldr	r3, [pc, #20]	; (80068c4 <prvIdleTask+0x2c>)
 80068ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068b2:	601a      	str	r2, [r3, #0]
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80068bc:	e7f0      	b.n	80068a0 <prvIdleTask+0x8>
 80068be:	bf00      	nop
 80068c0:	20000754 	.word	0x20000754
 80068c4:	e000ed04 	.word	0xe000ed04

080068c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068ce:	2300      	movs	r3, #0
 80068d0:	607b      	str	r3, [r7, #4]
 80068d2:	e00c      	b.n	80068ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	4613      	mov	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4a12      	ldr	r2, [pc, #72]	; (8006928 <prvInitialiseTaskLists+0x60>)
 80068e0:	4413      	add	r3, r2
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fe fc98 	bl	8005218 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	3301      	adds	r3, #1
 80068ec:	607b      	str	r3, [r7, #4]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b37      	cmp	r3, #55	; 0x37
 80068f2:	d9ef      	bls.n	80068d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068f4:	480d      	ldr	r0, [pc, #52]	; (800692c <prvInitialiseTaskLists+0x64>)
 80068f6:	f7fe fc8f 	bl	8005218 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068fa:	480d      	ldr	r0, [pc, #52]	; (8006930 <prvInitialiseTaskLists+0x68>)
 80068fc:	f7fe fc8c 	bl	8005218 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006900:	480c      	ldr	r0, [pc, #48]	; (8006934 <prvInitialiseTaskLists+0x6c>)
 8006902:	f7fe fc89 	bl	8005218 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006906:	480c      	ldr	r0, [pc, #48]	; (8006938 <prvInitialiseTaskLists+0x70>)
 8006908:	f7fe fc86 	bl	8005218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800690c:	480b      	ldr	r0, [pc, #44]	; (800693c <prvInitialiseTaskLists+0x74>)
 800690e:	f7fe fc83 	bl	8005218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006912:	4b0b      	ldr	r3, [pc, #44]	; (8006940 <prvInitialiseTaskLists+0x78>)
 8006914:	4a05      	ldr	r2, [pc, #20]	; (800692c <prvInitialiseTaskLists+0x64>)
 8006916:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006918:	4b0a      	ldr	r3, [pc, #40]	; (8006944 <prvInitialiseTaskLists+0x7c>)
 800691a:	4a05      	ldr	r2, [pc, #20]	; (8006930 <prvInitialiseTaskLists+0x68>)
 800691c:	601a      	str	r2, [r3, #0]
}
 800691e:	bf00      	nop
 8006920:	3708      	adds	r7, #8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	20000754 	.word	0x20000754
 800692c:	20000bb4 	.word	0x20000bb4
 8006930:	20000bc8 	.word	0x20000bc8
 8006934:	20000be4 	.word	0x20000be4
 8006938:	20000bf8 	.word	0x20000bf8
 800693c:	20000c10 	.word	0x20000c10
 8006940:	20000bdc 	.word	0x20000bdc
 8006944:	20000be0 	.word	0x20000be0

08006948 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800694e:	e019      	b.n	8006984 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006950:	f000 fdb2 	bl	80074b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006954:	4b0f      	ldr	r3, [pc, #60]	; (8006994 <prvCheckTasksWaitingTermination+0x4c>)
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3304      	adds	r3, #4
 8006960:	4618      	mov	r0, r3
 8006962:	f7fe fce3 	bl	800532c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006966:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <prvCheckTasksWaitingTermination+0x50>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3b01      	subs	r3, #1
 800696c:	4a0a      	ldr	r2, [pc, #40]	; (8006998 <prvCheckTasksWaitingTermination+0x50>)
 800696e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006970:	4b0a      	ldr	r3, [pc, #40]	; (800699c <prvCheckTasksWaitingTermination+0x54>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3b01      	subs	r3, #1
 8006976:	4a09      	ldr	r2, [pc, #36]	; (800699c <prvCheckTasksWaitingTermination+0x54>)
 8006978:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800697a:	f000 fdcf 	bl	800751c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f80e 	bl	80069a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006984:	4b05      	ldr	r3, [pc, #20]	; (800699c <prvCheckTasksWaitingTermination+0x54>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e1      	bne.n	8006950 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800698c:	bf00      	nop
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	20000bf8 	.word	0x20000bf8
 8006998:	20000c24 	.word	0x20000c24
 800699c:	20000c0c 	.word	0x20000c0c

080069a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d108      	bne.n	80069c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 ff68 	bl	800788c <vPortFree>
				vPortFree( pxTCB );
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 ff65 	bl	800788c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069c2:	e019      	b.n	80069f8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d103      	bne.n	80069d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 ff5c 	bl	800788c <vPortFree>
	}
 80069d4:	e010      	b.n	80069f8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d00b      	beq.n	80069f8 <prvDeleteTCB+0x58>
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	b672      	cpsid	i
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	b662      	cpsie	i
 80069f4:	60fb      	str	r3, [r7, #12]
 80069f6:	e7fe      	b.n	80069f6 <prvDeleteTCB+0x56>
	}
 80069f8:	bf00      	nop
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a06:	4b0c      	ldr	r3, [pc, #48]	; (8006a38 <prvResetNextTaskUnblockTime+0x38>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d104      	bne.n	8006a1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a10:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <prvResetNextTaskUnblockTime+0x3c>)
 8006a12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a18:	e008      	b.n	8006a2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a1a:	4b07      	ldr	r3, [pc, #28]	; (8006a38 <prvResetNextTaskUnblockTime+0x38>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	4a04      	ldr	r2, [pc, #16]	; (8006a3c <prvResetNextTaskUnblockTime+0x3c>)
 8006a2a:	6013      	str	r3, [r2, #0]
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	20000bdc 	.word	0x20000bdc
 8006a3c:	20000c44 	.word	0x20000c44

08006a40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a46:	4b0b      	ldr	r3, [pc, #44]	; (8006a74 <xTaskGetSchedulerState+0x34>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d102      	bne.n	8006a54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	607b      	str	r3, [r7, #4]
 8006a52:	e008      	b.n	8006a66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a54:	4b08      	ldr	r3, [pc, #32]	; (8006a78 <xTaskGetSchedulerState+0x38>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d102      	bne.n	8006a62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	607b      	str	r3, [r7, #4]
 8006a60:	e001      	b.n	8006a66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a62:	2300      	movs	r3, #0
 8006a64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a66:	687b      	ldr	r3, [r7, #4]
	}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	20000c30 	.word	0x20000c30
 8006a78:	20000c4c 	.word	0x20000c4c

08006a7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d058      	beq.n	8006b44 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a92:	4b2f      	ldr	r3, [pc, #188]	; (8006b50 <xTaskPriorityDisinherit+0xd4>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d00b      	beq.n	8006ab4 <xTaskPriorityDisinherit+0x38>
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	b672      	cpsid	i
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	b662      	cpsie	i
 8006ab0:	60fb      	str	r3, [r7, #12]
 8006ab2:	e7fe      	b.n	8006ab2 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10b      	bne.n	8006ad4 <xTaskPriorityDisinherit+0x58>
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	b672      	cpsid	i
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	b662      	cpsie	i
 8006ad0:	60bb      	str	r3, [r7, #8]
 8006ad2:	e7fe      	b.n	8006ad2 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad8:	1e5a      	subs	r2, r3, #1
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d02c      	beq.n	8006b44 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d128      	bne.n	8006b44 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	3304      	adds	r3, #4
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fe fc18 	bl	800532c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b14:	4b0f      	ldr	r3, [pc, #60]	; (8006b54 <xTaskPriorityDisinherit+0xd8>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d903      	bls.n	8006b24 <xTaskPriorityDisinherit+0xa8>
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b20:	4a0c      	ldr	r2, [pc, #48]	; (8006b54 <xTaskPriorityDisinherit+0xd8>)
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b28:	4613      	mov	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4a09      	ldr	r2, [pc, #36]	; (8006b58 <xTaskPriorityDisinherit+0xdc>)
 8006b32:	441a      	add	r2, r3
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	3304      	adds	r3, #4
 8006b38:	4619      	mov	r1, r3
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	f7fe fb99 	bl	8005272 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b40:	2301      	movs	r3, #1
 8006b42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b44:	697b      	ldr	r3, [r7, #20]
	}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000750 	.word	0x20000750
 8006b54:	20000c2c 	.word	0x20000c2c
 8006b58:	20000754 	.word	0x20000754

08006b5c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b66:	4b21      	ldr	r3, [pc, #132]	; (8006bec <prvAddCurrentTaskToDelayedList+0x90>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b6c:	4b20      	ldr	r3, [pc, #128]	; (8006bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3304      	adds	r3, #4
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fe fbda 	bl	800532c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b7e:	d10a      	bne.n	8006b96 <prvAddCurrentTaskToDelayedList+0x3a>
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d007      	beq.n	8006b96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b86:	4b1a      	ldr	r3, [pc, #104]	; (8006bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	4819      	ldr	r0, [pc, #100]	; (8006bf4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006b90:	f7fe fb6f 	bl	8005272 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b94:	e026      	b.n	8006be4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b9e:	4b14      	ldr	r3, [pc, #80]	; (8006bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d209      	bcs.n	8006bc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bae:	4b12      	ldr	r3, [pc, #72]	; (8006bf8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	4b0f      	ldr	r3, [pc, #60]	; (8006bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3304      	adds	r3, #4
 8006bb8:	4619      	mov	r1, r3
 8006bba:	4610      	mov	r0, r2
 8006bbc:	f7fe fb7d 	bl	80052ba <vListInsert>
}
 8006bc0:	e010      	b.n	8006be4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bc2:	4b0e      	ldr	r3, [pc, #56]	; (8006bfc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	4b0a      	ldr	r3, [pc, #40]	; (8006bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3304      	adds	r3, #4
 8006bcc:	4619      	mov	r1, r3
 8006bce:	4610      	mov	r0, r2
 8006bd0:	f7fe fb73 	bl	80052ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006bd4:	4b0a      	ldr	r3, [pc, #40]	; (8006c00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d202      	bcs.n	8006be4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006bde:	4a08      	ldr	r2, [pc, #32]	; (8006c00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	6013      	str	r3, [r2, #0]
}
 8006be4:	bf00      	nop
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	20000c28 	.word	0x20000c28
 8006bf0:	20000750 	.word	0x20000750
 8006bf4:	20000c10 	.word	0x20000c10
 8006bf8:	20000be0 	.word	0x20000be0
 8006bfc:	20000bdc 	.word	0x20000bdc
 8006c00:	20000c44 	.word	0x20000c44

08006c04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b08a      	sub	sp, #40	; 0x28
 8006c08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c0e:	f000 fb0d 	bl	800722c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c12:	4b1d      	ldr	r3, [pc, #116]	; (8006c88 <xTimerCreateTimerTask+0x84>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d021      	beq.n	8006c5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c22:	1d3a      	adds	r2, r7, #4
 8006c24:	f107 0108 	add.w	r1, r7, #8
 8006c28:	f107 030c 	add.w	r3, r7, #12
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7fe fad9 	bl	80051e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c32:	6879      	ldr	r1, [r7, #4]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	9202      	str	r2, [sp, #8]
 8006c3a:	9301      	str	r3, [sp, #4]
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	2300      	movs	r3, #0
 8006c42:	460a      	mov	r2, r1
 8006c44:	4911      	ldr	r1, [pc, #68]	; (8006c8c <xTimerCreateTimerTask+0x88>)
 8006c46:	4812      	ldr	r0, [pc, #72]	; (8006c90 <xTimerCreateTimerTask+0x8c>)
 8006c48:	f7ff f8d2 	bl	8005df0 <xTaskCreateStatic>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	4b11      	ldr	r3, [pc, #68]	; (8006c94 <xTimerCreateTimerTask+0x90>)
 8006c50:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c52:	4b10      	ldr	r3, [pc, #64]	; (8006c94 <xTimerCreateTimerTask+0x90>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10b      	bne.n	8006c7c <xTimerCreateTimerTask+0x78>
 8006c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c68:	b672      	cpsid	i
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	b662      	cpsie	i
 8006c78:	613b      	str	r3, [r7, #16]
 8006c7a:	e7fe      	b.n	8006c7a <xTimerCreateTimerTask+0x76>
	return xReturn;
 8006c7c:	697b      	ldr	r3, [r7, #20]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3718      	adds	r7, #24
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20000c80 	.word	0x20000c80
 8006c8c:	0800987c 	.word	0x0800987c
 8006c90:	08006dd1 	.word	0x08006dd1
 8006c94:	20000c84 	.word	0x20000c84

08006c98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08a      	sub	sp, #40	; 0x28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
 8006ca4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10b      	bne.n	8006cc8 <xTimerGenericCommand+0x30>
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	b672      	cpsid	i
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	b662      	cpsie	i
 8006cc4:	623b      	str	r3, [r7, #32]
 8006cc6:	e7fe      	b.n	8006cc6 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006cc8:	4b19      	ldr	r3, [pc, #100]	; (8006d30 <xTimerGenericCommand+0x98>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d02a      	beq.n	8006d26 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2b05      	cmp	r3, #5
 8006ce0:	dc18      	bgt.n	8006d14 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006ce2:	f7ff fead 	bl	8006a40 <xTaskGetSchedulerState>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d109      	bne.n	8006d00 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006cec:	4b10      	ldr	r3, [pc, #64]	; (8006d30 <xTimerGenericCommand+0x98>)
 8006cee:	6818      	ldr	r0, [r3, #0]
 8006cf0:	f107 0110 	add.w	r1, r7, #16
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cf8:	f7fe fc8e 	bl	8005618 <xQueueGenericSend>
 8006cfc:	6278      	str	r0, [r7, #36]	; 0x24
 8006cfe:	e012      	b.n	8006d26 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d00:	4b0b      	ldr	r3, [pc, #44]	; (8006d30 <xTimerGenericCommand+0x98>)
 8006d02:	6818      	ldr	r0, [r3, #0]
 8006d04:	f107 0110 	add.w	r1, r7, #16
 8006d08:	2300      	movs	r3, #0
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f7fe fc84 	bl	8005618 <xQueueGenericSend>
 8006d10:	6278      	str	r0, [r7, #36]	; 0x24
 8006d12:	e008      	b.n	8006d26 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d14:	4b06      	ldr	r3, [pc, #24]	; (8006d30 <xTimerGenericCommand+0x98>)
 8006d16:	6818      	ldr	r0, [r3, #0]
 8006d18:	f107 0110 	add.w	r1, r7, #16
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	f7fe fd7c 	bl	800581c <xQueueGenericSendFromISR>
 8006d24:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3728      	adds	r7, #40	; 0x28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	20000c80 	.word	0x20000c80

08006d34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b088      	sub	sp, #32
 8006d38:	af02      	add	r7, sp, #8
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d3e:	4b23      	ldr	r3, [pc, #140]	; (8006dcc <prvProcessExpiredTimer+0x98>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7fe faed 	bl	800532c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d58:	f003 0304 	and.w	r3, r3, #4
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d023      	beq.n	8006da8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	699a      	ldr	r2, [r3, #24]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	18d1      	adds	r1, r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	6978      	ldr	r0, [r7, #20]
 8006d6e:	f000 f8d3 	bl	8006f18 <prvInsertTimerInActiveList>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d020      	beq.n	8006dba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d78:	2300      	movs	r3, #0
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	2100      	movs	r1, #0
 8006d82:	6978      	ldr	r0, [r7, #20]
 8006d84:	f7ff ff88 	bl	8006c98 <xTimerGenericCommand>
 8006d88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d114      	bne.n	8006dba <prvProcessExpiredTimer+0x86>
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	b672      	cpsid	i
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	b662      	cpsie	i
 8006da4:	60fb      	str	r3, [r7, #12]
 8006da6:	e7fe      	b.n	8006da6 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dae:	f023 0301 	bic.w	r3, r3, #1
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	6978      	ldr	r0, [r7, #20]
 8006dc0:	4798      	blx	r3
}
 8006dc2:	bf00      	nop
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	20000c78 	.word	0x20000c78

08006dd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006dd8:	f107 0308 	add.w	r3, r7, #8
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 f857 	bl	8006e90 <prvGetNextExpireTime>
 8006de2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	4619      	mov	r1, r3
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 f803 	bl	8006df4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006dee:	f000 f8d5 	bl	8006f9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006df2:	e7f1      	b.n	8006dd8 <prvTimerTask+0x8>

08006df4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006dfe:	f7ff fa3b 	bl	8006278 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e02:	f107 0308 	add.w	r3, r7, #8
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 f866 	bl	8006ed8 <prvSampleTimeNow>
 8006e0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d130      	bne.n	8006e76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10a      	bne.n	8006e30 <prvProcessTimerOrBlockTask+0x3c>
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d806      	bhi.n	8006e30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e22:	f7ff fa37 	bl	8006294 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e26:	68f9      	ldr	r1, [r7, #12]
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7ff ff83 	bl	8006d34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e2e:	e024      	b.n	8006e7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d008      	beq.n	8006e48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e36:	4b13      	ldr	r3, [pc, #76]	; (8006e84 <prvProcessTimerOrBlockTask+0x90>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <prvProcessTimerOrBlockTask+0x50>
 8006e40:	2301      	movs	r3, #1
 8006e42:	e000      	b.n	8006e46 <prvProcessTimerOrBlockTask+0x52>
 8006e44:	2300      	movs	r3, #0
 8006e46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e48:	4b0f      	ldr	r3, [pc, #60]	; (8006e88 <prvProcessTimerOrBlockTask+0x94>)
 8006e4a:	6818      	ldr	r0, [r3, #0]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	4619      	mov	r1, r3
 8006e56:	f7fe ff97 	bl	8005d88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e5a:	f7ff fa1b 	bl	8006294 <xTaskResumeAll>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10a      	bne.n	8006e7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006e64:	4b09      	ldr	r3, [pc, #36]	; (8006e8c <prvProcessTimerOrBlockTask+0x98>)
 8006e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e6a:	601a      	str	r2, [r3, #0]
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	f3bf 8f6f 	isb	sy
}
 8006e74:	e001      	b.n	8006e7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006e76:	f7ff fa0d 	bl	8006294 <xTaskResumeAll>
}
 8006e7a:	bf00      	nop
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	20000c7c 	.word	0x20000c7c
 8006e88:	20000c80 	.word	0x20000c80
 8006e8c:	e000ed04 	.word	0xe000ed04

08006e90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e98:	4b0e      	ldr	r3, [pc, #56]	; (8006ed4 <prvGetNextExpireTime+0x44>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <prvGetNextExpireTime+0x16>
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	e000      	b.n	8006ea8 <prvGetNextExpireTime+0x18>
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d105      	bne.n	8006ec0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006eb4:	4b07      	ldr	r3, [pc, #28]	; (8006ed4 <prvGetNextExpireTime+0x44>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	60fb      	str	r3, [r7, #12]
 8006ebe:	e001      	b.n	8006ec4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	20000c78 	.word	0x20000c78

08006ed8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ee0:	f7ff fa76 	bl	80063d0 <xTaskGetTickCount>
 8006ee4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ee6:	4b0b      	ldr	r3, [pc, #44]	; (8006f14 <prvSampleTimeNow+0x3c>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d205      	bcs.n	8006efc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ef0:	f000 f936 	bl	8007160 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	e002      	b.n	8006f02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f02:	4a04      	ldr	r2, [pc, #16]	; (8006f14 <prvSampleTimeNow+0x3c>)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f08:	68fb      	ldr	r3, [r7, #12]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	20000c88 	.word	0x20000c88

08006f18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
 8006f24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f26:	2300      	movs	r3, #0
 8006f28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d812      	bhi.n	8006f64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	1ad2      	subs	r2, r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d302      	bcc.n	8006f52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	617b      	str	r3, [r7, #20]
 8006f50:	e01b      	b.n	8006f8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f52:	4b10      	ldr	r3, [pc, #64]	; (8006f94 <prvInsertTimerInActiveList+0x7c>)
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	3304      	adds	r3, #4
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	4610      	mov	r0, r2
 8006f5e:	f7fe f9ac 	bl	80052ba <vListInsert>
 8006f62:	e012      	b.n	8006f8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d206      	bcs.n	8006f7a <prvInsertTimerInActiveList+0x62>
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d302      	bcc.n	8006f7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006f74:	2301      	movs	r3, #1
 8006f76:	617b      	str	r3, [r7, #20]
 8006f78:	e007      	b.n	8006f8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f7a:	4b07      	ldr	r3, [pc, #28]	; (8006f98 <prvInsertTimerInActiveList+0x80>)
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	3304      	adds	r3, #4
 8006f82:	4619      	mov	r1, r3
 8006f84:	4610      	mov	r0, r2
 8006f86:	f7fe f998 	bl	80052ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006f8a:	697b      	ldr	r3, [r7, #20]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3718      	adds	r7, #24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	20000c7c 	.word	0x20000c7c
 8006f98:	20000c78 	.word	0x20000c78

08006f9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08e      	sub	sp, #56	; 0x38
 8006fa0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fa2:	e0cc      	b.n	800713e <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	da19      	bge.n	8006fde <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006faa:	1d3b      	adds	r3, r7, #4
 8006fac:	3304      	adds	r3, #4
 8006fae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10b      	bne.n	8006fce <prvProcessReceivedCommands+0x32>
 8006fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fba:	b672      	cpsid	i
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	b662      	cpsie	i
 8006fca:	61fb      	str	r3, [r7, #28]
 8006fcc:	e7fe      	b.n	8006fcc <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fd4:	6850      	ldr	r0, [r2, #4]
 8006fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fd8:	6892      	ldr	r2, [r2, #8]
 8006fda:	4611      	mov	r1, r2
 8006fdc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f2c0 80ab 	blt.w	800713c <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d004      	beq.n	8006ffc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fe f998 	bl	800532c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ffc:	463b      	mov	r3, r7
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7ff ff6a 	bl	8006ed8 <prvSampleTimeNow>
 8007004:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b09      	cmp	r3, #9
 800700a:	f200 8098 	bhi.w	800713e <prvProcessReceivedCommands+0x1a2>
 800700e:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <prvProcessReceivedCommands+0x78>)
 8007010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007014:	0800703d 	.word	0x0800703d
 8007018:	0800703d 	.word	0x0800703d
 800701c:	0800703d 	.word	0x0800703d
 8007020:	080070b3 	.word	0x080070b3
 8007024:	080070c7 	.word	0x080070c7
 8007028:	08007113 	.word	0x08007113
 800702c:	0800703d 	.word	0x0800703d
 8007030:	0800703d 	.word	0x0800703d
 8007034:	080070b3 	.word	0x080070b3
 8007038:	080070c7 	.word	0x080070c7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800703c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007042:	f043 0301 	orr.w	r3, r3, #1
 8007046:	b2da      	uxtb	r2, r3
 8007048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	18d1      	adds	r1, r2, r3
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800705a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800705c:	f7ff ff5c 	bl	8006f18 <prvInsertTimerInActiveList>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d06b      	beq.n	800713e <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800706c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800706e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	2b00      	cmp	r3, #0
 800707a:	d060      	beq.n	800713e <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	441a      	add	r2, r3
 8007084:	2300      	movs	r3, #0
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	2300      	movs	r3, #0
 800708a:	2100      	movs	r1, #0
 800708c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800708e:	f7ff fe03 	bl	8006c98 <xTimerGenericCommand>
 8007092:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d151      	bne.n	800713e <prvProcessReceivedCommands+0x1a2>
 800709a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709e:	b672      	cpsid	i
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	b662      	cpsie	i
 80070ae:	61bb      	str	r3, [r7, #24]
 80070b0:	e7fe      	b.n	80070b0 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070b8:	f023 0301 	bic.w	r3, r3, #1
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80070c4:	e03b      	b.n	800713e <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070cc:	f043 0301 	orr.w	r3, r3, #1
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80070de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10b      	bne.n	80070fe <prvProcessReceivedCommands+0x162>
 80070e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ea:	b672      	cpsid	i
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	b662      	cpsie	i
 80070fa:	617b      	str	r3, [r7, #20]
 80070fc:	e7fe      	b.n	80070fc <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80070fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007100:	699a      	ldr	r2, [r3, #24]
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	18d1      	adds	r1, r2, r3
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800710a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800710c:	f7ff ff04 	bl	8006f18 <prvInsertTimerInActiveList>
					break;
 8007110:	e015      	b.n	800713e <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007114:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b00      	cmp	r3, #0
 800711e:	d103      	bne.n	8007128 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007122:	f000 fbb3 	bl	800788c <vPortFree>
 8007126:	e00a      	b.n	800713e <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800712e:	f023 0301 	bic.w	r3, r3, #1
 8007132:	b2da      	uxtb	r2, r3
 8007134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007136:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800713a:	e000      	b.n	800713e <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800713c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800713e:	4b07      	ldr	r3, [pc, #28]	; (800715c <prvProcessReceivedCommands+0x1c0>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	1d39      	adds	r1, r7, #4
 8007144:	2200      	movs	r2, #0
 8007146:	4618      	mov	r0, r3
 8007148:	f7fe fc04 	bl	8005954 <xQueueReceive>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	f47f af28 	bne.w	8006fa4 <prvProcessReceivedCommands+0x8>
	}
}
 8007154:	bf00      	nop
 8007156:	3730      	adds	r7, #48	; 0x30
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	20000c80 	.word	0x20000c80

08007160 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b088      	sub	sp, #32
 8007164:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007166:	e049      	b.n	80071fc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007168:	4b2e      	ldr	r3, [pc, #184]	; (8007224 <prvSwitchTimerLists+0xc4>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007172:	4b2c      	ldr	r3, [pc, #176]	; (8007224 <prvSwitchTimerLists+0xc4>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	3304      	adds	r3, #4
 8007180:	4618      	mov	r0, r3
 8007182:	f7fe f8d3 	bl	800532c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	2b00      	cmp	r3, #0
 800719a:	d02f      	beq.n	80071fc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	4413      	add	r3, r2
 80071a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d90e      	bls.n	80071cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071ba:	4b1a      	ldr	r3, [pc, #104]	; (8007224 <prvSwitchTimerLists+0xc4>)
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	3304      	adds	r3, #4
 80071c2:	4619      	mov	r1, r3
 80071c4:	4610      	mov	r0, r2
 80071c6:	f7fe f878 	bl	80052ba <vListInsert>
 80071ca:	e017      	b.n	80071fc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071cc:	2300      	movs	r3, #0
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	2300      	movs	r3, #0
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	2100      	movs	r1, #0
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f7ff fd5e 	bl	8006c98 <xTimerGenericCommand>
 80071dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10b      	bne.n	80071fc <prvSwitchTimerLists+0x9c>
 80071e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e8:	b672      	cpsid	i
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	b662      	cpsie	i
 80071f8:	603b      	str	r3, [r7, #0]
 80071fa:	e7fe      	b.n	80071fa <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071fc:	4b09      	ldr	r3, [pc, #36]	; (8007224 <prvSwitchTimerLists+0xc4>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1b0      	bne.n	8007168 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007206:	4b07      	ldr	r3, [pc, #28]	; (8007224 <prvSwitchTimerLists+0xc4>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800720c:	4b06      	ldr	r3, [pc, #24]	; (8007228 <prvSwitchTimerLists+0xc8>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a04      	ldr	r2, [pc, #16]	; (8007224 <prvSwitchTimerLists+0xc4>)
 8007212:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007214:	4a04      	ldr	r2, [pc, #16]	; (8007228 <prvSwitchTimerLists+0xc8>)
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	6013      	str	r3, [r2, #0]
}
 800721a:	bf00      	nop
 800721c:	3718      	adds	r7, #24
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	20000c78 	.word	0x20000c78
 8007228:	20000c7c 	.word	0x20000c7c

0800722c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007232:	f000 f941 	bl	80074b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007236:	4b15      	ldr	r3, [pc, #84]	; (800728c <prvCheckForValidListAndQueue+0x60>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d120      	bne.n	8007280 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800723e:	4814      	ldr	r0, [pc, #80]	; (8007290 <prvCheckForValidListAndQueue+0x64>)
 8007240:	f7fd ffea 	bl	8005218 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007244:	4813      	ldr	r0, [pc, #76]	; (8007294 <prvCheckForValidListAndQueue+0x68>)
 8007246:	f7fd ffe7 	bl	8005218 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800724a:	4b13      	ldr	r3, [pc, #76]	; (8007298 <prvCheckForValidListAndQueue+0x6c>)
 800724c:	4a10      	ldr	r2, [pc, #64]	; (8007290 <prvCheckForValidListAndQueue+0x64>)
 800724e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007250:	4b12      	ldr	r3, [pc, #72]	; (800729c <prvCheckForValidListAndQueue+0x70>)
 8007252:	4a10      	ldr	r2, [pc, #64]	; (8007294 <prvCheckForValidListAndQueue+0x68>)
 8007254:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007256:	2300      	movs	r3, #0
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	4b11      	ldr	r3, [pc, #68]	; (80072a0 <prvCheckForValidListAndQueue+0x74>)
 800725c:	4a11      	ldr	r2, [pc, #68]	; (80072a4 <prvCheckForValidListAndQueue+0x78>)
 800725e:	2110      	movs	r1, #16
 8007260:	200a      	movs	r0, #10
 8007262:	f7fe f8f7 	bl	8005454 <xQueueGenericCreateStatic>
 8007266:	4602      	mov	r2, r0
 8007268:	4b08      	ldr	r3, [pc, #32]	; (800728c <prvCheckForValidListAndQueue+0x60>)
 800726a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800726c:	4b07      	ldr	r3, [pc, #28]	; (800728c <prvCheckForValidListAndQueue+0x60>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d005      	beq.n	8007280 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007274:	4b05      	ldr	r3, [pc, #20]	; (800728c <prvCheckForValidListAndQueue+0x60>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	490b      	ldr	r1, [pc, #44]	; (80072a8 <prvCheckForValidListAndQueue+0x7c>)
 800727a:	4618      	mov	r0, r3
 800727c:	f7fe fd5c 	bl	8005d38 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007280:	f000 f94c 	bl	800751c <vPortExitCritical>
}
 8007284:	bf00      	nop
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20000c80 	.word	0x20000c80
 8007290:	20000c50 	.word	0x20000c50
 8007294:	20000c64 	.word	0x20000c64
 8007298:	20000c78 	.word	0x20000c78
 800729c:	20000c7c 	.word	0x20000c7c
 80072a0:	20000d2c 	.word	0x20000d2c
 80072a4:	20000c8c 	.word	0x20000c8c
 80072a8:	08009884 	.word	0x08009884

080072ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3b04      	subs	r3, #4
 80072bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80072c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	3b04      	subs	r3, #4
 80072ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f023 0201 	bic.w	r2, r3, #1
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	3b04      	subs	r3, #4
 80072da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072dc:	4a0c      	ldr	r2, [pc, #48]	; (8007310 <pxPortInitialiseStack+0x64>)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3b14      	subs	r3, #20
 80072e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	3b04      	subs	r3, #4
 80072f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f06f 0202 	mvn.w	r2, #2
 80072fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	3b20      	subs	r3, #32
 8007300:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007302:	68fb      	ldr	r3, [r7, #12]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	08007315 	.word	0x08007315

08007314 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800731a:	2300      	movs	r3, #0
 800731c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800731e:	4b13      	ldr	r3, [pc, #76]	; (800736c <prvTaskExitError+0x58>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007326:	d00b      	beq.n	8007340 <prvTaskExitError+0x2c>
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	b672      	cpsid	i
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	b662      	cpsie	i
 800733c:	60fb      	str	r3, [r7, #12]
 800733e:	e7fe      	b.n	800733e <prvTaskExitError+0x2a>
 8007340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007344:	b672      	cpsid	i
 8007346:	f383 8811 	msr	BASEPRI, r3
 800734a:	f3bf 8f6f 	isb	sy
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	b662      	cpsie	i
 8007354:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007356:	bf00      	nop
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d0fc      	beq.n	8007358 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800735e:	bf00      	nop
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	2000000c 	.word	0x2000000c

08007370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007370:	4b07      	ldr	r3, [pc, #28]	; (8007390 <pxCurrentTCBConst2>)
 8007372:	6819      	ldr	r1, [r3, #0]
 8007374:	6808      	ldr	r0, [r1, #0]
 8007376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737a:	f380 8809 	msr	PSP, r0
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f04f 0000 	mov.w	r0, #0
 8007386:	f380 8811 	msr	BASEPRI, r0
 800738a:	4770      	bx	lr
 800738c:	f3af 8000 	nop.w

08007390 <pxCurrentTCBConst2>:
 8007390:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007394:	bf00      	nop
 8007396:	bf00      	nop

08007398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007398:	4808      	ldr	r0, [pc, #32]	; (80073bc <prvPortStartFirstTask+0x24>)
 800739a:	6800      	ldr	r0, [r0, #0]
 800739c:	6800      	ldr	r0, [r0, #0]
 800739e:	f380 8808 	msr	MSP, r0
 80073a2:	f04f 0000 	mov.w	r0, #0
 80073a6:	f380 8814 	msr	CONTROL, r0
 80073aa:	b662      	cpsie	i
 80073ac:	b661      	cpsie	f
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	df00      	svc	0
 80073b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073ba:	bf00      	nop
 80073bc:	e000ed08 	.word	0xe000ed08

080073c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073c6:	4b36      	ldr	r3, [pc, #216]	; (80074a0 <xPortStartScheduler+0xe0>)
 80073c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	22ff      	movs	r2, #255	; 0xff
 80073d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80073e0:	78fb      	ldrb	r3, [r7, #3]
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	4b2e      	ldr	r3, [pc, #184]	; (80074a4 <xPortStartScheduler+0xe4>)
 80073ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073ee:	4b2e      	ldr	r3, [pc, #184]	; (80074a8 <xPortStartScheduler+0xe8>)
 80073f0:	2207      	movs	r2, #7
 80073f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073f4:	e009      	b.n	800740a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80073f6:	4b2c      	ldr	r3, [pc, #176]	; (80074a8 <xPortStartScheduler+0xe8>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	4a2a      	ldr	r2, [pc, #168]	; (80074a8 <xPortStartScheduler+0xe8>)
 80073fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007400:	78fb      	ldrb	r3, [r7, #3]
 8007402:	b2db      	uxtb	r3, r3
 8007404:	005b      	lsls	r3, r3, #1
 8007406:	b2db      	uxtb	r3, r3
 8007408:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	b2db      	uxtb	r3, r3
 800740e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007412:	2b80      	cmp	r3, #128	; 0x80
 8007414:	d0ef      	beq.n	80073f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007416:	4b24      	ldr	r3, [pc, #144]	; (80074a8 <xPortStartScheduler+0xe8>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f1c3 0307 	rsb	r3, r3, #7
 800741e:	2b04      	cmp	r3, #4
 8007420:	d00b      	beq.n	800743a <xPortStartScheduler+0x7a>
 8007422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007426:	b672      	cpsid	i
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	b662      	cpsie	i
 8007436:	60bb      	str	r3, [r7, #8]
 8007438:	e7fe      	b.n	8007438 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800743a:	4b1b      	ldr	r3, [pc, #108]	; (80074a8 <xPortStartScheduler+0xe8>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	021b      	lsls	r3, r3, #8
 8007440:	4a19      	ldr	r2, [pc, #100]	; (80074a8 <xPortStartScheduler+0xe8>)
 8007442:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007444:	4b18      	ldr	r3, [pc, #96]	; (80074a8 <xPortStartScheduler+0xe8>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800744c:	4a16      	ldr	r2, [pc, #88]	; (80074a8 <xPortStartScheduler+0xe8>)
 800744e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	b2da      	uxtb	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007458:	4b14      	ldr	r3, [pc, #80]	; (80074ac <xPortStartScheduler+0xec>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a13      	ldr	r2, [pc, #76]	; (80074ac <xPortStartScheduler+0xec>)
 800745e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007462:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007464:	4b11      	ldr	r3, [pc, #68]	; (80074ac <xPortStartScheduler+0xec>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a10      	ldr	r2, [pc, #64]	; (80074ac <xPortStartScheduler+0xec>)
 800746a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800746e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007470:	f000 f8d4 	bl	800761c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007474:	4b0e      	ldr	r3, [pc, #56]	; (80074b0 <xPortStartScheduler+0xf0>)
 8007476:	2200      	movs	r2, #0
 8007478:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800747a:	f000 f8f3 	bl	8007664 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800747e:	4b0d      	ldr	r3, [pc, #52]	; (80074b4 <xPortStartScheduler+0xf4>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a0c      	ldr	r2, [pc, #48]	; (80074b4 <xPortStartScheduler+0xf4>)
 8007484:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007488:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800748a:	f7ff ff85 	bl	8007398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800748e:	f7ff f869 	bl	8006564 <vTaskSwitchContext>
	prvTaskExitError();
 8007492:	f7ff ff3f 	bl	8007314 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	e000e400 	.word	0xe000e400
 80074a4:	20000d7c 	.word	0x20000d7c
 80074a8:	20000d80 	.word	0x20000d80
 80074ac:	e000ed20 	.word	0xe000ed20
 80074b0:	2000000c 	.word	0x2000000c
 80074b4:	e000ef34 	.word	0xe000ef34

080074b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c2:	b672      	cpsid	i
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	b662      	cpsie	i
 80074d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80074d4:	4b0f      	ldr	r3, [pc, #60]	; (8007514 <vPortEnterCritical+0x5c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3301      	adds	r3, #1
 80074da:	4a0e      	ldr	r2, [pc, #56]	; (8007514 <vPortEnterCritical+0x5c>)
 80074dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074de:	4b0d      	ldr	r3, [pc, #52]	; (8007514 <vPortEnterCritical+0x5c>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d110      	bne.n	8007508 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074e6:	4b0c      	ldr	r3, [pc, #48]	; (8007518 <vPortEnterCritical+0x60>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00b      	beq.n	8007508 <vPortEnterCritical+0x50>
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	b672      	cpsid	i
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	b662      	cpsie	i
 8007504:	603b      	str	r3, [r7, #0]
 8007506:	e7fe      	b.n	8007506 <vPortEnterCritical+0x4e>
	}
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr
 8007514:	2000000c 	.word	0x2000000c
 8007518:	e000ed04 	.word	0xe000ed04

0800751c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007522:	4b12      	ldr	r3, [pc, #72]	; (800756c <vPortExitCritical+0x50>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10b      	bne.n	8007542 <vPortExitCritical+0x26>
 800752a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752e:	b672      	cpsid	i
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	b662      	cpsie	i
 800753e:	607b      	str	r3, [r7, #4]
 8007540:	e7fe      	b.n	8007540 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8007542:	4b0a      	ldr	r3, [pc, #40]	; (800756c <vPortExitCritical+0x50>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3b01      	subs	r3, #1
 8007548:	4a08      	ldr	r2, [pc, #32]	; (800756c <vPortExitCritical+0x50>)
 800754a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800754c:	4b07      	ldr	r3, [pc, #28]	; (800756c <vPortExitCritical+0x50>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d104      	bne.n	800755e <vPortExitCritical+0x42>
 8007554:	2300      	movs	r3, #0
 8007556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800755e:	bf00      	nop
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	2000000c 	.word	0x2000000c

08007570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007570:	f3ef 8009 	mrs	r0, PSP
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	4b15      	ldr	r3, [pc, #84]	; (80075d0 <pxCurrentTCBConst>)
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	f01e 0f10 	tst.w	lr, #16
 8007580:	bf08      	it	eq
 8007582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800758a:	6010      	str	r0, [r2, #0]
 800758c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007590:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007594:	b672      	cpsid	i
 8007596:	f380 8811 	msr	BASEPRI, r0
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	b662      	cpsie	i
 80075a4:	f7fe ffde 	bl	8006564 <vTaskSwitchContext>
 80075a8:	f04f 0000 	mov.w	r0, #0
 80075ac:	f380 8811 	msr	BASEPRI, r0
 80075b0:	bc09      	pop	{r0, r3}
 80075b2:	6819      	ldr	r1, [r3, #0]
 80075b4:	6808      	ldr	r0, [r1, #0]
 80075b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ba:	f01e 0f10 	tst.w	lr, #16
 80075be:	bf08      	it	eq
 80075c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80075c4:	f380 8809 	msr	PSP, r0
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop

080075d0 <pxCurrentTCBConst>:
 80075d0:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop

080075d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
	__asm volatile
 80075de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e2:	b672      	cpsid	i
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	b662      	cpsie	i
 80075f2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80075f4:	f7fe fefc 	bl	80063f0 <xTaskIncrementTick>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d003      	beq.n	8007606 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80075fe:	4b06      	ldr	r3, [pc, #24]	; (8007618 <SysTick_Handler+0x40>)
 8007600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	2300      	movs	r3, #0
 8007608:	603b      	str	r3, [r7, #0]
	__asm volatile
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007610:	bf00      	nop
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	e000ed04 	.word	0xe000ed04

0800761c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800761c:	b480      	push	{r7}
 800761e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007620:	4b0b      	ldr	r3, [pc, #44]	; (8007650 <vPortSetupTimerInterrupt+0x34>)
 8007622:	2200      	movs	r2, #0
 8007624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007626:	4b0b      	ldr	r3, [pc, #44]	; (8007654 <vPortSetupTimerInterrupt+0x38>)
 8007628:	2200      	movs	r2, #0
 800762a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800762c:	4b0a      	ldr	r3, [pc, #40]	; (8007658 <vPortSetupTimerInterrupt+0x3c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a0a      	ldr	r2, [pc, #40]	; (800765c <vPortSetupTimerInterrupt+0x40>)
 8007632:	fba2 2303 	umull	r2, r3, r2, r3
 8007636:	099b      	lsrs	r3, r3, #6
 8007638:	4a09      	ldr	r2, [pc, #36]	; (8007660 <vPortSetupTimerInterrupt+0x44>)
 800763a:	3b01      	subs	r3, #1
 800763c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800763e:	4b04      	ldr	r3, [pc, #16]	; (8007650 <vPortSetupTimerInterrupt+0x34>)
 8007640:	2207      	movs	r2, #7
 8007642:	601a      	str	r2, [r3, #0]
}
 8007644:	bf00      	nop
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	e000e010 	.word	0xe000e010
 8007654:	e000e018 	.word	0xe000e018
 8007658:	20000000 	.word	0x20000000
 800765c:	10624dd3 	.word	0x10624dd3
 8007660:	e000e014 	.word	0xe000e014

08007664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007674 <vPortEnableVFP+0x10>
 8007668:	6801      	ldr	r1, [r0, #0]
 800766a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800766e:	6001      	str	r1, [r0, #0]
 8007670:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007672:	bf00      	nop
 8007674:	e000ed88 	.word	0xe000ed88

08007678 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800767e:	f3ef 8305 	mrs	r3, IPSR
 8007682:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b0f      	cmp	r3, #15
 8007688:	d915      	bls.n	80076b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800768a:	4a18      	ldr	r2, [pc, #96]	; (80076ec <vPortValidateInterruptPriority+0x74>)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4413      	add	r3, r2
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007694:	4b16      	ldr	r3, [pc, #88]	; (80076f0 <vPortValidateInterruptPriority+0x78>)
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	7afa      	ldrb	r2, [r7, #11]
 800769a:	429a      	cmp	r2, r3
 800769c:	d20b      	bcs.n	80076b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a2:	b672      	cpsid	i
 80076a4:	f383 8811 	msr	BASEPRI, r3
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	b662      	cpsie	i
 80076b2:	607b      	str	r3, [r7, #4]
 80076b4:	e7fe      	b.n	80076b4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076b6:	4b0f      	ldr	r3, [pc, #60]	; (80076f4 <vPortValidateInterruptPriority+0x7c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80076be:	4b0e      	ldr	r3, [pc, #56]	; (80076f8 <vPortValidateInterruptPriority+0x80>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d90b      	bls.n	80076de <vPortValidateInterruptPriority+0x66>
 80076c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ca:	b672      	cpsid	i
 80076cc:	f383 8811 	msr	BASEPRI, r3
 80076d0:	f3bf 8f6f 	isb	sy
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	b662      	cpsie	i
 80076da:	603b      	str	r3, [r7, #0]
 80076dc:	e7fe      	b.n	80076dc <vPortValidateInterruptPriority+0x64>
	}
 80076de:	bf00      	nop
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	e000e3f0 	.word	0xe000e3f0
 80076f0:	20000d7c 	.word	0x20000d7c
 80076f4:	e000ed0c 	.word	0xe000ed0c
 80076f8:	20000d80 	.word	0x20000d80

080076fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08a      	sub	sp, #40	; 0x28
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007704:	2300      	movs	r3, #0
 8007706:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007708:	f7fe fdb6 	bl	8006278 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800770c:	4b5a      	ldr	r3, [pc, #360]	; (8007878 <pvPortMalloc+0x17c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007714:	f000 f916 	bl	8007944 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007718:	4b58      	ldr	r3, [pc, #352]	; (800787c <pvPortMalloc+0x180>)
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4013      	ands	r3, r2
 8007720:	2b00      	cmp	r3, #0
 8007722:	f040 8090 	bne.w	8007846 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d01e      	beq.n	800776a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800772c:	2208      	movs	r2, #8
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4413      	add	r3, r2
 8007732:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f003 0307 	and.w	r3, r3, #7
 800773a:	2b00      	cmp	r3, #0
 800773c:	d015      	beq.n	800776a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f023 0307 	bic.w	r3, r3, #7
 8007744:	3308      	adds	r3, #8
 8007746:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f003 0307 	and.w	r3, r3, #7
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00b      	beq.n	800776a <pvPortMalloc+0x6e>
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	b672      	cpsid	i
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	b662      	cpsie	i
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	e7fe      	b.n	8007768 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d06a      	beq.n	8007846 <pvPortMalloc+0x14a>
 8007770:	4b43      	ldr	r3, [pc, #268]	; (8007880 <pvPortMalloc+0x184>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	429a      	cmp	r2, r3
 8007778:	d865      	bhi.n	8007846 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800777a:	4b42      	ldr	r3, [pc, #264]	; (8007884 <pvPortMalloc+0x188>)
 800777c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800777e:	4b41      	ldr	r3, [pc, #260]	; (8007884 <pvPortMalloc+0x188>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007784:	e004      	b.n	8007790 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007788:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	429a      	cmp	r2, r3
 8007798:	d903      	bls.n	80077a2 <pvPortMalloc+0xa6>
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1f1      	bne.n	8007786 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80077a2:	4b35      	ldr	r3, [pc, #212]	; (8007878 <pvPortMalloc+0x17c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d04c      	beq.n	8007846 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077ac:	6a3b      	ldr	r3, [r7, #32]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2208      	movs	r2, #8
 80077b2:	4413      	add	r3, r2
 80077b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	6a3b      	ldr	r3, [r7, #32]
 80077bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	1ad2      	subs	r2, r2, r3
 80077c6:	2308      	movs	r3, #8
 80077c8:	005b      	lsls	r3, r3, #1
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d920      	bls.n	8007810 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80077ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4413      	add	r3, r2
 80077d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	f003 0307 	and.w	r3, r3, #7
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00b      	beq.n	80077f8 <pvPortMalloc+0xfc>
 80077e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e4:	b672      	cpsid	i
 80077e6:	f383 8811 	msr	BASEPRI, r3
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	b662      	cpsie	i
 80077f4:	613b      	str	r3, [r7, #16]
 80077f6:	e7fe      	b.n	80077f6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	1ad2      	subs	r2, r2, r3
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800780a:	69b8      	ldr	r0, [r7, #24]
 800780c:	f000 f8fc 	bl	8007a08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007810:	4b1b      	ldr	r3, [pc, #108]	; (8007880 <pvPortMalloc+0x184>)
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	4a19      	ldr	r2, [pc, #100]	; (8007880 <pvPortMalloc+0x184>)
 800781c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800781e:	4b18      	ldr	r3, [pc, #96]	; (8007880 <pvPortMalloc+0x184>)
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	4b19      	ldr	r3, [pc, #100]	; (8007888 <pvPortMalloc+0x18c>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	429a      	cmp	r2, r3
 8007828:	d203      	bcs.n	8007832 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800782a:	4b15      	ldr	r3, [pc, #84]	; (8007880 <pvPortMalloc+0x184>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a16      	ldr	r2, [pc, #88]	; (8007888 <pvPortMalloc+0x18c>)
 8007830:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	4b11      	ldr	r3, [pc, #68]	; (800787c <pvPortMalloc+0x180>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	431a      	orrs	r2, r3
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	2200      	movs	r2, #0
 8007844:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007846:	f7fe fd25 	bl	8006294 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	f003 0307 	and.w	r3, r3, #7
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00b      	beq.n	800786c <pvPortMalloc+0x170>
 8007854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007858:	b672      	cpsid	i
 800785a:	f383 8811 	msr	BASEPRI, r3
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	b662      	cpsie	i
 8007868:	60fb      	str	r3, [r7, #12]
 800786a:	e7fe      	b.n	800786a <pvPortMalloc+0x16e>
	return pvReturn;
 800786c:	69fb      	ldr	r3, [r7, #28]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3728      	adds	r7, #40	; 0x28
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	2000498c 	.word	0x2000498c
 800787c:	20004998 	.word	0x20004998
 8007880:	20004990 	.word	0x20004990
 8007884:	20004984 	.word	0x20004984
 8007888:	20004994 	.word	0x20004994

0800788c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d04a      	beq.n	8007934 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800789e:	2308      	movs	r3, #8
 80078a0:	425b      	negs	r3, r3
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	4413      	add	r3, r2
 80078a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	685a      	ldr	r2, [r3, #4]
 80078b0:	4b22      	ldr	r3, [pc, #136]	; (800793c <vPortFree+0xb0>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4013      	ands	r3, r2
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10b      	bne.n	80078d2 <vPortFree+0x46>
 80078ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078be:	b672      	cpsid	i
 80078c0:	f383 8811 	msr	BASEPRI, r3
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	b662      	cpsie	i
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	e7fe      	b.n	80078d0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00b      	beq.n	80078f2 <vPortFree+0x66>
 80078da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078de:	b672      	cpsid	i
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	b662      	cpsie	i
 80078ee:	60bb      	str	r3, [r7, #8]
 80078f0:	e7fe      	b.n	80078f0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	4b11      	ldr	r3, [pc, #68]	; (800793c <vPortFree+0xb0>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4013      	ands	r3, r2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d019      	beq.n	8007934 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d115      	bne.n	8007934 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	4b0b      	ldr	r3, [pc, #44]	; (800793c <vPortFree+0xb0>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	43db      	mvns	r3, r3
 8007912:	401a      	ands	r2, r3
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007918:	f7fe fcae 	bl	8006278 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	4b07      	ldr	r3, [pc, #28]	; (8007940 <vPortFree+0xb4>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4413      	add	r3, r2
 8007926:	4a06      	ldr	r2, [pc, #24]	; (8007940 <vPortFree+0xb4>)
 8007928:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800792a:	6938      	ldr	r0, [r7, #16]
 800792c:	f000 f86c 	bl	8007a08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007930:	f7fe fcb0 	bl	8006294 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007934:	bf00      	nop
 8007936:	3718      	adds	r7, #24
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	20004998 	.word	0x20004998
 8007940:	20004990 	.word	0x20004990

08007944 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800794a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800794e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007950:	4b27      	ldr	r3, [pc, #156]	; (80079f0 <prvHeapInit+0xac>)
 8007952:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f003 0307 	and.w	r3, r3, #7
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00c      	beq.n	8007978 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3307      	adds	r3, #7
 8007962:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f023 0307 	bic.w	r3, r3, #7
 800796a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	4a1f      	ldr	r2, [pc, #124]	; (80079f0 <prvHeapInit+0xac>)
 8007974:	4413      	add	r3, r2
 8007976:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800797c:	4a1d      	ldr	r2, [pc, #116]	; (80079f4 <prvHeapInit+0xb0>)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007982:	4b1c      	ldr	r3, [pc, #112]	; (80079f4 <prvHeapInit+0xb0>)
 8007984:	2200      	movs	r2, #0
 8007986:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	4413      	add	r3, r2
 800798e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007990:	2208      	movs	r2, #8
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	1a9b      	subs	r3, r3, r2
 8007996:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f023 0307 	bic.w	r3, r3, #7
 800799e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4a15      	ldr	r2, [pc, #84]	; (80079f8 <prvHeapInit+0xb4>)
 80079a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80079a6:	4b14      	ldr	r3, [pc, #80]	; (80079f8 <prvHeapInit+0xb4>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2200      	movs	r2, #0
 80079ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079ae:	4b12      	ldr	r3, [pc, #72]	; (80079f8 <prvHeapInit+0xb4>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2200      	movs	r2, #0
 80079b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	1ad2      	subs	r2, r2, r3
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80079c4:	4b0c      	ldr	r3, [pc, #48]	; (80079f8 <prvHeapInit+0xb4>)
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	4a0a      	ldr	r2, [pc, #40]	; (80079fc <prvHeapInit+0xb8>)
 80079d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	4a09      	ldr	r2, [pc, #36]	; (8007a00 <prvHeapInit+0xbc>)
 80079da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80079dc:	4b09      	ldr	r3, [pc, #36]	; (8007a04 <prvHeapInit+0xc0>)
 80079de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80079e2:	601a      	str	r2, [r3, #0]
}
 80079e4:	bf00      	nop
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	20000d84 	.word	0x20000d84
 80079f4:	20004984 	.word	0x20004984
 80079f8:	2000498c 	.word	0x2000498c
 80079fc:	20004994 	.word	0x20004994
 8007a00:	20004990 	.word	0x20004990
 8007a04:	20004998 	.word	0x20004998

08007a08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a10:	4b28      	ldr	r3, [pc, #160]	; (8007ab4 <prvInsertBlockIntoFreeList+0xac>)
 8007a12:	60fb      	str	r3, [r7, #12]
 8007a14:	e002      	b.n	8007a1c <prvInsertBlockIntoFreeList+0x14>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d8f7      	bhi.n	8007a16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	4413      	add	r3, r2
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d108      	bne.n	8007a4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	441a      	add	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	441a      	add	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d118      	bne.n	8007a90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	4b15      	ldr	r3, [pc, #84]	; (8007ab8 <prvInsertBlockIntoFreeList+0xb0>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d00d      	beq.n	8007a86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	441a      	add	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	e008      	b.n	8007a98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a86:	4b0c      	ldr	r3, [pc, #48]	; (8007ab8 <prvInsertBlockIntoFreeList+0xb0>)
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	e003      	b.n	8007a98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d002      	beq.n	8007aa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007aa6:	bf00      	nop
 8007aa8:	3714      	adds	r7, #20
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	20004984 	.word	0x20004984
 8007ab8:	2000498c 	.word	0x2000498c

08007abc <readAnalog2Values>:
}
uint16_t getAnalogValue1(void){return analogValue1;}
#elif ANALOGINPUTVAL==2
uint16_t analogValue1;
uint16_t analogValue2;
void readAnalog2Values(ADC_HandleTypeDef *adc1,ADC_HandleTypeDef *adc2){
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
	  HAL_ADC_Start(adc1);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7f9 fb68 	bl	800119c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(adc1, ADCTIMEOUT);
 8007acc:	2164      	movs	r1, #100	; 0x64
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7f9 fc58 	bl	8001384 <HAL_ADC_PollForConversion>
	  analogValue1 = HAL_ADC_GetValue(adc1);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7f9 fcd9 	bl	800148c <HAL_ADC_GetValue>
 8007ada:	4603      	mov	r3, r0
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	4b0d      	ldr	r3, [pc, #52]	; (8007b14 <readAnalog2Values+0x58>)
 8007ae0:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop (adc1);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7f9 fc1a 	bl	800131c <HAL_ADC_Stop>
	  HAL_ADC_Start(adc2);
 8007ae8:	6838      	ldr	r0, [r7, #0]
 8007aea:	f7f9 fb57 	bl	800119c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(adc2, ADCTIMEOUT);
 8007aee:	2164      	movs	r1, #100	; 0x64
 8007af0:	6838      	ldr	r0, [r7, #0]
 8007af2:	f7f9 fc47 	bl	8001384 <HAL_ADC_PollForConversion>
	  analogValue2 = HAL_ADC_GetValue(adc2);
 8007af6:	6838      	ldr	r0, [r7, #0]
 8007af8:	f7f9 fcc8 	bl	800148c <HAL_ADC_GetValue>
 8007afc:	4603      	mov	r3, r0
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	4b05      	ldr	r3, [pc, #20]	; (8007b18 <readAnalog2Values+0x5c>)
 8007b02:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop (adc2);
 8007b04:	6838      	ldr	r0, [r7, #0]
 8007b06:	f7f9 fc09 	bl	800131c <HAL_ADC_Stop>
}
 8007b0a:	bf00      	nop
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20004c72 	.word	0x20004c72
 8007b18:	20004c70 	.word	0x20004c70

08007b1c <getAnalogValue1>:
uint16_t getAnalogValue1(void){return analogValue1;}
 8007b1c:	b480      	push	{r7}
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	4b03      	ldr	r3, [pc, #12]	; (8007b30 <getAnalogValue1+0x14>)
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	4618      	mov	r0, r3
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	20004c72 	.word	0x20004c72

08007b34 <getAnalogValue2>:
uint16_t getAnalogValue2(void){return analogValue2;}
 8007b34:	b480      	push	{r7}
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	4b03      	ldr	r3, [pc, #12]	; (8007b48 <getAnalogValue2+0x14>)
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	20004c70 	.word	0x20004c70

08007b4c <valuesMap>:
 * @param inMax -> input interval maximum value
 * @param outMin -> output interval minumum value
 * @param outMax -> output interval maximum value
 * @return output value
 */
uint16_t valuesMap(uint16_t inValue, uint16_t inMin, uint16_t inMax, uint16_t outMin, uint16_t outMax) {
 8007b4c:	b490      	push	{r4, r7}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	4604      	mov	r4, r0
 8007b54:	4608      	mov	r0, r1
 8007b56:	4611      	mov	r1, r2
 8007b58:	461a      	mov	r2, r3
 8007b5a:	4623      	mov	r3, r4
 8007b5c:	80fb      	strh	r3, [r7, #6]
 8007b5e:	4603      	mov	r3, r0
 8007b60:	80bb      	strh	r3, [r7, #4]
 8007b62:	460b      	mov	r3, r1
 8007b64:	807b      	strh	r3, [r7, #2]
 8007b66:	4613      	mov	r3, r2
 8007b68:	803b      	strh	r3, [r7, #0]
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
 8007b6a:	88fa      	ldrh	r2, [r7, #6]
 8007b6c:	88bb      	ldrh	r3, [r7, #4]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	8a39      	ldrh	r1, [r7, #16]
 8007b72:	883a      	ldrh	r2, [r7, #0]
 8007b74:	1a8a      	subs	r2, r1, r2
 8007b76:	fb02 f203 	mul.w	r2, r2, r3
 8007b7a:	8879      	ldrh	r1, [r7, #2]
 8007b7c:	88bb      	ldrh	r3, [r7, #4]
 8007b7e:	1acb      	subs	r3, r1, r3
 8007b80:	fb92 f3f3 	sdiv	r3, r2, r3
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	883b      	ldrh	r3, [r7, #0]
 8007b88:	4413      	add	r3, r2
 8007b8a:	b29b      	uxth	r3, r3
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bc90      	pop	{r4, r7}
 8007b94:	4770      	bx	lr
	...

08007b98 <buttonCounterIncrease>:
uint8_t selectedLcd=0,selectedLcdItem=0;
/* @brief count pressed button use in tim interrupt
 * @param none
 * @return none
 * */
void buttonCounterIncrease(void){
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	af00      	add	r7, sp, #0
	if(!READ_SELECT_BTN)selectbtncounter++;
 8007b9c:	2102      	movs	r1, #2
 8007b9e:	4816      	ldr	r0, [pc, #88]	; (8007bf8 <buttonCounterIncrease+0x60>)
 8007ba0:	f7fa f974 	bl	8001e8c <HAL_GPIO_ReadPin>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d106      	bne.n	8007bb8 <buttonCounterIncrease+0x20>
 8007baa:	4b14      	ldr	r3, [pc, #80]	; (8007bfc <buttonCounterIncrease+0x64>)
 8007bac:	881b      	ldrh	r3, [r3, #0]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	4b12      	ldr	r3, [pc, #72]	; (8007bfc <buttonCounterIncrease+0x64>)
 8007bb4:	801a      	strh	r2, [r3, #0]
	else if(!READ_PLUS_BTN)plusbtncounter++;
	else if(!READ_MINUS_BTN)minusbtncounter++;
}
 8007bb6:	e01c      	b.n	8007bf2 <buttonCounterIncrease+0x5a>
	else if(!READ_PLUS_BTN)plusbtncounter++;
 8007bb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007bbc:	4810      	ldr	r0, [pc, #64]	; (8007c00 <buttonCounterIncrease+0x68>)
 8007bbe:	f7fa f965 	bl	8001e8c <HAL_GPIO_ReadPin>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d106      	bne.n	8007bd6 <buttonCounterIncrease+0x3e>
 8007bc8:	4b0e      	ldr	r3, [pc, #56]	; (8007c04 <buttonCounterIncrease+0x6c>)
 8007bca:	881b      	ldrh	r3, [r3, #0]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	4b0c      	ldr	r3, [pc, #48]	; (8007c04 <buttonCounterIncrease+0x6c>)
 8007bd2:	801a      	strh	r2, [r3, #0]
}
 8007bd4:	e00d      	b.n	8007bf2 <buttonCounterIncrease+0x5a>
	else if(!READ_MINUS_BTN)minusbtncounter++;
 8007bd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007bda:	4809      	ldr	r0, [pc, #36]	; (8007c00 <buttonCounterIncrease+0x68>)
 8007bdc:	f7fa f956 	bl	8001e8c <HAL_GPIO_ReadPin>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d105      	bne.n	8007bf2 <buttonCounterIncrease+0x5a>
 8007be6:	4b08      	ldr	r3, [pc, #32]	; (8007c08 <buttonCounterIncrease+0x70>)
 8007be8:	881b      	ldrh	r3, [r3, #0]
 8007bea:	3301      	adds	r3, #1
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <buttonCounterIncrease+0x70>)
 8007bf0:	801a      	strh	r2, [r3, #0]
}
 8007bf2:	bf00      	nop
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	40022000 	.word	0x40022000
 8007bfc:	2000499c 	.word	0x2000499c
 8007c00:	40020400 	.word	0x40020400
 8007c04:	2000499e 	.word	0x2000499e
 8007c08:	200049a0 	.word	0x200049a0

08007c0c <selectButton_Listenner_For_MenuControl>:
 * @param none
 * @return 0 -> didnt press
 * @return 1 -> short pressed
 * @return 2 -> long pressed
 * */
uint8_t selectButton_Listenner_For_MenuControl(void) {
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	af00      	add	r7, sp, #0
	if(READ_SELECT_BTN){
 8007c10:	2102      	movs	r1, #2
 8007c12:	480f      	ldr	r0, [pc, #60]	; (8007c50 <selectButton_Listenner_For_MenuControl+0x44>)
 8007c14:	f7fa f93a 	bl	8001e8c <HAL_GPIO_ReadPin>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d015      	beq.n	8007c4a <selectButton_Listenner_For_MenuControl+0x3e>
		if(selectbtncounter>=BTN_LONG_PRESS_TIME){ selectbtncounter=0;return 2;}
 8007c1e:	4b0d      	ldr	r3, [pc, #52]	; (8007c54 <selectButton_Listenner_For_MenuControl+0x48>)
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007c26:	d304      	bcc.n	8007c32 <selectButton_Listenner_For_MenuControl+0x26>
 8007c28:	4b0a      	ldr	r3, [pc, #40]	; (8007c54 <selectButton_Listenner_For_MenuControl+0x48>)
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	801a      	strh	r2, [r3, #0]
 8007c2e:	2302      	movs	r3, #2
 8007c30:	e00c      	b.n	8007c4c <selectButton_Listenner_For_MenuControl+0x40>
		if(selectbtncounter>=BTN_SHORT_PRESS_TIME){ selectbtncounter=0;return 1;}
 8007c32:	4b08      	ldr	r3, [pc, #32]	; (8007c54 <selectButton_Listenner_For_MenuControl+0x48>)
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	2b09      	cmp	r3, #9
 8007c38:	d904      	bls.n	8007c44 <selectButton_Listenner_For_MenuControl+0x38>
 8007c3a:	4b06      	ldr	r3, [pc, #24]	; (8007c54 <selectButton_Listenner_For_MenuControl+0x48>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	801a      	strh	r2, [r3, #0]
 8007c40:	2301      	movs	r3, #1
 8007c42:	e003      	b.n	8007c4c <selectButton_Listenner_For_MenuControl+0x40>
		selectbtncounter=0;
 8007c44:	4b03      	ldr	r3, [pc, #12]	; (8007c54 <selectButton_Listenner_For_MenuControl+0x48>)
 8007c46:	2200      	movs	r2, #0
 8007c48:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	40022000 	.word	0x40022000
 8007c54:	2000499c 	.word	0x2000499c

08007c58 <plusButton_Listenner_For_MenuControl>:
 * @param none
 * @return 0 -> didnt press
 * @return 1 -> short pressed
 * @return 2 -> long pressed
 * */
uint8_t plusButton_Listenner_For_MenuControl(void) {
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	af00      	add	r7, sp, #0

	if(READ_PLUS_BTN){
 8007c5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007c60:	480f      	ldr	r0, [pc, #60]	; (8007ca0 <plusButton_Listenner_For_MenuControl+0x48>)
 8007c62:	f7fa f913 	bl	8001e8c <HAL_GPIO_ReadPin>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d015      	beq.n	8007c98 <plusButton_Listenner_For_MenuControl+0x40>
		if(plusbtncounter>=BTN_LONG_PRESS_TIME){ plusbtncounter=0;return 2;}
 8007c6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ca4 <plusButton_Listenner_For_MenuControl+0x4c>)
 8007c6e:	881b      	ldrh	r3, [r3, #0]
 8007c70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007c74:	d304      	bcc.n	8007c80 <plusButton_Listenner_For_MenuControl+0x28>
 8007c76:	4b0b      	ldr	r3, [pc, #44]	; (8007ca4 <plusButton_Listenner_For_MenuControl+0x4c>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	801a      	strh	r2, [r3, #0]
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	e00c      	b.n	8007c9a <plusButton_Listenner_For_MenuControl+0x42>
		if(plusbtncounter>=BTN_SHORT_PRESS_TIME){ plusbtncounter=0;return 1;}
 8007c80:	4b08      	ldr	r3, [pc, #32]	; (8007ca4 <plusButton_Listenner_For_MenuControl+0x4c>)
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	2b09      	cmp	r3, #9
 8007c86:	d904      	bls.n	8007c92 <plusButton_Listenner_For_MenuControl+0x3a>
 8007c88:	4b06      	ldr	r3, [pc, #24]	; (8007ca4 <plusButton_Listenner_For_MenuControl+0x4c>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	801a      	strh	r2, [r3, #0]
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e003      	b.n	8007c9a <plusButton_Listenner_For_MenuControl+0x42>
		plusbtncounter=0;
 8007c92:	4b04      	ldr	r3, [pc, #16]	; (8007ca4 <plusButton_Listenner_For_MenuControl+0x4c>)
 8007c94:	2200      	movs	r2, #0
 8007c96:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	40020400 	.word	0x40020400
 8007ca4:	2000499e 	.word	0x2000499e

08007ca8 <minusButton_Listenner_For_MenuControl>:
 * @param none
 * @return 0 -> didnt press
 * @return 1 -> short pressed
 * @return 2 -> long pressed
 * */
uint8_t minusButton_Listenner_For_MenuControl(void) {
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	af00      	add	r7, sp, #0
	if(READ_MINUS_BTN){
 8007cac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007cb0:	480f      	ldr	r0, [pc, #60]	; (8007cf0 <minusButton_Listenner_For_MenuControl+0x48>)
 8007cb2:	f7fa f8eb 	bl	8001e8c <HAL_GPIO_ReadPin>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d015      	beq.n	8007ce8 <minusButton_Listenner_For_MenuControl+0x40>
		if(minusbtncounter>=BTN_LONG_PRESS_TIME){ minusbtncounter=0;return 2;}
 8007cbc:	4b0d      	ldr	r3, [pc, #52]	; (8007cf4 <minusButton_Listenner_For_MenuControl+0x4c>)
 8007cbe:	881b      	ldrh	r3, [r3, #0]
 8007cc0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007cc4:	d304      	bcc.n	8007cd0 <minusButton_Listenner_For_MenuControl+0x28>
 8007cc6:	4b0b      	ldr	r3, [pc, #44]	; (8007cf4 <minusButton_Listenner_For_MenuControl+0x4c>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	801a      	strh	r2, [r3, #0]
 8007ccc:	2302      	movs	r3, #2
 8007cce:	e00c      	b.n	8007cea <minusButton_Listenner_For_MenuControl+0x42>
		if(minusbtncounter>=BTN_SHORT_PRESS_TIME){ minusbtncounter=0;return 1;}
 8007cd0:	4b08      	ldr	r3, [pc, #32]	; (8007cf4 <minusButton_Listenner_For_MenuControl+0x4c>)
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	2b09      	cmp	r3, #9
 8007cd6:	d904      	bls.n	8007ce2 <minusButton_Listenner_For_MenuControl+0x3a>
 8007cd8:	4b06      	ldr	r3, [pc, #24]	; (8007cf4 <minusButton_Listenner_For_MenuControl+0x4c>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	801a      	strh	r2, [r3, #0]
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e003      	b.n	8007cea <minusButton_Listenner_For_MenuControl+0x42>
		minusbtncounter=0;
 8007ce2:	4b04      	ldr	r3, [pc, #16]	; (8007cf4 <minusButton_Listenner_For_MenuControl+0x4c>)
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	40020400 	.word	0x40020400
 8007cf4:	200049a0 	.word	0x200049a0

08007cf8 <btnParameterInit>:
/* @brief drivers parameter values initalize
 * @param none
 * @return none
 * */
void btnParameterInit(void){
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&BTNCOUNTER);
 8007cfc:	4811      	ldr	r0, [pc, #68]	; (8007d44 <btnParameterInit+0x4c>)
 8007cfe:	f7fb fe87 	bl	8003a10 <HAL_TIM_Base_Start_IT>
	drv1.angle=0;
 8007d02:	4b11      	ldr	r3, [pc, #68]	; (8007d48 <btnParameterInit+0x50>)
 8007d04:	2200      	movs	r2, #0
 8007d06:	809a      	strh	r2, [r3, #4]
	drv1.pid_kd=0;
 8007d08:	4b0f      	ldr	r3, [pc, #60]	; (8007d48 <btnParameterInit+0x50>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	701a      	strb	r2, [r3, #0]
	drv1.pid_ki=0;
 8007d0e:	4b0e      	ldr	r3, [pc, #56]	; (8007d48 <btnParameterInit+0x50>)
 8007d10:	2200      	movs	r2, #0
 8007d12:	705a      	strb	r2, [r3, #1]
	drv1.pid_kp=0;
 8007d14:	4b0c      	ldr	r3, [pc, #48]	; (8007d48 <btnParameterInit+0x50>)
 8007d16:	2200      	movs	r2, #0
 8007d18:	709a      	strb	r2, [r3, #2]
	drv1.factor=0;
 8007d1a:	4b0b      	ldr	r3, [pc, #44]	; (8007d48 <btnParameterInit+0x50>)
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	70da      	strb	r2, [r3, #3]
	drv2.angle=0;
 8007d20:	4b0a      	ldr	r3, [pc, #40]	; (8007d4c <btnParameterInit+0x54>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	809a      	strh	r2, [r3, #4]
	drv2.pid_kd=0;
 8007d26:	4b09      	ldr	r3, [pc, #36]	; (8007d4c <btnParameterInit+0x54>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	701a      	strb	r2, [r3, #0]
	drv2.pid_ki=0;
 8007d2c:	4b07      	ldr	r3, [pc, #28]	; (8007d4c <btnParameterInit+0x54>)
 8007d2e:	2200      	movs	r2, #0
 8007d30:	705a      	strb	r2, [r3, #1]
	drv2.pid_kp=0;
 8007d32:	4b06      	ldr	r3, [pc, #24]	; (8007d4c <btnParameterInit+0x54>)
 8007d34:	2200      	movs	r2, #0
 8007d36:	709a      	strb	r2, [r3, #2]
	drv2.factor=0;
 8007d38:	4b04      	ldr	r3, [pc, #16]	; (8007d4c <btnParameterInit+0x54>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	70da      	strb	r2, [r3, #3]
}
 8007d3e:	bf00      	nop
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20004bac 	.word	0x20004bac
 8007d48:	20004c74 	.word	0x20004c74
 8007d4c:	20004c7c 	.word	0x20004c7c

08007d50 <setDriver1AngleValue>:
/* @brief set the angle to motor driver 1 interface
 * @param angle -> driver angle value
 * @return none
 * */
void setDriver1AngleValue(uint16_t angle){
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	4603      	mov	r3, r0
 8007d58:	80fb      	strh	r3, [r7, #6]
	drv1.angle=angle;
 8007d5a:	4a04      	ldr	r2, [pc, #16]	; (8007d6c <setDriver1AngleValue+0x1c>)
 8007d5c:	88fb      	ldrh	r3, [r7, #6]
 8007d5e:	8093      	strh	r3, [r2, #4]
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr
 8007d6c:	20004c74 	.word	0x20004c74

08007d70 <setDriver2AngleValue>:
/* @brief set the angle to motor driver 2 interface
 * @param angle -> driver angle value
 * @return none
 * */
void setDriver2AngleValue(uint16_t angle){
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	4603      	mov	r3, r0
 8007d78:	80fb      	strh	r3, [r7, #6]
	drv2.angle=angle;
 8007d7a:	4a04      	ldr	r2, [pc, #16]	; (8007d8c <setDriver2AngleValue+0x1c>)
 8007d7c:	88fb      	ldrh	r3, [r7, #6]
 8007d7e:	8093      	strh	r3, [r2, #4]
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	20004c7c 	.word	0x20004c7c

08007d90 <buttonController>:
/* @brief controlling and sending values of drivers
 * @param none
 * @return none
 * */
void buttonController(void){
 8007d90:	b580      	push	{r7, lr}
 8007d92:	af00      	add	r7, sp, #0
	static bool selectedMDI=true; //selected motor driver interface
	static uint8_t selectBtnListenner=0,plusBtnListenner=0,minusBtnListenner=0;
	static item=0;
	if(selectedMDI){
 8007d94:	4b98      	ldr	r3, [pc, #608]	; (8007ff8 <buttonController+0x268>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 80be 	beq.w	8007f1a <buttonController+0x18a>
		if(2==selectBtnListenner){ selectedMDI=false; selectedLcd=1; item=0;}
 8007d9e:	4b97      	ldr	r3, [pc, #604]	; (8007ffc <buttonController+0x26c>)
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d108      	bne.n	8007db8 <buttonController+0x28>
 8007da6:	4b94      	ldr	r3, [pc, #592]	; (8007ff8 <buttonController+0x268>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	701a      	strb	r2, [r3, #0]
 8007dac:	4b94      	ldr	r3, [pc, #592]	; (8008000 <buttonController+0x270>)
 8007dae:	2201      	movs	r2, #1
 8007db0:	701a      	strb	r2, [r3, #0]
 8007db2:	4b94      	ldr	r3, [pc, #592]	; (8008004 <buttonController+0x274>)
 8007db4:	2200      	movs	r2, #0
 8007db6:	601a      	str	r2, [r3, #0]
		if(1==selectBtnListenner){
 8007db8:	4b90      	ldr	r3, [pc, #576]	; (8007ffc <buttonController+0x26c>)
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d110      	bne.n	8007de2 <buttonController+0x52>
			if(item<ITEM_MAX)item++;
 8007dc0:	4b90      	ldr	r3, [pc, #576]	; (8008004 <buttonController+0x274>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	dc05      	bgt.n	8007dd4 <buttonController+0x44>
 8007dc8:	4b8e      	ldr	r3, [pc, #568]	; (8008004 <buttonController+0x274>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	4a8d      	ldr	r2, [pc, #564]	; (8008004 <buttonController+0x274>)
 8007dd0:	6013      	str	r3, [r2, #0]
 8007dd2:	e006      	b.n	8007de2 <buttonController+0x52>
			else if(item==ITEM_MAX)item=0;
 8007dd4:	4b8b      	ldr	r3, [pc, #556]	; (8008004 <buttonController+0x274>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d102      	bne.n	8007de2 <buttonController+0x52>
 8007ddc:	4b89      	ldr	r3, [pc, #548]	; (8008004 <buttonController+0x274>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	601a      	str	r2, [r3, #0]
		}
		if(2==plusBtnListenner)selectedLcdItem=0;
 8007de2:	4b89      	ldr	r3, [pc, #548]	; (8008008 <buttonController+0x278>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d102      	bne.n	8007df0 <buttonController+0x60>
 8007dea:	4b88      	ldr	r3, [pc, #544]	; (800800c <buttonController+0x27c>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	701a      	strb	r2, [r3, #0]
		if(1==plusBtnListenner){
 8007df0:	4b85      	ldr	r3, [pc, #532]	; (8008008 <buttonController+0x278>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d142      	bne.n	8007e7e <buttonController+0xee>
			switch(item){
 8007df8:	4b82      	ldr	r3, [pc, #520]	; (8008004 <buttonController+0x274>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b03      	cmp	r3, #3
 8007dfe:	d83e      	bhi.n	8007e7e <buttonController+0xee>
 8007e00:	a201      	add	r2, pc, #4	; (adr r2, 8007e08 <buttonController+0x78>)
 8007e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e06:	bf00      	nop
 8007e08:	08007e19 	.word	0x08007e19
 8007e0c:	08007e2f 	.word	0x08007e2f
 8007e10:	08007e45 	.word	0x08007e45
 8007e14:	08007e5b 	.word	0x08007e5b
			case 0: if(drv1.pid_kd<255) drv1.pid_kd++; break;
 8007e18:	4b7d      	ldr	r3, [pc, #500]	; (8008010 <buttonController+0x280>)
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2bff      	cmp	r3, #255	; 0xff
 8007e1e:	d027      	beq.n	8007e70 <buttonController+0xe0>
 8007e20:	4b7b      	ldr	r3, [pc, #492]	; (8008010 <buttonController+0x280>)
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	3301      	adds	r3, #1
 8007e26:	b2da      	uxtb	r2, r3
 8007e28:	4b79      	ldr	r3, [pc, #484]	; (8008010 <buttonController+0x280>)
 8007e2a:	701a      	strb	r2, [r3, #0]
 8007e2c:	e020      	b.n	8007e70 <buttonController+0xe0>
			case 1: if(drv1.pid_ki<255) drv1.pid_ki++; break;
 8007e2e:	4b78      	ldr	r3, [pc, #480]	; (8008010 <buttonController+0x280>)
 8007e30:	785b      	ldrb	r3, [r3, #1]
 8007e32:	2bff      	cmp	r3, #255	; 0xff
 8007e34:	d01e      	beq.n	8007e74 <buttonController+0xe4>
 8007e36:	4b76      	ldr	r3, [pc, #472]	; (8008010 <buttonController+0x280>)
 8007e38:	785b      	ldrb	r3, [r3, #1]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	4b74      	ldr	r3, [pc, #464]	; (8008010 <buttonController+0x280>)
 8007e40:	705a      	strb	r2, [r3, #1]
 8007e42:	e017      	b.n	8007e74 <buttonController+0xe4>
			case 2: if(drv1.pid_kp<255) drv1.pid_kp++; break;
 8007e44:	4b72      	ldr	r3, [pc, #456]	; (8008010 <buttonController+0x280>)
 8007e46:	789b      	ldrb	r3, [r3, #2]
 8007e48:	2bff      	cmp	r3, #255	; 0xff
 8007e4a:	d015      	beq.n	8007e78 <buttonController+0xe8>
 8007e4c:	4b70      	ldr	r3, [pc, #448]	; (8008010 <buttonController+0x280>)
 8007e4e:	789b      	ldrb	r3, [r3, #2]
 8007e50:	3301      	adds	r3, #1
 8007e52:	b2da      	uxtb	r2, r3
 8007e54:	4b6e      	ldr	r3, [pc, #440]	; (8008010 <buttonController+0x280>)
 8007e56:	709a      	strb	r2, [r3, #2]
 8007e58:	e00e      	b.n	8007e78 <buttonController+0xe8>
			case 3: if(drv1.factor<255) drv1.factor++; break;
 8007e5a:	4b6d      	ldr	r3, [pc, #436]	; (8008010 <buttonController+0x280>)
 8007e5c:	78db      	ldrb	r3, [r3, #3]
 8007e5e:	2bff      	cmp	r3, #255	; 0xff
 8007e60:	d00c      	beq.n	8007e7c <buttonController+0xec>
 8007e62:	4b6b      	ldr	r3, [pc, #428]	; (8008010 <buttonController+0x280>)
 8007e64:	78db      	ldrb	r3, [r3, #3]
 8007e66:	3301      	adds	r3, #1
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	4b69      	ldr	r3, [pc, #420]	; (8008010 <buttonController+0x280>)
 8007e6c:	70da      	strb	r2, [r3, #3]
 8007e6e:	e005      	b.n	8007e7c <buttonController+0xec>
			case 0: if(drv1.pid_kd<255) drv1.pid_kd++; break;
 8007e70:	bf00      	nop
 8007e72:	e004      	b.n	8007e7e <buttonController+0xee>
			case 1: if(drv1.pid_ki<255) drv1.pid_ki++; break;
 8007e74:	bf00      	nop
 8007e76:	e002      	b.n	8007e7e <buttonController+0xee>
			case 2: if(drv1.pid_kp<255) drv1.pid_kp++; break;
 8007e78:	bf00      	nop
 8007e7a:	e000      	b.n	8007e7e <buttonController+0xee>
			case 3: if(drv1.factor<255) drv1.factor++; break;
 8007e7c:	bf00      	nop
			}
		}
		if(2==minusBtnListenner)selectedLcdItem=1;
 8007e7e:	4b65      	ldr	r3, [pc, #404]	; (8008014 <buttonController+0x284>)
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d102      	bne.n	8007e8c <buttonController+0xfc>
 8007e86:	4b61      	ldr	r3, [pc, #388]	; (800800c <buttonController+0x27c>)
 8007e88:	2201      	movs	r2, #1
 8007e8a:	701a      	strb	r2, [r3, #0]
		if(1==minusBtnListenner){
 8007e8c:	4b61      	ldr	r3, [pc, #388]	; (8008014 <buttonController+0x284>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	f040 811a 	bne.w	80080ca <buttonController+0x33a>
			switch(item){
 8007e96:	4b5b      	ldr	r3, [pc, #364]	; (8008004 <buttonController+0x274>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	f200 8115 	bhi.w	80080ca <buttonController+0x33a>
 8007ea0:	a201      	add	r2, pc, #4	; (adr r2, 8007ea8 <buttonController+0x118>)
 8007ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea6:	bf00      	nop
 8007ea8:	08007eb9 	.word	0x08007eb9
 8007eac:	08007ed1 	.word	0x08007ed1
 8007eb0:	08007ee9 	.word	0x08007ee9
 8007eb4:	08007f01 	.word	0x08007f01
			case 0: if(drv1.pid_kd>0) drv1.pid_kd--; break;
 8007eb8:	4b55      	ldr	r3, [pc, #340]	; (8008010 <buttonController+0x280>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 80f5 	beq.w	80080ac <buttonController+0x31c>
 8007ec2:	4b53      	ldr	r3, [pc, #332]	; (8008010 <buttonController+0x280>)
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	4b51      	ldr	r3, [pc, #324]	; (8008010 <buttonController+0x280>)
 8007ecc:	701a      	strb	r2, [r3, #0]
 8007ece:	e0ed      	b.n	80080ac <buttonController+0x31c>
			case 1: if(drv1.pid_ki>0) drv1.pid_ki--; break;
 8007ed0:	4b4f      	ldr	r3, [pc, #316]	; (8008010 <buttonController+0x280>)
 8007ed2:	785b      	ldrb	r3, [r3, #1]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 80eb 	beq.w	80080b0 <buttonController+0x320>
 8007eda:	4b4d      	ldr	r3, [pc, #308]	; (8008010 <buttonController+0x280>)
 8007edc:	785b      	ldrb	r3, [r3, #1]
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	4b4b      	ldr	r3, [pc, #300]	; (8008010 <buttonController+0x280>)
 8007ee4:	705a      	strb	r2, [r3, #1]
 8007ee6:	e0e3      	b.n	80080b0 <buttonController+0x320>
			case 2: if(drv1.pid_kp>0) drv1.pid_kp--; break;
 8007ee8:	4b49      	ldr	r3, [pc, #292]	; (8008010 <buttonController+0x280>)
 8007eea:	789b      	ldrb	r3, [r3, #2]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 80e1 	beq.w	80080b4 <buttonController+0x324>
 8007ef2:	4b47      	ldr	r3, [pc, #284]	; (8008010 <buttonController+0x280>)
 8007ef4:	789b      	ldrb	r3, [r3, #2]
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	4b45      	ldr	r3, [pc, #276]	; (8008010 <buttonController+0x280>)
 8007efc:	709a      	strb	r2, [r3, #2]
 8007efe:	e0d9      	b.n	80080b4 <buttonController+0x324>
			case 3: if(drv1.factor>0) drv1.factor--; break;
 8007f00:	4b43      	ldr	r3, [pc, #268]	; (8008010 <buttonController+0x280>)
 8007f02:	78db      	ldrb	r3, [r3, #3]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 80d7 	beq.w	80080b8 <buttonController+0x328>
 8007f0a:	4b41      	ldr	r3, [pc, #260]	; (8008010 <buttonController+0x280>)
 8007f0c:	78db      	ldrb	r3, [r3, #3]
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	4b3f      	ldr	r3, [pc, #252]	; (8008010 <buttonController+0x280>)
 8007f14:	70da      	strb	r2, [r3, #3]
 8007f16:	bf00      	nop
 8007f18:	e0ce      	b.n	80080b8 <buttonController+0x328>
			}
		}
	}
	else{
		if(2==selectBtnListenner){ selectedMDI=true; selectedLcd=0; item=0;}
 8007f1a:	4b38      	ldr	r3, [pc, #224]	; (8007ffc <buttonController+0x26c>)
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d108      	bne.n	8007f34 <buttonController+0x1a4>
 8007f22:	4b35      	ldr	r3, [pc, #212]	; (8007ff8 <buttonController+0x268>)
 8007f24:	2201      	movs	r2, #1
 8007f26:	701a      	strb	r2, [r3, #0]
 8007f28:	4b35      	ldr	r3, [pc, #212]	; (8008000 <buttonController+0x270>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	701a      	strb	r2, [r3, #0]
 8007f2e:	4b35      	ldr	r3, [pc, #212]	; (8008004 <buttonController+0x274>)
 8007f30:	2200      	movs	r2, #0
 8007f32:	601a      	str	r2, [r3, #0]
		if(1==selectBtnListenner){
 8007f34:	4b31      	ldr	r3, [pc, #196]	; (8007ffc <buttonController+0x26c>)
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d110      	bne.n	8007f5e <buttonController+0x1ce>
			if(item<ITEM_MAX)item++;
 8007f3c:	4b31      	ldr	r3, [pc, #196]	; (8008004 <buttonController+0x274>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	dc05      	bgt.n	8007f50 <buttonController+0x1c0>
 8007f44:	4b2f      	ldr	r3, [pc, #188]	; (8008004 <buttonController+0x274>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	4a2e      	ldr	r2, [pc, #184]	; (8008004 <buttonController+0x274>)
 8007f4c:	6013      	str	r3, [r2, #0]
 8007f4e:	e006      	b.n	8007f5e <buttonController+0x1ce>
			else if(item==ITEM_MAX)item=0;
 8007f50:	4b2c      	ldr	r3, [pc, #176]	; (8008004 <buttonController+0x274>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b03      	cmp	r3, #3
 8007f56:	d102      	bne.n	8007f5e <buttonController+0x1ce>
 8007f58:	4b2a      	ldr	r3, [pc, #168]	; (8008004 <buttonController+0x274>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	601a      	str	r2, [r3, #0]
		}
		if(2==plusBtnListenner)selectedLcdItem=0;
 8007f5e:	4b2a      	ldr	r3, [pc, #168]	; (8008008 <buttonController+0x278>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d102      	bne.n	8007f6c <buttonController+0x1dc>
 8007f66:	4b29      	ldr	r3, [pc, #164]	; (800800c <buttonController+0x27c>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	701a      	strb	r2, [r3, #0]
		if(1==plusBtnListenner){
 8007f6c:	4b26      	ldr	r3, [pc, #152]	; (8008008 <buttonController+0x278>)
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d154      	bne.n	800801e <buttonController+0x28e>
			switch(item){
 8007f74:	4b23      	ldr	r3, [pc, #140]	; (8008004 <buttonController+0x274>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b03      	cmp	r3, #3
 8007f7a:	d850      	bhi.n	800801e <buttonController+0x28e>
 8007f7c:	a201      	add	r2, pc, #4	; (adr r2, 8007f84 <buttonController+0x1f4>)
 8007f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f82:	bf00      	nop
 8007f84:	08007f95 	.word	0x08007f95
 8007f88:	08007fab 	.word	0x08007fab
 8007f8c:	08007fc1 	.word	0x08007fc1
 8007f90:	08007fd7 	.word	0x08007fd7
			case 0: if(drv2.pid_kd<255) drv2.pid_kd++; break;
 8007f94:	4b20      	ldr	r3, [pc, #128]	; (8008018 <buttonController+0x288>)
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	2bff      	cmp	r3, #255	; 0xff
 8007f9a:	d027      	beq.n	8007fec <buttonController+0x25c>
 8007f9c:	4b1e      	ldr	r3, [pc, #120]	; (8008018 <buttonController+0x288>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	b2da      	uxtb	r2, r3
 8007fa4:	4b1c      	ldr	r3, [pc, #112]	; (8008018 <buttonController+0x288>)
 8007fa6:	701a      	strb	r2, [r3, #0]
 8007fa8:	e020      	b.n	8007fec <buttonController+0x25c>
			case 1: if(drv2.pid_ki<255) drv2.pid_ki++; break;
 8007faa:	4b1b      	ldr	r3, [pc, #108]	; (8008018 <buttonController+0x288>)
 8007fac:	785b      	ldrb	r3, [r3, #1]
 8007fae:	2bff      	cmp	r3, #255	; 0xff
 8007fb0:	d01e      	beq.n	8007ff0 <buttonController+0x260>
 8007fb2:	4b19      	ldr	r3, [pc, #100]	; (8008018 <buttonController+0x288>)
 8007fb4:	785b      	ldrb	r3, [r3, #1]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	4b17      	ldr	r3, [pc, #92]	; (8008018 <buttonController+0x288>)
 8007fbc:	705a      	strb	r2, [r3, #1]
 8007fbe:	e017      	b.n	8007ff0 <buttonController+0x260>
			case 2: if(drv2.pid_kp<255) drv2.pid_kp++; break;
 8007fc0:	4b15      	ldr	r3, [pc, #84]	; (8008018 <buttonController+0x288>)
 8007fc2:	789b      	ldrb	r3, [r3, #2]
 8007fc4:	2bff      	cmp	r3, #255	; 0xff
 8007fc6:	d015      	beq.n	8007ff4 <buttonController+0x264>
 8007fc8:	4b13      	ldr	r3, [pc, #76]	; (8008018 <buttonController+0x288>)
 8007fca:	789b      	ldrb	r3, [r3, #2]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	4b11      	ldr	r3, [pc, #68]	; (8008018 <buttonController+0x288>)
 8007fd2:	709a      	strb	r2, [r3, #2]
 8007fd4:	e00e      	b.n	8007ff4 <buttonController+0x264>
			case 3: if(drv2.factor<255) drv2.factor++; break;
 8007fd6:	4b10      	ldr	r3, [pc, #64]	; (8008018 <buttonController+0x288>)
 8007fd8:	78db      	ldrb	r3, [r3, #3]
 8007fda:	2bff      	cmp	r3, #255	; 0xff
 8007fdc:	d01e      	beq.n	800801c <buttonController+0x28c>
 8007fde:	4b0e      	ldr	r3, [pc, #56]	; (8008018 <buttonController+0x288>)
 8007fe0:	78db      	ldrb	r3, [r3, #3]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	4b0c      	ldr	r3, [pc, #48]	; (8008018 <buttonController+0x288>)
 8007fe8:	70da      	strb	r2, [r3, #3]
 8007fea:	e017      	b.n	800801c <buttonController+0x28c>
			case 0: if(drv2.pid_kd<255) drv2.pid_kd++; break;
 8007fec:	bf00      	nop
 8007fee:	e016      	b.n	800801e <buttonController+0x28e>
			case 1: if(drv2.pid_ki<255) drv2.pid_ki++; break;
 8007ff0:	bf00      	nop
 8007ff2:	e014      	b.n	800801e <buttonController+0x28e>
			case 2: if(drv2.pid_kp<255) drv2.pid_kp++; break;
 8007ff4:	bf00      	nop
 8007ff6:	e012      	b.n	800801e <buttonController+0x28e>
 8007ff8:	20000010 	.word	0x20000010
 8007ffc:	200049a4 	.word	0x200049a4
 8008000:	200049a2 	.word	0x200049a2
 8008004:	200049a8 	.word	0x200049a8
 8008008:	200049ac 	.word	0x200049ac
 800800c:	200049a3 	.word	0x200049a3
 8008010:	20004c74 	.word	0x20004c74
 8008014:	200049ad 	.word	0x200049ad
 8008018:	20004c7c 	.word	0x20004c7c
			case 3: if(drv2.factor<255) drv2.factor++; break;
 800801c:	bf00      	nop
			}
		}
		if(2==minusBtnListenner)selectedLcdItem=1;
 800801e:	4b35      	ldr	r3, [pc, #212]	; (80080f4 <buttonController+0x364>)
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	2b02      	cmp	r3, #2
 8008024:	d102      	bne.n	800802c <buttonController+0x29c>
 8008026:	4b34      	ldr	r3, [pc, #208]	; (80080f8 <buttonController+0x368>)
 8008028:	2201      	movs	r2, #1
 800802a:	701a      	strb	r2, [r3, #0]
		if(1==minusBtnListenner){
 800802c:	4b31      	ldr	r3, [pc, #196]	; (80080f4 <buttonController+0x364>)
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d14a      	bne.n	80080ca <buttonController+0x33a>
			switch(item){
 8008034:	4b31      	ldr	r3, [pc, #196]	; (80080fc <buttonController+0x36c>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b03      	cmp	r3, #3
 800803a:	d846      	bhi.n	80080ca <buttonController+0x33a>
 800803c:	a201      	add	r2, pc, #4	; (adr r2, 8008044 <buttonController+0x2b4>)
 800803e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008042:	bf00      	nop
 8008044:	08008055 	.word	0x08008055
 8008048:	0800806b 	.word	0x0800806b
 800804c:	08008081 	.word	0x08008081
 8008050:	08008097 	.word	0x08008097
			case 0: if(drv2.pid_kd>0) drv2.pid_kd--; break;
 8008054:	4b2a      	ldr	r3, [pc, #168]	; (8008100 <buttonController+0x370>)
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d02f      	beq.n	80080bc <buttonController+0x32c>
 800805c:	4b28      	ldr	r3, [pc, #160]	; (8008100 <buttonController+0x370>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	3b01      	subs	r3, #1
 8008062:	b2da      	uxtb	r2, r3
 8008064:	4b26      	ldr	r3, [pc, #152]	; (8008100 <buttonController+0x370>)
 8008066:	701a      	strb	r2, [r3, #0]
 8008068:	e028      	b.n	80080bc <buttonController+0x32c>
			case 1: if(drv2.pid_ki>0) drv2.pid_ki--; break;
 800806a:	4b25      	ldr	r3, [pc, #148]	; (8008100 <buttonController+0x370>)
 800806c:	785b      	ldrb	r3, [r3, #1]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d026      	beq.n	80080c0 <buttonController+0x330>
 8008072:	4b23      	ldr	r3, [pc, #140]	; (8008100 <buttonController+0x370>)
 8008074:	785b      	ldrb	r3, [r3, #1]
 8008076:	3b01      	subs	r3, #1
 8008078:	b2da      	uxtb	r2, r3
 800807a:	4b21      	ldr	r3, [pc, #132]	; (8008100 <buttonController+0x370>)
 800807c:	705a      	strb	r2, [r3, #1]
 800807e:	e01f      	b.n	80080c0 <buttonController+0x330>
			case 2: if(drv2.pid_kp>0) drv2.pid_kp--; break;
 8008080:	4b1f      	ldr	r3, [pc, #124]	; (8008100 <buttonController+0x370>)
 8008082:	789b      	ldrb	r3, [r3, #2]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d01d      	beq.n	80080c4 <buttonController+0x334>
 8008088:	4b1d      	ldr	r3, [pc, #116]	; (8008100 <buttonController+0x370>)
 800808a:	789b      	ldrb	r3, [r3, #2]
 800808c:	3b01      	subs	r3, #1
 800808e:	b2da      	uxtb	r2, r3
 8008090:	4b1b      	ldr	r3, [pc, #108]	; (8008100 <buttonController+0x370>)
 8008092:	709a      	strb	r2, [r3, #2]
 8008094:	e016      	b.n	80080c4 <buttonController+0x334>
			case 3: if(drv2.factor>0) drv2.factor--; break;
 8008096:	4b1a      	ldr	r3, [pc, #104]	; (8008100 <buttonController+0x370>)
 8008098:	78db      	ldrb	r3, [r3, #3]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d014      	beq.n	80080c8 <buttonController+0x338>
 800809e:	4b18      	ldr	r3, [pc, #96]	; (8008100 <buttonController+0x370>)
 80080a0:	78db      	ldrb	r3, [r3, #3]
 80080a2:	3b01      	subs	r3, #1
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	4b16      	ldr	r3, [pc, #88]	; (8008100 <buttonController+0x370>)
 80080a8:	70da      	strb	r2, [r3, #3]
 80080aa:	e00d      	b.n	80080c8 <buttonController+0x338>
			case 0: if(drv1.pid_kd>0) drv1.pid_kd--; break;
 80080ac:	bf00      	nop
 80080ae:	e00c      	b.n	80080ca <buttonController+0x33a>
			case 1: if(drv1.pid_ki>0) drv1.pid_ki--; break;
 80080b0:	bf00      	nop
 80080b2:	e00a      	b.n	80080ca <buttonController+0x33a>
			case 2: if(drv1.pid_kp>0) drv1.pid_kp--; break;
 80080b4:	bf00      	nop
 80080b6:	e008      	b.n	80080ca <buttonController+0x33a>
			case 3: if(drv1.factor>0) drv1.factor--; break;
 80080b8:	bf00      	nop
 80080ba:	e006      	b.n	80080ca <buttonController+0x33a>
			case 0: if(drv2.pid_kd>0) drv2.pid_kd--; break;
 80080bc:	bf00      	nop
 80080be:	e004      	b.n	80080ca <buttonController+0x33a>
			case 1: if(drv2.pid_ki>0) drv2.pid_ki--; break;
 80080c0:	bf00      	nop
 80080c2:	e002      	b.n	80080ca <buttonController+0x33a>
			case 2: if(drv2.pid_kp>0) drv2.pid_kp--; break;
 80080c4:	bf00      	nop
 80080c6:	e000      	b.n	80080ca <buttonController+0x33a>
			case 3: if(drv2.factor>0) drv2.factor--; break;
 80080c8:	bf00      	nop
			}
		}
	}

	selectBtnListenner=selectButton_Listenner_For_MenuControl();
 80080ca:	f7ff fd9f 	bl	8007c0c <selectButton_Listenner_For_MenuControl>
 80080ce:	4603      	mov	r3, r0
 80080d0:	461a      	mov	r2, r3
 80080d2:	4b0c      	ldr	r3, [pc, #48]	; (8008104 <buttonController+0x374>)
 80080d4:	701a      	strb	r2, [r3, #0]
	plusBtnListenner=plusButton_Listenner_For_MenuControl();
 80080d6:	f7ff fdbf 	bl	8007c58 <plusButton_Listenner_For_MenuControl>
 80080da:	4603      	mov	r3, r0
 80080dc:	461a      	mov	r2, r3
 80080de:	4b0a      	ldr	r3, [pc, #40]	; (8008108 <buttonController+0x378>)
 80080e0:	701a      	strb	r2, [r3, #0]
	minusBtnListenner=minusButton_Listenner_For_MenuControl();
 80080e2:	f7ff fde1 	bl	8007ca8 <minusButton_Listenner_For_MenuControl>
 80080e6:	4603      	mov	r3, r0
 80080e8:	461a      	mov	r2, r3
 80080ea:	4b02      	ldr	r3, [pc, #8]	; (80080f4 <buttonController+0x364>)
 80080ec:	701a      	strb	r2, [r3, #0]
	//"drv1= %x - %x - %x - %x\n",drv1.pid_kd,drv1.pid_ki,drv1.pid_kp,drv1.factor
	//"drv2= %x - %x - %x - %x\n",drv2.pid_kd,drv2.pid_ki,drv2.pid_kp,drv2.factor

}
 80080ee:	bf00      	nop
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	200049ad 	.word	0x200049ad
 80080f8:	200049a3 	.word	0x200049a3
 80080fc:	200049a8 	.word	0x200049a8
 8008100:	20004c7c 	.word	0x20004c7c
 8008104:	200049a4 	.word	0x200049a4
 8008108:	200049ac 	.word	0x200049ac

0800810c <transmissionDriver1>:
void transmissionDriver1(void){
 800810c:	b590      	push	{r4, r7, lr}
 800810e:	b083      	sub	sp, #12
 8008110:	af02      	add	r7, sp, #8
	MDI_sendDataChannel1(drv1.angle,drv1.pid_kd,drv1.pid_ki,drv1.pid_kp,drv1.factor);
 8008112:	4b09      	ldr	r3, [pc, #36]	; (8008138 <transmissionDriver1+0x2c>)
 8008114:	8898      	ldrh	r0, [r3, #4]
 8008116:	4b08      	ldr	r3, [pc, #32]	; (8008138 <transmissionDriver1+0x2c>)
 8008118:	7819      	ldrb	r1, [r3, #0]
 800811a:	4b07      	ldr	r3, [pc, #28]	; (8008138 <transmissionDriver1+0x2c>)
 800811c:	785a      	ldrb	r2, [r3, #1]
 800811e:	4b06      	ldr	r3, [pc, #24]	; (8008138 <transmissionDriver1+0x2c>)
 8008120:	789c      	ldrb	r4, [r3, #2]
 8008122:	4b05      	ldr	r3, [pc, #20]	; (8008138 <transmissionDriver1+0x2c>)
 8008124:	78db      	ldrb	r3, [r3, #3]
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	4623      	mov	r3, r4
 800812a:	f000 fc73 	bl	8008a14 <MDI_sendDataChannel1>
}
 800812e:	bf00      	nop
 8008130:	3704      	adds	r7, #4
 8008132:	46bd      	mov	sp, r7
 8008134:	bd90      	pop	{r4, r7, pc}
 8008136:	bf00      	nop
 8008138:	20004c74 	.word	0x20004c74

0800813c <transmissionDriver2>:
void transmissionDriver2(void){
 800813c:	b590      	push	{r4, r7, lr}
 800813e:	b083      	sub	sp, #12
 8008140:	af02      	add	r7, sp, #8
	MDI_sendDataChannel2(drv2.angle,drv2.pid_kd,drv2.pid_ki,drv2.pid_kp,drv2.factor);
 8008142:	4b09      	ldr	r3, [pc, #36]	; (8008168 <transmissionDriver2+0x2c>)
 8008144:	8898      	ldrh	r0, [r3, #4]
 8008146:	4b08      	ldr	r3, [pc, #32]	; (8008168 <transmissionDriver2+0x2c>)
 8008148:	7819      	ldrb	r1, [r3, #0]
 800814a:	4b07      	ldr	r3, [pc, #28]	; (8008168 <transmissionDriver2+0x2c>)
 800814c:	785a      	ldrb	r2, [r3, #1]
 800814e:	4b06      	ldr	r3, [pc, #24]	; (8008168 <transmissionDriver2+0x2c>)
 8008150:	789c      	ldrb	r4, [r3, #2]
 8008152:	4b05      	ldr	r3, [pc, #20]	; (8008168 <transmissionDriver2+0x2c>)
 8008154:	78db      	ldrb	r3, [r3, #3]
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	4623      	mov	r3, r4
 800815a:	f000 fd2f 	bl	8008bbc <MDI_sendDataChannel2>
}
 800815e:	bf00      	nop
 8008160:	3704      	adds	r7, #4
 8008162:	46bd      	mov	sp, r7
 8008164:	bd90      	pop	{r4, r7, pc}
 8008166:	bf00      	nop
 8008168:	20004c7c 	.word	0x20004c7c

0800816c <getDriver1TransmitVal>:
mD_interface getDriver1TransmitVal(void){
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
	return drv1;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a05      	ldr	r2, [pc, #20]	; (800818c <getDriver1TransmitVal+0x20>)
 8008178:	6811      	ldr	r1, [r2, #0]
 800817a:	6019      	str	r1, [r3, #0]
 800817c:	8892      	ldrh	r2, [r2, #4]
 800817e:	809a      	strh	r2, [r3, #4]
}
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	20004c74 	.word	0x20004c74

08008190 <getDriver2TransmitVal>:
mD_interface getDriver2TransmitVal(void){
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
	return drv2;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a05      	ldr	r2, [pc, #20]	; (80081b0 <getDriver2TransmitVal+0x20>)
 800819c:	6811      	ldr	r1, [r2, #0]
 800819e:	6019      	str	r1, [r3, #0]
 80081a0:	8892      	ldrh	r2, [r2, #4]
 80081a2:	809a      	strh	r2, [r3, #4]
}
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr
 80081b0:	20004c7c 	.word	0x20004c7c

080081b4 <getSelectedLcdVal>:
uint8_t getSelectedLcdVal(void){return selectedLcd;}
 80081b4:	b480      	push	{r7}
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	4b03      	ldr	r3, [pc, #12]	; (80081c8 <getSelectedLcdVal+0x14>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	4618      	mov	r0, r3
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	200049a2 	.word	0x200049a2

080081cc <getSelectedLcdItemVal>:
uint8_t getSelectedLcdItemVal(void){return selectedLcdItem;}
 80081cc:	b480      	push	{r7}
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	4b03      	ldr	r3, [pc, #12]	; (80081e0 <getSelectedLcdItemVal+0x14>)
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	4618      	mov	r0, r3
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	200049a3 	.word	0x200049a3

080081e4 <lcd_Init>:

/* @brief lcd module initalize
 * @param none
 * @return none
 * */
void lcd_Init(void){
 80081e4:	b580      	push	{r7, lr}
 80081e6:	af00      	add	r7, sp, #0
	LCD_i2cDeviceCheck();
 80081e8:	f000 f958 	bl	800849c <LCD_i2cDeviceCheck>
	LCD_Init();
 80081ec:	f000 fb92 	bl	8008914 <LCD_Init>
	LCD_BackLight(LCD_BL_ON);
 80081f0:	2008      	movs	r0, #8
 80081f2:	f000 fb71 	bl	80088d8 <LCD_BackLight>
	LCD_SetCursor(0,0);
 80081f6:	2100      	movs	r1, #0
 80081f8:	2000      	movs	r0, #0
 80081fa:	f000 fa3b 	bl	8008674 <LCD_SetCursor>

	LCD_Send_String("TEST",STR_NOSLIDE);
 80081fe:	2100      	movs	r1, #0
 8008200:	4802      	ldr	r0, [pc, #8]	; (800820c <lcd_Init+0x28>)
 8008202:	f000 fa67 	bl	80086d4 <LCD_Send_String>
}
 8008206:	bf00      	nop
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	0800988c 	.word	0x0800988c

08008210 <printToLcdDrv1Receive>:
void printToLcdDrv1Receive(mD_interface gets){
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af02      	add	r7, sp, #8
 8008216:	463b      	mov	r3, r7
 8008218:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SetCursor(1,1);
 800821c:	2101      	movs	r1, #1
 800821e:	2001      	movs	r0, #1
 8008220:	f000 fa28 	bl	8008674 <LCD_SetCursor>
	sprintf(lcdBuff,"Gln1:a:%04d d:%02x",gets.angle,gets.pid_kd);
 8008224:	88bb      	ldrh	r3, [r7, #4]
 8008226:	461a      	mov	r2, r3
 8008228:	783b      	ldrb	r3, [r7, #0]
 800822a:	490f      	ldr	r1, [pc, #60]	; (8008268 <printToLcdDrv1Receive+0x58>)
 800822c:	480f      	ldr	r0, [pc, #60]	; (800826c <printToLcdDrv1Receive+0x5c>)
 800822e:	f000 ff19 	bl	8009064 <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 8008232:	2100      	movs	r1, #0
 8008234:	480d      	ldr	r0, [pc, #52]	; (800826c <printToLcdDrv1Receive+0x5c>)
 8008236:	f000 fa4d 	bl	80086d4 <LCD_Send_String>
	LCD_SetCursor(2,1);
 800823a:	2101      	movs	r1, #1
 800823c:	2002      	movs	r0, #2
 800823e:	f000 fa19 	bl	8008674 <LCD_SetCursor>
	sprintf(lcdBuff,"i:%02x p:%02x f:%02x",gets.pid_ki,gets.pid_kp,gets.factor);
 8008242:	787b      	ldrb	r3, [r7, #1]
 8008244:	461a      	mov	r2, r3
 8008246:	78bb      	ldrb	r3, [r7, #2]
 8008248:	4619      	mov	r1, r3
 800824a:	78fb      	ldrb	r3, [r7, #3]
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	460b      	mov	r3, r1
 8008250:	4907      	ldr	r1, [pc, #28]	; (8008270 <printToLcdDrv1Receive+0x60>)
 8008252:	4806      	ldr	r0, [pc, #24]	; (800826c <printToLcdDrv1Receive+0x5c>)
 8008254:	f000 ff06 	bl	8009064 <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 8008258:	2100      	movs	r1, #0
 800825a:	4804      	ldr	r0, [pc, #16]	; (800826c <printToLcdDrv1Receive+0x5c>)
 800825c:	f000 fa3a 	bl	80086d4 <LCD_Send_String>
}
 8008260:	bf00      	nop
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	08009894 	.word	0x08009894
 800826c:	20004c84 	.word	0x20004c84
 8008270:	080098a8 	.word	0x080098a8

08008274 <printToLcdDrv1Transmit>:
void printToLcdDrv1Transmit(mD_interface sends){
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af02      	add	r7, sp, #8
 800827a:	463b      	mov	r3, r7
 800827c:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SetCursor(1,1);
 8008280:	2101      	movs	r1, #1
 8008282:	2001      	movs	r0, #1
 8008284:	f000 f9f6 	bl	8008674 <LCD_SetCursor>
	sprintf(lcdBuff,"Gdn1:a:%04d d:%02x",sends.angle,sends.pid_kd);
 8008288:	88bb      	ldrh	r3, [r7, #4]
 800828a:	461a      	mov	r2, r3
 800828c:	783b      	ldrb	r3, [r7, #0]
 800828e:	490f      	ldr	r1, [pc, #60]	; (80082cc <printToLcdDrv1Transmit+0x58>)
 8008290:	480f      	ldr	r0, [pc, #60]	; (80082d0 <printToLcdDrv1Transmit+0x5c>)
 8008292:	f000 fee7 	bl	8009064 <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 8008296:	2100      	movs	r1, #0
 8008298:	480d      	ldr	r0, [pc, #52]	; (80082d0 <printToLcdDrv1Transmit+0x5c>)
 800829a:	f000 fa1b 	bl	80086d4 <LCD_Send_String>
	LCD_SetCursor(2,1);
 800829e:	2101      	movs	r1, #1
 80082a0:	2002      	movs	r0, #2
 80082a2:	f000 f9e7 	bl	8008674 <LCD_SetCursor>
	sprintf(lcdBuff,"i:%02x p:%02x f:%02x",sends.pid_ki,sends.pid_kp,sends.factor);
 80082a6:	787b      	ldrb	r3, [r7, #1]
 80082a8:	461a      	mov	r2, r3
 80082aa:	78bb      	ldrb	r3, [r7, #2]
 80082ac:	4619      	mov	r1, r3
 80082ae:	78fb      	ldrb	r3, [r7, #3]
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	460b      	mov	r3, r1
 80082b4:	4907      	ldr	r1, [pc, #28]	; (80082d4 <printToLcdDrv1Transmit+0x60>)
 80082b6:	4806      	ldr	r0, [pc, #24]	; (80082d0 <printToLcdDrv1Transmit+0x5c>)
 80082b8:	f000 fed4 	bl	8009064 <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 80082bc:	2100      	movs	r1, #0
 80082be:	4804      	ldr	r0, [pc, #16]	; (80082d0 <printToLcdDrv1Transmit+0x5c>)
 80082c0:	f000 fa08 	bl	80086d4 <LCD_Send_String>
}
 80082c4:	bf00      	nop
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	080098c0 	.word	0x080098c0
 80082d0:	20004c84 	.word	0x20004c84
 80082d4:	080098a8 	.word	0x080098a8

080082d8 <printToLcdDrv2Receive>:
void printToLcdDrv2Receive(mD_interface gets){
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af02      	add	r7, sp, #8
 80082de:	463b      	mov	r3, r7
 80082e0:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SetCursor(1,1);
 80082e4:	2101      	movs	r1, #1
 80082e6:	2001      	movs	r0, #1
 80082e8:	f000 f9c4 	bl	8008674 <LCD_SetCursor>
	sprintf(lcdBuff,"Gln2:a:%04d d:%02x",gets.angle,gets.pid_kd);
 80082ec:	88bb      	ldrh	r3, [r7, #4]
 80082ee:	461a      	mov	r2, r3
 80082f0:	783b      	ldrb	r3, [r7, #0]
 80082f2:	490f      	ldr	r1, [pc, #60]	; (8008330 <printToLcdDrv2Receive+0x58>)
 80082f4:	480f      	ldr	r0, [pc, #60]	; (8008334 <printToLcdDrv2Receive+0x5c>)
 80082f6:	f000 feb5 	bl	8009064 <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 80082fa:	2100      	movs	r1, #0
 80082fc:	480d      	ldr	r0, [pc, #52]	; (8008334 <printToLcdDrv2Receive+0x5c>)
 80082fe:	f000 f9e9 	bl	80086d4 <LCD_Send_String>
	LCD_SetCursor(2,1);
 8008302:	2101      	movs	r1, #1
 8008304:	2002      	movs	r0, #2
 8008306:	f000 f9b5 	bl	8008674 <LCD_SetCursor>
	sprintf(lcdBuff,"i:%02x p:%02x f:%02x",gets.pid_ki,gets.pid_kp,gets.factor);
 800830a:	787b      	ldrb	r3, [r7, #1]
 800830c:	461a      	mov	r2, r3
 800830e:	78bb      	ldrb	r3, [r7, #2]
 8008310:	4619      	mov	r1, r3
 8008312:	78fb      	ldrb	r3, [r7, #3]
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	460b      	mov	r3, r1
 8008318:	4907      	ldr	r1, [pc, #28]	; (8008338 <printToLcdDrv2Receive+0x60>)
 800831a:	4806      	ldr	r0, [pc, #24]	; (8008334 <printToLcdDrv2Receive+0x5c>)
 800831c:	f000 fea2 	bl	8009064 <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 8008320:	2100      	movs	r1, #0
 8008322:	4804      	ldr	r0, [pc, #16]	; (8008334 <printToLcdDrv2Receive+0x5c>)
 8008324:	f000 f9d6 	bl	80086d4 <LCD_Send_String>
}
 8008328:	bf00      	nop
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	080098d4 	.word	0x080098d4
 8008334:	20004c84 	.word	0x20004c84
 8008338:	080098a8 	.word	0x080098a8

0800833c <printToLcdDrv2Transmit>:
void printToLcdDrv2Transmit(mD_interface sends){
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af02      	add	r7, sp, #8
 8008342:	463b      	mov	r3, r7
 8008344:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SetCursor(1,1);
 8008348:	2101      	movs	r1, #1
 800834a:	2001      	movs	r0, #1
 800834c:	f000 f992 	bl	8008674 <LCD_SetCursor>
	sprintf(lcdBuff,"Gdn2:a:%04d d:%02x",sends.angle,sends.pid_kd);
 8008350:	88bb      	ldrh	r3, [r7, #4]
 8008352:	461a      	mov	r2, r3
 8008354:	783b      	ldrb	r3, [r7, #0]
 8008356:	490f      	ldr	r1, [pc, #60]	; (8008394 <printToLcdDrv2Transmit+0x58>)
 8008358:	480f      	ldr	r0, [pc, #60]	; (8008398 <printToLcdDrv2Transmit+0x5c>)
 800835a:	f000 fe83 	bl	8009064 <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 800835e:	2100      	movs	r1, #0
 8008360:	480d      	ldr	r0, [pc, #52]	; (8008398 <printToLcdDrv2Transmit+0x5c>)
 8008362:	f000 f9b7 	bl	80086d4 <LCD_Send_String>
	LCD_SetCursor(2,1);
 8008366:	2101      	movs	r1, #1
 8008368:	2002      	movs	r0, #2
 800836a:	f000 f983 	bl	8008674 <LCD_SetCursor>
	sprintf(lcdBuff,"i:%02x p:%02x f:%02x",sends.pid_ki,sends.pid_kp,sends.factor);
 800836e:	787b      	ldrb	r3, [r7, #1]
 8008370:	461a      	mov	r2, r3
 8008372:	78bb      	ldrb	r3, [r7, #2]
 8008374:	4619      	mov	r1, r3
 8008376:	78fb      	ldrb	r3, [r7, #3]
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	460b      	mov	r3, r1
 800837c:	4907      	ldr	r1, [pc, #28]	; (800839c <printToLcdDrv2Transmit+0x60>)
 800837e:	4806      	ldr	r0, [pc, #24]	; (8008398 <printToLcdDrv2Transmit+0x5c>)
 8008380:	f000 fe70 	bl	8009064 <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 8008384:	2100      	movs	r1, #0
 8008386:	4804      	ldr	r0, [pc, #16]	; (8008398 <printToLcdDrv2Transmit+0x5c>)
 8008388:	f000 f9a4 	bl	80086d4 <LCD_Send_String>
}
 800838c:	bf00      	nop
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	080098e8 	.word	0x080098e8
 8008398:	20004c84 	.word	0x20004c84
 800839c:	080098a8 	.word	0x080098a8

080083a0 <cleanTheLcd>:
void cleanTheLcd(void){
 80083a0:	b580      	push	{r7, lr}
 80083a2:	af00      	add	r7, sp, #0
	LCD_Clear();
 80083a4:	f000 f952 	bl	800864c <LCD_Clear>
}
 80083a8:	bf00      	nop
 80083aa:	bd80      	pop	{r7, pc}

080083ac <lcdController>:
void lcdController(void){
 80083ac:	b590      	push	{r4, r7, lr}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
	static mD_interface temp;
	static uint8_t itemVal=0,statuVal=0;
	if(0==statuVal){
 80083b2:	4b2f      	ldr	r3, [pc, #188]	; (8008470 <lcdController+0xc4>)
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d125      	bne.n	8008406 <lcdController+0x5a>
		if(0==itemVal){
 80083ba:	4b2e      	ldr	r3, [pc, #184]	; (8008474 <lcdController+0xc8>)
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d110      	bne.n	80083e4 <lcdController+0x38>
			temp=getDriver1TransmitVal();
 80083c2:	4c2d      	ldr	r4, [pc, #180]	; (8008478 <lcdController+0xcc>)
 80083c4:	463b      	mov	r3, r7
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7ff fed0 	bl	800816c <getDriver1TransmitVal>
 80083cc:	4622      	mov	r2, r4
 80083ce:	463b      	mov	r3, r7
 80083d0:	6818      	ldr	r0, [r3, #0]
 80083d2:	6010      	str	r0, [r2, #0]
 80083d4:	889b      	ldrh	r3, [r3, #4]
 80083d6:	8093      	strh	r3, [r2, #4]
			printToLcdDrv1Transmit(temp);
 80083d8:	4b27      	ldr	r3, [pc, #156]	; (8008478 <lcdController+0xcc>)
 80083da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80083de:	f7ff ff49 	bl	8008274 <printToLcdDrv1Transmit>
 80083e2:	e035      	b.n	8008450 <lcdController+0xa4>

		}else{
			temp=getDriver1ReceiveVal();
 80083e4:	4c24      	ldr	r4, [pc, #144]	; (8008478 <lcdController+0xcc>)
 80083e6:	463b      	mov	r3, r7
 80083e8:	4618      	mov	r0, r3
 80083ea:	f000 fcbb 	bl	8008d64 <getDriver1ReceiveVal>
 80083ee:	4622      	mov	r2, r4
 80083f0:	463b      	mov	r3, r7
 80083f2:	6818      	ldr	r0, [r3, #0]
 80083f4:	6010      	str	r0, [r2, #0]
 80083f6:	889b      	ldrh	r3, [r3, #4]
 80083f8:	8093      	strh	r3, [r2, #4]
			printToLcdDrv1Receive(temp);
 80083fa:	4b1f      	ldr	r3, [pc, #124]	; (8008478 <lcdController+0xcc>)
 80083fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008400:	f7ff ff06 	bl	8008210 <printToLcdDrv1Receive>
 8008404:	e024      	b.n	8008450 <lcdController+0xa4>
		}
	}
	else{
		if(0==itemVal){
 8008406:	4b1b      	ldr	r3, [pc, #108]	; (8008474 <lcdController+0xc8>)
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d110      	bne.n	8008430 <lcdController+0x84>
			temp=getDriver2TransmitVal();
 800840e:	4c1a      	ldr	r4, [pc, #104]	; (8008478 <lcdController+0xcc>)
 8008410:	463b      	mov	r3, r7
 8008412:	4618      	mov	r0, r3
 8008414:	f7ff febc 	bl	8008190 <getDriver2TransmitVal>
 8008418:	4622      	mov	r2, r4
 800841a:	463b      	mov	r3, r7
 800841c:	6818      	ldr	r0, [r3, #0]
 800841e:	6010      	str	r0, [r2, #0]
 8008420:	889b      	ldrh	r3, [r3, #4]
 8008422:	8093      	strh	r3, [r2, #4]
			printToLcdDrv2Transmit(temp);
 8008424:	4b14      	ldr	r3, [pc, #80]	; (8008478 <lcdController+0xcc>)
 8008426:	e893 0003 	ldmia.w	r3, {r0, r1}
 800842a:	f7ff ff87 	bl	800833c <printToLcdDrv2Transmit>
 800842e:	e00f      	b.n	8008450 <lcdController+0xa4>

		}else{
			temp=getDriver2ReceiveVal();
 8008430:	4c11      	ldr	r4, [pc, #68]	; (8008478 <lcdController+0xcc>)
 8008432:	463b      	mov	r3, r7
 8008434:	4618      	mov	r0, r3
 8008436:	f000 fca7 	bl	8008d88 <getDriver2ReceiveVal>
 800843a:	4622      	mov	r2, r4
 800843c:	463b      	mov	r3, r7
 800843e:	6818      	ldr	r0, [r3, #0]
 8008440:	6010      	str	r0, [r2, #0]
 8008442:	889b      	ldrh	r3, [r3, #4]
 8008444:	8093      	strh	r3, [r2, #4]
			printToLcdDrv2Receive(temp);
 8008446:	4b0c      	ldr	r3, [pc, #48]	; (8008478 <lcdController+0xcc>)
 8008448:	e893 0003 	ldmia.w	r3, {r0, r1}
 800844c:	f7ff ff44 	bl	80082d8 <printToLcdDrv2Receive>
		}
	}
	statuVal=getSelectedLcdVal();
 8008450:	f7ff feb0 	bl	80081b4 <getSelectedLcdVal>
 8008454:	4603      	mov	r3, r0
 8008456:	461a      	mov	r2, r3
 8008458:	4b05      	ldr	r3, [pc, #20]	; (8008470 <lcdController+0xc4>)
 800845a:	701a      	strb	r2, [r3, #0]
	itemVal=getSelectedLcdItemVal();
 800845c:	f7ff feb6 	bl	80081cc <getSelectedLcdItemVal>
 8008460:	4603      	mov	r3, r0
 8008462:	461a      	mov	r2, r3
 8008464:	4b03      	ldr	r3, [pc, #12]	; (8008474 <lcdController+0xc8>)
 8008466:	701a      	strb	r2, [r3, #0]
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	bd90      	pop	{r4, r7, pc}
 8008470:	200049ae 	.word	0x200049ae
 8008474:	200049af 	.word	0x200049af
 8008478:	200049b0 	.word	0x200049b0

0800847c <hi2cx_define>:
*/
I2C_HandleTypeDef hi2cx;
extern I2C_HandleTypeDef hi2c1; //* Change "hi2c1" like hi2c2, hi2c3... according to which i2c type(i2c1,i2c2...) you use, default is hi2c1.
                                //That I2C_HandleTypeDef hi2c1 comes from main.c*.
static void hi2cx_define(void)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	af00      	add	r7, sp, #0
	hi2cx = hi2c1;	//* Change "hi2c1" like hi2c2, hi2c3... according to which i2c type you use, default is hi2c1.
 8008480:	4a04      	ldr	r2, [pc, #16]	; (8008494 <hi2cx_define+0x18>)
 8008482:	4b05      	ldr	r3, [pc, #20]	; (8008498 <hi2cx_define+0x1c>)
 8008484:	4610      	mov	r0, r2
 8008486:	4619      	mov	r1, r3
 8008488:	234c      	movs	r3, #76	; 0x4c
 800848a:	461a      	mov	r2, r3
 800848c:	f000 fdd6 	bl	800903c <memcpy>
}
 8008490:	bf00      	nop
 8008492:	bd80      	pop	{r7, pc}
 8008494:	20004c98 	.word	0x20004c98
 8008498:	20004a50 	.word	0x20004a50

0800849c <LCD_i2cDeviceCheck>:
/**
*@brief: Lcd i2c device check.
*@retval: none
*/
void LCD_i2cDeviceCheck(void)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	af00      	add	r7, sp, #0
	/* Checks if target device is ready for communication. */
	/* 3 is number of trials, 1000ms is timeout */
	HAL_Delay(50);
 80084a0:	2032      	movs	r0, #50	; 0x32
 80084a2:	f7f8 fe15 	bl	80010d0 <HAL_Delay>
	hi2cx_define();
 80084a6:	f7ff ffe9 	bl	800847c <hi2cx_define>
	while (HAL_I2C_IsDeviceReady(&hi2cx, i2cDeviceAddr, 3, 1000) != HAL_OK) 
 80084aa:	bf00      	nop
 80084ac:	4b06      	ldr	r3, [pc, #24]	; (80084c8 <LCD_i2cDeviceCheck+0x2c>)
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	b299      	uxth	r1, r3
 80084b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084b6:	2203      	movs	r2, #3
 80084b8:	4804      	ldr	r0, [pc, #16]	; (80084cc <LCD_i2cDeviceCheck+0x30>)
 80084ba:	f7f9 fe83 	bl	80021c4 <HAL_I2C_IsDeviceReady>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1f3      	bne.n	80084ac <LCD_i2cDeviceCheck+0x10>
	{	
		
	}
}
 80084c4:	bf00      	nop
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	20000011 	.word	0x20000011
 80084cc:	20004c98 	.word	0x20004c98

080084d0 <LCD_Set_Command>:
/**
*@brief: Send commands to lcd.
*@retval: none
*/
void LCD_Set_Command(uint8_t cmd)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af02      	add	r7, sp, #8
 80084d6:	4603      	mov	r3, r0
 80084d8:	71fb      	strb	r3, [r7, #7]
	data_M = cmd & Mask_Data;        //Most significant bit
 80084da:	4b24      	ldr	r3, [pc, #144]	; (800856c <LCD_Set_Command+0x9c>)
 80084dc:	781a      	ldrb	r2, [r3, #0]
 80084de:	79fb      	ldrb	r3, [r7, #7]
 80084e0:	4013      	ands	r3, r2
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	4b22      	ldr	r3, [pc, #136]	; (8008570 <LCD_Set_Command+0xa0>)
 80084e6:	701a      	strb	r2, [r3, #0]
	data_L = (cmd << 4) & Mask_Data; //Least significant bit
 80084e8:	79fb      	ldrb	r3, [r7, #7]
 80084ea:	011b      	lsls	r3, r3, #4
 80084ec:	b25a      	sxtb	r2, r3
 80084ee:	4b1f      	ldr	r3, [pc, #124]	; (800856c <LCD_Set_Command+0x9c>)
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	b25b      	sxtb	r3, r3
 80084f4:	4013      	ands	r3, r2
 80084f6:	b25b      	sxtb	r3, r3
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	4b1e      	ldr	r3, [pc, #120]	; (8008574 <LCD_Set_Command+0xa4>)
 80084fc:	701a      	strb	r2, [r3, #0]
	
	//For backlight On/off
	data_M |= data_BL;
 80084fe:	4b1c      	ldr	r3, [pc, #112]	; (8008570 <LCD_Set_Command+0xa0>)
 8008500:	781a      	ldrb	r2, [r3, #0]
 8008502:	4b1d      	ldr	r3, [pc, #116]	; (8008578 <LCD_Set_Command+0xa8>)
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	4313      	orrs	r3, r2
 8008508:	b2da      	uxtb	r2, r3
 800850a:	4b19      	ldr	r3, [pc, #100]	; (8008570 <LCD_Set_Command+0xa0>)
 800850c:	701a      	strb	r2, [r3, #0]
	data_L |= data_BL;
 800850e:	4b19      	ldr	r3, [pc, #100]	; (8008574 <LCD_Set_Command+0xa4>)
 8008510:	781a      	ldrb	r2, [r3, #0]
 8008512:	4b19      	ldr	r3, [pc, #100]	; (8008578 <LCD_Set_Command+0xa8>)
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	4313      	orrs	r3, r2
 8008518:	b2da      	uxtb	r2, r3
 800851a:	4b16      	ldr	r3, [pc, #88]	; (8008574 <LCD_Set_Command+0xa4>)
 800851c:	701a      	strb	r2, [r3, #0]
	
	data[0] = data_M | LCD_E;  //Enable E pin, RS=0
 800851e:	4b14      	ldr	r3, [pc, #80]	; (8008570 <LCD_Set_Command+0xa0>)
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	f043 0304 	orr.w	r3, r3, #4
 8008526:	b2da      	uxtb	r2, r3
 8008528:	4b14      	ldr	r3, [pc, #80]	; (800857c <LCD_Set_Command+0xac>)
 800852a:	701a      	strb	r2, [r3, #0]
	data[1] = data_M;          //Disable E pin, RS=0
 800852c:	4b10      	ldr	r3, [pc, #64]	; (8008570 <LCD_Set_Command+0xa0>)
 800852e:	781a      	ldrb	r2, [r3, #0]
 8008530:	4b12      	ldr	r3, [pc, #72]	; (800857c <LCD_Set_Command+0xac>)
 8008532:	705a      	strb	r2, [r3, #1]
	data[2] = data_L | LCD_E;
 8008534:	4b0f      	ldr	r3, [pc, #60]	; (8008574 <LCD_Set_Command+0xa4>)
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	f043 0304 	orr.w	r3, r3, #4
 800853c:	b2da      	uxtb	r2, r3
 800853e:	4b0f      	ldr	r3, [pc, #60]	; (800857c <LCD_Set_Command+0xac>)
 8008540:	709a      	strb	r2, [r3, #2]
  data[3] = data_L;
 8008542:	4b0c      	ldr	r3, [pc, #48]	; (8008574 <LCD_Set_Command+0xa4>)
 8008544:	781a      	ldrb	r2, [r3, #0]
 8008546:	4b0d      	ldr	r3, [pc, #52]	; (800857c <LCD_Set_Command+0xac>)
 8008548:	70da      	strb	r2, [r3, #3]
	
	hi2cx_define();	
 800854a:	f7ff ff97 	bl	800847c <hi2cx_define>
	HAL_I2C_Master_Transmit(&hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 800854e:	4b0c      	ldr	r3, [pc, #48]	; (8008580 <LCD_Set_Command+0xb0>)
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	b299      	uxth	r1, r3
 8008554:	23c8      	movs	r3, #200	; 0xc8
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	2304      	movs	r3, #4
 800855a:	4a08      	ldr	r2, [pc, #32]	; (800857c <LCD_Set_Command+0xac>)
 800855c:	4809      	ldr	r0, [pc, #36]	; (8008584 <LCD_Set_Command+0xb4>)
 800855e:	f7f9 fd3d 	bl	8001fdc <HAL_I2C_Master_Transmit>
}
 8008562:	bf00      	nop
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	20000012 	.word	0x20000012
 8008570:	200049bc 	.word	0x200049bc
 8008574:	200049bd 	.word	0x200049bd
 8008578:	200049be 	.word	0x200049be
 800857c:	200049b8 	.word	0x200049b8
 8008580:	20000011 	.word	0x20000011
 8008584:	20004c98 	.word	0x20004c98

08008588 <LCD_Write_Data>:
/**
*@brief: Write data to lcd.
*@retval: none
*/
void LCD_Write_Data(uint8_t datax)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af02      	add	r7, sp, #8
 800858e:	4603      	mov	r3, r0
 8008590:	71fb      	strb	r3, [r7, #7]
	data_M = datax & Mask_Data;        //Most significant bit
 8008592:	4b27      	ldr	r3, [pc, #156]	; (8008630 <LCD_Write_Data+0xa8>)
 8008594:	781a      	ldrb	r2, [r3, #0]
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	4013      	ands	r3, r2
 800859a:	b2da      	uxtb	r2, r3
 800859c:	4b25      	ldr	r3, [pc, #148]	; (8008634 <LCD_Write_Data+0xac>)
 800859e:	701a      	strb	r2, [r3, #0]
	data_L = (datax << 4) & Mask_Data; //Least significant bit
 80085a0:	79fb      	ldrb	r3, [r7, #7]
 80085a2:	011b      	lsls	r3, r3, #4
 80085a4:	b25a      	sxtb	r2, r3
 80085a6:	4b22      	ldr	r3, [pc, #136]	; (8008630 <LCD_Write_Data+0xa8>)
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	b25b      	sxtb	r3, r3
 80085ac:	4013      	ands	r3, r2
 80085ae:	b25b      	sxtb	r3, r3
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	4b21      	ldr	r3, [pc, #132]	; (8008638 <LCD_Write_Data+0xb0>)
 80085b4:	701a      	strb	r2, [r3, #0]
	
	//For backlight On/off
	data_M |= data_BL;
 80085b6:	4b1f      	ldr	r3, [pc, #124]	; (8008634 <LCD_Write_Data+0xac>)
 80085b8:	781a      	ldrb	r2, [r3, #0]
 80085ba:	4b20      	ldr	r3, [pc, #128]	; (800863c <LCD_Write_Data+0xb4>)
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	4313      	orrs	r3, r2
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	4b1c      	ldr	r3, [pc, #112]	; (8008634 <LCD_Write_Data+0xac>)
 80085c4:	701a      	strb	r2, [r3, #0]
	data_L |= data_BL;
 80085c6:	4b1c      	ldr	r3, [pc, #112]	; (8008638 <LCD_Write_Data+0xb0>)
 80085c8:	781a      	ldrb	r2, [r3, #0]
 80085ca:	4b1c      	ldr	r3, [pc, #112]	; (800863c <LCD_Write_Data+0xb4>)
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	b2da      	uxtb	r2, r3
 80085d2:	4b19      	ldr	r3, [pc, #100]	; (8008638 <LCD_Write_Data+0xb0>)
 80085d4:	701a      	strb	r2, [r3, #0]
	 	
	data[0] = data_M | LCD_E|LCD_RS;  //Enable E pin, RS=1
 80085d6:	4b17      	ldr	r3, [pc, #92]	; (8008634 <LCD_Write_Data+0xac>)
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	f043 0305 	orr.w	r3, r3, #5
 80085de:	b2da      	uxtb	r2, r3
 80085e0:	4b17      	ldr	r3, [pc, #92]	; (8008640 <LCD_Write_Data+0xb8>)
 80085e2:	701a      	strb	r2, [r3, #0]
	data[1] = data_M | LCD_RS;        //Disable E pin, RS=1
 80085e4:	4b13      	ldr	r3, [pc, #76]	; (8008634 <LCD_Write_Data+0xac>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	f043 0301 	orr.w	r3, r3, #1
 80085ec:	b2da      	uxtb	r2, r3
 80085ee:	4b14      	ldr	r3, [pc, #80]	; (8008640 <LCD_Write_Data+0xb8>)
 80085f0:	705a      	strb	r2, [r3, #1]
	data[2] = data_L | LCD_E|LCD_RS;
 80085f2:	4b11      	ldr	r3, [pc, #68]	; (8008638 <LCD_Write_Data+0xb0>)
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	f043 0305 	orr.w	r3, r3, #5
 80085fa:	b2da      	uxtb	r2, r3
 80085fc:	4b10      	ldr	r3, [pc, #64]	; (8008640 <LCD_Write_Data+0xb8>)
 80085fe:	709a      	strb	r2, [r3, #2]
  data[3] = data_L | LCD_RS;  
 8008600:	4b0d      	ldr	r3, [pc, #52]	; (8008638 <LCD_Write_Data+0xb0>)
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	f043 0301 	orr.w	r3, r3, #1
 8008608:	b2da      	uxtb	r2, r3
 800860a:	4b0d      	ldr	r3, [pc, #52]	; (8008640 <LCD_Write_Data+0xb8>)
 800860c:	70da      	strb	r2, [r3, #3]
	
	hi2cx_define();
 800860e:	f7ff ff35 	bl	800847c <hi2cx_define>
	HAL_I2C_Master_Transmit(&hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 8008612:	4b0c      	ldr	r3, [pc, #48]	; (8008644 <LCD_Write_Data+0xbc>)
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	b299      	uxth	r1, r3
 8008618:	23c8      	movs	r3, #200	; 0xc8
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	2304      	movs	r3, #4
 800861e:	4a08      	ldr	r2, [pc, #32]	; (8008640 <LCD_Write_Data+0xb8>)
 8008620:	4809      	ldr	r0, [pc, #36]	; (8008648 <LCD_Write_Data+0xc0>)
 8008622:	f7f9 fcdb 	bl	8001fdc <HAL_I2C_Master_Transmit>
}
 8008626:	bf00      	nop
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	20000012 	.word	0x20000012
 8008634:	200049bc 	.word	0x200049bc
 8008638:	200049bd 	.word	0x200049bd
 800863c:	200049be 	.word	0x200049be
 8008640:	200049b8 	.word	0x200049b8
 8008644:	20000011 	.word	0x20000011
 8008648:	20004c98 	.word	0x20004c98

0800864c <LCD_Clear>:
/**
*@brief: Clear lcd display.
*@retval: none
*/
void LCD_Clear(void)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	af00      	add	r7, sp, #0
	LCD_Set_Command(LCD_CLEAR_DISPLAY);
 8008650:	2001      	movs	r0, #1
 8008652:	f7ff ff3d 	bl	80084d0 <LCD_Set_Command>
	HAL_Delay(10);
 8008656:	200a      	movs	r0, #10
 8008658:	f7f8 fd3a 	bl	80010d0 <HAL_Delay>
	str_len = 0;
 800865c:	4b03      	ldr	r3, [pc, #12]	; (800866c <LCD_Clear+0x20>)
 800865e:	2200      	movs	r2, #0
 8008660:	701a      	strb	r2, [r3, #0]
	line_pos = 1;
 8008662:	4b03      	ldr	r3, [pc, #12]	; (8008670 <LCD_Clear+0x24>)
 8008664:	2201      	movs	r2, #1
 8008666:	701a      	strb	r2, [r3, #0]
}
 8008668:	bf00      	nop
 800866a:	bd80      	pop	{r7, pc}
 800866c:	200049bf 	.word	0x200049bf
 8008670:	20000013 	.word	0x20000013

08008674 <LCD_SetCursor>:
*@brief: Set lcd cursor position.
*@param: line_x: line no, chr_x: character no.
*@retval: none
*/
void LCD_SetCursor(int line_x, int chr_x)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  line_pos = line_x; //hold line position.	
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	b2da      	uxtb	r2, r3
 8008682:	4b12      	ldr	r3, [pc, #72]	; (80086cc <LCD_SetCursor+0x58>)
 8008684:	701a      	strb	r2, [r3, #0]
	
	if(((line_x >=1 && line_x <= line_MAX) && (chr_x >=1 && chr_x <= chr_MAX)))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	dd1b      	ble.n	80086c4 <LCD_SetCursor+0x50>
 800868c:	2302      	movs	r3, #2
 800868e:	461a      	mov	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4293      	cmp	r3, r2
 8008694:	dc16      	bgt.n	80086c4 <LCD_SetCursor+0x50>
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	dd13      	ble.n	80086c4 <LCD_SetCursor+0x50>
 800869c:	2310      	movs	r3, #16
 800869e:	461a      	mov	r2, r3
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	4293      	cmp	r3, r2
 80086a4:	dc0e      	bgt.n	80086c4 <LCD_SetCursor+0x50>
	{		
		LCD_Set_Command(LCD_SET_DDRAMADDR | Cursor_Data[line_x - 1][chr_x - 1]);		
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	1e5a      	subs	r2, r3, #1
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	3b01      	subs	r3, #1
 80086ae:	4908      	ldr	r1, [pc, #32]	; (80086d0 <LCD_SetCursor+0x5c>)
 80086b0:	0112      	lsls	r2, r2, #4
 80086b2:	440a      	add	r2, r1
 80086b4:	4413      	add	r3, r2
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	4618      	mov	r0, r3
 80086c0:	f7ff ff06 	bl	80084d0 <LCD_Set_Command>
	}
}
 80086c4:	bf00      	nop
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	20000013 	.word	0x20000013
 80086d0:	08009974 	.word	0x08009974

080086d4 <LCD_Send_String>:
*@brief: Send string data to lcd.
*@param: str[]: string array, mode: str slide/noslide.
*@retval: none
*/
void LCD_Send_String(char str[], uint8_t mode)
{	 
 80086d4:	b5b0      	push	{r4, r5, r7, lr}
 80086d6:	b08a      	sub	sp, #40	; 0x28
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	460b      	mov	r3, r1
 80086de:	70fb      	strb	r3, [r7, #3]
 80086e0:	466b      	mov	r3, sp
 80086e2:	461d      	mov	r5, r3
	char *buffer[BFR_MAX];
 80086e4:	2364      	movs	r3, #100	; 0x64
 80086e6:	3b01      	subs	r3, #1
 80086e8:	61fb      	str	r3, [r7, #28]
 80086ea:	2364      	movs	r3, #100	; 0x64
 80086ec:	b2d9      	uxtb	r1, r3
 80086ee:	f04f 0200 	mov.w	r2, #0
 80086f2:	f04f 0300 	mov.w	r3, #0
 80086f6:	f04f 0400 	mov.w	r4, #0
 80086fa:	0154      	lsls	r4, r2, #5
 80086fc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008700:	014b      	lsls	r3, r1, #5
 8008702:	2364      	movs	r3, #100	; 0x64
 8008704:	b2d9      	uxtb	r1, r3
 8008706:	f04f 0200 	mov.w	r2, #0
 800870a:	f04f 0300 	mov.w	r3, #0
 800870e:	f04f 0400 	mov.w	r4, #0
 8008712:	0154      	lsls	r4, r2, #5
 8008714:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008718:	014b      	lsls	r3, r1, #5
 800871a:	2364      	movs	r3, #100	; 0x64
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	3303      	adds	r3, #3
 8008720:	3307      	adds	r3, #7
 8008722:	08db      	lsrs	r3, r3, #3
 8008724:	00db      	lsls	r3, r3, #3
 8008726:	ebad 0d03 	sub.w	sp, sp, r3
 800872a:	466b      	mov	r3, sp
 800872c:	3303      	adds	r3, #3
 800872e:	089b      	lsrs	r3, r3, #2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	61bb      	str	r3, [r7, #24]
	uint8_t i[4] = {chr_MAX,chr_MAX,chr_MAX,chr_MAX}; //i follows the ch position while sliding.
 8008734:	2310      	movs	r3, #16
 8008736:	743b      	strb	r3, [r7, #16]
 8008738:	2310      	movs	r3, #16
 800873a:	747b      	strb	r3, [r7, #17]
 800873c:	2310      	movs	r3, #16
 800873e:	74bb      	strb	r3, [r7, #18]
 8008740:	2310      	movs	r3, #16
 8008742:	74fb      	strb	r3, [r7, #19]
   uint8_t c[4] = {0, 0, 0, 0}; //c follows the each ch of the str buffer while sliding.
 8008744:	2300      	movs	r3, #0
 8008746:	60fb      	str	r3, [r7, #12]
   uint8_t ch_len = 0; //follow the string lenght.
 8008748:	2300      	movs	r3, #0
 800874a:	75fb      	strb	r3, [r7, #23]
  str_len = 0;
 800874c:	4b60      	ldr	r3, [pc, #384]	; (80088d0 <LCD_Send_String+0x1fc>)
 800874e:	2200      	movs	r2, #0
 8008750:	701a      	strb	r2, [r3, #0]
	

	switch(mode)
 8008752:	78fb      	ldrb	r3, [r7, #3]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d01e      	beq.n	8008796 <LCD_Send_String+0xc2>
 8008758:	2b01      	cmp	r3, #1
 800875a:	d021      	beq.n	80087a0 <LCD_Send_String+0xcc>
 800875c:	e0b2      	b.n	80088c4 <LCD_Send_String+0x1f0>
	{			
		case STR_NOSLIDE:
			
			while (*str) 
			{
				LCD_Write_Data (*str++);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	1c5a      	adds	r2, r3, #1
 8008762:	607a      	str	r2, [r7, #4]
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	4618      	mov	r0, r3
 8008768:	f7ff ff0e 	bl	8008588 <LCD_Write_Data>
				str_len++;
 800876c:	4b58      	ldr	r3, [pc, #352]	; (80088d0 <LCD_Send_String+0x1fc>)
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	3301      	adds	r3, #1
 8008772:	b2da      	uxtb	r2, r3
 8008774:	4b56      	ldr	r3, [pc, #344]	; (80088d0 <LCD_Send_String+0x1fc>)
 8008776:	701a      	strb	r2, [r3, #0]
				if(str_len == chr_MAX)
 8008778:	4b55      	ldr	r3, [pc, #340]	; (80088d0 <LCD_Send_String+0x1fc>)
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	2210      	movs	r2, #16
 800877e:	4293      	cmp	r3, r2
 8008780:	d109      	bne.n	8008796 <LCD_Send_String+0xc2>
				{
					LCD_SetCursor(line_pos + 1, 1);
 8008782:	4b54      	ldr	r3, [pc, #336]	; (80088d4 <LCD_Send_String+0x200>)
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	3301      	adds	r3, #1
 8008788:	2101      	movs	r1, #1
 800878a:	4618      	mov	r0, r3
 800878c:	f7ff ff72 	bl	8008674 <LCD_SetCursor>
					str_len = 0;
 8008790:	4b4f      	ldr	r3, [pc, #316]	; (80088d0 <LCD_Send_String+0x1fc>)
 8008792:	2200      	movs	r2, #0
 8008794:	701a      	strb	r2, [r3, #0]
			while (*str) 
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1df      	bne.n	800875e <LCD_Send_String+0x8a>
				}			
			}	
			
			break;
 800879e:	e091      	b.n	80088c4 <LCD_Send_String+0x1f0>
		
		case STR_SLIDE:
		
		  for(int a = 0; a < BFR_MAX; a++)
 80087a0:	2300      	movs	r3, #0
 80087a2:	623b      	str	r3, [r7, #32]
 80087a4:	e009      	b.n	80087ba <LCD_Send_String+0xe6>
		  buffer[a]=str++;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	1c5a      	adds	r2, r3, #1
 80087aa:	607a      	str	r2, [r7, #4]
 80087ac:	69ba      	ldr	r2, [r7, #24]
 80087ae:	6a39      	ldr	r1, [r7, #32]
 80087b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		  for(int a = 0; a < BFR_MAX; a++)
 80087b4:	6a3b      	ldr	r3, [r7, #32]
 80087b6:	3301      	adds	r3, #1
 80087b8:	623b      	str	r3, [r7, #32]
 80087ba:	2364      	movs	r3, #100	; 0x64
 80087bc:	461a      	mov	r2, r3
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	4293      	cmp	r3, r2
 80087c2:	dbf0      	blt.n	80087a6 <LCD_Send_String+0xd2>
						
			ch_len = strlen(*buffer);
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7f7 fd21 	bl	8000210 <strlen>
 80087ce:	4603      	mov	r3, r0
 80087d0:	75fb      	strb	r3, [r7, #23]
				 		
			LCD_SetCursor(line_pos, i[line_pos - 1]);	
 80087d2:	4b40      	ldr	r3, [pc, #256]	; (80088d4 <LCD_Send_String+0x200>)
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	461a      	mov	r2, r3
 80087d8:	4b3e      	ldr	r3, [pc, #248]	; (80088d4 <LCD_Send_String+0x200>)
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	3b01      	subs	r3, #1
 80087de:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80087e2:	440b      	add	r3, r1
 80087e4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80087e8:	4619      	mov	r1, r3
 80087ea:	4610      	mov	r0, r2
 80087ec:	f7ff ff42 	bl	8008674 <LCD_SetCursor>
				  			
			for(int k = c[line_pos - 1];k < ch_len; k++) 
 80087f0:	4b38      	ldr	r3, [pc, #224]	; (80088d4 <LCD_Send_String+0x200>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	3b01      	subs	r3, #1
 80087f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80087fa:	4413      	add	r3, r2
 80087fc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8008800:	627b      	str	r3, [r7, #36]	; 0x24
 8008802:	e00a      	b.n	800881a <LCD_Send_String+0x146>
			LCD_Write_Data (*buffer[k]);
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	4618      	mov	r0, r3
 8008810:	f7ff feba 	bl	8008588 <LCD_Write_Data>
			for(int k = c[line_pos - 1];k < ch_len; k++) 
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008816:	3301      	adds	r3, #1
 8008818:	627b      	str	r3, [r7, #36]	; 0x24
 800881a:	7dfb      	ldrb	r3, [r7, #23]
 800881c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800881e:	429a      	cmp	r2, r3
 8008820:	dbf0      	blt.n	8008804 <LCD_Send_String+0x130>
								
			i[line_pos - 1]--;
 8008822:	4b2c      	ldr	r3, [pc, #176]	; (80088d4 <LCD_Send_String+0x200>)
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	3b01      	subs	r3, #1
 8008828:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800882c:	441a      	add	r2, r3
 800882e:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8008832:	3a01      	subs	r2, #1
 8008834:	b2d2      	uxtb	r2, r2
 8008836:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800883a:	440b      	add	r3, r1
 800883c:	f803 2c18 	strb.w	r2, [r3, #-24]
      
			if(i[line_pos -1] == 0)
 8008840:	4b24      	ldr	r3, [pc, #144]	; (80088d4 <LCD_Send_String+0x200>)
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	3b01      	subs	r3, #1
 8008846:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800884a:	4413      	add	r3, r2
 800884c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d136      	bne.n	80088c2 <LCD_Send_String+0x1ee>
			{
				i[line_pos - 1] = 1;
 8008854:	4b1f      	ldr	r3, [pc, #124]	; (80088d4 <LCD_Send_String+0x200>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	3b01      	subs	r3, #1
 800885a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800885e:	4413      	add	r3, r2
 8008860:	2201      	movs	r2, #1
 8008862:	f803 2c18 	strb.w	r2, [r3, #-24]
				c[line_pos - 1]++;
 8008866:	4b1b      	ldr	r3, [pc, #108]	; (80088d4 <LCD_Send_String+0x200>)
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	3b01      	subs	r3, #1
 800886c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008870:	441a      	add	r2, r3
 8008872:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8008876:	3201      	adds	r2, #1
 8008878:	b2d2      	uxtb	r2, r2
 800887a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800887e:	440b      	add	r3, r1
 8008880:	f803 2c1c 	strb.w	r2, [r3, #-28]
        if(c[line_pos - 1] == ch_len)
 8008884:	4b13      	ldr	r3, [pc, #76]	; (80088d4 <LCD_Send_String+0x200>)
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	3b01      	subs	r3, #1
 800888a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800888e:	4413      	add	r3, r2
 8008890:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8008894:	7dfa      	ldrb	r2, [r7, #23]
 8008896:	429a      	cmp	r2, r3
 8008898:	d113      	bne.n	80088c2 <LCD_Send_String+0x1ee>
					{					
						i[line_pos - 1] = chr_MAX;
 800889a:	4b0e      	ldr	r3, [pc, #56]	; (80088d4 <LCD_Send_String+0x200>)
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	3b01      	subs	r3, #1
 80088a0:	2210      	movs	r2, #16
 80088a2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80088a6:	440b      	add	r3, r1
 80088a8:	f803 2c18 	strb.w	r2, [r3, #-24]
						c[line_pos - 1] = 0;
 80088ac:	4b09      	ldr	r3, [pc, #36]	; (80088d4 <LCD_Send_String+0x200>)
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	3b01      	subs	r3, #1
 80088b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80088b6:	4413      	add	r3, r2
 80088b8:	2200      	movs	r2, #0
 80088ba:	f803 2c1c 	strb.w	r2, [r3, #-28]
						ch_len = 0;						
 80088be:	2300      	movs	r3, #0
 80088c0:	75fb      	strb	r3, [r7, #23]
					}												
			}
		 			
			break;	 
 80088c2:	bf00      	nop
 80088c4:	46ad      	mov	sp, r5
	}	
}
 80088c6:	bf00      	nop
 80088c8:	3728      	adds	r7, #40	; 0x28
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bdb0      	pop	{r4, r5, r7, pc}
 80088ce:	bf00      	nop
 80088d0:	200049bf 	.word	0x200049bf
 80088d4:	20000013 	.word	0x20000013

080088d8 <LCD_BackLight>:
*@brief: Backlight control
*@param: light_state: BL on/off
*@retval: none
*/
void LCD_BackLight(uint8_t light_state)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	4603      	mov	r3, r0
 80088e0:	71fb      	strb	r3, [r7, #7]
	if(light_state == LCD_BL_ON)
 80088e2:	79fb      	ldrb	r3, [r7, #7]
 80088e4:	2b08      	cmp	r3, #8
 80088e6:	d106      	bne.n	80088f6 <LCD_BackLight+0x1e>
	{
    data_BL = LCD_BL_ON;		
 80088e8:	4b09      	ldr	r3, [pc, #36]	; (8008910 <LCD_BackLight+0x38>)
 80088ea:	2208      	movs	r2, #8
 80088ec:	701a      	strb	r2, [r3, #0]
		LCD_Write_Data(0x20); //Empty character
 80088ee:	2020      	movs	r0, #32
 80088f0:	f7ff fe4a 	bl	8008588 <LCD_Write_Data>
	else if (light_state == LCD_BL_OFF)
	{
		data_BL = LCD_BL_OFF;
		LCD_Write_Data(0x20);
	}
}
 80088f4:	e008      	b.n	8008908 <LCD_BackLight+0x30>
	else if (light_state == LCD_BL_OFF)
 80088f6:	79fb      	ldrb	r3, [r7, #7]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d105      	bne.n	8008908 <LCD_BackLight+0x30>
		data_BL = LCD_BL_OFF;
 80088fc:	4b04      	ldr	r3, [pc, #16]	; (8008910 <LCD_BackLight+0x38>)
 80088fe:	2200      	movs	r2, #0
 8008900:	701a      	strb	r2, [r3, #0]
		LCD_Write_Data(0x20);
 8008902:	2020      	movs	r0, #32
 8008904:	f7ff fe40 	bl	8008588 <LCD_Write_Data>
}
 8008908:	bf00      	nop
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	200049be 	.word	0x200049be

08008914 <LCD_Init>:
/**
*@brief: Lcd initiliazing settings.
*@retval: none
*/
void LCD_Init(void)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	af00      	add	r7, sp, #0
	LCD_Set_Command(LCD_CLEAR_DISPLAY);
 8008918:	2001      	movs	r0, #1
 800891a:	f7ff fdd9 	bl	80084d0 <LCD_Set_Command>
	HAL_Delay(1000);
 800891e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008922:	f7f8 fbd5 	bl	80010d0 <HAL_Delay>
	LCD_Set_Command(LCD_RETURN_HOME);
 8008926:	2002      	movs	r0, #2
 8008928:	f7ff fdd2 	bl	80084d0 <LCD_Set_Command>
	HAL_Delay(5);
 800892c:	2005      	movs	r0, #5
 800892e:	f7f8 fbcf 	bl	80010d0 <HAL_Delay>
	LCD_Set_Command(LCD_FUNCTION_SET|MODE_4B|MODE_2L|MODE_5X8_DOTS);
 8008932:	2028      	movs	r0, #40	; 0x28
 8008934:	f7ff fdcc 	bl	80084d0 <LCD_Set_Command>
	HAL_Delay(5);
 8008938:	2005      	movs	r0, #5
 800893a:	f7f8 fbc9 	bl	80010d0 <HAL_Delay>
	LCD_Set_Command(LCD_DISPLAY_CONTROL|DISPLAY_ON|CURSOR_OFF|BLINK_OFF);
 800893e:	200c      	movs	r0, #12
 8008940:	f7ff fdc6 	bl	80084d0 <LCD_Set_Command>
	HAL_Delay(5);
 8008944:	2005      	movs	r0, #5
 8008946:	f7f8 fbc3 	bl	80010d0 <HAL_Delay>
	LCD_Set_Command(LCD_SET_DDRAMADDR);
 800894a:	2080      	movs	r0, #128	; 0x80
 800894c:	f7ff fdc0 	bl	80084d0 <LCD_Set_Command>
	HAL_Delay(500);
 8008950:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008954:	f7f8 fbbc 	bl	80010d0 <HAL_Delay>
}
 8008958:	bf00      	nop
 800895a:	bd80      	pop	{r7, pc}

0800895c <MDI_writeCommand>:
 * @brief Write command to Motor Driver
 * @param uartChannel -> get uart channel
 * @param cmd -> command to write
 * @return none
 */
static void MDI_writeCommand(UART_HandleTypeDef *uartChannel,uint8_t cmd){
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	460b      	mov	r3, r1
 8008966:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(uartChannel,(uint8_t*) &cmd,sizeof(cmd),TIMEOUTVAL);
 8008968:	1cf9      	adds	r1, r7, #3
 800896a:	2314      	movs	r3, #20
 800896c:	2201      	movs	r2, #1
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7fb fcae 	bl	80042d0 <HAL_UART_Transmit>
}
 8008974:	bf00      	nop
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <MDI_writeSmallData>:
 * @brief Write small data to Motor Driver
 * @param uartChannel -> get uart channel
 * @param data -> data to write
 * @return none
 */
static void MDI_writeSmallData(UART_HandleTypeDef *uartChannel,uint8_t data){
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	460b      	mov	r3, r1
 8008986:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(uartChannel,(uint8_t*)&data,sizeof(data),TIMEOUTVAL);
 8008988:	1cf9      	adds	r1, r7, #3
 800898a:	2314      	movs	r3, #20
 800898c:	2201      	movs	r2, #1
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7fb fc9e 	bl	80042d0 <HAL_UART_Transmit>
}
 8008994:	bf00      	nop
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <MDI_writeBigData>:
 * @param uartChannel -> get uart channel
 * @param buff -> get data array
 * @param buff_size -> get data array size
 * @return none
 */
static void MDI_writeBigData(UART_HandleTypeDef *uartChannel,uint8_t *buff, size_t buff_size){
 800899c:	b580      	push	{r7, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
	while (buff_size > 0) {
 80089a8:	e014      	b.n	80089d4 <MDI_writeBigData+0x38>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089b0:	4293      	cmp	r3, r2
 80089b2:	bf28      	it	cs
 80089b4:	4613      	movcs	r3, r2
 80089b6:	82fb      	strh	r3, [r7, #22]
		HAL_UART_Transmit(uartChannel, buff, chunk_size, TIMEOUTVAL);
 80089b8:	8afa      	ldrh	r2, [r7, #22]
 80089ba:	2314      	movs	r3, #20
 80089bc:	68b9      	ldr	r1, [r7, #8]
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f7fb fc86 	bl	80042d0 <HAL_UART_Transmit>
		buff += chunk_size;
 80089c4:	8afb      	ldrh	r3, [r7, #22]
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	4413      	add	r3, r2
 80089ca:	60bb      	str	r3, [r7, #8]
		buff_size -= chunk_size;
 80089cc:	8afb      	ldrh	r3, [r7, #22]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	607b      	str	r3, [r7, #4]
	while (buff_size > 0) {
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1e7      	bne.n	80089aa <MDI_writeBigData+0xe>
	}
}
 80089da:	bf00      	nop
 80089dc:	3718      	adds	r7, #24
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <MDI_2byteWriteData>:
 * @brief Write  2 byte data to Motor Driver
 * @param uartChannel -> get uart channel
 * @param data -> get 2 byte data
 * @return none
 */
void MDI_2byteWriteData(UART_HandleTypeDef *uartChannel,uint16_t data){
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	460b      	mov	r3, r1
 80089ec:	807b      	strh	r3, [r7, #2]
	uint8_t arrTmp[] = {data >> 8, data & 0xFF};
 80089ee:	887b      	ldrh	r3, [r7, #2]
 80089f0:	0a1b      	lsrs	r3, r3, #8
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	733b      	strb	r3, [r7, #12]
 80089f8:	887b      	ldrh	r3, [r7, #2]
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	737b      	strb	r3, [r7, #13]
	MDI_writeBigData(uartChannel,arrTmp,sizeof(arrTmp));
 80089fe:	f107 030c 	add.w	r3, r7, #12
 8008a02:	2202      	movs	r2, #2
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7ff ffc8 	bl	800899c <MDI_writeBigData>

}
 8008a0c:	bf00      	nop
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <MDI_sendDataChannel1>:
 * @param ki -> get Pid ki value
 * @param kp -> get Pid kp value
 * @param factor -> get factor of Pid elements
 * @return none
 */
void MDI_sendDataChannel1(uint16_t angleVal,uint8_t kd,uint8_t ki,uint8_t kp,uint8_t factor ){
 8008a14:	b590      	push	{r4, r7, lr}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	4608      	mov	r0, r1
 8008a1e:	4611      	mov	r1, r2
 8008a20:	461a      	mov	r2, r3
 8008a22:	4623      	mov	r3, r4
 8008a24:	80fb      	strh	r3, [r7, #6]
 8008a26:	4603      	mov	r3, r0
 8008a28:	717b      	strb	r3, [r7, #5]
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	713b      	strb	r3, [r7, #4]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	70fb      	strb	r3, [r7, #3]
	uint16_t checksumTmp=0;
 8008a32:	2300      	movs	r3, #0
 8008a34:	81fb      	strh	r3, [r7, #14]
	MDI_writeCommand(&MDI_channel1,0xFF);
 8008a36:	21ff      	movs	r1, #255	; 0xff
 8008a38:	482d      	ldr	r0, [pc, #180]	; (8008af0 <MDI_sendDataChannel1+0xdc>)
 8008a3a:	f7ff ff8f 	bl	800895c <MDI_writeCommand>
	MDI_writeCommand(&MDI_channel1,0xFF); //Data transmission started
 8008a3e:	21ff      	movs	r1, #255	; 0xff
 8008a40:	482b      	ldr	r0, [pc, #172]	; (8008af0 <MDI_sendDataChannel1+0xdc>)
 8008a42:	f7ff ff8b 	bl	800895c <MDI_writeCommand>
	MDI_2byteWriteData(&MDI_channel1,angleVal);
 8008a46:	88fb      	ldrh	r3, [r7, #6]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	4829      	ldr	r0, [pc, #164]	; (8008af0 <MDI_sendDataChannel1+0xdc>)
 8008a4c:	f7ff ffc9 	bl	80089e2 <MDI_2byteWriteData>
	uint8_t tmpArr[] ={angleVal >> 8, angleVal & 0xFF};
 8008a50:	88fb      	ldrh	r3, [r7, #6]
 8008a52:	0a1b      	lsrs	r3, r3, #8
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	723b      	strb	r3, [r7, #8]
 8008a5a:	88fb      	ldrh	r3, [r7, #6]
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	727b      	strb	r3, [r7, #9]
	checksumTmp+=tmpArr[0];
 8008a60:	7a3b      	ldrb	r3, [r7, #8]
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	89fb      	ldrh	r3, [r7, #14]
 8008a66:	4413      	add	r3, r2
 8008a68:	81fb      	strh	r3, [r7, #14]
	checksumTmp+=tmpArr[1]; //2 byte angle val sended
 8008a6a:	7a7b      	ldrb	r3, [r7, #9]
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	89fb      	ldrh	r3, [r7, #14]
 8008a70:	4413      	add	r3, r2
 8008a72:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel1,kd); checksumTmp+=kd; //writed kd
 8008a74:	797b      	ldrb	r3, [r7, #5]
 8008a76:	4619      	mov	r1, r3
 8008a78:	481d      	ldr	r0, [pc, #116]	; (8008af0 <MDI_sendDataChannel1+0xdc>)
 8008a7a:	f7ff ff7f 	bl	800897c <MDI_writeSmallData>
 8008a7e:	797b      	ldrb	r3, [r7, #5]
 8008a80:	b29a      	uxth	r2, r3
 8008a82:	89fb      	ldrh	r3, [r7, #14]
 8008a84:	4413      	add	r3, r2
 8008a86:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel1,ki); checksumTmp+=ki; //writed ki
 8008a88:	793b      	ldrb	r3, [r7, #4]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	4818      	ldr	r0, [pc, #96]	; (8008af0 <MDI_sendDataChannel1+0xdc>)
 8008a8e:	f7ff ff75 	bl	800897c <MDI_writeSmallData>
 8008a92:	793b      	ldrb	r3, [r7, #4]
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	89fb      	ldrh	r3, [r7, #14]
 8008a98:	4413      	add	r3, r2
 8008a9a:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel1,kp); checksumTmp+=kp; //writed kp
 8008a9c:	78fb      	ldrb	r3, [r7, #3]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	4813      	ldr	r0, [pc, #76]	; (8008af0 <MDI_sendDataChannel1+0xdc>)
 8008aa2:	f7ff ff6b 	bl	800897c <MDI_writeSmallData>
 8008aa6:	78fb      	ldrb	r3, [r7, #3]
 8008aa8:	b29a      	uxth	r2, r3
 8008aaa:	89fb      	ldrh	r3, [r7, #14]
 8008aac:	4413      	add	r3, r2
 8008aae:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel1,factor); checksumTmp+=factor; //writed factor
 8008ab0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	480e      	ldr	r0, [pc, #56]	; (8008af0 <MDI_sendDataChannel1+0xdc>)
 8008ab8:	f7ff ff60 	bl	800897c <MDI_writeSmallData>
 8008abc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	89fb      	ldrh	r3, [r7, #14]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	81fb      	strh	r3, [r7, #14]
	uint8_t tmp =checksumTmp%256;
 8008ac8:	89fb      	ldrh	r3, [r7, #14]
 8008aca:	737b      	strb	r3, [r7, #13]
	MDI_writeSmallData(&MDI_channel1,tmp); //checksum first byte
 8008acc:	7b7b      	ldrb	r3, [r7, #13]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	4807      	ldr	r0, [pc, #28]	; (8008af0 <MDI_sendDataChannel1+0xdc>)
 8008ad2:	f7ff ff53 	bl	800897c <MDI_writeSmallData>
	uint8_t tmpComp =~tmp;
 8008ad6:	7b7b      	ldrb	r3, [r7, #13]
 8008ad8:	43db      	mvns	r3, r3
 8008ada:	733b      	strb	r3, [r7, #12]
	MDI_writeSmallData(&MDI_channel1,tmpComp); //checksum second byte
 8008adc:	7b3b      	ldrb	r3, [r7, #12]
 8008ade:	4619      	mov	r1, r3
 8008ae0:	4803      	ldr	r0, [pc, #12]	; (8008af0 <MDI_sendDataChannel1+0xdc>)
 8008ae2:	f7ff ff4b 	bl	800897c <MDI_writeSmallData>
}
 8008ae6:	bf00      	nop
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd90      	pop	{r4, r7, pc}
 8008aee:	bf00      	nop
 8008af0:	20004b2c 	.word	0x20004b2c

08008af4 <MDI_getDataChannel1Ver2>:
//"DRV 1: angle: %d - kd: %d - ki: %d - kp: %d - factor: %d\n",driver1.angle,driver1.pid_kd,driver1.pid_ki,driver1.pid_kp,driver1.factor
/**
 * @brief get to Motor Driver 1 values
 * @return none
 */
void MDI_getDataChannel1Ver2(void){
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&MDI_channel1,(uint8_t*)rec1Buff,TIMEOUTVAL*10);
 8008afa:	22c8      	movs	r2, #200	; 0xc8
 8008afc:	492c      	ldr	r1, [pc, #176]	; (8008bb0 <MDI_getDataChannel1Ver2+0xbc>)
 8008afe:	482d      	ldr	r0, [pc, #180]	; (8008bb4 <MDI_getDataChannel1Ver2+0xc0>)
 8008b00:	f7fb fc78 	bl	80043f4 <HAL_UART_Receive_IT>
		if(0xFF==rec1Buff[0] && 0xFF==rec1Buff[1]){
 8008b04:	4b2a      	ldr	r3, [pc, #168]	; (8008bb0 <MDI_getDataChannel1Ver2+0xbc>)
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	2bff      	cmp	r3, #255	; 0xff
 8008b0a:	d140      	bne.n	8008b8e <MDI_getDataChannel1Ver2+0x9a>
 8008b0c:	4b28      	ldr	r3, [pc, #160]	; (8008bb0 <MDI_getDataChannel1Ver2+0xbc>)
 8008b0e:	785b      	ldrb	r3, [r3, #1]
 8008b10:	2bff      	cmp	r3, #255	; 0xff
 8008b12:	d13c      	bne.n	8008b8e <MDI_getDataChannel1Ver2+0x9a>
			uint16_t checksumTmp=0;
 8008b14:	2300      	movs	r3, #0
 8008b16:	80fb      	strh	r3, [r7, #6]
			for(uint8_t c=2;c<8;c++)checksumTmp+=rec1Buff[c];
 8008b18:	2302      	movs	r3, #2
 8008b1a:	717b      	strb	r3, [r7, #5]
 8008b1c:	e009      	b.n	8008b32 <MDI_getDataChannel1Ver2+0x3e>
 8008b1e:	797b      	ldrb	r3, [r7, #5]
 8008b20:	4a23      	ldr	r2, [pc, #140]	; (8008bb0 <MDI_getDataChannel1Ver2+0xbc>)
 8008b22:	5cd3      	ldrb	r3, [r2, r3]
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	88fb      	ldrh	r3, [r7, #6]
 8008b28:	4413      	add	r3, r2
 8008b2a:	80fb      	strh	r3, [r7, #6]
 8008b2c:	797b      	ldrb	r3, [r7, #5]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	717b      	strb	r3, [r7, #5]
 8008b32:	797b      	ldrb	r3, [r7, #5]
 8008b34:	2b07      	cmp	r3, #7
 8008b36:	d9f2      	bls.n	8008b1e <MDI_getDataChannel1Ver2+0x2a>
			uint8_t tmp =checksumTmp%256;
 8008b38:	88fb      	ldrh	r3, [r7, #6]
 8008b3a:	70fb      	strb	r3, [r7, #3]
			uint8_t tmpComp =~tmp;
 8008b3c:	78fb      	ldrb	r3, [r7, #3]
 8008b3e:	43db      	mvns	r3, r3
 8008b40:	70bb      	strb	r3, [r7, #2]
			if(tmp == rec1Buff[8] && tmpComp == rec1Buff[9]){
 8008b42:	4b1b      	ldr	r3, [pc, #108]	; (8008bb0 <MDI_getDataChannel1Ver2+0xbc>)
 8008b44:	7a1b      	ldrb	r3, [r3, #8]
 8008b46:	78fa      	ldrb	r2, [r7, #3]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d120      	bne.n	8008b8e <MDI_getDataChannel1Ver2+0x9a>
 8008b4c:	4b18      	ldr	r3, [pc, #96]	; (8008bb0 <MDI_getDataChannel1Ver2+0xbc>)
 8008b4e:	7a5b      	ldrb	r3, [r3, #9]
 8008b50:	78ba      	ldrb	r2, [r7, #2]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d11b      	bne.n	8008b8e <MDI_getDataChannel1Ver2+0x9a>
				driver1.angle=((uint16_t)rec1Buff[2] << 8) | rec1Buff[3];
 8008b56:	4b16      	ldr	r3, [pc, #88]	; (8008bb0 <MDI_getDataChannel1Ver2+0xbc>)
 8008b58:	789b      	ldrb	r3, [r3, #2]
 8008b5a:	021b      	lsls	r3, r3, #8
 8008b5c:	b21a      	sxth	r2, r3
 8008b5e:	4b14      	ldr	r3, [pc, #80]	; (8008bb0 <MDI_getDataChannel1Ver2+0xbc>)
 8008b60:	78db      	ldrb	r3, [r3, #3]
 8008b62:	b21b      	sxth	r3, r3
 8008b64:	4313      	orrs	r3, r2
 8008b66:	b21b      	sxth	r3, r3
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	4b13      	ldr	r3, [pc, #76]	; (8008bb8 <MDI_getDataChannel1Ver2+0xc4>)
 8008b6c:	809a      	strh	r2, [r3, #4]
				driver1.pid_kd=rec1Buff[4];
 8008b6e:	4b10      	ldr	r3, [pc, #64]	; (8008bb0 <MDI_getDataChannel1Ver2+0xbc>)
 8008b70:	791a      	ldrb	r2, [r3, #4]
 8008b72:	4b11      	ldr	r3, [pc, #68]	; (8008bb8 <MDI_getDataChannel1Ver2+0xc4>)
 8008b74:	701a      	strb	r2, [r3, #0]
				driver1.pid_ki=rec1Buff[5];
 8008b76:	4b0e      	ldr	r3, [pc, #56]	; (8008bb0 <MDI_getDataChannel1Ver2+0xbc>)
 8008b78:	795a      	ldrb	r2, [r3, #5]
 8008b7a:	4b0f      	ldr	r3, [pc, #60]	; (8008bb8 <MDI_getDataChannel1Ver2+0xc4>)
 8008b7c:	705a      	strb	r2, [r3, #1]
				driver1.pid_kp=rec1Buff[6];
 8008b7e:	4b0c      	ldr	r3, [pc, #48]	; (8008bb0 <MDI_getDataChannel1Ver2+0xbc>)
 8008b80:	799a      	ldrb	r2, [r3, #6]
 8008b82:	4b0d      	ldr	r3, [pc, #52]	; (8008bb8 <MDI_getDataChannel1Ver2+0xc4>)
 8008b84:	709a      	strb	r2, [r3, #2]
				driver1.factor=rec1Buff[7];
 8008b86:	4b0a      	ldr	r3, [pc, #40]	; (8008bb0 <MDI_getDataChannel1Ver2+0xbc>)
 8008b88:	79da      	ldrb	r2, [r3, #7]
 8008b8a:	4b0b      	ldr	r3, [pc, #44]	; (8008bb8 <MDI_getDataChannel1Ver2+0xc4>)
 8008b8c:	70da      	strb	r2, [r3, #3]
			}

		}
		for(uint8_t c=0;c<10;c++)rec1Buff[c]=0;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	713b      	strb	r3, [r7, #4]
 8008b92:	e006      	b.n	8008ba2 <MDI_getDataChannel1Ver2+0xae>
 8008b94:	793b      	ldrb	r3, [r7, #4]
 8008b96:	4a06      	ldr	r2, [pc, #24]	; (8008bb0 <MDI_getDataChannel1Ver2+0xbc>)
 8008b98:	2100      	movs	r1, #0
 8008b9a:	54d1      	strb	r1, [r2, r3]
 8008b9c:	793b      	ldrb	r3, [r7, #4]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	713b      	strb	r3, [r7, #4]
 8008ba2:	793b      	ldrb	r3, [r7, #4]
 8008ba4:	2b09      	cmp	r3, #9
 8008ba6:	d9f5      	bls.n	8008b94 <MDI_getDataChannel1Ver2+0xa0>
}//"%d - %d - %d - %d - %d - %d - %d - %d - %d\n",rec1Buff[0],rec1Buff[1],rec1Buff[2],rec1Buff[3],rec1Buff[4],rec1Buff[5],rec1Buff[6],rec1Buff[7],rec1Buff[8]
 8008ba8:	bf00      	nop
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	20004d00 	.word	0x20004d00
 8008bb4:	20004b2c 	.word	0x20004b2c
 8008bb8:	20004cec 	.word	0x20004cec

08008bbc <MDI_sendDataChannel2>:
 * @param ki -> get Pid ki value
 * @param kp -> get Pid kp value
 * @param factor -> get factor of Pid elements
 * @return none
 */
void MDI_sendDataChannel2(uint16_t angleVal,uint8_t kd,uint8_t ki,uint8_t kp,uint8_t factor ){
 8008bbc:	b590      	push	{r4, r7, lr}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	4608      	mov	r0, r1
 8008bc6:	4611      	mov	r1, r2
 8008bc8:	461a      	mov	r2, r3
 8008bca:	4623      	mov	r3, r4
 8008bcc:	80fb      	strh	r3, [r7, #6]
 8008bce:	4603      	mov	r3, r0
 8008bd0:	717b      	strb	r3, [r7, #5]
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	713b      	strb	r3, [r7, #4]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	70fb      	strb	r3, [r7, #3]
	uint16_t checksumTmp=0;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	81fb      	strh	r3, [r7, #14]
	MDI_writeCommand(&MDI_channel2,0xFF);
 8008bde:	21ff      	movs	r1, #255	; 0xff
 8008be0:	482d      	ldr	r0, [pc, #180]	; (8008c98 <MDI_sendDataChannel2+0xdc>)
 8008be2:	f7ff febb 	bl	800895c <MDI_writeCommand>
	MDI_writeCommand(&MDI_channel2,0xFF); //Data transmission started
 8008be6:	21ff      	movs	r1, #255	; 0xff
 8008be8:	482b      	ldr	r0, [pc, #172]	; (8008c98 <MDI_sendDataChannel2+0xdc>)
 8008bea:	f7ff feb7 	bl	800895c <MDI_writeCommand>
	MDI_2byteWriteData(&MDI_channel2,angleVal);
 8008bee:	88fb      	ldrh	r3, [r7, #6]
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4829      	ldr	r0, [pc, #164]	; (8008c98 <MDI_sendDataChannel2+0xdc>)
 8008bf4:	f7ff fef5 	bl	80089e2 <MDI_2byteWriteData>
	uint8_t tmpArr[] ={angleVal >> 8, angleVal & 0xFF};
 8008bf8:	88fb      	ldrh	r3, [r7, #6]
 8008bfa:	0a1b      	lsrs	r3, r3, #8
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	723b      	strb	r3, [r7, #8]
 8008c02:	88fb      	ldrh	r3, [r7, #6]
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	727b      	strb	r3, [r7, #9]
	checksumTmp+=tmpArr[0];
 8008c08:	7a3b      	ldrb	r3, [r7, #8]
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	89fb      	ldrh	r3, [r7, #14]
 8008c0e:	4413      	add	r3, r2
 8008c10:	81fb      	strh	r3, [r7, #14]
	checksumTmp+=tmpArr[1]; //2 byte angle val sended
 8008c12:	7a7b      	ldrb	r3, [r7, #9]
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	89fb      	ldrh	r3, [r7, #14]
 8008c18:	4413      	add	r3, r2
 8008c1a:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel2,kd); checksumTmp+=kd; //writed kd
 8008c1c:	797b      	ldrb	r3, [r7, #5]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	481d      	ldr	r0, [pc, #116]	; (8008c98 <MDI_sendDataChannel2+0xdc>)
 8008c22:	f7ff feab 	bl	800897c <MDI_writeSmallData>
 8008c26:	797b      	ldrb	r3, [r7, #5]
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	89fb      	ldrh	r3, [r7, #14]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel2,ki); checksumTmp+=ki; //writed ki
 8008c30:	793b      	ldrb	r3, [r7, #4]
 8008c32:	4619      	mov	r1, r3
 8008c34:	4818      	ldr	r0, [pc, #96]	; (8008c98 <MDI_sendDataChannel2+0xdc>)
 8008c36:	f7ff fea1 	bl	800897c <MDI_writeSmallData>
 8008c3a:	793b      	ldrb	r3, [r7, #4]
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	89fb      	ldrh	r3, [r7, #14]
 8008c40:	4413      	add	r3, r2
 8008c42:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel2,kp); checksumTmp+=kp; //writed kp
 8008c44:	78fb      	ldrb	r3, [r7, #3]
 8008c46:	4619      	mov	r1, r3
 8008c48:	4813      	ldr	r0, [pc, #76]	; (8008c98 <MDI_sendDataChannel2+0xdc>)
 8008c4a:	f7ff fe97 	bl	800897c <MDI_writeSmallData>
 8008c4e:	78fb      	ldrb	r3, [r7, #3]
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	89fb      	ldrh	r3, [r7, #14]
 8008c54:	4413      	add	r3, r2
 8008c56:	81fb      	strh	r3, [r7, #14]
	MDI_writeSmallData(&MDI_channel2,factor); checksumTmp+=factor; //writed factor
 8008c58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	480e      	ldr	r0, [pc, #56]	; (8008c98 <MDI_sendDataChannel2+0xdc>)
 8008c60:	f7ff fe8c 	bl	800897c <MDI_writeSmallData>
 8008c64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	89fb      	ldrh	r3, [r7, #14]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	81fb      	strh	r3, [r7, #14]
	uint8_t tmp =checksumTmp%256;
 8008c70:	89fb      	ldrh	r3, [r7, #14]
 8008c72:	737b      	strb	r3, [r7, #13]
	MDI_writeSmallData(&MDI_channel2,tmp); //checksum first byte
 8008c74:	7b7b      	ldrb	r3, [r7, #13]
 8008c76:	4619      	mov	r1, r3
 8008c78:	4807      	ldr	r0, [pc, #28]	; (8008c98 <MDI_sendDataChannel2+0xdc>)
 8008c7a:	f7ff fe7f 	bl	800897c <MDI_writeSmallData>
	uint8_t tmpComp =~tmp;
 8008c7e:	7b7b      	ldrb	r3, [r7, #13]
 8008c80:	43db      	mvns	r3, r3
 8008c82:	733b      	strb	r3, [r7, #12]
	MDI_writeSmallData(&MDI_channel2,tmpComp); //checksum second byte
 8008c84:	7b3b      	ldrb	r3, [r7, #12]
 8008c86:	4619      	mov	r1, r3
 8008c88:	4803      	ldr	r0, [pc, #12]	; (8008c98 <MDI_sendDataChannel2+0xdc>)
 8008c8a:	f7ff fe77 	bl	800897c <MDI_writeSmallData>
}
 8008c8e:	bf00      	nop
 8008c90:	3714      	adds	r7, #20
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd90      	pop	{r4, r7, pc}
 8008c96:	bf00      	nop
 8008c98:	200049d0 	.word	0x200049d0

08008c9c <MDI_getDataChannel2Ver2>:

/**
 * @brief get to Motor Driver 2 values
 * @return none
 */
void MDI_getDataChannel2Ver2(void){
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&MDI_channel2,(uint8_t*)rec2Buff,TIMEOUTVAL*10);
 8008ca2:	22c8      	movs	r2, #200	; 0xc8
 8008ca4:	492c      	ldr	r1, [pc, #176]	; (8008d58 <MDI_getDataChannel2Ver2+0xbc>)
 8008ca6:	482d      	ldr	r0, [pc, #180]	; (8008d5c <MDI_getDataChannel2Ver2+0xc0>)
 8008ca8:	f7fb fba4 	bl	80043f4 <HAL_UART_Receive_IT>
	if(0xFF==rec2Buff[0] && 0xFF==rec2Buff[1]){
 8008cac:	4b2a      	ldr	r3, [pc, #168]	; (8008d58 <MDI_getDataChannel2Ver2+0xbc>)
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	2bff      	cmp	r3, #255	; 0xff
 8008cb2:	d140      	bne.n	8008d36 <MDI_getDataChannel2Ver2+0x9a>
 8008cb4:	4b28      	ldr	r3, [pc, #160]	; (8008d58 <MDI_getDataChannel2Ver2+0xbc>)
 8008cb6:	785b      	ldrb	r3, [r3, #1]
 8008cb8:	2bff      	cmp	r3, #255	; 0xff
 8008cba:	d13c      	bne.n	8008d36 <MDI_getDataChannel2Ver2+0x9a>
		uint16_t checksumTmp=0;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	80fb      	strh	r3, [r7, #6]
		for(uint8_t c=2;c<8;c++)checksumTmp+=rec2Buff[c];
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	717b      	strb	r3, [r7, #5]
 8008cc4:	e009      	b.n	8008cda <MDI_getDataChannel2Ver2+0x3e>
 8008cc6:	797b      	ldrb	r3, [r7, #5]
 8008cc8:	4a23      	ldr	r2, [pc, #140]	; (8008d58 <MDI_getDataChannel2Ver2+0xbc>)
 8008cca:	5cd3      	ldrb	r3, [r2, r3]
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	88fb      	ldrh	r3, [r7, #6]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	80fb      	strh	r3, [r7, #6]
 8008cd4:	797b      	ldrb	r3, [r7, #5]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	717b      	strb	r3, [r7, #5]
 8008cda:	797b      	ldrb	r3, [r7, #5]
 8008cdc:	2b07      	cmp	r3, #7
 8008cde:	d9f2      	bls.n	8008cc6 <MDI_getDataChannel2Ver2+0x2a>
		uint8_t tmp =checksumTmp%256;
 8008ce0:	88fb      	ldrh	r3, [r7, #6]
 8008ce2:	70fb      	strb	r3, [r7, #3]
		uint8_t tmpComp =~tmp;
 8008ce4:	78fb      	ldrb	r3, [r7, #3]
 8008ce6:	43db      	mvns	r3, r3
 8008ce8:	70bb      	strb	r3, [r7, #2]
		if(tmp == rec2Buff[8] && tmpComp == rec2Buff[9]){
 8008cea:	4b1b      	ldr	r3, [pc, #108]	; (8008d58 <MDI_getDataChannel2Ver2+0xbc>)
 8008cec:	7a1b      	ldrb	r3, [r3, #8]
 8008cee:	78fa      	ldrb	r2, [r7, #3]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d120      	bne.n	8008d36 <MDI_getDataChannel2Ver2+0x9a>
 8008cf4:	4b18      	ldr	r3, [pc, #96]	; (8008d58 <MDI_getDataChannel2Ver2+0xbc>)
 8008cf6:	7a5b      	ldrb	r3, [r3, #9]
 8008cf8:	78ba      	ldrb	r2, [r7, #2]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d11b      	bne.n	8008d36 <MDI_getDataChannel2Ver2+0x9a>
			driver2.angle=((uint16_t)rec2Buff[2] << 8) | rec2Buff[3];
 8008cfe:	4b16      	ldr	r3, [pc, #88]	; (8008d58 <MDI_getDataChannel2Ver2+0xbc>)
 8008d00:	789b      	ldrb	r3, [r3, #2]
 8008d02:	021b      	lsls	r3, r3, #8
 8008d04:	b21a      	sxth	r2, r3
 8008d06:	4b14      	ldr	r3, [pc, #80]	; (8008d58 <MDI_getDataChannel2Ver2+0xbc>)
 8008d08:	78db      	ldrb	r3, [r3, #3]
 8008d0a:	b21b      	sxth	r3, r3
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	b21b      	sxth	r3, r3
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	4b13      	ldr	r3, [pc, #76]	; (8008d60 <MDI_getDataChannel2Ver2+0xc4>)
 8008d14:	809a      	strh	r2, [r3, #4]
			driver2.pid_kd=rec2Buff[4];
 8008d16:	4b10      	ldr	r3, [pc, #64]	; (8008d58 <MDI_getDataChannel2Ver2+0xbc>)
 8008d18:	791a      	ldrb	r2, [r3, #4]
 8008d1a:	4b11      	ldr	r3, [pc, #68]	; (8008d60 <MDI_getDataChannel2Ver2+0xc4>)
 8008d1c:	701a      	strb	r2, [r3, #0]
			driver2.pid_ki=rec2Buff[5];
 8008d1e:	4b0e      	ldr	r3, [pc, #56]	; (8008d58 <MDI_getDataChannel2Ver2+0xbc>)
 8008d20:	795a      	ldrb	r2, [r3, #5]
 8008d22:	4b0f      	ldr	r3, [pc, #60]	; (8008d60 <MDI_getDataChannel2Ver2+0xc4>)
 8008d24:	705a      	strb	r2, [r3, #1]
			driver2.pid_kp=rec2Buff[6];
 8008d26:	4b0c      	ldr	r3, [pc, #48]	; (8008d58 <MDI_getDataChannel2Ver2+0xbc>)
 8008d28:	799a      	ldrb	r2, [r3, #6]
 8008d2a:	4b0d      	ldr	r3, [pc, #52]	; (8008d60 <MDI_getDataChannel2Ver2+0xc4>)
 8008d2c:	709a      	strb	r2, [r3, #2]
			driver2.factor=rec2Buff[7];
 8008d2e:	4b0a      	ldr	r3, [pc, #40]	; (8008d58 <MDI_getDataChannel2Ver2+0xbc>)
 8008d30:	79da      	ldrb	r2, [r3, #7]
 8008d32:	4b0b      	ldr	r3, [pc, #44]	; (8008d60 <MDI_getDataChannel2Ver2+0xc4>)
 8008d34:	70da      	strb	r2, [r3, #3]
		}
	}
	for(uint8_t c=0;c<10;c++)rec2Buff[c]=0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	713b      	strb	r3, [r7, #4]
 8008d3a:	e006      	b.n	8008d4a <MDI_getDataChannel2Ver2+0xae>
 8008d3c:	793b      	ldrb	r3, [r7, #4]
 8008d3e:	4a06      	ldr	r2, [pc, #24]	; (8008d58 <MDI_getDataChannel2Ver2+0xbc>)
 8008d40:	2100      	movs	r1, #0
 8008d42:	54d1      	strb	r1, [r2, r3]
 8008d44:	793b      	ldrb	r3, [r7, #4]
 8008d46:	3301      	adds	r3, #1
 8008d48:	713b      	strb	r3, [r7, #4]
 8008d4a:	793b      	ldrb	r3, [r7, #4]
 8008d4c:	2b09      	cmp	r3, #9
 8008d4e:	d9f5      	bls.n	8008d3c <MDI_getDataChannel2Ver2+0xa0>
}//"DRV 2: angle: %d - kd: %d - ki: %d - kp: %d - factor: %d\n",driver2.angle,driver2.pid_kd,driver2.pid_ki,driver2.pid_kp,driver2.factor
 8008d50:	bf00      	nop
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	20004cf4 	.word	0x20004cf4
 8008d5c:	200049d0 	.word	0x200049d0
 8008d60:	20004ce4 	.word	0x20004ce4

08008d64 <getDriver1ReceiveVal>:
uint8_t getDriver2ki(void){ return driver2.pid_kd;}
uint8_t getDriver2kp(void){ return driver2.pid_ki;}
uint8_t getDriver2factor(void){ return driver2.pid_kp;}
uint16_t getDriver2angle(void){return  driver2.factor;}

mD_interface getDriver1ReceiveVal(void){return driver1;}
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a05      	ldr	r2, [pc, #20]	; (8008d84 <getDriver1ReceiveVal+0x20>)
 8008d70:	6811      	ldr	r1, [r2, #0]
 8008d72:	6019      	str	r1, [r3, #0]
 8008d74:	8892      	ldrh	r2, [r2, #4]
 8008d76:	809a      	strh	r2, [r3, #4]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr
 8008d84:	20004cec 	.word	0x20004cec

08008d88 <getDriver2ReceiveVal>:
mD_interface getDriver2ReceiveVal(void){return driver2;}
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a05      	ldr	r2, [pc, #20]	; (8008da8 <getDriver2ReceiveVal+0x20>)
 8008d94:	6811      	ldr	r1, [r2, #0]
 8008d96:	6019      	str	r1, [r3, #0]
 8008d98:	8892      	ldrh	r2, [r2, #4]
 8008d9a:	809a      	strh	r2, [r3, #4]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr
 8008da8:	20004ce4 	.word	0x20004ce4

08008dac <tasks_init>:


xSemaphoreHandle uart1SemphrHandle=NULL;
xSemaphoreHandle uart2SemphrHandle=NULL;

void tasks_init(void){
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af02      	add	r7, sp, #8
	 * @param usStackDepth-> stack size
	 * @param pvParameters-> function parameters
	 * @param uxPriority -> Priority
	 * @param pxCreatedTask -> handle so id
	 * */
	vSemaphoreCreateBinary(uart1SemphrHandle);
 8008db2:	2203      	movs	r2, #3
 8008db4:	2100      	movs	r1, #0
 8008db6:	2001      	movs	r0, #1
 8008db8:	f7fc fbc9 	bl	800554e <xQueueGenericCreate>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	4b3a      	ldr	r3, [pc, #232]	; (8008ea8 <tasks_init+0xfc>)
 8008dc0:	601a      	str	r2, [r3, #0]
 8008dc2:	4b39      	ldr	r3, [pc, #228]	; (8008ea8 <tasks_init+0xfc>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d006      	beq.n	8008dd8 <tasks_init+0x2c>
 8008dca:	4b37      	ldr	r3, [pc, #220]	; (8008ea8 <tasks_init+0xfc>)
 8008dcc:	6818      	ldr	r0, [r3, #0]
 8008dce:	2300      	movs	r3, #0
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	f7fc fc20 	bl	8005618 <xQueueGenericSend>
	vSemaphoreCreateBinary(uart2SemphrHandle);
 8008dd8:	2203      	movs	r2, #3
 8008dda:	2100      	movs	r1, #0
 8008ddc:	2001      	movs	r0, #1
 8008dde:	f7fc fbb6 	bl	800554e <xQueueGenericCreate>
 8008de2:	4602      	mov	r2, r0
 8008de4:	4b31      	ldr	r3, [pc, #196]	; (8008eac <tasks_init+0x100>)
 8008de6:	601a      	str	r2, [r3, #0]
 8008de8:	4b30      	ldr	r3, [pc, #192]	; (8008eac <tasks_init+0x100>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d006      	beq.n	8008dfe <tasks_init+0x52>
 8008df0:	4b2e      	ldr	r3, [pc, #184]	; (8008eac <tasks_init+0x100>)
 8008df2:	6818      	ldr	r0, [r3, #0]
 8008df4:	2300      	movs	r3, #0
 8008df6:	2200      	movs	r2, #0
 8008df8:	2100      	movs	r1, #0
 8008dfa:	f7fc fc0d 	bl	8005618 <xQueueGenericSend>
	if(uart1SemphrHandle!=NULL && uart2SemphrHandle!=NULL){
 8008dfe:	4b2a      	ldr	r3, [pc, #168]	; (8008ea8 <tasks_init+0xfc>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d04d      	beq.n	8008ea2 <tasks_init+0xf6>
 8008e06:	4b29      	ldr	r3, [pc, #164]	; (8008eac <tasks_init+0x100>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d049      	beq.n	8008ea2 <tasks_init+0xf6>
		xTaskCreate(sendDataUart1Task, "send Uart 1", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 8008e0e:	2300      	movs	r3, #0
 8008e10:	9301      	str	r3, [sp, #4]
 8008e12:	2337      	movs	r3, #55	; 0x37
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	2300      	movs	r3, #0
 8008e18:	2280      	movs	r2, #128	; 0x80
 8008e1a:	4925      	ldr	r1, [pc, #148]	; (8008eb0 <tasks_init+0x104>)
 8008e1c:	4825      	ldr	r0, [pc, #148]	; (8008eb4 <tasks_init+0x108>)
 8008e1e:	f7fd f847 	bl	8005eb0 <xTaskCreate>
		xTaskCreate(sendDataUart2Task, "send Uart 2", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 8008e22:	2300      	movs	r3, #0
 8008e24:	9301      	str	r3, [sp, #4]
 8008e26:	2337      	movs	r3, #55	; 0x37
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	2280      	movs	r2, #128	; 0x80
 8008e2e:	4922      	ldr	r1, [pc, #136]	; (8008eb8 <tasks_init+0x10c>)
 8008e30:	4822      	ldr	r0, [pc, #136]	; (8008ebc <tasks_init+0x110>)
 8008e32:	f7fd f83d 	bl	8005eb0 <xTaskCreate>
		xTaskCreate(getDataUart1Task, "get Uart 1", configMINIMAL_STACK_SIZE, NULL,  55, NULL);
 8008e36:	2300      	movs	r3, #0
 8008e38:	9301      	str	r3, [sp, #4]
 8008e3a:	2337      	movs	r3, #55	; 0x37
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	2280      	movs	r2, #128	; 0x80
 8008e42:	491f      	ldr	r1, [pc, #124]	; (8008ec0 <tasks_init+0x114>)
 8008e44:	481f      	ldr	r0, [pc, #124]	; (8008ec4 <tasks_init+0x118>)
 8008e46:	f7fd f833 	bl	8005eb0 <xTaskCreate>
		xTaskCreate(getDataUart2Task, "get Uart 2", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	9301      	str	r3, [sp, #4]
 8008e4e:	2337      	movs	r3, #55	; 0x37
 8008e50:	9300      	str	r3, [sp, #0]
 8008e52:	2300      	movs	r3, #0
 8008e54:	2280      	movs	r2, #128	; 0x80
 8008e56:	491c      	ldr	r1, [pc, #112]	; (8008ec8 <tasks_init+0x11c>)
 8008e58:	481c      	ldr	r0, [pc, #112]	; (8008ecc <tasks_init+0x120>)
 8008e5a:	f7fd f829 	bl	8005eb0 <xTaskCreate>
		xTaskCreate(adcReadTask, "adc read", configMINIMAL_STACK_SIZE, NULL,   55, NULL);
 8008e5e:	2300      	movs	r3, #0
 8008e60:	9301      	str	r3, [sp, #4]
 8008e62:	2337      	movs	r3, #55	; 0x37
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	2300      	movs	r3, #0
 8008e68:	2280      	movs	r2, #128	; 0x80
 8008e6a:	4919      	ldr	r1, [pc, #100]	; (8008ed0 <tasks_init+0x124>)
 8008e6c:	4819      	ldr	r0, [pc, #100]	; (8008ed4 <tasks_init+0x128>)
 8008e6e:	f7fd f81f 	bl	8005eb0 <xTaskCreate>
		xTaskCreate(lcdTask, "lcd controller", configMINIMAL_STACK_SIZE*2, NULL,  55 , NULL);
 8008e72:	2300      	movs	r3, #0
 8008e74:	9301      	str	r3, [sp, #4]
 8008e76:	2337      	movs	r3, #55	; 0x37
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e80:	4915      	ldr	r1, [pc, #84]	; (8008ed8 <tasks_init+0x12c>)
 8008e82:	4816      	ldr	r0, [pc, #88]	; (8008edc <tasks_init+0x130>)
 8008e84:	f7fd f814 	bl	8005eb0 <xTaskCreate>
		xTaskCreate(buttonControlTask, "button controller", configMINIMAL_STACK_SIZE*2, NULL,  55 , NULL);
 8008e88:	2300      	movs	r3, #0
 8008e8a:	9301      	str	r3, [sp, #4]
 8008e8c:	2337      	movs	r3, #55	; 0x37
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	2300      	movs	r3, #0
 8008e92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e96:	4912      	ldr	r1, [pc, #72]	; (8008ee0 <tasks_init+0x134>)
 8008e98:	4812      	ldr	r0, [pc, #72]	; (8008ee4 <tasks_init+0x138>)
 8008e9a:	f7fd f809 	bl	8005eb0 <xTaskCreate>


		vTaskStartScheduler();
 8008e9e:	f7fd f983 	bl	80061a8 <vTaskStartScheduler>
	}
}
 8008ea2:	bf00      	nop
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	200049c0 	.word	0x200049c0
 8008eac:	200049c4 	.word	0x200049c4
 8008eb0:	080098fc 	.word	0x080098fc
 8008eb4:	08008ee9 	.word	0x08008ee9
 8008eb8:	08009908 	.word	0x08009908
 8008ebc:	08008efd 	.word	0x08008efd
 8008ec0:	08009914 	.word	0x08009914
 8008ec4:	08008f11 	.word	0x08008f11
 8008ec8:	08009920 	.word	0x08009920
 8008ecc:	08008f25 	.word	0x08008f25
 8008ed0:	0800992c 	.word	0x0800992c
 8008ed4:	08008f39 	.word	0x08008f39
 8008ed8:	08009938 	.word	0x08009938
 8008edc:	08008fad 	.word	0x08008fad
 8008ee0:	08009948 	.word	0x08009948
 8008ee4:	08008fcf 	.word	0x08008fcf

08008ee8 <sendDataUart1Task>:


void sendDataUart1Task(void *params){
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
	while(1){
		transmissionDriver1();
 8008ef0:	f7ff f90c 	bl	800810c <transmissionDriver1>
		vTaskDelay(10);
 8008ef4:	200a      	movs	r0, #10
 8008ef6:	f7fd f921 	bl	800613c <vTaskDelay>
		transmissionDriver1();
 8008efa:	e7f9      	b.n	8008ef0 <sendDataUart1Task+0x8>

08008efc <sendDataUart2Task>:
	}
}
void sendDataUart2Task(void *params){
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
	while(1){
		transmissionDriver2();
 8008f04:	f7ff f91a 	bl	800813c <transmissionDriver2>
		vTaskDelay(10);
 8008f08:	200a      	movs	r0, #10
 8008f0a:	f7fd f917 	bl	800613c <vTaskDelay>
		transmissionDriver2();
 8008f0e:	e7f9      	b.n	8008f04 <sendDataUart2Task+0x8>

08008f10 <getDataUart1Task>:
	}
}
void getDataUart1Task(void *params){
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
	while(1){
		//MDI_getDataChannel1();
		MDI_getDataChannel1Ver2();
 8008f18:	f7ff fdec 	bl	8008af4 <MDI_getDataChannel1Ver2>
		vTaskDelay(10);
 8008f1c:	200a      	movs	r0, #10
 8008f1e:	f7fd f90d 	bl	800613c <vTaskDelay>
		MDI_getDataChannel1Ver2();
 8008f22:	e7f9      	b.n	8008f18 <getDataUart1Task+0x8>

08008f24 <getDataUart2Task>:

	}
}
void getDataUart2Task(void *params){
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
	while(1){
		//MDI_getDataChannel2();
		MDI_getDataChannel2Ver2();
 8008f2c:	f7ff feb6 	bl	8008c9c <MDI_getDataChannel2Ver2>
		vTaskDelay(10);
 8008f30:	200a      	movs	r0, #10
 8008f32:	f7fd f903 	bl	800613c <vTaskDelay>
		MDI_getDataChannel2Ver2();
 8008f36:	e7f9      	b.n	8008f2c <getDataUart2Task+0x8>

08008f38 <adcReadTask>:

	}
}
void adcReadTask(void *params){
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af02      	add	r7, sp, #8
 8008f3e:	6078      	str	r0, [r7, #4]

	uint16_t val1,val2;
	while(1){
		readAnalog2Values(&ADCREADCH1,&ADCREADCH2);
 8008f40:	4918      	ldr	r1, [pc, #96]	; (8008fa4 <adcReadTask+0x6c>)
 8008f42:	4819      	ldr	r0, [pc, #100]	; (8008fa8 <adcReadTask+0x70>)
 8008f44:	f7fe fdba 	bl	8007abc <readAnalog2Values>
			val1=valuesMap(getAnalogValue1(),0,4095,0,1000);
 8008f48:	f7fe fde8 	bl	8007b1c <getAnalogValue1>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	2300      	movs	r3, #0
 8008f58:	f640 72ff 	movw	r2, #4095	; 0xfff
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	f7fe fdf5 	bl	8007b4c <valuesMap>
 8008f62:	4603      	mov	r3, r0
 8008f64:	81fb      	strh	r3, [r7, #14]
			setDriver1AngleValue(val1);
 8008f66:	89fb      	ldrh	r3, [r7, #14]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fe fef1 	bl	8007d50 <setDriver1AngleValue>
			vTaskDelay(10);
 8008f6e:	200a      	movs	r0, #10
 8008f70:	f7fd f8e4 	bl	800613c <vTaskDelay>
			val2=valuesMap(getAnalogValue2(),0,4095,0,1000);
 8008f74:	f7fe fdde 	bl	8007b34 <getAnalogValue2>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008f80:	9300      	str	r3, [sp, #0]
 8008f82:	2300      	movs	r3, #0
 8008f84:	f640 72ff 	movw	r2, #4095	; 0xfff
 8008f88:	2100      	movs	r1, #0
 8008f8a:	f7fe fddf 	bl	8007b4c <valuesMap>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	81bb      	strh	r3, [r7, #12]
			setDriver2AngleValue(val2);
 8008f92:	89bb      	ldrh	r3, [r7, #12]
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fe feeb 	bl	8007d70 <setDriver2AngleValue>
			vTaskDelay(10);
 8008f9a:	200a      	movs	r0, #10
 8008f9c:	f7fd f8ce 	bl	800613c <vTaskDelay>
		readAnalog2Values(&ADCREADCH1,&ADCREADCH2);
 8008fa0:	e7ce      	b.n	8008f40 <adcReadTask+0x8>
 8008fa2:	bf00      	nop
 8008fa4:	20004ae4 	.word	0x20004ae4
 8008fa8:	20004a9c 	.word	0x20004a9c

08008fac <lcdTask>:
	}
}
void lcdTask(void *params){
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
	lcd_Init();
 8008fb4:	f7ff f916 	bl	80081e4 <lcd_Init>
	while(1){
	  	lcdController();
 8008fb8:	f7ff f9f8 	bl	80083ac <lcdController>
	  	vTaskDelay(200);
 8008fbc:	20c8      	movs	r0, #200	; 0xc8
 8008fbe:	f7fd f8bd 	bl	800613c <vTaskDelay>
	  	cleanTheLcd();
 8008fc2:	f7ff f9ed 	bl	80083a0 <cleanTheLcd>
	  	vTaskDelay(5);
 8008fc6:	2005      	movs	r0, #5
 8008fc8:	f7fd f8b8 	bl	800613c <vTaskDelay>
	  	lcdController();
 8008fcc:	e7f4      	b.n	8008fb8 <lcdTask+0xc>

08008fce <buttonControlTask>:
	}

}
void buttonControlTask(void *params){
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b082      	sub	sp, #8
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
	btnParameterInit();
 8008fd6:	f7fe fe8f 	bl	8007cf8 <btnParameterInit>
	while(1){
		buttonController();
 8008fda:	f7fe fed9 	bl	8007d90 <buttonController>
		vTaskDelay(50);
 8008fde:	2032      	movs	r0, #50	; 0x32
 8008fe0:	f7fd f8ac 	bl	800613c <vTaskDelay>
		buttonController();
 8008fe4:	e7f9      	b.n	8008fda <buttonControlTask+0xc>
	...

08008fe8 <__errno>:
 8008fe8:	4b01      	ldr	r3, [pc, #4]	; (8008ff0 <__errno+0x8>)
 8008fea:	6818      	ldr	r0, [r3, #0]
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	20000014 	.word	0x20000014

08008ff4 <__libc_init_array>:
 8008ff4:	b570      	push	{r4, r5, r6, lr}
 8008ff6:	4e0d      	ldr	r6, [pc, #52]	; (800902c <__libc_init_array+0x38>)
 8008ff8:	4c0d      	ldr	r4, [pc, #52]	; (8009030 <__libc_init_array+0x3c>)
 8008ffa:	1ba4      	subs	r4, r4, r6
 8008ffc:	10a4      	asrs	r4, r4, #2
 8008ffe:	2500      	movs	r5, #0
 8009000:	42a5      	cmp	r5, r4
 8009002:	d109      	bne.n	8009018 <__libc_init_array+0x24>
 8009004:	4e0b      	ldr	r6, [pc, #44]	; (8009034 <__libc_init_array+0x40>)
 8009006:	4c0c      	ldr	r4, [pc, #48]	; (8009038 <__libc_init_array+0x44>)
 8009008:	f000 fc28 	bl	800985c <_init>
 800900c:	1ba4      	subs	r4, r4, r6
 800900e:	10a4      	asrs	r4, r4, #2
 8009010:	2500      	movs	r5, #0
 8009012:	42a5      	cmp	r5, r4
 8009014:	d105      	bne.n	8009022 <__libc_init_array+0x2e>
 8009016:	bd70      	pop	{r4, r5, r6, pc}
 8009018:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800901c:	4798      	blx	r3
 800901e:	3501      	adds	r5, #1
 8009020:	e7ee      	b.n	8009000 <__libc_init_array+0xc>
 8009022:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009026:	4798      	blx	r3
 8009028:	3501      	adds	r5, #1
 800902a:	e7f2      	b.n	8009012 <__libc_init_array+0x1e>
 800902c:	080099d0 	.word	0x080099d0
 8009030:	080099d0 	.word	0x080099d0
 8009034:	080099d0 	.word	0x080099d0
 8009038:	080099d4 	.word	0x080099d4

0800903c <memcpy>:
 800903c:	b510      	push	{r4, lr}
 800903e:	1e43      	subs	r3, r0, #1
 8009040:	440a      	add	r2, r1
 8009042:	4291      	cmp	r1, r2
 8009044:	d100      	bne.n	8009048 <memcpy+0xc>
 8009046:	bd10      	pop	{r4, pc}
 8009048:	f811 4b01 	ldrb.w	r4, [r1], #1
 800904c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009050:	e7f7      	b.n	8009042 <memcpy+0x6>

08009052 <memset>:
 8009052:	4402      	add	r2, r0
 8009054:	4603      	mov	r3, r0
 8009056:	4293      	cmp	r3, r2
 8009058:	d100      	bne.n	800905c <memset+0xa>
 800905a:	4770      	bx	lr
 800905c:	f803 1b01 	strb.w	r1, [r3], #1
 8009060:	e7f9      	b.n	8009056 <memset+0x4>
	...

08009064 <siprintf>:
 8009064:	b40e      	push	{r1, r2, r3}
 8009066:	b500      	push	{lr}
 8009068:	b09c      	sub	sp, #112	; 0x70
 800906a:	ab1d      	add	r3, sp, #116	; 0x74
 800906c:	9002      	str	r0, [sp, #8]
 800906e:	9006      	str	r0, [sp, #24]
 8009070:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009074:	4809      	ldr	r0, [pc, #36]	; (800909c <siprintf+0x38>)
 8009076:	9107      	str	r1, [sp, #28]
 8009078:	9104      	str	r1, [sp, #16]
 800907a:	4909      	ldr	r1, [pc, #36]	; (80090a0 <siprintf+0x3c>)
 800907c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009080:	9105      	str	r1, [sp, #20]
 8009082:	6800      	ldr	r0, [r0, #0]
 8009084:	9301      	str	r3, [sp, #4]
 8009086:	a902      	add	r1, sp, #8
 8009088:	f000 f866 	bl	8009158 <_svfiprintf_r>
 800908c:	9b02      	ldr	r3, [sp, #8]
 800908e:	2200      	movs	r2, #0
 8009090:	701a      	strb	r2, [r3, #0]
 8009092:	b01c      	add	sp, #112	; 0x70
 8009094:	f85d eb04 	ldr.w	lr, [sp], #4
 8009098:	b003      	add	sp, #12
 800909a:	4770      	bx	lr
 800909c:	20000014 	.word	0x20000014
 80090a0:	ffff0208 	.word	0xffff0208

080090a4 <__ssputs_r>:
 80090a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090a8:	688e      	ldr	r6, [r1, #8]
 80090aa:	429e      	cmp	r6, r3
 80090ac:	4682      	mov	sl, r0
 80090ae:	460c      	mov	r4, r1
 80090b0:	4690      	mov	r8, r2
 80090b2:	4699      	mov	r9, r3
 80090b4:	d837      	bhi.n	8009126 <__ssputs_r+0x82>
 80090b6:	898a      	ldrh	r2, [r1, #12]
 80090b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090bc:	d031      	beq.n	8009122 <__ssputs_r+0x7e>
 80090be:	6825      	ldr	r5, [r4, #0]
 80090c0:	6909      	ldr	r1, [r1, #16]
 80090c2:	1a6f      	subs	r7, r5, r1
 80090c4:	6965      	ldr	r5, [r4, #20]
 80090c6:	2302      	movs	r3, #2
 80090c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090cc:	fb95 f5f3 	sdiv	r5, r5, r3
 80090d0:	f109 0301 	add.w	r3, r9, #1
 80090d4:	443b      	add	r3, r7
 80090d6:	429d      	cmp	r5, r3
 80090d8:	bf38      	it	cc
 80090da:	461d      	movcc	r5, r3
 80090dc:	0553      	lsls	r3, r2, #21
 80090de:	d530      	bpl.n	8009142 <__ssputs_r+0x9e>
 80090e0:	4629      	mov	r1, r5
 80090e2:	f000 fb21 	bl	8009728 <_malloc_r>
 80090e6:	4606      	mov	r6, r0
 80090e8:	b950      	cbnz	r0, 8009100 <__ssputs_r+0x5c>
 80090ea:	230c      	movs	r3, #12
 80090ec:	f8ca 3000 	str.w	r3, [sl]
 80090f0:	89a3      	ldrh	r3, [r4, #12]
 80090f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090f6:	81a3      	strh	r3, [r4, #12]
 80090f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009100:	463a      	mov	r2, r7
 8009102:	6921      	ldr	r1, [r4, #16]
 8009104:	f7ff ff9a 	bl	800903c <memcpy>
 8009108:	89a3      	ldrh	r3, [r4, #12]
 800910a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800910e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009112:	81a3      	strh	r3, [r4, #12]
 8009114:	6126      	str	r6, [r4, #16]
 8009116:	6165      	str	r5, [r4, #20]
 8009118:	443e      	add	r6, r7
 800911a:	1bed      	subs	r5, r5, r7
 800911c:	6026      	str	r6, [r4, #0]
 800911e:	60a5      	str	r5, [r4, #8]
 8009120:	464e      	mov	r6, r9
 8009122:	454e      	cmp	r6, r9
 8009124:	d900      	bls.n	8009128 <__ssputs_r+0x84>
 8009126:	464e      	mov	r6, r9
 8009128:	4632      	mov	r2, r6
 800912a:	4641      	mov	r1, r8
 800912c:	6820      	ldr	r0, [r4, #0]
 800912e:	f000 fa93 	bl	8009658 <memmove>
 8009132:	68a3      	ldr	r3, [r4, #8]
 8009134:	1b9b      	subs	r3, r3, r6
 8009136:	60a3      	str	r3, [r4, #8]
 8009138:	6823      	ldr	r3, [r4, #0]
 800913a:	441e      	add	r6, r3
 800913c:	6026      	str	r6, [r4, #0]
 800913e:	2000      	movs	r0, #0
 8009140:	e7dc      	b.n	80090fc <__ssputs_r+0x58>
 8009142:	462a      	mov	r2, r5
 8009144:	f000 fb4a 	bl	80097dc <_realloc_r>
 8009148:	4606      	mov	r6, r0
 800914a:	2800      	cmp	r0, #0
 800914c:	d1e2      	bne.n	8009114 <__ssputs_r+0x70>
 800914e:	6921      	ldr	r1, [r4, #16]
 8009150:	4650      	mov	r0, sl
 8009152:	f000 fa9b 	bl	800968c <_free_r>
 8009156:	e7c8      	b.n	80090ea <__ssputs_r+0x46>

08009158 <_svfiprintf_r>:
 8009158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800915c:	461d      	mov	r5, r3
 800915e:	898b      	ldrh	r3, [r1, #12]
 8009160:	061f      	lsls	r7, r3, #24
 8009162:	b09d      	sub	sp, #116	; 0x74
 8009164:	4680      	mov	r8, r0
 8009166:	460c      	mov	r4, r1
 8009168:	4616      	mov	r6, r2
 800916a:	d50f      	bpl.n	800918c <_svfiprintf_r+0x34>
 800916c:	690b      	ldr	r3, [r1, #16]
 800916e:	b96b      	cbnz	r3, 800918c <_svfiprintf_r+0x34>
 8009170:	2140      	movs	r1, #64	; 0x40
 8009172:	f000 fad9 	bl	8009728 <_malloc_r>
 8009176:	6020      	str	r0, [r4, #0]
 8009178:	6120      	str	r0, [r4, #16]
 800917a:	b928      	cbnz	r0, 8009188 <_svfiprintf_r+0x30>
 800917c:	230c      	movs	r3, #12
 800917e:	f8c8 3000 	str.w	r3, [r8]
 8009182:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009186:	e0c8      	b.n	800931a <_svfiprintf_r+0x1c2>
 8009188:	2340      	movs	r3, #64	; 0x40
 800918a:	6163      	str	r3, [r4, #20]
 800918c:	2300      	movs	r3, #0
 800918e:	9309      	str	r3, [sp, #36]	; 0x24
 8009190:	2320      	movs	r3, #32
 8009192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009196:	2330      	movs	r3, #48	; 0x30
 8009198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800919c:	9503      	str	r5, [sp, #12]
 800919e:	f04f 0b01 	mov.w	fp, #1
 80091a2:	4637      	mov	r7, r6
 80091a4:	463d      	mov	r5, r7
 80091a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80091aa:	b10b      	cbz	r3, 80091b0 <_svfiprintf_r+0x58>
 80091ac:	2b25      	cmp	r3, #37	; 0x25
 80091ae:	d13e      	bne.n	800922e <_svfiprintf_r+0xd6>
 80091b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80091b4:	d00b      	beq.n	80091ce <_svfiprintf_r+0x76>
 80091b6:	4653      	mov	r3, sl
 80091b8:	4632      	mov	r2, r6
 80091ba:	4621      	mov	r1, r4
 80091bc:	4640      	mov	r0, r8
 80091be:	f7ff ff71 	bl	80090a4 <__ssputs_r>
 80091c2:	3001      	adds	r0, #1
 80091c4:	f000 80a4 	beq.w	8009310 <_svfiprintf_r+0x1b8>
 80091c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ca:	4453      	add	r3, sl
 80091cc:	9309      	str	r3, [sp, #36]	; 0x24
 80091ce:	783b      	ldrb	r3, [r7, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f000 809d 	beq.w	8009310 <_svfiprintf_r+0x1b8>
 80091d6:	2300      	movs	r3, #0
 80091d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091e0:	9304      	str	r3, [sp, #16]
 80091e2:	9307      	str	r3, [sp, #28]
 80091e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091e8:	931a      	str	r3, [sp, #104]	; 0x68
 80091ea:	462f      	mov	r7, r5
 80091ec:	2205      	movs	r2, #5
 80091ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 80091f2:	4850      	ldr	r0, [pc, #320]	; (8009334 <_svfiprintf_r+0x1dc>)
 80091f4:	f7f7 f814 	bl	8000220 <memchr>
 80091f8:	9b04      	ldr	r3, [sp, #16]
 80091fa:	b9d0      	cbnz	r0, 8009232 <_svfiprintf_r+0xda>
 80091fc:	06d9      	lsls	r1, r3, #27
 80091fe:	bf44      	itt	mi
 8009200:	2220      	movmi	r2, #32
 8009202:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009206:	071a      	lsls	r2, r3, #28
 8009208:	bf44      	itt	mi
 800920a:	222b      	movmi	r2, #43	; 0x2b
 800920c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009210:	782a      	ldrb	r2, [r5, #0]
 8009212:	2a2a      	cmp	r2, #42	; 0x2a
 8009214:	d015      	beq.n	8009242 <_svfiprintf_r+0xea>
 8009216:	9a07      	ldr	r2, [sp, #28]
 8009218:	462f      	mov	r7, r5
 800921a:	2000      	movs	r0, #0
 800921c:	250a      	movs	r5, #10
 800921e:	4639      	mov	r1, r7
 8009220:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009224:	3b30      	subs	r3, #48	; 0x30
 8009226:	2b09      	cmp	r3, #9
 8009228:	d94d      	bls.n	80092c6 <_svfiprintf_r+0x16e>
 800922a:	b1b8      	cbz	r0, 800925c <_svfiprintf_r+0x104>
 800922c:	e00f      	b.n	800924e <_svfiprintf_r+0xf6>
 800922e:	462f      	mov	r7, r5
 8009230:	e7b8      	b.n	80091a4 <_svfiprintf_r+0x4c>
 8009232:	4a40      	ldr	r2, [pc, #256]	; (8009334 <_svfiprintf_r+0x1dc>)
 8009234:	1a80      	subs	r0, r0, r2
 8009236:	fa0b f000 	lsl.w	r0, fp, r0
 800923a:	4318      	orrs	r0, r3
 800923c:	9004      	str	r0, [sp, #16]
 800923e:	463d      	mov	r5, r7
 8009240:	e7d3      	b.n	80091ea <_svfiprintf_r+0x92>
 8009242:	9a03      	ldr	r2, [sp, #12]
 8009244:	1d11      	adds	r1, r2, #4
 8009246:	6812      	ldr	r2, [r2, #0]
 8009248:	9103      	str	r1, [sp, #12]
 800924a:	2a00      	cmp	r2, #0
 800924c:	db01      	blt.n	8009252 <_svfiprintf_r+0xfa>
 800924e:	9207      	str	r2, [sp, #28]
 8009250:	e004      	b.n	800925c <_svfiprintf_r+0x104>
 8009252:	4252      	negs	r2, r2
 8009254:	f043 0302 	orr.w	r3, r3, #2
 8009258:	9207      	str	r2, [sp, #28]
 800925a:	9304      	str	r3, [sp, #16]
 800925c:	783b      	ldrb	r3, [r7, #0]
 800925e:	2b2e      	cmp	r3, #46	; 0x2e
 8009260:	d10c      	bne.n	800927c <_svfiprintf_r+0x124>
 8009262:	787b      	ldrb	r3, [r7, #1]
 8009264:	2b2a      	cmp	r3, #42	; 0x2a
 8009266:	d133      	bne.n	80092d0 <_svfiprintf_r+0x178>
 8009268:	9b03      	ldr	r3, [sp, #12]
 800926a:	1d1a      	adds	r2, r3, #4
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	9203      	str	r2, [sp, #12]
 8009270:	2b00      	cmp	r3, #0
 8009272:	bfb8      	it	lt
 8009274:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009278:	3702      	adds	r7, #2
 800927a:	9305      	str	r3, [sp, #20]
 800927c:	4d2e      	ldr	r5, [pc, #184]	; (8009338 <_svfiprintf_r+0x1e0>)
 800927e:	7839      	ldrb	r1, [r7, #0]
 8009280:	2203      	movs	r2, #3
 8009282:	4628      	mov	r0, r5
 8009284:	f7f6 ffcc 	bl	8000220 <memchr>
 8009288:	b138      	cbz	r0, 800929a <_svfiprintf_r+0x142>
 800928a:	2340      	movs	r3, #64	; 0x40
 800928c:	1b40      	subs	r0, r0, r5
 800928e:	fa03 f000 	lsl.w	r0, r3, r0
 8009292:	9b04      	ldr	r3, [sp, #16]
 8009294:	4303      	orrs	r3, r0
 8009296:	3701      	adds	r7, #1
 8009298:	9304      	str	r3, [sp, #16]
 800929a:	7839      	ldrb	r1, [r7, #0]
 800929c:	4827      	ldr	r0, [pc, #156]	; (800933c <_svfiprintf_r+0x1e4>)
 800929e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092a2:	2206      	movs	r2, #6
 80092a4:	1c7e      	adds	r6, r7, #1
 80092a6:	f7f6 ffbb 	bl	8000220 <memchr>
 80092aa:	2800      	cmp	r0, #0
 80092ac:	d038      	beq.n	8009320 <_svfiprintf_r+0x1c8>
 80092ae:	4b24      	ldr	r3, [pc, #144]	; (8009340 <_svfiprintf_r+0x1e8>)
 80092b0:	bb13      	cbnz	r3, 80092f8 <_svfiprintf_r+0x1a0>
 80092b2:	9b03      	ldr	r3, [sp, #12]
 80092b4:	3307      	adds	r3, #7
 80092b6:	f023 0307 	bic.w	r3, r3, #7
 80092ba:	3308      	adds	r3, #8
 80092bc:	9303      	str	r3, [sp, #12]
 80092be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092c0:	444b      	add	r3, r9
 80092c2:	9309      	str	r3, [sp, #36]	; 0x24
 80092c4:	e76d      	b.n	80091a2 <_svfiprintf_r+0x4a>
 80092c6:	fb05 3202 	mla	r2, r5, r2, r3
 80092ca:	2001      	movs	r0, #1
 80092cc:	460f      	mov	r7, r1
 80092ce:	e7a6      	b.n	800921e <_svfiprintf_r+0xc6>
 80092d0:	2300      	movs	r3, #0
 80092d2:	3701      	adds	r7, #1
 80092d4:	9305      	str	r3, [sp, #20]
 80092d6:	4619      	mov	r1, r3
 80092d8:	250a      	movs	r5, #10
 80092da:	4638      	mov	r0, r7
 80092dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092e0:	3a30      	subs	r2, #48	; 0x30
 80092e2:	2a09      	cmp	r2, #9
 80092e4:	d903      	bls.n	80092ee <_svfiprintf_r+0x196>
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d0c8      	beq.n	800927c <_svfiprintf_r+0x124>
 80092ea:	9105      	str	r1, [sp, #20]
 80092ec:	e7c6      	b.n	800927c <_svfiprintf_r+0x124>
 80092ee:	fb05 2101 	mla	r1, r5, r1, r2
 80092f2:	2301      	movs	r3, #1
 80092f4:	4607      	mov	r7, r0
 80092f6:	e7f0      	b.n	80092da <_svfiprintf_r+0x182>
 80092f8:	ab03      	add	r3, sp, #12
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	4622      	mov	r2, r4
 80092fe:	4b11      	ldr	r3, [pc, #68]	; (8009344 <_svfiprintf_r+0x1ec>)
 8009300:	a904      	add	r1, sp, #16
 8009302:	4640      	mov	r0, r8
 8009304:	f3af 8000 	nop.w
 8009308:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800930c:	4681      	mov	r9, r0
 800930e:	d1d6      	bne.n	80092be <_svfiprintf_r+0x166>
 8009310:	89a3      	ldrh	r3, [r4, #12]
 8009312:	065b      	lsls	r3, r3, #25
 8009314:	f53f af35 	bmi.w	8009182 <_svfiprintf_r+0x2a>
 8009318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800931a:	b01d      	add	sp, #116	; 0x74
 800931c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009320:	ab03      	add	r3, sp, #12
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	4622      	mov	r2, r4
 8009326:	4b07      	ldr	r3, [pc, #28]	; (8009344 <_svfiprintf_r+0x1ec>)
 8009328:	a904      	add	r1, sp, #16
 800932a:	4640      	mov	r0, r8
 800932c:	f000 f882 	bl	8009434 <_printf_i>
 8009330:	e7ea      	b.n	8009308 <_svfiprintf_r+0x1b0>
 8009332:	bf00      	nop
 8009334:	08009994 	.word	0x08009994
 8009338:	0800999a 	.word	0x0800999a
 800933c:	0800999e 	.word	0x0800999e
 8009340:	00000000 	.word	0x00000000
 8009344:	080090a5 	.word	0x080090a5

08009348 <_printf_common>:
 8009348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800934c:	4691      	mov	r9, r2
 800934e:	461f      	mov	r7, r3
 8009350:	688a      	ldr	r2, [r1, #8]
 8009352:	690b      	ldr	r3, [r1, #16]
 8009354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009358:	4293      	cmp	r3, r2
 800935a:	bfb8      	it	lt
 800935c:	4613      	movlt	r3, r2
 800935e:	f8c9 3000 	str.w	r3, [r9]
 8009362:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009366:	4606      	mov	r6, r0
 8009368:	460c      	mov	r4, r1
 800936a:	b112      	cbz	r2, 8009372 <_printf_common+0x2a>
 800936c:	3301      	adds	r3, #1
 800936e:	f8c9 3000 	str.w	r3, [r9]
 8009372:	6823      	ldr	r3, [r4, #0]
 8009374:	0699      	lsls	r1, r3, #26
 8009376:	bf42      	ittt	mi
 8009378:	f8d9 3000 	ldrmi.w	r3, [r9]
 800937c:	3302      	addmi	r3, #2
 800937e:	f8c9 3000 	strmi.w	r3, [r9]
 8009382:	6825      	ldr	r5, [r4, #0]
 8009384:	f015 0506 	ands.w	r5, r5, #6
 8009388:	d107      	bne.n	800939a <_printf_common+0x52>
 800938a:	f104 0a19 	add.w	sl, r4, #25
 800938e:	68e3      	ldr	r3, [r4, #12]
 8009390:	f8d9 2000 	ldr.w	r2, [r9]
 8009394:	1a9b      	subs	r3, r3, r2
 8009396:	42ab      	cmp	r3, r5
 8009398:	dc28      	bgt.n	80093ec <_printf_common+0xa4>
 800939a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800939e:	6822      	ldr	r2, [r4, #0]
 80093a0:	3300      	adds	r3, #0
 80093a2:	bf18      	it	ne
 80093a4:	2301      	movne	r3, #1
 80093a6:	0692      	lsls	r2, r2, #26
 80093a8:	d42d      	bmi.n	8009406 <_printf_common+0xbe>
 80093aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093ae:	4639      	mov	r1, r7
 80093b0:	4630      	mov	r0, r6
 80093b2:	47c0      	blx	r8
 80093b4:	3001      	adds	r0, #1
 80093b6:	d020      	beq.n	80093fa <_printf_common+0xb2>
 80093b8:	6823      	ldr	r3, [r4, #0]
 80093ba:	68e5      	ldr	r5, [r4, #12]
 80093bc:	f8d9 2000 	ldr.w	r2, [r9]
 80093c0:	f003 0306 	and.w	r3, r3, #6
 80093c4:	2b04      	cmp	r3, #4
 80093c6:	bf08      	it	eq
 80093c8:	1aad      	subeq	r5, r5, r2
 80093ca:	68a3      	ldr	r3, [r4, #8]
 80093cc:	6922      	ldr	r2, [r4, #16]
 80093ce:	bf0c      	ite	eq
 80093d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093d4:	2500      	movne	r5, #0
 80093d6:	4293      	cmp	r3, r2
 80093d8:	bfc4      	itt	gt
 80093da:	1a9b      	subgt	r3, r3, r2
 80093dc:	18ed      	addgt	r5, r5, r3
 80093de:	f04f 0900 	mov.w	r9, #0
 80093e2:	341a      	adds	r4, #26
 80093e4:	454d      	cmp	r5, r9
 80093e6:	d11a      	bne.n	800941e <_printf_common+0xd6>
 80093e8:	2000      	movs	r0, #0
 80093ea:	e008      	b.n	80093fe <_printf_common+0xb6>
 80093ec:	2301      	movs	r3, #1
 80093ee:	4652      	mov	r2, sl
 80093f0:	4639      	mov	r1, r7
 80093f2:	4630      	mov	r0, r6
 80093f4:	47c0      	blx	r8
 80093f6:	3001      	adds	r0, #1
 80093f8:	d103      	bne.n	8009402 <_printf_common+0xba>
 80093fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009402:	3501      	adds	r5, #1
 8009404:	e7c3      	b.n	800938e <_printf_common+0x46>
 8009406:	18e1      	adds	r1, r4, r3
 8009408:	1c5a      	adds	r2, r3, #1
 800940a:	2030      	movs	r0, #48	; 0x30
 800940c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009410:	4422      	add	r2, r4
 8009412:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009416:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800941a:	3302      	adds	r3, #2
 800941c:	e7c5      	b.n	80093aa <_printf_common+0x62>
 800941e:	2301      	movs	r3, #1
 8009420:	4622      	mov	r2, r4
 8009422:	4639      	mov	r1, r7
 8009424:	4630      	mov	r0, r6
 8009426:	47c0      	blx	r8
 8009428:	3001      	adds	r0, #1
 800942a:	d0e6      	beq.n	80093fa <_printf_common+0xb2>
 800942c:	f109 0901 	add.w	r9, r9, #1
 8009430:	e7d8      	b.n	80093e4 <_printf_common+0x9c>
	...

08009434 <_printf_i>:
 8009434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009438:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800943c:	460c      	mov	r4, r1
 800943e:	7e09      	ldrb	r1, [r1, #24]
 8009440:	b085      	sub	sp, #20
 8009442:	296e      	cmp	r1, #110	; 0x6e
 8009444:	4617      	mov	r7, r2
 8009446:	4606      	mov	r6, r0
 8009448:	4698      	mov	r8, r3
 800944a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800944c:	f000 80b3 	beq.w	80095b6 <_printf_i+0x182>
 8009450:	d822      	bhi.n	8009498 <_printf_i+0x64>
 8009452:	2963      	cmp	r1, #99	; 0x63
 8009454:	d036      	beq.n	80094c4 <_printf_i+0x90>
 8009456:	d80a      	bhi.n	800946e <_printf_i+0x3a>
 8009458:	2900      	cmp	r1, #0
 800945a:	f000 80b9 	beq.w	80095d0 <_printf_i+0x19c>
 800945e:	2958      	cmp	r1, #88	; 0x58
 8009460:	f000 8083 	beq.w	800956a <_printf_i+0x136>
 8009464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009468:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800946c:	e032      	b.n	80094d4 <_printf_i+0xa0>
 800946e:	2964      	cmp	r1, #100	; 0x64
 8009470:	d001      	beq.n	8009476 <_printf_i+0x42>
 8009472:	2969      	cmp	r1, #105	; 0x69
 8009474:	d1f6      	bne.n	8009464 <_printf_i+0x30>
 8009476:	6820      	ldr	r0, [r4, #0]
 8009478:	6813      	ldr	r3, [r2, #0]
 800947a:	0605      	lsls	r5, r0, #24
 800947c:	f103 0104 	add.w	r1, r3, #4
 8009480:	d52a      	bpl.n	80094d8 <_printf_i+0xa4>
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6011      	str	r1, [r2, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	da03      	bge.n	8009492 <_printf_i+0x5e>
 800948a:	222d      	movs	r2, #45	; 0x2d
 800948c:	425b      	negs	r3, r3
 800948e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009492:	486f      	ldr	r0, [pc, #444]	; (8009650 <_printf_i+0x21c>)
 8009494:	220a      	movs	r2, #10
 8009496:	e039      	b.n	800950c <_printf_i+0xd8>
 8009498:	2973      	cmp	r1, #115	; 0x73
 800949a:	f000 809d 	beq.w	80095d8 <_printf_i+0x1a4>
 800949e:	d808      	bhi.n	80094b2 <_printf_i+0x7e>
 80094a0:	296f      	cmp	r1, #111	; 0x6f
 80094a2:	d020      	beq.n	80094e6 <_printf_i+0xb2>
 80094a4:	2970      	cmp	r1, #112	; 0x70
 80094a6:	d1dd      	bne.n	8009464 <_printf_i+0x30>
 80094a8:	6823      	ldr	r3, [r4, #0]
 80094aa:	f043 0320 	orr.w	r3, r3, #32
 80094ae:	6023      	str	r3, [r4, #0]
 80094b0:	e003      	b.n	80094ba <_printf_i+0x86>
 80094b2:	2975      	cmp	r1, #117	; 0x75
 80094b4:	d017      	beq.n	80094e6 <_printf_i+0xb2>
 80094b6:	2978      	cmp	r1, #120	; 0x78
 80094b8:	d1d4      	bne.n	8009464 <_printf_i+0x30>
 80094ba:	2378      	movs	r3, #120	; 0x78
 80094bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094c0:	4864      	ldr	r0, [pc, #400]	; (8009654 <_printf_i+0x220>)
 80094c2:	e055      	b.n	8009570 <_printf_i+0x13c>
 80094c4:	6813      	ldr	r3, [r2, #0]
 80094c6:	1d19      	adds	r1, r3, #4
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	6011      	str	r1, [r2, #0]
 80094cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094d4:	2301      	movs	r3, #1
 80094d6:	e08c      	b.n	80095f2 <_printf_i+0x1be>
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	6011      	str	r1, [r2, #0]
 80094dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80094e0:	bf18      	it	ne
 80094e2:	b21b      	sxthne	r3, r3
 80094e4:	e7cf      	b.n	8009486 <_printf_i+0x52>
 80094e6:	6813      	ldr	r3, [r2, #0]
 80094e8:	6825      	ldr	r5, [r4, #0]
 80094ea:	1d18      	adds	r0, r3, #4
 80094ec:	6010      	str	r0, [r2, #0]
 80094ee:	0628      	lsls	r0, r5, #24
 80094f0:	d501      	bpl.n	80094f6 <_printf_i+0xc2>
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	e002      	b.n	80094fc <_printf_i+0xc8>
 80094f6:	0668      	lsls	r0, r5, #25
 80094f8:	d5fb      	bpl.n	80094f2 <_printf_i+0xbe>
 80094fa:	881b      	ldrh	r3, [r3, #0]
 80094fc:	4854      	ldr	r0, [pc, #336]	; (8009650 <_printf_i+0x21c>)
 80094fe:	296f      	cmp	r1, #111	; 0x6f
 8009500:	bf14      	ite	ne
 8009502:	220a      	movne	r2, #10
 8009504:	2208      	moveq	r2, #8
 8009506:	2100      	movs	r1, #0
 8009508:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800950c:	6865      	ldr	r5, [r4, #4]
 800950e:	60a5      	str	r5, [r4, #8]
 8009510:	2d00      	cmp	r5, #0
 8009512:	f2c0 8095 	blt.w	8009640 <_printf_i+0x20c>
 8009516:	6821      	ldr	r1, [r4, #0]
 8009518:	f021 0104 	bic.w	r1, r1, #4
 800951c:	6021      	str	r1, [r4, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d13d      	bne.n	800959e <_printf_i+0x16a>
 8009522:	2d00      	cmp	r5, #0
 8009524:	f040 808e 	bne.w	8009644 <_printf_i+0x210>
 8009528:	4665      	mov	r5, ip
 800952a:	2a08      	cmp	r2, #8
 800952c:	d10b      	bne.n	8009546 <_printf_i+0x112>
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	07db      	lsls	r3, r3, #31
 8009532:	d508      	bpl.n	8009546 <_printf_i+0x112>
 8009534:	6923      	ldr	r3, [r4, #16]
 8009536:	6862      	ldr	r2, [r4, #4]
 8009538:	429a      	cmp	r2, r3
 800953a:	bfde      	ittt	le
 800953c:	2330      	movle	r3, #48	; 0x30
 800953e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009542:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009546:	ebac 0305 	sub.w	r3, ip, r5
 800954a:	6123      	str	r3, [r4, #16]
 800954c:	f8cd 8000 	str.w	r8, [sp]
 8009550:	463b      	mov	r3, r7
 8009552:	aa03      	add	r2, sp, #12
 8009554:	4621      	mov	r1, r4
 8009556:	4630      	mov	r0, r6
 8009558:	f7ff fef6 	bl	8009348 <_printf_common>
 800955c:	3001      	adds	r0, #1
 800955e:	d14d      	bne.n	80095fc <_printf_i+0x1c8>
 8009560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009564:	b005      	add	sp, #20
 8009566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800956a:	4839      	ldr	r0, [pc, #228]	; (8009650 <_printf_i+0x21c>)
 800956c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009570:	6813      	ldr	r3, [r2, #0]
 8009572:	6821      	ldr	r1, [r4, #0]
 8009574:	1d1d      	adds	r5, r3, #4
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6015      	str	r5, [r2, #0]
 800957a:	060a      	lsls	r2, r1, #24
 800957c:	d50b      	bpl.n	8009596 <_printf_i+0x162>
 800957e:	07ca      	lsls	r2, r1, #31
 8009580:	bf44      	itt	mi
 8009582:	f041 0120 	orrmi.w	r1, r1, #32
 8009586:	6021      	strmi	r1, [r4, #0]
 8009588:	b91b      	cbnz	r3, 8009592 <_printf_i+0x15e>
 800958a:	6822      	ldr	r2, [r4, #0]
 800958c:	f022 0220 	bic.w	r2, r2, #32
 8009590:	6022      	str	r2, [r4, #0]
 8009592:	2210      	movs	r2, #16
 8009594:	e7b7      	b.n	8009506 <_printf_i+0xd2>
 8009596:	064d      	lsls	r5, r1, #25
 8009598:	bf48      	it	mi
 800959a:	b29b      	uxthmi	r3, r3
 800959c:	e7ef      	b.n	800957e <_printf_i+0x14a>
 800959e:	4665      	mov	r5, ip
 80095a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80095a4:	fb02 3311 	mls	r3, r2, r1, r3
 80095a8:	5cc3      	ldrb	r3, [r0, r3]
 80095aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80095ae:	460b      	mov	r3, r1
 80095b0:	2900      	cmp	r1, #0
 80095b2:	d1f5      	bne.n	80095a0 <_printf_i+0x16c>
 80095b4:	e7b9      	b.n	800952a <_printf_i+0xf6>
 80095b6:	6813      	ldr	r3, [r2, #0]
 80095b8:	6825      	ldr	r5, [r4, #0]
 80095ba:	6961      	ldr	r1, [r4, #20]
 80095bc:	1d18      	adds	r0, r3, #4
 80095be:	6010      	str	r0, [r2, #0]
 80095c0:	0628      	lsls	r0, r5, #24
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	d501      	bpl.n	80095ca <_printf_i+0x196>
 80095c6:	6019      	str	r1, [r3, #0]
 80095c8:	e002      	b.n	80095d0 <_printf_i+0x19c>
 80095ca:	066a      	lsls	r2, r5, #25
 80095cc:	d5fb      	bpl.n	80095c6 <_printf_i+0x192>
 80095ce:	8019      	strh	r1, [r3, #0]
 80095d0:	2300      	movs	r3, #0
 80095d2:	6123      	str	r3, [r4, #16]
 80095d4:	4665      	mov	r5, ip
 80095d6:	e7b9      	b.n	800954c <_printf_i+0x118>
 80095d8:	6813      	ldr	r3, [r2, #0]
 80095da:	1d19      	adds	r1, r3, #4
 80095dc:	6011      	str	r1, [r2, #0]
 80095de:	681d      	ldr	r5, [r3, #0]
 80095e0:	6862      	ldr	r2, [r4, #4]
 80095e2:	2100      	movs	r1, #0
 80095e4:	4628      	mov	r0, r5
 80095e6:	f7f6 fe1b 	bl	8000220 <memchr>
 80095ea:	b108      	cbz	r0, 80095f0 <_printf_i+0x1bc>
 80095ec:	1b40      	subs	r0, r0, r5
 80095ee:	6060      	str	r0, [r4, #4]
 80095f0:	6863      	ldr	r3, [r4, #4]
 80095f2:	6123      	str	r3, [r4, #16]
 80095f4:	2300      	movs	r3, #0
 80095f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095fa:	e7a7      	b.n	800954c <_printf_i+0x118>
 80095fc:	6923      	ldr	r3, [r4, #16]
 80095fe:	462a      	mov	r2, r5
 8009600:	4639      	mov	r1, r7
 8009602:	4630      	mov	r0, r6
 8009604:	47c0      	blx	r8
 8009606:	3001      	adds	r0, #1
 8009608:	d0aa      	beq.n	8009560 <_printf_i+0x12c>
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	079b      	lsls	r3, r3, #30
 800960e:	d413      	bmi.n	8009638 <_printf_i+0x204>
 8009610:	68e0      	ldr	r0, [r4, #12]
 8009612:	9b03      	ldr	r3, [sp, #12]
 8009614:	4298      	cmp	r0, r3
 8009616:	bfb8      	it	lt
 8009618:	4618      	movlt	r0, r3
 800961a:	e7a3      	b.n	8009564 <_printf_i+0x130>
 800961c:	2301      	movs	r3, #1
 800961e:	464a      	mov	r2, r9
 8009620:	4639      	mov	r1, r7
 8009622:	4630      	mov	r0, r6
 8009624:	47c0      	blx	r8
 8009626:	3001      	adds	r0, #1
 8009628:	d09a      	beq.n	8009560 <_printf_i+0x12c>
 800962a:	3501      	adds	r5, #1
 800962c:	68e3      	ldr	r3, [r4, #12]
 800962e:	9a03      	ldr	r2, [sp, #12]
 8009630:	1a9b      	subs	r3, r3, r2
 8009632:	42ab      	cmp	r3, r5
 8009634:	dcf2      	bgt.n	800961c <_printf_i+0x1e8>
 8009636:	e7eb      	b.n	8009610 <_printf_i+0x1dc>
 8009638:	2500      	movs	r5, #0
 800963a:	f104 0919 	add.w	r9, r4, #25
 800963e:	e7f5      	b.n	800962c <_printf_i+0x1f8>
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1ac      	bne.n	800959e <_printf_i+0x16a>
 8009644:	7803      	ldrb	r3, [r0, #0]
 8009646:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800964a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800964e:	e76c      	b.n	800952a <_printf_i+0xf6>
 8009650:	080099a5 	.word	0x080099a5
 8009654:	080099b6 	.word	0x080099b6

08009658 <memmove>:
 8009658:	4288      	cmp	r0, r1
 800965a:	b510      	push	{r4, lr}
 800965c:	eb01 0302 	add.w	r3, r1, r2
 8009660:	d807      	bhi.n	8009672 <memmove+0x1a>
 8009662:	1e42      	subs	r2, r0, #1
 8009664:	4299      	cmp	r1, r3
 8009666:	d00a      	beq.n	800967e <memmove+0x26>
 8009668:	f811 4b01 	ldrb.w	r4, [r1], #1
 800966c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009670:	e7f8      	b.n	8009664 <memmove+0xc>
 8009672:	4283      	cmp	r3, r0
 8009674:	d9f5      	bls.n	8009662 <memmove+0xa>
 8009676:	1881      	adds	r1, r0, r2
 8009678:	1ad2      	subs	r2, r2, r3
 800967a:	42d3      	cmn	r3, r2
 800967c:	d100      	bne.n	8009680 <memmove+0x28>
 800967e:	bd10      	pop	{r4, pc}
 8009680:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009684:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009688:	e7f7      	b.n	800967a <memmove+0x22>
	...

0800968c <_free_r>:
 800968c:	b538      	push	{r3, r4, r5, lr}
 800968e:	4605      	mov	r5, r0
 8009690:	2900      	cmp	r1, #0
 8009692:	d045      	beq.n	8009720 <_free_r+0x94>
 8009694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009698:	1f0c      	subs	r4, r1, #4
 800969a:	2b00      	cmp	r3, #0
 800969c:	bfb8      	it	lt
 800969e:	18e4      	addlt	r4, r4, r3
 80096a0:	f000 f8d2 	bl	8009848 <__malloc_lock>
 80096a4:	4a1f      	ldr	r2, [pc, #124]	; (8009724 <_free_r+0x98>)
 80096a6:	6813      	ldr	r3, [r2, #0]
 80096a8:	4610      	mov	r0, r2
 80096aa:	b933      	cbnz	r3, 80096ba <_free_r+0x2e>
 80096ac:	6063      	str	r3, [r4, #4]
 80096ae:	6014      	str	r4, [r2, #0]
 80096b0:	4628      	mov	r0, r5
 80096b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096b6:	f000 b8c8 	b.w	800984a <__malloc_unlock>
 80096ba:	42a3      	cmp	r3, r4
 80096bc:	d90c      	bls.n	80096d8 <_free_r+0x4c>
 80096be:	6821      	ldr	r1, [r4, #0]
 80096c0:	1862      	adds	r2, r4, r1
 80096c2:	4293      	cmp	r3, r2
 80096c4:	bf04      	itt	eq
 80096c6:	681a      	ldreq	r2, [r3, #0]
 80096c8:	685b      	ldreq	r3, [r3, #4]
 80096ca:	6063      	str	r3, [r4, #4]
 80096cc:	bf04      	itt	eq
 80096ce:	1852      	addeq	r2, r2, r1
 80096d0:	6022      	streq	r2, [r4, #0]
 80096d2:	6004      	str	r4, [r0, #0]
 80096d4:	e7ec      	b.n	80096b0 <_free_r+0x24>
 80096d6:	4613      	mov	r3, r2
 80096d8:	685a      	ldr	r2, [r3, #4]
 80096da:	b10a      	cbz	r2, 80096e0 <_free_r+0x54>
 80096dc:	42a2      	cmp	r2, r4
 80096de:	d9fa      	bls.n	80096d6 <_free_r+0x4a>
 80096e0:	6819      	ldr	r1, [r3, #0]
 80096e2:	1858      	adds	r0, r3, r1
 80096e4:	42a0      	cmp	r0, r4
 80096e6:	d10b      	bne.n	8009700 <_free_r+0x74>
 80096e8:	6820      	ldr	r0, [r4, #0]
 80096ea:	4401      	add	r1, r0
 80096ec:	1858      	adds	r0, r3, r1
 80096ee:	4282      	cmp	r2, r0
 80096f0:	6019      	str	r1, [r3, #0]
 80096f2:	d1dd      	bne.n	80096b0 <_free_r+0x24>
 80096f4:	6810      	ldr	r0, [r2, #0]
 80096f6:	6852      	ldr	r2, [r2, #4]
 80096f8:	605a      	str	r2, [r3, #4]
 80096fa:	4401      	add	r1, r0
 80096fc:	6019      	str	r1, [r3, #0]
 80096fe:	e7d7      	b.n	80096b0 <_free_r+0x24>
 8009700:	d902      	bls.n	8009708 <_free_r+0x7c>
 8009702:	230c      	movs	r3, #12
 8009704:	602b      	str	r3, [r5, #0]
 8009706:	e7d3      	b.n	80096b0 <_free_r+0x24>
 8009708:	6820      	ldr	r0, [r4, #0]
 800970a:	1821      	adds	r1, r4, r0
 800970c:	428a      	cmp	r2, r1
 800970e:	bf04      	itt	eq
 8009710:	6811      	ldreq	r1, [r2, #0]
 8009712:	6852      	ldreq	r2, [r2, #4]
 8009714:	6062      	str	r2, [r4, #4]
 8009716:	bf04      	itt	eq
 8009718:	1809      	addeq	r1, r1, r0
 800971a:	6021      	streq	r1, [r4, #0]
 800971c:	605c      	str	r4, [r3, #4]
 800971e:	e7c7      	b.n	80096b0 <_free_r+0x24>
 8009720:	bd38      	pop	{r3, r4, r5, pc}
 8009722:	bf00      	nop
 8009724:	200049c8 	.word	0x200049c8

08009728 <_malloc_r>:
 8009728:	b570      	push	{r4, r5, r6, lr}
 800972a:	1ccd      	adds	r5, r1, #3
 800972c:	f025 0503 	bic.w	r5, r5, #3
 8009730:	3508      	adds	r5, #8
 8009732:	2d0c      	cmp	r5, #12
 8009734:	bf38      	it	cc
 8009736:	250c      	movcc	r5, #12
 8009738:	2d00      	cmp	r5, #0
 800973a:	4606      	mov	r6, r0
 800973c:	db01      	blt.n	8009742 <_malloc_r+0x1a>
 800973e:	42a9      	cmp	r1, r5
 8009740:	d903      	bls.n	800974a <_malloc_r+0x22>
 8009742:	230c      	movs	r3, #12
 8009744:	6033      	str	r3, [r6, #0]
 8009746:	2000      	movs	r0, #0
 8009748:	bd70      	pop	{r4, r5, r6, pc}
 800974a:	f000 f87d 	bl	8009848 <__malloc_lock>
 800974e:	4a21      	ldr	r2, [pc, #132]	; (80097d4 <_malloc_r+0xac>)
 8009750:	6814      	ldr	r4, [r2, #0]
 8009752:	4621      	mov	r1, r4
 8009754:	b991      	cbnz	r1, 800977c <_malloc_r+0x54>
 8009756:	4c20      	ldr	r4, [pc, #128]	; (80097d8 <_malloc_r+0xb0>)
 8009758:	6823      	ldr	r3, [r4, #0]
 800975a:	b91b      	cbnz	r3, 8009764 <_malloc_r+0x3c>
 800975c:	4630      	mov	r0, r6
 800975e:	f000 f863 	bl	8009828 <_sbrk_r>
 8009762:	6020      	str	r0, [r4, #0]
 8009764:	4629      	mov	r1, r5
 8009766:	4630      	mov	r0, r6
 8009768:	f000 f85e 	bl	8009828 <_sbrk_r>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	d124      	bne.n	80097ba <_malloc_r+0x92>
 8009770:	230c      	movs	r3, #12
 8009772:	6033      	str	r3, [r6, #0]
 8009774:	4630      	mov	r0, r6
 8009776:	f000 f868 	bl	800984a <__malloc_unlock>
 800977a:	e7e4      	b.n	8009746 <_malloc_r+0x1e>
 800977c:	680b      	ldr	r3, [r1, #0]
 800977e:	1b5b      	subs	r3, r3, r5
 8009780:	d418      	bmi.n	80097b4 <_malloc_r+0x8c>
 8009782:	2b0b      	cmp	r3, #11
 8009784:	d90f      	bls.n	80097a6 <_malloc_r+0x7e>
 8009786:	600b      	str	r3, [r1, #0]
 8009788:	50cd      	str	r5, [r1, r3]
 800978a:	18cc      	adds	r4, r1, r3
 800978c:	4630      	mov	r0, r6
 800978e:	f000 f85c 	bl	800984a <__malloc_unlock>
 8009792:	f104 000b 	add.w	r0, r4, #11
 8009796:	1d23      	adds	r3, r4, #4
 8009798:	f020 0007 	bic.w	r0, r0, #7
 800979c:	1ac3      	subs	r3, r0, r3
 800979e:	d0d3      	beq.n	8009748 <_malloc_r+0x20>
 80097a0:	425a      	negs	r2, r3
 80097a2:	50e2      	str	r2, [r4, r3]
 80097a4:	e7d0      	b.n	8009748 <_malloc_r+0x20>
 80097a6:	428c      	cmp	r4, r1
 80097a8:	684b      	ldr	r3, [r1, #4]
 80097aa:	bf16      	itet	ne
 80097ac:	6063      	strne	r3, [r4, #4]
 80097ae:	6013      	streq	r3, [r2, #0]
 80097b0:	460c      	movne	r4, r1
 80097b2:	e7eb      	b.n	800978c <_malloc_r+0x64>
 80097b4:	460c      	mov	r4, r1
 80097b6:	6849      	ldr	r1, [r1, #4]
 80097b8:	e7cc      	b.n	8009754 <_malloc_r+0x2c>
 80097ba:	1cc4      	adds	r4, r0, #3
 80097bc:	f024 0403 	bic.w	r4, r4, #3
 80097c0:	42a0      	cmp	r0, r4
 80097c2:	d005      	beq.n	80097d0 <_malloc_r+0xa8>
 80097c4:	1a21      	subs	r1, r4, r0
 80097c6:	4630      	mov	r0, r6
 80097c8:	f000 f82e 	bl	8009828 <_sbrk_r>
 80097cc:	3001      	adds	r0, #1
 80097ce:	d0cf      	beq.n	8009770 <_malloc_r+0x48>
 80097d0:	6025      	str	r5, [r4, #0]
 80097d2:	e7db      	b.n	800978c <_malloc_r+0x64>
 80097d4:	200049c8 	.word	0x200049c8
 80097d8:	200049cc 	.word	0x200049cc

080097dc <_realloc_r>:
 80097dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097de:	4607      	mov	r7, r0
 80097e0:	4614      	mov	r4, r2
 80097e2:	460e      	mov	r6, r1
 80097e4:	b921      	cbnz	r1, 80097f0 <_realloc_r+0x14>
 80097e6:	4611      	mov	r1, r2
 80097e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80097ec:	f7ff bf9c 	b.w	8009728 <_malloc_r>
 80097f0:	b922      	cbnz	r2, 80097fc <_realloc_r+0x20>
 80097f2:	f7ff ff4b 	bl	800968c <_free_r>
 80097f6:	4625      	mov	r5, r4
 80097f8:	4628      	mov	r0, r5
 80097fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097fc:	f000 f826 	bl	800984c <_malloc_usable_size_r>
 8009800:	42a0      	cmp	r0, r4
 8009802:	d20f      	bcs.n	8009824 <_realloc_r+0x48>
 8009804:	4621      	mov	r1, r4
 8009806:	4638      	mov	r0, r7
 8009808:	f7ff ff8e 	bl	8009728 <_malloc_r>
 800980c:	4605      	mov	r5, r0
 800980e:	2800      	cmp	r0, #0
 8009810:	d0f2      	beq.n	80097f8 <_realloc_r+0x1c>
 8009812:	4631      	mov	r1, r6
 8009814:	4622      	mov	r2, r4
 8009816:	f7ff fc11 	bl	800903c <memcpy>
 800981a:	4631      	mov	r1, r6
 800981c:	4638      	mov	r0, r7
 800981e:	f7ff ff35 	bl	800968c <_free_r>
 8009822:	e7e9      	b.n	80097f8 <_realloc_r+0x1c>
 8009824:	4635      	mov	r5, r6
 8009826:	e7e7      	b.n	80097f8 <_realloc_r+0x1c>

08009828 <_sbrk_r>:
 8009828:	b538      	push	{r3, r4, r5, lr}
 800982a:	4c06      	ldr	r4, [pc, #24]	; (8009844 <_sbrk_r+0x1c>)
 800982c:	2300      	movs	r3, #0
 800982e:	4605      	mov	r5, r0
 8009830:	4608      	mov	r0, r1
 8009832:	6023      	str	r3, [r4, #0]
 8009834:	f7f7 fbaa 	bl	8000f8c <_sbrk>
 8009838:	1c43      	adds	r3, r0, #1
 800983a:	d102      	bne.n	8009842 <_sbrk_r+0x1a>
 800983c:	6823      	ldr	r3, [r4, #0]
 800983e:	b103      	cbz	r3, 8009842 <_sbrk_r+0x1a>
 8009840:	602b      	str	r3, [r5, #0]
 8009842:	bd38      	pop	{r3, r4, r5, pc}
 8009844:	20004d0c 	.word	0x20004d0c

08009848 <__malloc_lock>:
 8009848:	4770      	bx	lr

0800984a <__malloc_unlock>:
 800984a:	4770      	bx	lr

0800984c <_malloc_usable_size_r>:
 800984c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009850:	1f18      	subs	r0, r3, #4
 8009852:	2b00      	cmp	r3, #0
 8009854:	bfbc      	itt	lt
 8009856:	580b      	ldrlt	r3, [r1, r0]
 8009858:	18c0      	addlt	r0, r0, r3
 800985a:	4770      	bx	lr

0800985c <_init>:
 800985c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985e:	bf00      	nop
 8009860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009862:	bc08      	pop	{r3}
 8009864:	469e      	mov	lr, r3
 8009866:	4770      	bx	lr

08009868 <_fini>:
 8009868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986a:	bf00      	nop
 800986c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800986e:	bc08      	pop	{r3}
 8009870:	469e      	mov	lr, r3
 8009872:	4770      	bx	lr
