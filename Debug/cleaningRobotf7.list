
cleaningRobotf7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000952c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  080096fc  080096fc  000196fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009850  08009850  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009850  08009850  00019850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009858  08009858  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009858  08009858  00019858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800985c  0800985c  0001985c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cd4  20000078  080098d8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d4c  080098d8  00024d4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023311  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000043c1  00000000  00000000  000433b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b28  00000000  00000000  00047780  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001938  00000000  00000000  000492a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000050b7  00000000  00000000  0004abe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017897  00000000  00000000  0004fc97  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fdb87  00000000  00000000  0006752e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001650b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073cc  00000000  00000000  00165130  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080096e4 	.word	0x080096e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	080096e4 	.word	0x080096e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fd5d 	bl	8001082 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f818 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 fa3c 	bl	8000a48 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005d0:	f000 f8a8 	bl	8000724 <MX_ADC1_Init>
  MX_TIM2_Init();
 80005d4:	f000 f98a 	bl	80008ec <MX_TIM2_Init>
  MX_ADC3_Init();
 80005d8:	f000 f8f6 	bl	80007c8 <MX_ADC3_Init>
  MX_UART7_Init();
 80005dc:	f000 f9d4 	bl	8000988 <MX_UART7_Init>
  MX_USART6_UART_Init();
 80005e0:	f000 fa02 	bl	80009e8 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 80005e4:	f000 f942 	bl	800086c <MX_I2C1_Init>
  tasks_init();
 80005e8:	f008 fb30 	bl	8008c4c <tasks_init>
  HAL_NVIC_DisableIRQ(UART7_IRQn);
 80005ec:	2052      	movs	r0, #82	; 0x52
 80005ee:	f001 faa9 	bl	8001b44 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(USART6_IRQn);
 80005f2:	2047      	movs	r0, #71	; 0x47
 80005f4:	f001 faa6 	bl	8001b44 <HAL_NVIC_DisableIRQ>
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <main+0x38>
	...

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b0b4      	sub	sp, #208	; 0xd0
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f008 fc65 	bl	8008eda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000620:	f107 0308 	add.w	r3, r7, #8
 8000624:	2284      	movs	r2, #132	; 0x84
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f008 fc56 	bl	8008eda <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	4b3b      	ldr	r3, [pc, #236]	; (800071c <SystemClock_Config+0x120>)
 8000630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000632:	4a3a      	ldr	r2, [pc, #232]	; (800071c <SystemClock_Config+0x120>)
 8000634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000638:	6413      	str	r3, [r2, #64]	; 0x40
 800063a:	4b38      	ldr	r3, [pc, #224]	; (800071c <SystemClock_Config+0x120>)
 800063c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000646:	4b36      	ldr	r3, [pc, #216]	; (8000720 <SystemClock_Config+0x124>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a35      	ldr	r2, [pc, #212]	; (8000720 <SystemClock_Config+0x124>)
 800064c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000650:	6013      	str	r3, [r2, #0]
 8000652:	4b33      	ldr	r3, [pc, #204]	; (8000720 <SystemClock_Config+0x124>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065e:	2301      	movs	r3, #1
 8000660:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000668:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000676:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800067a:	2319      	movs	r3, #25
 800067c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000680:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000684:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800068e:	2302      	movs	r3, #2
 8000690:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000698:	4618      	mov	r0, r3
 800069a:	f002 f92d 	bl	80028f8 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80006a4:	f000 fa58 	bl	8000b58 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006a8:	f002 f8d6 	bl	8002858 <HAL_PWREx_EnableOverDrive>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006b2:	f000 fa51 	bl	8000b58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2302      	movs	r3, #2
 80006be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006dc:	2107      	movs	r1, #7
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 fbae 	bl	8002e40 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80006ea:	f000 fa35 	bl	8000b58 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_UART7
 80006ee:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 80006f2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80006f4:	2300      	movs	r3, #0
 80006f6:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	4618      	mov	r0, r3
 8000706:	f002 fd9f 	bl	8003248 <HAL_RCCEx_PeriphCLKConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000710:	f000 fa22 	bl	8000b58 <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	37d0      	adds	r7, #208	; 0xd0
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072a:	463b      	mov	r3, r7
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000736:	4b21      	ldr	r3, [pc, #132]	; (80007bc <MX_ADC1_Init+0x98>)
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <MX_ADC1_Init+0x9c>)
 800073a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800073c:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MX_ADC1_Init+0x98>)
 800073e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000742:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_ADC1_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_ADC1_Init+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000750:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_ADC1_Init+0x98>)
 8000752:	2201      	movs	r2, #1
 8000754:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_ADC1_Init+0x98>)
 8000758:	2200      	movs	r2, #0
 800075a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_ADC1_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_ADC1_Init+0x98>)
 8000766:	4a17      	ldr	r2, [pc, #92]	; (80007c4 <MX_ADC1_Init+0xa0>)
 8000768:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_ADC1_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_ADC1_Init+0x98>)
 8000772:	2201      	movs	r2, #1
 8000774:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_ADC1_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_ADC1_Init+0x98>)
 8000780:	2201      	movs	r2, #1
 8000782:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000784:	480d      	ldr	r0, [pc, #52]	; (80007bc <MX_ADC1_Init+0x98>)
 8000786:	f000 fccb 	bl	8001120 <HAL_ADC_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000790:	f000 f9e2 	bl	8000b58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000794:	2300      	movs	r3, #0
 8000796:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000798:	2301      	movs	r3, #1
 800079a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800079c:	2305      	movs	r3, #5
 800079e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4619      	mov	r1, r3
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_ADC1_Init+0x98>)
 80007a6:	f000 fe85 	bl	80014b4 <HAL_ADC_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007b0:	f000 f9d2 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20004ac0 	.word	0x20004ac0
 80007c0:	40012000 	.word	0x40012000
 80007c4:	0f000001 	.word	0x0f000001

080007c8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ce:	463b      	mov	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <MX_ADC3_Init+0x98>)
 80007dc:	4a21      	ldr	r2, [pc, #132]	; (8000864 <MX_ADC3_Init+0x9c>)
 80007de:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_ADC3_Init+0x98>)
 80007e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007e6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007e8:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <MX_ADC3_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ee:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_ADC3_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_ADC3_Init+0x98>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_ADC3_Init+0x98>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_ADC3_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_ADC3_Init+0x98>)
 800080a:	4a17      	ldr	r2, [pc, #92]	; (8000868 <MX_ADC3_Init+0xa0>)
 800080c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_ADC3_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_ADC3_Init+0x98>)
 8000816:	2201      	movs	r2, #1
 8000818:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_ADC3_Init+0x98>)
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_ADC3_Init+0x98>)
 8000824:	2201      	movs	r2, #1
 8000826:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000828:	480d      	ldr	r0, [pc, #52]	; (8000860 <MX_ADC3_Init+0x98>)
 800082a:	f000 fc79 	bl	8001120 <HAL_ADC_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000834:	f000 f990 	bl	8000b58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000838:	2308      	movs	r3, #8
 800083a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800083c:	2301      	movs	r3, #1
 800083e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000840:	2305      	movs	r3, #5
 8000842:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000844:	463b      	mov	r3, r7
 8000846:	4619      	mov	r1, r3
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_ADC3_Init+0x98>)
 800084a:	f000 fe33 	bl	80014b4 <HAL_ADC_ConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000854:	f000 f980 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20004b08 	.word	0x20004b08
 8000864:	40012200 	.word	0x40012200
 8000868:	0f000001 	.word	0x0f000001

0800086c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000870:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <MX_I2C1_Init+0x74>)
 8000872:	4a1c      	ldr	r2, [pc, #112]	; (80008e4 <MX_I2C1_Init+0x78>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_I2C1_Init+0x74>)
 8000878:	4a1b      	ldr	r2, [pc, #108]	; (80008e8 <MX_I2C1_Init+0x7c>)
 800087a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800087c:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_I2C1_Init+0x74>)
 8000884:	2201      	movs	r2, #1
 8000886:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_I2C1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_I2C1_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_I2C1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_I2C1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a6:	480e      	ldr	r0, [pc, #56]	; (80008e0 <MX_I2C1_Init+0x74>)
 80008a8:	f001 fb3e 	bl	8001f28 <HAL_I2C_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008b2:	f000 f951 	bl	8000b58 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008b6:	2100      	movs	r1, #0
 80008b8:	4809      	ldr	r0, [pc, #36]	; (80008e0 <MX_I2C1_Init+0x74>)
 80008ba:	f001 ff35 	bl	8002728 <HAL_I2CEx_ConfigAnalogFilter>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008c4:	f000 f948 	bl	8000b58 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008c8:	2100      	movs	r1, #0
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_I2C1_Init+0x74>)
 80008cc:	f001 ff77 	bl	80027be <HAL_I2CEx_ConfigDigitalFilter>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008d6:	f000 f93f 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20004a74 	.word	0x20004a74
 80008e4:	40005400 	.word	0x40005400
 80008e8:	20404768 	.word	0x20404768

080008ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800090a:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <MX_TIM2_Init+0x98>)
 800090c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000910:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 53999;
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <MX_TIM2_Init+0x98>)
 8000914:	f24d 22ef 	movw	r2, #53999	; 0xd2ef
 8000918:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_TIM2_Init+0x98>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_TIM2_Init+0x98>)
 8000922:	2201      	movs	r2, #1
 8000924:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <MX_TIM2_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_TIM2_Init+0x98>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000932:	4814      	ldr	r0, [pc, #80]	; (8000984 <MX_TIM2_Init+0x98>)
 8000934:	f003 f876 	bl	8003a24 <HAL_TIM_Base_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800093e:	f000 f90b 	bl	8000b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000946:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	4619      	mov	r1, r3
 800094e:	480d      	ldr	r0, [pc, #52]	; (8000984 <MX_TIM2_Init+0x98>)
 8000950:	f003 f9de 	bl	8003d10 <HAL_TIM_ConfigClockSource>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800095a:	f000 f8fd 	bl	8000b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800095e:	2320      	movs	r3, #32
 8000960:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	4619      	mov	r1, r3
 800096a:	4806      	ldr	r0, [pc, #24]	; (8000984 <MX_TIM2_Init+0x98>)
 800096c:	f003 fbec 	bl	8004148 <HAL_TIMEx_MasterConfigSynchronization>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000976:	f000 f8ef 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	3720      	adds	r7, #32
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20004bd0 	.word	0x20004bd0

08000988 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_UART7_Init+0x58>)
 800098e:	4a15      	ldr	r2, [pc, #84]	; (80009e4 <MX_UART7_Init+0x5c>)
 8000990:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 57600;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_UART7_Init+0x58>)
 8000994:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000998:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_UART7_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_UART7_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_UART7_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_UART7_Init+0x58>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_UART7_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_UART7_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_UART7_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_UART7_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_UART7_Init+0x58>)
 80009cc:	f003 fc68 	bl	80042a0 <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_UART7_Init+0x52>
  {
    Error_Handler();
 80009d6:	f000 f8bf 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200049f4 	.word	0x200049f4
 80009e4:	40007800 	.word	0x40007800

080009e8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_USART6_UART_Init+0x58>)
 80009ee:	4a15      	ldr	r2, [pc, #84]	; (8000a44 <MX_USART6_UART_Init+0x5c>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57600;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <MX_USART6_UART_Init+0x58>)
 80009f4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80009f8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_USART6_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_USART6_UART_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_USART6_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_USART6_UART_Init+0x58>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_USART6_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_USART6_UART_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_USART6_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_USART6_UART_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_USART6_UART_Init+0x58>)
 8000a2c:	f003 fc38 	bl	80042a0 <HAL_UART_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000a36:	f000 f88f 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20004b50 	.word	0x20004b50
 8000a44:	40011400 	.word	0x40011400

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08c      	sub	sp, #48	; 0x30
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	4b32      	ldr	r3, [pc, #200]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a31      	ldr	r2, [pc, #196]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	61bb      	str	r3, [r7, #24]
 8000a74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	4b2c      	ldr	r3, [pc, #176]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a2b      	ldr	r2, [pc, #172]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b29      	ldr	r3, [pc, #164]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a8e:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a25      	ldr	r2, [pc, #148]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a1f      	ldr	r2, [pc, #124]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a19      	ldr	r2, [pc, #100]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad6:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000adc:	f043 0320 	orr.w	r3, r3, #32
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0320 	and.w	r3, r3, #32
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : select_Pin */
  GPIO_InitStruct.Pin = select_Pin;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(select_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	480a      	ldr	r0, [pc, #40]	; (8000b2c <MX_GPIO_Init+0xe4>)
 8000b02:	f001 f84f 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : plus_Pin minus_Pin */
  GPIO_InitStruct.Pin = plus_Pin|minus_Pin;
 8000b06:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_GPIO_Init+0xe8>)
 8000b1c:	f001 f842 	bl	8001ba4 <HAL_GPIO_Init>

}
 8000b20:	bf00      	nop
 8000b22:	3730      	adds	r7, #48	; 0x30
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40022000 	.word	0x40022000
 8000b30:	40020400 	.word	0x40020400

08000b34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d101      	bne.n	8000b4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b46:	f000 faa9 	bl	800109c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40010000 	.word	0x40010000

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <Error_Handler+0x6>

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a10      	ldr	r2, [pc, #64]	; (8000bac <HAL_MspInit+0x4c>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <HAL_MspInit+0x4c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <HAL_MspInit+0x4c>)
 8000b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_MspInit+0x4c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	210f      	movs	r1, #15
 8000b9a:	f06f 0001 	mvn.w	r0, #1
 8000b9e:	f000 ffa7 	bl	8001af0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800

08000bb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a2a      	ldr	r2, [pc, #168]	; (8000c78 <HAL_ADC_MspInit+0xc8>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d124      	bne.n	8000c1c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bd2:	4b2a      	ldr	r3, [pc, #168]	; (8000c7c <HAL_ADC_MspInit+0xcc>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	4a29      	ldr	r2, [pc, #164]	; (8000c7c <HAL_ADC_MspInit+0xcc>)
 8000bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bde:	4b27      	ldr	r3, [pc, #156]	; (8000c7c <HAL_ADC_MspInit+0xcc>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000be6:	61bb      	str	r3, [r7, #24]
 8000be8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <HAL_ADC_MspInit+0xcc>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a23      	ldr	r2, [pc, #140]	; (8000c7c <HAL_ADC_MspInit+0xcc>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <HAL_ADC_MspInit+0xcc>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c02:	2301      	movs	r3, #1
 8000c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c06:	2303      	movs	r3, #3
 8000c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	481a      	ldr	r0, [pc, #104]	; (8000c80 <HAL_ADC_MspInit+0xd0>)
 8000c16:	f000 ffc5 	bl	8001ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000c1a:	e029      	b.n	8000c70 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a18      	ldr	r2, [pc, #96]	; (8000c84 <HAL_ADC_MspInit+0xd4>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d124      	bne.n	8000c70 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_ADC_MspInit+0xcc>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <HAL_ADC_MspInit+0xcc>)
 8000c2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_ADC_MspInit+0xcc>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <HAL_ADC_MspInit+0xcc>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <HAL_ADC_MspInit+0xcc>)
 8000c44:	f043 0320 	orr.w	r3, r3, #32
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <HAL_ADC_MspInit+0xcc>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0320 	and.w	r3, r3, #32
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c64:	f107 031c 	add.w	r3, r7, #28
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4807      	ldr	r0, [pc, #28]	; (8000c88 <HAL_ADC_MspInit+0xd8>)
 8000c6c:	f000 ff9a 	bl	8001ba4 <HAL_GPIO_Init>
}
 8000c70:	bf00      	nop
 8000c72:	3730      	adds	r7, #48	; 0x30
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40012000 	.word	0x40012000
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40012200 	.word	0x40012200
 8000c88:	40021400 	.word	0x40021400

08000c8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <HAL_I2C_MspInit+0x7c>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d128      	bne.n	8000d00 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <HAL_I2C_MspInit+0x80>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a16      	ldr	r2, [pc, #88]	; (8000d0c <HAL_I2C_MspInit+0x80>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <HAL_I2C_MspInit+0x80>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ccc:	2312      	movs	r3, #18
 8000cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480b      	ldr	r0, [pc, #44]	; (8000d10 <HAL_I2C_MspInit+0x84>)
 8000ce4:	f000 ff5e 	bl	8001ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_I2C_MspInit+0x80>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <HAL_I2C_MspInit+0x80>)
 8000cee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <HAL_I2C_MspInit+0x80>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	; 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40005400 	.word	0x40005400
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020400 	.word	0x40020400

08000d14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d24:	d113      	bne.n	8000d4e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <HAL_TIM_Base_MspInit+0x44>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <HAL_TIM_Base_MspInit+0x44>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6413      	str	r3, [r2, #64]	; 0x40
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_TIM_Base_MspInit+0x44>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2105      	movs	r1, #5
 8000d42:	201c      	movs	r0, #28
 8000d44:	f000 fed4 	bl	8001af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d48:	201c      	movs	r0, #28
 8000d4a:	f000 feed 	bl	8001b28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800

08000d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	; 0x30
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a36      	ldr	r2, [pc, #216]	; (8000e54 <HAL_UART_MspInit+0xf8>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d130      	bne.n	8000de0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000d7e:	4b36      	ldr	r3, [pc, #216]	; (8000e58 <HAL_UART_MspInit+0xfc>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	4a35      	ldr	r2, [pc, #212]	; (8000e58 <HAL_UART_MspInit+0xfc>)
 8000d84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000d88:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8a:	4b33      	ldr	r3, [pc, #204]	; (8000e58 <HAL_UART_MspInit+0xfc>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000d92:	61bb      	str	r3, [r7, #24]
 8000d94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d96:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <HAL_UART_MspInit+0xfc>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a2f      	ldr	r2, [pc, #188]	; (8000e58 <HAL_UART_MspInit+0xfc>)
 8000d9c:	f043 0320 	orr.w	r3, r3, #32
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b2d      	ldr	r3, [pc, #180]	; (8000e58 <HAL_UART_MspInit+0xfc>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0320 	and.w	r3, r3, #32
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000dae:	23c0      	movs	r3, #192	; 0xc0
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000dbe:	2308      	movs	r3, #8
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4824      	ldr	r0, [pc, #144]	; (8000e5c <HAL_UART_MspInit+0x100>)
 8000dca:	f000 feeb 	bl	8001ba4 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2105      	movs	r1, #5
 8000dd2:	2052      	movs	r0, #82	; 0x52
 8000dd4:	f000 fe8c 	bl	8001af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8000dd8:	2052      	movs	r0, #82	; 0x52
 8000dda:	f000 fea5 	bl	8001b28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000dde:	e034      	b.n	8000e4a <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a1e      	ldr	r2, [pc, #120]	; (8000e60 <HAL_UART_MspInit+0x104>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d12f      	bne.n	8000e4a <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000dea:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <HAL_UART_MspInit+0xfc>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a1a      	ldr	r2, [pc, #104]	; (8000e58 <HAL_UART_MspInit+0xfc>)
 8000df0:	f043 0320 	orr.w	r3, r3, #32
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <HAL_UART_MspInit+0xfc>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f003 0320 	and.w	r3, r3, #32
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_UART_MspInit+0xfc>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <HAL_UART_MspInit+0xfc>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_UART_MspInit+0xfc>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000e1a:	23c0      	movs	r3, #192	; 0xc0
 8000e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e2a:	2308      	movs	r3, #8
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	4619      	mov	r1, r3
 8000e34:	480b      	ldr	r0, [pc, #44]	; (8000e64 <HAL_UART_MspInit+0x108>)
 8000e36:	f000 feb5 	bl	8001ba4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2105      	movs	r1, #5
 8000e3e:	2047      	movs	r0, #71	; 0x47
 8000e40:	f000 fe56 	bl	8001af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000e44:	2047      	movs	r0, #71	; 0x47
 8000e46:	f000 fe6f 	bl	8001b28 <HAL_NVIC_EnableIRQ>
}
 8000e4a:	bf00      	nop
 8000e4c:	3730      	adds	r7, #48	; 0x30
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40007800 	.word	0x40007800
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40021400 	.word	0x40021400
 8000e60:	40011400 	.word	0x40011400
 8000e64:	40020800 	.word	0x40020800

08000e68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08c      	sub	sp, #48	; 0x30
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	2019      	movs	r0, #25
 8000e7e:	f000 fe37 	bl	8001af0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e82:	2019      	movs	r0, #25
 8000e84:	f000 fe50 	bl	8001b28 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e88:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <HAL_InitTick+0xa0>)
 8000e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8c:	4a1e      	ldr	r2, [pc, #120]	; (8000f08 <HAL_InitTick+0xa0>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6453      	str	r3, [r2, #68]	; 0x44
 8000e94:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <HAL_InitTick+0xa0>)
 8000e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ea0:	f107 0210 	add.w	r2, r7, #16
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f002 f99a 	bl	80031e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000eb0:	f002 f984 	bl	80031bc <HAL_RCC_GetPCLK2Freq>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ebc:	4a13      	ldr	r2, [pc, #76]	; (8000f0c <HAL_InitTick+0xa4>)
 8000ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec2:	0c9b      	lsrs	r3, r3, #18
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <HAL_InitTick+0xa8>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <HAL_InitTick+0xac>)
 8000ecc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <HAL_InitTick+0xa8>)
 8000ed0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ed4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ed6:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <HAL_InitTick+0xa8>)
 8000ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eda:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <HAL_InitTick+0xa8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <HAL_InitTick+0xa8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ee8:	4809      	ldr	r0, [pc, #36]	; (8000f10 <HAL_InitTick+0xa8>)
 8000eea:	f002 fd9b 	bl	8003a24 <HAL_TIM_Base_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d104      	bne.n	8000efe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ef4:	4806      	ldr	r0, [pc, #24]	; (8000f10 <HAL_InitTick+0xa8>)
 8000ef6:	f002 fdc1 	bl	8003a7c <HAL_TIM_Base_Start_IT>
 8000efa:	4603      	mov	r3, r0
 8000efc:	e000      	b.n	8000f00 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3730      	adds	r7, #48	; 0x30
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	431bde83 	.word	0x431bde83
 8000f10:	20004c10 	.word	0x20004c10
 8000f14:	40010000 	.word	0x40010000

08000f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <NMI_Handler+0x4>

08000f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <HardFault_Handler+0x4>

08000f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <MemManage_Handler+0x4>

08000f2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <BusFault_Handler+0x4>

08000f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <UsageFault_Handler+0x4>

08000f36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f4a:	f002 fdc1 	bl	8003ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20004c10 	.word	0x20004c10

08000f58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <TIM2_IRQHandler+0x14>)
 8000f5e:	f002 fdb7 	bl	8003ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  buttonCounterIncrease();
 8000f62:	f006 fd35 	bl	80079d0 <buttonCounterIncrease>

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20004bd0 	.word	0x20004bd0

08000f70 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <USART6_IRQHandler+0x10>)
 8000f76:	f003 fa73 	bl	8004460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20004b50 	.word	0x20004b50

08000f84 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <UART7_IRQHandler+0x10>)
 8000f8a:	f003 fa69 	bl	8004460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200049f4 	.word	0x200049f4

08000f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa0:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <_sbrk+0x5c>)
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <_sbrk+0x60>)
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d102      	bne.n	8000fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <_sbrk+0x64>)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	; (8001000 <_sbrk+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d207      	bcs.n	8000fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc8:	f007 ff52 	bl	8008e70 <__errno>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	230c      	movs	r3, #12
 8000fd0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	e009      	b.n	8000fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <_sbrk+0x64>)
 8000fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fea:	68fb      	ldr	r3, [r7, #12]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20050000 	.word	0x20050000
 8000ff8:	00000400 	.word	0x00000400
 8000ffc:	20000094 	.word	0x20000094
 8001000:	20004d50 	.word	0x20004d50

08001004 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <SystemInit+0x28>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100e:	4a07      	ldr	r2, [pc, #28]	; (800102c <SystemInit+0x28>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <SystemInit+0x28>)
 800101a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800101e:	609a      	str	r2, [r3, #8]
#endif
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001030:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001068 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001034:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001036:	e003      	b.n	8001040 <LoopCopyDataInit>

08001038 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800103a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800103c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800103e:	3104      	adds	r1, #4

08001040 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001040:	480b      	ldr	r0, [pc, #44]	; (8001070 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001044:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001046:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001048:	d3f6      	bcc.n	8001038 <CopyDataInit>
  ldr  r2, =_sbss
 800104a:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800104c:	e002      	b.n	8001054 <LoopFillZerobss>

0800104e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800104e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001050:	f842 3b04 	str.w	r3, [r2], #4

08001054 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001056:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001058:	d3f9      	bcc.n	800104e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800105a:	f7ff ffd3 	bl	8001004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800105e:	f007 ff0d 	bl	8008e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001062:	f7ff faad 	bl	80005c0 <main>
  bx  lr    
 8001066:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001068:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800106c:	08009860 	.word	0x08009860
  ldr  r0, =_sdata
 8001070:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001074:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001078:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 800107c:	20004d4c 	.word	0x20004d4c

08001080 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC_IRQHandler>

08001082 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001086:	2003      	movs	r0, #3
 8001088:	f000 fd27 	bl	8001ada <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108c:	2000      	movs	r0, #0
 800108e:	f7ff feeb 	bl	8000e68 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001092:	f7ff fd65 	bl	8000b60 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x20>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x24>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <HAL_IncTick+0x24>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008
 80010c0:	20004c50 	.word	0x20004c50

080010c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20004c50 	.word	0x20004c50

080010dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff ffee 	bl	80010c4 <HAL_GetTick>
 80010e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f4:	d005      	beq.n	8001102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_Delay+0x40>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001102:	bf00      	nop
 8001104:	f7ff ffde 	bl	80010c4 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d8f7      	bhi.n	8001104 <HAL_Delay+0x28>
  {
  }
}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000008 	.word	0x20000008

08001120 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001128:	2300      	movs	r3, #0
 800112a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e031      	b.n	800119a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	2b00      	cmp	r3, #0
 800113c:	d109      	bne.n	8001152 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff fd36 	bl	8000bb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	2b00      	cmp	r3, #0
 800115c:	d116      	bne.n	800118c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <HAL_ADC_Init+0x84>)
 8001164:	4013      	ands	r3, r2
 8001166:	f043 0202 	orr.w	r2, r3, #2
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 faea 	bl	8001748 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f023 0303 	bic.w	r3, r3, #3
 8001182:	f043 0201 	orr.w	r2, r3, #1
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
 800118a:	e001      	b.n	8001190 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	ffffeefd 	.word	0xffffeefd

080011a8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d101      	bne.n	80011c2 <HAL_ADC_Start+0x1a>
 80011be:	2302      	movs	r3, #2
 80011c0:	e0a0      	b.n	8001304 <HAL_ADC_Start+0x15c>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2201      	movs	r2, #1
 80011c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d018      	beq.n	800120a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0201 	orr.w	r2, r2, #1
 80011e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80011e8:	4b49      	ldr	r3, [pc, #292]	; (8001310 <HAL_ADC_Start+0x168>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a49      	ldr	r2, [pc, #292]	; (8001314 <HAL_ADC_Start+0x16c>)
 80011ee:	fba2 2303 	umull	r2, r3, r2, r3
 80011f2:	0c9a      	lsrs	r2, r3, #18
 80011f4:	4613      	mov	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	4413      	add	r3, r2
 80011fa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80011fc:	e002      	b.n	8001204 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	3b01      	subs	r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f9      	bne.n	80011fe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	2b01      	cmp	r3, #1
 8001216:	d174      	bne.n	8001302 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800121c:	4b3e      	ldr	r3, [pc, #248]	; (8001318 <HAL_ADC_Start+0x170>)
 800121e:	4013      	ands	r3, r2
 8001220:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001232:	2b00      	cmp	r3, #0
 8001234:	d007      	beq.n	8001246 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800123e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800124e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001252:	d106      	bne.n	8001262 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001258:	f023 0206 	bic.w	r2, r3, #6
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	645a      	str	r2, [r3, #68]	; 0x44
 8001260:	e002      	b.n	8001268 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001278:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800127a:	4b28      	ldr	r3, [pc, #160]	; (800131c <HAL_ADC_Start+0x174>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 031f 	and.w	r3, r3, #31
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10f      	bne.n	80012a6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d136      	bne.n	8001302 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	e02d      	b.n	8001302 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a1d      	ldr	r2, [pc, #116]	; (8001320 <HAL_ADC_Start+0x178>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d10e      	bne.n	80012ce <HAL_ADC_Start+0x126>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d107      	bne.n	80012ce <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012cc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <HAL_ADC_Start+0x174>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d113      	bne.n	8001302 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a11      	ldr	r2, [pc, #68]	; (8001324 <HAL_ADC_Start+0x17c>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d10e      	bne.n	8001302 <HAL_ADC_Start+0x15a>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d107      	bne.n	8001302 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001300:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	20000000 	.word	0x20000000
 8001314:	431bde83 	.word	0x431bde83
 8001318:	fffff8fe 	.word	0xfffff8fe
 800131c:	40012300 	.word	0x40012300
 8001320:	40012000 	.word	0x40012000
 8001324:	40012200 	.word	0x40012200

08001328 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001336:	2b01      	cmp	r3, #1
 8001338:	d101      	bne.n	800133e <HAL_ADC_Stop+0x16>
 800133a:	2302      	movs	r3, #2
 800133c:	e01f      	b.n	800137e <HAL_ADC_Stop+0x56>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0201 	bic.w	r2, r2, #1
 8001354:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d107      	bne.n	8001374 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <HAL_ADC_Stop+0x64>)
 800136a:	4013      	ands	r3, r2
 800136c:	f043 0201 	orr.w	r2, r3, #1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	ffffeefe 	.word	0xffffeefe

08001390 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ac:	d113      	bne.n	80013d6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013bc:	d10b      	bne.n	80013d6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f043 0220 	orr.w	r2, r3, #32
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e05c      	b.n	8001490 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80013d6:	f7ff fe75 	bl	80010c4 <HAL_GetTick>
 80013da:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013dc:	e01a      	b.n	8001414 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e4:	d016      	beq.n	8001414 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d007      	beq.n	80013fc <HAL_ADC_PollForConversion+0x6c>
 80013ec:	f7ff fe6a 	bl	80010c4 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d20b      	bcs.n	8001414 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f043 0204 	orr.w	r2, r3, #4
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e03d      	b.n	8001490 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b02      	cmp	r3, #2
 8001420:	d1dd      	bne.n	80013de <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f06f 0212 	mvn.w	r2, #18
 800142a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d123      	bne.n	800148e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11f      	bne.n	800148e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001454:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001458:	2b00      	cmp	r3, #0
 800145a:	d006      	beq.n	800146a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001466:	2b00      	cmp	r3, #0
 8001468:	d111      	bne.n	800148e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d105      	bne.n	800148e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f043 0201 	orr.w	r2, r3, #1
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d101      	bne.n	80014d0 <HAL_ADC_ConfigChannel+0x1c>
 80014cc:	2302      	movs	r3, #2
 80014ce:	e12a      	b.n	8001726 <HAL_ADC_ConfigChannel+0x272>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b09      	cmp	r3, #9
 80014de:	d93a      	bls.n	8001556 <HAL_ADC_ConfigChannel+0xa2>
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014e8:	d035      	beq.n	8001556 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68d9      	ldr	r1, [r3, #12]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	3b1e      	subs	r3, #30
 8001500:	2207      	movs	r2, #7
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	400a      	ands	r2, r1
 800150e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a87      	ldr	r2, [pc, #540]	; (8001734 <HAL_ADC_ConfigChannel+0x280>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d10a      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68d9      	ldr	r1, [r3, #12]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	061a      	lsls	r2, r3, #24
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800152e:	e035      	b.n	800159c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68d9      	ldr	r1, [r3, #12]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	4603      	mov	r3, r0
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4403      	add	r3, r0
 8001548:	3b1e      	subs	r3, #30
 800154a:	409a      	lsls	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001554:	e022      	b.n	800159c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6919      	ldr	r1, [r3, #16]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	b29b      	uxth	r3, r3
 8001562:	461a      	mov	r2, r3
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	2207      	movs	r2, #7
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43da      	mvns	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	400a      	ands	r2, r1
 8001578:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6919      	ldr	r1, [r3, #16]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	b29b      	uxth	r3, r3
 800158a:	4618      	mov	r0, r3
 800158c:	4603      	mov	r3, r0
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4403      	add	r3, r0
 8001592:	409a      	lsls	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b06      	cmp	r3, #6
 80015a2:	d824      	bhi.n	80015ee <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	3b05      	subs	r3, #5
 80015b6:	221f      	movs	r2, #31
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43da      	mvns	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	400a      	ands	r2, r1
 80015c4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	3b05      	subs	r3, #5
 80015e0:	fa00 f203 	lsl.w	r2, r0, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34
 80015ec:	e04c      	b.n	8001688 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b0c      	cmp	r3, #12
 80015f4:	d824      	bhi.n	8001640 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	3b23      	subs	r3, #35	; 0x23
 8001608:	221f      	movs	r2, #31
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	400a      	ands	r2, r1
 8001616:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	b29b      	uxth	r3, r3
 8001624:	4618      	mov	r0, r3
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	3b23      	subs	r3, #35	; 0x23
 8001632:	fa00 f203 	lsl.w	r2, r0, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	631a      	str	r2, [r3, #48]	; 0x30
 800163e:	e023      	b.n	8001688 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	3b41      	subs	r3, #65	; 0x41
 8001652:	221f      	movs	r2, #31
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43da      	mvns	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	400a      	ands	r2, r1
 8001660:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	b29b      	uxth	r3, r3
 800166e:	4618      	mov	r0, r3
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	3b41      	subs	r3, #65	; 0x41
 800167c:	fa00 f203 	lsl.w	r2, r0, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a2a      	ldr	r2, [pc, #168]	; (8001738 <HAL_ADC_ConfigChannel+0x284>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d10a      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x1f4>
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800169a:	d105      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800169c:	4b27      	ldr	r3, [pc, #156]	; (800173c <HAL_ADC_ConfigChannel+0x288>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	4a26      	ldr	r2, [pc, #152]	; (800173c <HAL_ADC_ConfigChannel+0x288>)
 80016a2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80016a6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a22      	ldr	r2, [pc, #136]	; (8001738 <HAL_ADC_ConfigChannel+0x284>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d109      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x212>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b12      	cmp	r3, #18
 80016b8:	d105      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <HAL_ADC_ConfigChannel+0x288>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4a1f      	ldr	r2, [pc, #124]	; (800173c <HAL_ADC_ConfigChannel+0x288>)
 80016c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016c4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <HAL_ADC_ConfigChannel+0x284>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d125      	bne.n	800171c <HAL_ADC_ConfigChannel+0x268>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a17      	ldr	r2, [pc, #92]	; (8001734 <HAL_ADC_ConfigChannel+0x280>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d003      	beq.n	80016e2 <HAL_ADC_ConfigChannel+0x22e>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b11      	cmp	r3, #17
 80016e0:	d11c      	bne.n	800171c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <HAL_ADC_ConfigChannel+0x288>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4a15      	ldr	r2, [pc, #84]	; (800173c <HAL_ADC_ConfigChannel+0x288>)
 80016e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016ec:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a10      	ldr	r2, [pc, #64]	; (8001734 <HAL_ADC_ConfigChannel+0x280>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d111      	bne.n	800171c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <HAL_ADC_ConfigChannel+0x28c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a11      	ldr	r2, [pc, #68]	; (8001744 <HAL_ADC_ConfigChannel+0x290>)
 80016fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001702:	0c9a      	lsrs	r2, r3, #18
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800170e:	e002      	b.n	8001716 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	3b01      	subs	r3, #1
 8001714:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1f9      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	10000012 	.word	0x10000012
 8001738:	40012000 	.word	0x40012000
 800173c:	40012300 	.word	0x40012300
 8001740:	20000000 	.word	0x20000000
 8001744:	431bde83 	.word	0x431bde83

08001748 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001750:	4b78      	ldr	r3, [pc, #480]	; (8001934 <ADC_Init+0x1ec>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	4a77      	ldr	r2, [pc, #476]	; (8001934 <ADC_Init+0x1ec>)
 8001756:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800175a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800175c:	4b75      	ldr	r3, [pc, #468]	; (8001934 <ADC_Init+0x1ec>)
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4973      	ldr	r1, [pc, #460]	; (8001934 <ADC_Init+0x1ec>)
 8001766:	4313      	orrs	r3, r2
 8001768:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001778:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6859      	ldr	r1, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	021a      	lsls	r2, r3, #8
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800179c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6859      	ldr	r1, [r3, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6899      	ldr	r1, [r3, #8]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d6:	4a58      	ldr	r2, [pc, #352]	; (8001938 <ADC_Init+0x1f0>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d022      	beq.n	8001822 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6899      	ldr	r1, [r3, #8]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800180c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6899      	ldr	r1, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	e00f      	b.n	8001842 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001830:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001840:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0202 	bic.w	r2, r2, #2
 8001850:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6899      	ldr	r1, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	005a      	lsls	r2, r3, #1
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d01b      	beq.n	80018a8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800187e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800188e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6859      	ldr	r1, [r3, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	3b01      	subs	r3, #1
 800189c:	035a      	lsls	r2, r3, #13
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	e007      	b.n	80018b8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	051a      	lsls	r2, r3, #20
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6899      	ldr	r1, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018fa:	025a      	lsls	r2, r3, #9
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001912:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6899      	ldr	r1, [r3, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	029a      	lsls	r2, r3, #10
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	609a      	str	r2, [r3, #8]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	40012300 	.word	0x40012300
 8001938:	0f000001 	.word	0x0f000001

0800193c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <__NVIC_SetPriorityGrouping+0x40>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001958:	4013      	ands	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 8001966:	4313      	orrs	r3, r2
 8001968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196a:	4a04      	ldr	r2, [pc, #16]	; (800197c <__NVIC_SetPriorityGrouping+0x40>)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	60d3      	str	r3, [r2, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00
 8001980:	05fa0000 	.word	0x05fa0000

08001984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <__NVIC_GetPriorityGrouping+0x18>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	f003 0307 	and.w	r3, r3, #7
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	db0b      	blt.n	80019ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	f003 021f 	and.w	r2, r3, #31
 80019b8:	4907      	ldr	r1, [pc, #28]	; (80019d8 <__NVIC_EnableIRQ+0x38>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	095b      	lsrs	r3, r3, #5
 80019c0:	2001      	movs	r0, #1
 80019c2:	fa00 f202 	lsl.w	r2, r0, r2
 80019c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000e100 	.word	0xe000e100

080019dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	db10      	blt.n	8001a10 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	f003 021f 	and.w	r2, r3, #31
 80019f4:	4909      	ldr	r1, [pc, #36]	; (8001a1c <__NVIC_DisableIRQ+0x40>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	2001      	movs	r0, #1
 80019fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001a02:	3320      	adds	r3, #32
 8001a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a0c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	db0a      	blt.n	8001a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	490c      	ldr	r1, [pc, #48]	; (8001a6c <__NVIC_SetPriority+0x4c>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	0112      	lsls	r2, r2, #4
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	440b      	add	r3, r1
 8001a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a48:	e00a      	b.n	8001a60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4908      	ldr	r1, [pc, #32]	; (8001a70 <__NVIC_SetPriority+0x50>)
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	3b04      	subs	r3, #4
 8001a58:	0112      	lsls	r2, r2, #4
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	761a      	strb	r2, [r3, #24]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000e100 	.word	0xe000e100
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	; 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f1c3 0307 	rsb	r3, r3, #7
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	bf28      	it	cs
 8001a92:	2304      	movcs	r3, #4
 8001a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d902      	bls.n	8001aa4 <NVIC_EncodePriority+0x30>
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3b03      	subs	r3, #3
 8001aa2:	e000      	b.n	8001aa6 <NVIC_EncodePriority+0x32>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	43d9      	mvns	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	4313      	orrs	r3, r2
         );
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3724      	adds	r7, #36	; 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff ff2a 	bl	800193c <__NVIC_SetPriorityGrouping>
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b02:	f7ff ff3f 	bl	8001984 <__NVIC_GetPriorityGrouping>
 8001b06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	68b9      	ldr	r1, [r7, #8]
 8001b0c:	6978      	ldr	r0, [r7, #20]
 8001b0e:	f7ff ffb1 	bl	8001a74 <NVIC_EncodePriority>
 8001b12:	4602      	mov	r2, r0
 8001b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b18:	4611      	mov	r1, r2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff ff80 	bl	8001a20 <__NVIC_SetPriority>
}
 8001b20:	bf00      	nop
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff ff32 	bl	80019a0 <__NVIC_EnableIRQ>
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff ff42 	bl	80019dc <__NVIC_DisableIRQ>
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d004      	beq.n	8001b7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2280      	movs	r2, #128	; 0x80
 8001b78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00c      	b.n	8001b98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2205      	movs	r2, #5
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0201 	bic.w	r2, r2, #1
 8001b94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b089      	sub	sp, #36	; 0x24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	e175      	b.n	8001eb0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	f040 8164 	bne.w	8001eaa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d00b      	beq.n	8001c02 <HAL_GPIO_Init+0x5e>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d007      	beq.n	8001c02 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bf6:	2b11      	cmp	r3, #17
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b12      	cmp	r3, #18
 8001c00:	d130      	bne.n	8001c64 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c38:	2201      	movs	r2, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 0201 	and.w	r2, r3, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	2203      	movs	r2, #3
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x100>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b12      	cmp	r3, #18
 8001ca2:	d123      	bne.n	8001cec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	08da      	lsrs	r2, r3, #3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3208      	adds	r2, #8
 8001cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	220f      	movs	r2, #15
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	08da      	lsrs	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3208      	adds	r2, #8
 8001ce6:	69b9      	ldr	r1, [r7, #24]
 8001ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0203 	and.w	r2, r3, #3
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80be 	beq.w	8001eaa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2e:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_GPIO_Init+0x320>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <HAL_GPIO_Init+0x320>)
 8001d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d38:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3a:	4b62      	ldr	r3, [pc, #392]	; (8001ec4 <HAL_GPIO_Init+0x320>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d46:	4a60      	ldr	r2, [pc, #384]	; (8001ec8 <HAL_GPIO_Init+0x324>)
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	089b      	lsrs	r3, r3, #2
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a57      	ldr	r2, [pc, #348]	; (8001ecc <HAL_GPIO_Init+0x328>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d037      	beq.n	8001de2 <HAL_GPIO_Init+0x23e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a56      	ldr	r2, [pc, #344]	; (8001ed0 <HAL_GPIO_Init+0x32c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d031      	beq.n	8001dde <HAL_GPIO_Init+0x23a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a55      	ldr	r2, [pc, #340]	; (8001ed4 <HAL_GPIO_Init+0x330>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d02b      	beq.n	8001dda <HAL_GPIO_Init+0x236>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a54      	ldr	r2, [pc, #336]	; (8001ed8 <HAL_GPIO_Init+0x334>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d025      	beq.n	8001dd6 <HAL_GPIO_Init+0x232>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a53      	ldr	r2, [pc, #332]	; (8001edc <HAL_GPIO_Init+0x338>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d01f      	beq.n	8001dd2 <HAL_GPIO_Init+0x22e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a52      	ldr	r2, [pc, #328]	; (8001ee0 <HAL_GPIO_Init+0x33c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d019      	beq.n	8001dce <HAL_GPIO_Init+0x22a>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a51      	ldr	r2, [pc, #324]	; (8001ee4 <HAL_GPIO_Init+0x340>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d013      	beq.n	8001dca <HAL_GPIO_Init+0x226>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a50      	ldr	r2, [pc, #320]	; (8001ee8 <HAL_GPIO_Init+0x344>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00d      	beq.n	8001dc6 <HAL_GPIO_Init+0x222>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4f      	ldr	r2, [pc, #316]	; (8001eec <HAL_GPIO_Init+0x348>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d007      	beq.n	8001dc2 <HAL_GPIO_Init+0x21e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4e      	ldr	r2, [pc, #312]	; (8001ef0 <HAL_GPIO_Init+0x34c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d101      	bne.n	8001dbe <HAL_GPIO_Init+0x21a>
 8001dba:	2309      	movs	r3, #9
 8001dbc:	e012      	b.n	8001de4 <HAL_GPIO_Init+0x240>
 8001dbe:	230a      	movs	r3, #10
 8001dc0:	e010      	b.n	8001de4 <HAL_GPIO_Init+0x240>
 8001dc2:	2308      	movs	r3, #8
 8001dc4:	e00e      	b.n	8001de4 <HAL_GPIO_Init+0x240>
 8001dc6:	2307      	movs	r3, #7
 8001dc8:	e00c      	b.n	8001de4 <HAL_GPIO_Init+0x240>
 8001dca:	2306      	movs	r3, #6
 8001dcc:	e00a      	b.n	8001de4 <HAL_GPIO_Init+0x240>
 8001dce:	2305      	movs	r3, #5
 8001dd0:	e008      	b.n	8001de4 <HAL_GPIO_Init+0x240>
 8001dd2:	2304      	movs	r3, #4
 8001dd4:	e006      	b.n	8001de4 <HAL_GPIO_Init+0x240>
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e004      	b.n	8001de4 <HAL_GPIO_Init+0x240>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e002      	b.n	8001de4 <HAL_GPIO_Init+0x240>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_GPIO_Init+0x240>
 8001de2:	2300      	movs	r3, #0
 8001de4:	69fa      	ldr	r2, [r7, #28]
 8001de6:	f002 0203 	and.w	r2, r2, #3
 8001dea:	0092      	lsls	r2, r2, #2
 8001dec:	4093      	lsls	r3, r2
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001df4:	4934      	ldr	r1, [pc, #208]	; (8001ec8 <HAL_GPIO_Init+0x324>)
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	089b      	lsrs	r3, r3, #2
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e02:	4b3c      	ldr	r3, [pc, #240]	; (8001ef4 <HAL_GPIO_Init+0x350>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e26:	4a33      	ldr	r2, [pc, #204]	; (8001ef4 <HAL_GPIO_Init+0x350>)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e2c:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <HAL_GPIO_Init+0x350>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e50:	4a28      	ldr	r2, [pc, #160]	; (8001ef4 <HAL_GPIO_Init+0x350>)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e56:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <HAL_GPIO_Init+0x350>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e7a:	4a1e      	ldr	r2, [pc, #120]	; (8001ef4 <HAL_GPIO_Init+0x350>)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e80:	4b1c      	ldr	r3, [pc, #112]	; (8001ef4 <HAL_GPIO_Init+0x350>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ea4:	4a13      	ldr	r2, [pc, #76]	; (8001ef4 <HAL_GPIO_Init+0x350>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3301      	adds	r3, #1
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	2b0f      	cmp	r3, #15
 8001eb4:	f67f ae86 	bls.w	8001bc4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001eb8:	bf00      	nop
 8001eba:	3724      	adds	r7, #36	; 0x24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40013800 	.word	0x40013800
 8001ecc:	40020000 	.word	0x40020000
 8001ed0:	40020400 	.word	0x40020400
 8001ed4:	40020800 	.word	0x40020800
 8001ed8:	40020c00 	.word	0x40020c00
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40021400 	.word	0x40021400
 8001ee4:	40021800 	.word	0x40021800
 8001ee8:	40021c00 	.word	0x40021c00
 8001eec:	40022000 	.word	0x40022000
 8001ef0:	40022400 	.word	0x40022400
 8001ef4:	40013c00 	.word	0x40013c00

08001ef8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	887b      	ldrh	r3, [r7, #2]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f10:	2301      	movs	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
 8001f14:	e001      	b.n	8001f1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e07f      	b.n	800203a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d106      	bne.n	8001f54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7fe fe9c 	bl	8000c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2224      	movs	r2, #36	; 0x24
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0201 	bic.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d107      	bne.n	8001fa2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	e006      	b.n	8001fb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001fae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d104      	bne.n	8001fc2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6859      	ldr	r1, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <HAL_I2C_Init+0x11c>)
 8001fce:	430b      	orrs	r3, r1
 8001fd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fe0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691a      	ldr	r2, [r3, #16]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	ea42 0103 	orr.w	r1, r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	021a      	lsls	r2, r3, #8
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69d9      	ldr	r1, [r3, #28]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1a      	ldr	r2, [r3, #32]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2220      	movs	r2, #32
 8002026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	02008000 	.word	0x02008000

08002048 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af02      	add	r7, sp, #8
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	461a      	mov	r2, r3
 8002054:	460b      	mov	r3, r1
 8002056:	817b      	strh	r3, [r7, #10]
 8002058:	4613      	mov	r3, r2
 800205a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b20      	cmp	r3, #32
 8002066:	f040 80da 	bne.w	800221e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_I2C_Master_Transmit+0x30>
 8002074:	2302      	movs	r3, #2
 8002076:	e0d3      	b.n	8002220 <HAL_I2C_Master_Transmit+0x1d8>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002080:	f7ff f820 	bl	80010c4 <HAL_GetTick>
 8002084:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2319      	movs	r3, #25
 800208c:	2201      	movs	r2, #1
 800208e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f9f8 	bl	8002488 <I2C_WaitOnFlagUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e0be      	b.n	8002220 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2221      	movs	r2, #33	; 0x21
 80020a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2210      	movs	r2, #16
 80020ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	893a      	ldrh	r2, [r7, #8]
 80020c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2bff      	cmp	r3, #255	; 0xff
 80020d2:	d90e      	bls.n	80020f2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	22ff      	movs	r2, #255	; 0xff
 80020d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	8979      	ldrh	r1, [r7, #10]
 80020e2:	4b51      	ldr	r3, [pc, #324]	; (8002228 <HAL_I2C_Master_Transmit+0x1e0>)
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 faee 	bl	80026cc <I2C_TransferConfig>
 80020f0:	e06c      	b.n	80021cc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002100:	b2da      	uxtb	r2, r3
 8002102:	8979      	ldrh	r1, [r7, #10]
 8002104:	4b48      	ldr	r3, [pc, #288]	; (8002228 <HAL_I2C_Master_Transmit+0x1e0>)
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 fadd 	bl	80026cc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002112:	e05b      	b.n	80021cc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	6a39      	ldr	r1, [r7, #32]
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 f9f5 	bl	8002508 <I2C_WaitOnTXISFlagUntilTimeout>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e07b      	b.n	8002220 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	781a      	ldrb	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	3b01      	subs	r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215c:	b29b      	uxth	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d034      	beq.n	80021cc <HAL_I2C_Master_Transmit+0x184>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002166:	2b00      	cmp	r3, #0
 8002168:	d130      	bne.n	80021cc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	2200      	movs	r2, #0
 8002172:	2180      	movs	r1, #128	; 0x80
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f987 	bl	8002488 <I2C_WaitOnFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e04d      	b.n	8002220 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002188:	b29b      	uxth	r3, r3
 800218a:	2bff      	cmp	r3, #255	; 0xff
 800218c:	d90e      	bls.n	80021ac <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	22ff      	movs	r2, #255	; 0xff
 8002192:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002198:	b2da      	uxtb	r2, r3
 800219a:	8979      	ldrh	r1, [r7, #10]
 800219c:	2300      	movs	r3, #0
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 fa91 	bl	80026cc <I2C_TransferConfig>
 80021aa:	e00f      	b.n	80021cc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	8979      	ldrh	r1, [r7, #10]
 80021be:	2300      	movs	r3, #0
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 fa80 	bl	80026cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d19e      	bne.n	8002114 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	6a39      	ldr	r1, [r7, #32]
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 f9d4 	bl	8002588 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e01a      	b.n	8002220 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2220      	movs	r2, #32
 80021f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6859      	ldr	r1, [r3, #4]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_I2C_Master_Transmit+0x1e4>)
 80021fe:	400b      	ands	r3, r1
 8002200:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2220      	movs	r2, #32
 8002206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	e000      	b.n	8002220 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800221e:	2302      	movs	r3, #2
  }
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	80002000 	.word	0x80002000
 800222c:	fe00e800 	.word	0xfe00e800

08002230 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	; 0x28
 8002234:	af02      	add	r7, sp, #8
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	607a      	str	r2, [r7, #4]
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	460b      	mov	r3, r1
 800223e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b20      	cmp	r3, #32
 800224e:	f040 80ef 	bne.w	8002430 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800225c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002260:	d101      	bne.n	8002266 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002262:	2302      	movs	r3, #2
 8002264:	e0e5      	b.n	8002432 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_I2C_IsDeviceReady+0x44>
 8002270:	2302      	movs	r3, #2
 8002272:	e0de      	b.n	8002432 <HAL_I2C_IsDeviceReady+0x202>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2224      	movs	r2, #36	; 0x24
 8002280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d105      	bne.n	800229e <HAL_I2C_IsDeviceReady+0x6e>
 8002292:	897b      	ldrh	r3, [r7, #10]
 8002294:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002298:	4b68      	ldr	r3, [pc, #416]	; (800243c <HAL_I2C_IsDeviceReady+0x20c>)
 800229a:	4313      	orrs	r3, r2
 800229c:	e004      	b.n	80022a8 <HAL_I2C_IsDeviceReady+0x78>
 800229e:	897b      	ldrh	r3, [r7, #10]
 80022a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022a4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80022ae:	f7fe ff09 	bl	80010c4 <HAL_GetTick>
 80022b2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b20      	cmp	r3, #32
 80022c0:	bf0c      	ite	eq
 80022c2:	2301      	moveq	r3, #1
 80022c4:	2300      	movne	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	2b10      	cmp	r3, #16
 80022d6:	bf0c      	ite	eq
 80022d8:	2301      	moveq	r3, #1
 80022da:	2300      	movne	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80022e0:	e034      	b.n	800234c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e8:	d01a      	beq.n	8002320 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022ea:	f7fe feeb 	bl	80010c4 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d302      	bcc.n	8002300 <HAL_I2C_IsDeviceReady+0xd0>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10f      	bne.n	8002320 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230c:	f043 0220 	orr.w	r2, r3, #32
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e088      	b.n	8002432 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	f003 0320 	and.w	r3, r3, #32
 800232a:	2b20      	cmp	r3, #32
 800232c:	bf0c      	ite	eq
 800232e:	2301      	moveq	r3, #1
 8002330:	2300      	movne	r3, #0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	2b10      	cmp	r3, #16
 8002342:	bf0c      	ite	eq
 8002344:	2301      	moveq	r3, #1
 8002346:	2300      	movne	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800234c:	7ffb      	ldrb	r3, [r7, #31]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d102      	bne.n	8002358 <HAL_I2C_IsDeviceReady+0x128>
 8002352:	7fbb      	ldrb	r3, [r7, #30]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0c4      	beq.n	80022e2 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f003 0310 	and.w	r3, r3, #16
 8002362:	2b10      	cmp	r3, #16
 8002364:	d01a      	beq.n	800239c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2200      	movs	r2, #0
 800236e:	2120      	movs	r1, #32
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f889 	bl	8002488 <I2C_WaitOnFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e058      	b.n	8002432 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2220      	movs	r2, #32
 8002386:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	e04a      	b.n	8002432 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2200      	movs	r2, #0
 80023a4:	2120      	movs	r1, #32
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 f86e 	bl	8002488 <I2C_WaitOnFlagUntilTimeout>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e03d      	b.n	8002432 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2210      	movs	r2, #16
 80023bc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2220      	movs	r2, #32
 80023c4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d118      	bne.n	8002400 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023dc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2200      	movs	r2, #0
 80023e6:	2120      	movs	r1, #32
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 f84d 	bl	8002488 <I2C_WaitOnFlagUntilTimeout>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e01c      	b.n	8002432 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2220      	movs	r2, #32
 80023fe:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	3301      	adds	r3, #1
 8002404:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	429a      	cmp	r2, r3
 800240c:	f63f af3d 	bhi.w	800228a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2220      	movs	r2, #32
 8002414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241c:	f043 0220 	orr.w	r2, r3, #32
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8002430:	2302      	movs	r3, #2
  }
}
 8002432:	4618      	mov	r0, r3
 8002434:	3720      	adds	r7, #32
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	02002000 	.word	0x02002000

08002440 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b02      	cmp	r3, #2
 8002454:	d103      	bne.n	800245e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2200      	movs	r2, #0
 800245c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b01      	cmp	r3, #1
 800246a:	d007      	beq.n	800247c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699a      	ldr	r2, [r3, #24]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	619a      	str	r2, [r3, #24]
  }
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	4613      	mov	r3, r2
 8002496:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002498:	e022      	b.n	80024e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a0:	d01e      	beq.n	80024e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a2:	f7fe fe0f 	bl	80010c4 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d302      	bcc.n	80024b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d113      	bne.n	80024e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	f043 0220 	orr.w	r2, r3, #32
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2220      	movs	r2, #32
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e00f      	b.n	8002500 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699a      	ldr	r2, [r3, #24]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	4013      	ands	r3, r2
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	bf0c      	ite	eq
 80024f0:	2301      	moveq	r3, #1
 80024f2:	2300      	movne	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d0cd      	beq.n	800249a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002514:	e02c      	b.n	8002570 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f870 	bl	8002600 <I2C_IsAcknowledgeFailed>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e02a      	b.n	8002580 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002530:	d01e      	beq.n	8002570 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002532:	f7fe fdc7 	bl	80010c4 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	429a      	cmp	r2, r3
 8002540:	d302      	bcc.n	8002548 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d113      	bne.n	8002570 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254c:	f043 0220 	orr.w	r2, r3, #32
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e007      	b.n	8002580 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b02      	cmp	r3, #2
 800257c:	d1cb      	bne.n	8002516 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002594:	e028      	b.n	80025e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f830 	bl	8002600 <I2C_IsAcknowledgeFailed>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e026      	b.n	80025f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025aa:	f7fe fd8b 	bl	80010c4 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d302      	bcc.n	80025c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d113      	bne.n	80025e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c4:	f043 0220 	orr.w	r2, r3, #32
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2220      	movs	r2, #32
 80025d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e007      	b.n	80025f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	d1cf      	bne.n	8002596 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b10      	cmp	r3, #16
 8002618:	d151      	bne.n	80026be <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800261a:	e022      	b.n	8002662 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002622:	d01e      	beq.n	8002662 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002624:	f7fe fd4e 	bl	80010c4 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	429a      	cmp	r2, r3
 8002632:	d302      	bcc.n	800263a <I2C_IsAcknowledgeFailed+0x3a>
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d113      	bne.n	8002662 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	f043 0220 	orr.w	r2, r3, #32
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2220      	movs	r2, #32
 800264a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e02e      	b.n	80026c0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b20      	cmp	r3, #32
 800266e:	d1d5      	bne.n	800261c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2210      	movs	r2, #16
 8002676:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2220      	movs	r2, #32
 800267e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f7ff fedd 	bl	8002440 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6859      	ldr	r1, [r3, #4]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <I2C_IsAcknowledgeFailed+0xc8>)
 8002692:	400b      	ands	r3, r1
 8002694:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f043 0204 	orr.w	r2, r3, #4
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	fe00e800 	.word	0xfe00e800

080026cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	607b      	str	r3, [r7, #4]
 80026d6:	460b      	mov	r3, r1
 80026d8:	817b      	strh	r3, [r7, #10]
 80026da:	4613      	mov	r3, r2
 80026dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	0d5b      	lsrs	r3, r3, #21
 80026e8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80026ec:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <I2C_TransferConfig+0x58>)
 80026ee:	430b      	orrs	r3, r1
 80026f0:	43db      	mvns	r3, r3
 80026f2:	ea02 0103 	and.w	r1, r2, r3
 80026f6:	897b      	ldrh	r3, [r7, #10]
 80026f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026fc:	7a7b      	ldrb	r3, [r7, #9]
 80026fe:	041b      	lsls	r3, r3, #16
 8002700:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	431a      	orrs	r2, r3
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	431a      	orrs	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002716:	bf00      	nop
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	03ff63ff 	.word	0x03ff63ff

08002728 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b20      	cmp	r3, #32
 800273c:	d138      	bne.n	80027b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002748:	2302      	movs	r3, #2
 800274a:	e032      	b.n	80027b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2224      	movs	r2, #36	; 0x24
 8002758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0201 	bic.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800277a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6819      	ldr	r1, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0201 	orr.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e000      	b.n	80027b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027b0:	2302      	movs	r3, #2
  }
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027be:	b480      	push	{r7}
 80027c0:	b085      	sub	sp, #20
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d139      	bne.n	8002848 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027de:	2302      	movs	r3, #2
 80027e0:	e033      	b.n	800284a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2224      	movs	r2, #36	; 0x24
 80027ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0201 	bic.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002810:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	021b      	lsls	r3, r3, #8
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4313      	orrs	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0201 	orr.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	e000      	b.n	800284a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002848:	2302      	movs	r3, #2
  }
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002862:	4b23      	ldr	r3, [pc, #140]	; (80028f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	4a22      	ldr	r2, [pc, #136]	; (80028f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286c:	6413      	str	r3, [r2, #64]	; 0x40
 800286e:	4b20      	ldr	r3, [pc, #128]	; (80028f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800287a:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a1d      	ldr	r2, [pc, #116]	; (80028f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002884:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002886:	f7fe fc1d 	bl	80010c4 <HAL_GetTick>
 800288a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800288c:	e009      	b.n	80028a2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800288e:	f7fe fc19 	bl	80010c4 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800289c:	d901      	bls.n	80028a2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e022      	b.n	80028e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028a2:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ae:	d1ee      	bne.n	800288e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80028b0:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a0f      	ldr	r2, [pc, #60]	; (80028f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028bc:	f7fe fc02 	bl	80010c4 <HAL_GetTick>
 80028c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028c2:	e009      	b.n	80028d8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028c4:	f7fe fbfe 	bl	80010c4 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028d2:	d901      	bls.n	80028d8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e007      	b.n	80028e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028d8:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028e4:	d1ee      	bne.n	80028c4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40007000 	.word	0x40007000

080028f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002900:	2300      	movs	r3, #0
 8002902:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e291      	b.n	8002e32 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 8087 	beq.w	8002a2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800291c:	4b96      	ldr	r3, [pc, #600]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 030c 	and.w	r3, r3, #12
 8002924:	2b04      	cmp	r3, #4
 8002926:	d00c      	beq.n	8002942 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002928:	4b93      	ldr	r3, [pc, #588]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 030c 	and.w	r3, r3, #12
 8002930:	2b08      	cmp	r3, #8
 8002932:	d112      	bne.n	800295a <HAL_RCC_OscConfig+0x62>
 8002934:	4b90      	ldr	r3, [pc, #576]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002940:	d10b      	bne.n	800295a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002942:	4b8d      	ldr	r3, [pc, #564]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d06c      	beq.n	8002a28 <HAL_RCC_OscConfig+0x130>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d168      	bne.n	8002a28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e26b      	b.n	8002e32 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002962:	d106      	bne.n	8002972 <HAL_RCC_OscConfig+0x7a>
 8002964:	4b84      	ldr	r3, [pc, #528]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a83      	ldr	r2, [pc, #524]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 800296a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	e02e      	b.n	80029d0 <HAL_RCC_OscConfig+0xd8>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0x9c>
 800297a:	4b7f      	ldr	r3, [pc, #508]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a7e      	ldr	r2, [pc, #504]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	4b7c      	ldr	r3, [pc, #496]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a7b      	ldr	r2, [pc, #492]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 800298c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	e01d      	b.n	80029d0 <HAL_RCC_OscConfig+0xd8>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800299c:	d10c      	bne.n	80029b8 <HAL_RCC_OscConfig+0xc0>
 800299e:	4b76      	ldr	r3, [pc, #472]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a75      	ldr	r2, [pc, #468]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 80029a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	4b73      	ldr	r3, [pc, #460]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a72      	ldr	r2, [pc, #456]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 80029b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	e00b      	b.n	80029d0 <HAL_RCC_OscConfig+0xd8>
 80029b8:	4b6f      	ldr	r3, [pc, #444]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a6e      	ldr	r2, [pc, #440]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 80029be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	4b6c      	ldr	r3, [pc, #432]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a6b      	ldr	r2, [pc, #428]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 80029ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d013      	beq.n	8002a00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fe fb74 	bl	80010c4 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e0:	f7fe fb70 	bl	80010c4 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b64      	cmp	r3, #100	; 0x64
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e21f      	b.n	8002e32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f2:	4b61      	ldr	r3, [pc, #388]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCC_OscConfig+0xe8>
 80029fe:	e014      	b.n	8002a2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7fe fb60 	bl	80010c4 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a08:	f7fe fb5c 	bl	80010c4 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b64      	cmp	r3, #100	; 0x64
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e20b      	b.n	8002e32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1a:	4b57      	ldr	r3, [pc, #348]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x110>
 8002a26:	e000      	b.n	8002a2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d069      	beq.n	8002b0a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a36:	4b50      	ldr	r3, [pc, #320]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00b      	beq.n	8002a5a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a42:	4b4d      	ldr	r3, [pc, #308]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	2b08      	cmp	r3, #8
 8002a4c:	d11c      	bne.n	8002a88 <HAL_RCC_OscConfig+0x190>
 8002a4e:	4b4a      	ldr	r3, [pc, #296]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d116      	bne.n	8002a88 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5a:	4b47      	ldr	r3, [pc, #284]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d005      	beq.n	8002a72 <HAL_RCC_OscConfig+0x17a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d001      	beq.n	8002a72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e1df      	b.n	8002e32 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a72:	4b41      	ldr	r3, [pc, #260]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	493d      	ldr	r1, [pc, #244]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a86:	e040      	b.n	8002b0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d023      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a90:	4b39      	ldr	r3, [pc, #228]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a38      	ldr	r2, [pc, #224]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fb12 	bl	80010c4 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa4:	f7fe fb0e 	bl	80010c4 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e1bd      	b.n	8002e32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab6:	4b30      	ldr	r3, [pc, #192]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac2:	4b2d      	ldr	r3, [pc, #180]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4929      	ldr	r1, [pc, #164]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]
 8002ad6:	e018      	b.n	8002b0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad8:	4b27      	ldr	r3, [pc, #156]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a26      	ldr	r2, [pc, #152]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002ade:	f023 0301 	bic.w	r3, r3, #1
 8002ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe faee 	bl	80010c4 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aec:	f7fe faea 	bl	80010c4 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e199      	b.n	8002e32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afe:	4b1e      	ldr	r3, [pc, #120]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d038      	beq.n	8002b88 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d019      	beq.n	8002b52 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b1e:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b22:	4a15      	ldr	r2, [pc, #84]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2a:	f7fe facb 	bl	80010c4 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b32:	f7fe fac7 	bl	80010c4 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e176      	b.n	8002e32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b44:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x23a>
 8002b50:	e01a      	b.n	8002b88 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b56:	4a08      	ldr	r2, [pc, #32]	; (8002b78 <HAL_RCC_OscConfig+0x280>)
 8002b58:	f023 0301 	bic.w	r3, r3, #1
 8002b5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5e:	f7fe fab1 	bl	80010c4 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b64:	e00a      	b.n	8002b7c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b66:	f7fe faad 	bl	80010c4 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d903      	bls.n	8002b7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e15c      	b.n	8002e32 <HAL_RCC_OscConfig+0x53a>
 8002b78:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b7c:	4b91      	ldr	r3, [pc, #580]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1ee      	bne.n	8002b66 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 80a4 	beq.w	8002cde <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b96:	4b8b      	ldr	r3, [pc, #556]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10d      	bne.n	8002bbe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba2:	4b88      	ldr	r3, [pc, #544]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	4a87      	ldr	r2, [pc, #540]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bac:	6413      	str	r3, [r2, #64]	; 0x40
 8002bae:	4b85      	ldr	r3, [pc, #532]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bbe:	4b82      	ldr	r3, [pc, #520]	; (8002dc8 <HAL_RCC_OscConfig+0x4d0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d118      	bne.n	8002bfc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002bca:	4b7f      	ldr	r3, [pc, #508]	; (8002dc8 <HAL_RCC_OscConfig+0x4d0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a7e      	ldr	r2, [pc, #504]	; (8002dc8 <HAL_RCC_OscConfig+0x4d0>)
 8002bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bd6:	f7fe fa75 	bl	80010c4 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bde:	f7fe fa71 	bl	80010c4 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b64      	cmp	r3, #100	; 0x64
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e120      	b.n	8002e32 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bf0:	4b75      	ldr	r3, [pc, #468]	; (8002dc8 <HAL_RCC_OscConfig+0x4d0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0f0      	beq.n	8002bde <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d106      	bne.n	8002c12 <HAL_RCC_OscConfig+0x31a>
 8002c04:	4b6f      	ldr	r3, [pc, #444]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c08:	4a6e      	ldr	r2, [pc, #440]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c0a:	f043 0301 	orr.w	r3, r3, #1
 8002c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c10:	e02d      	b.n	8002c6e <HAL_RCC_OscConfig+0x376>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x33c>
 8002c1a:	4b6a      	ldr	r3, [pc, #424]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1e:	4a69      	ldr	r2, [pc, #420]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c20:	f023 0301 	bic.w	r3, r3, #1
 8002c24:	6713      	str	r3, [r2, #112]	; 0x70
 8002c26:	4b67      	ldr	r3, [pc, #412]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	4a66      	ldr	r2, [pc, #408]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c2c:	f023 0304 	bic.w	r3, r3, #4
 8002c30:	6713      	str	r3, [r2, #112]	; 0x70
 8002c32:	e01c      	b.n	8002c6e <HAL_RCC_OscConfig+0x376>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2b05      	cmp	r3, #5
 8002c3a:	d10c      	bne.n	8002c56 <HAL_RCC_OscConfig+0x35e>
 8002c3c:	4b61      	ldr	r3, [pc, #388]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c40:	4a60      	ldr	r2, [pc, #384]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c42:	f043 0304 	orr.w	r3, r3, #4
 8002c46:	6713      	str	r3, [r2, #112]	; 0x70
 8002c48:	4b5e      	ldr	r3, [pc, #376]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4c:	4a5d      	ldr	r2, [pc, #372]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6713      	str	r3, [r2, #112]	; 0x70
 8002c54:	e00b      	b.n	8002c6e <HAL_RCC_OscConfig+0x376>
 8002c56:	4b5b      	ldr	r3, [pc, #364]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	4a5a      	ldr	r2, [pc, #360]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c5c:	f023 0301 	bic.w	r3, r3, #1
 8002c60:	6713      	str	r3, [r2, #112]	; 0x70
 8002c62:	4b58      	ldr	r3, [pc, #352]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c66:	4a57      	ldr	r2, [pc, #348]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c68:	f023 0304 	bic.w	r3, r3, #4
 8002c6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d015      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c76:	f7fe fa25 	bl	80010c4 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7c:	e00a      	b.n	8002c94 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7e:	f7fe fa21 	bl	80010c4 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e0ce      	b.n	8002e32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c94:	4b4b      	ldr	r3, [pc, #300]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0ee      	beq.n	8002c7e <HAL_RCC_OscConfig+0x386>
 8002ca0:	e014      	b.n	8002ccc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca2:	f7fe fa0f 	bl	80010c4 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca8:	e00a      	b.n	8002cc0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002caa:	f7fe fa0b 	bl	80010c4 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e0b8      	b.n	8002e32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc0:	4b40      	ldr	r3, [pc, #256]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1ee      	bne.n	8002caa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d105      	bne.n	8002cde <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd2:	4b3c      	ldr	r3, [pc, #240]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	4a3b      	ldr	r2, [pc, #236]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 80a4 	beq.w	8002e30 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ce8:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 030c 	and.w	r3, r3, #12
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d06b      	beq.n	8002dcc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d149      	bne.n	8002d90 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfc:	4b31      	ldr	r3, [pc, #196]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a30      	ldr	r2, [pc, #192]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7fe f9dc 	bl	80010c4 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d10:	f7fe f9d8 	bl	80010c4 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e087      	b.n	8002e32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d22:	4b28      	ldr	r3, [pc, #160]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69da      	ldr	r2, [r3, #28]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	019b      	lsls	r3, r3, #6
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	085b      	lsrs	r3, r3, #1
 8002d46:	3b01      	subs	r3, #1
 8002d48:	041b      	lsls	r3, r3, #16
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	061b      	lsls	r3, r3, #24
 8002d52:	4313      	orrs	r3, r2
 8002d54:	4a1b      	ldr	r2, [pc, #108]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002d56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d5a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d5c:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fe f9ac 	bl	80010c4 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d70:	f7fe f9a8 	bl	80010c4 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e057      	b.n	8002e32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0x478>
 8002d8e:	e04f      	b.n	8002e30 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a0b      	ldr	r2, [pc, #44]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002d96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7fe f992 	bl	80010c4 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da4:	f7fe f98e 	bl	80010c4 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e03d      	b.n	8002e32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db6:	4b03      	ldr	r3, [pc, #12]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4ac>
 8002dc2:	e035      	b.n	8002e30 <HAL_RCC_OscConfig+0x538>
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002dcc:	4b1b      	ldr	r3, [pc, #108]	; (8002e3c <HAL_RCC_OscConfig+0x544>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d028      	beq.n	8002e2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d121      	bne.n	8002e2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d11a      	bne.n	8002e2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e02:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d111      	bne.n	8002e2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e12:	085b      	lsrs	r3, r3, #1
 8002e14:	3b01      	subs	r3, #1
 8002e16:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d107      	bne.n	8002e2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e26:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800

08002e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0d0      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e58:	4b6a      	ldr	r3, [pc, #424]	; (8003004 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d910      	bls.n	8002e88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	4b67      	ldr	r3, [pc, #412]	; (8003004 <HAL_RCC_ClockConfig+0x1c4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 020f 	bic.w	r2, r3, #15
 8002e6e:	4965      	ldr	r1, [pc, #404]	; (8003004 <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e76:	4b63      	ldr	r3, [pc, #396]	; (8003004 <HAL_RCC_ClockConfig+0x1c4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0b8      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d020      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ea0:	4b59      	ldr	r3, [pc, #356]	; (8003008 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	4a58      	ldr	r2, [pc, #352]	; (8003008 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eaa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eb8:	4b53      	ldr	r3, [pc, #332]	; (8003008 <HAL_RCC_ClockConfig+0x1c8>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	4a52      	ldr	r2, [pc, #328]	; (8003008 <HAL_RCC_ClockConfig+0x1c8>)
 8002ebe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ec2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec4:	4b50      	ldr	r3, [pc, #320]	; (8003008 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	494d      	ldr	r1, [pc, #308]	; (8003008 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d040      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d107      	bne.n	8002efa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eea:	4b47      	ldr	r3, [pc, #284]	; (8003008 <HAL_RCC_ClockConfig+0x1c8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d115      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e07f      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d107      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f02:	4b41      	ldr	r3, [pc, #260]	; (8003008 <HAL_RCC_ClockConfig+0x1c8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d109      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e073      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f12:	4b3d      	ldr	r3, [pc, #244]	; (8003008 <HAL_RCC_ClockConfig+0x1c8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e06b      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f22:	4b39      	ldr	r3, [pc, #228]	; (8003008 <HAL_RCC_ClockConfig+0x1c8>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f023 0203 	bic.w	r2, r3, #3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4936      	ldr	r1, [pc, #216]	; (8003008 <HAL_RCC_ClockConfig+0x1c8>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f34:	f7fe f8c6 	bl	80010c4 <HAL_GetTick>
 8002f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3a:	e00a      	b.n	8002f52 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f3c:	f7fe f8c2 	bl	80010c4 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e053      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f52:	4b2d      	ldr	r3, [pc, #180]	; (8003008 <HAL_RCC_ClockConfig+0x1c8>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 020c 	and.w	r2, r3, #12
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d1eb      	bne.n	8002f3c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f64:	4b27      	ldr	r3, [pc, #156]	; (8003004 <HAL_RCC_ClockConfig+0x1c4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d210      	bcs.n	8002f94 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f72:	4b24      	ldr	r3, [pc, #144]	; (8003004 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f023 020f 	bic.w	r2, r3, #15
 8002f7a:	4922      	ldr	r1, [pc, #136]	; (8003004 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f82:	4b20      	ldr	r3, [pc, #128]	; (8003004 <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e032      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa0:	4b19      	ldr	r3, [pc, #100]	; (8003008 <HAL_RCC_ClockConfig+0x1c8>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4916      	ldr	r1, [pc, #88]	; (8003008 <HAL_RCC_ClockConfig+0x1c8>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d009      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fbe:	4b12      	ldr	r3, [pc, #72]	; (8003008 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	490e      	ldr	r1, [pc, #56]	; (8003008 <HAL_RCC_ClockConfig+0x1c8>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fd2:	f000 f821 	bl	8003018 <HAL_RCC_GetSysClockFreq>
 8002fd6:	4601      	mov	r1, r0
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <HAL_RCC_ClockConfig+0x1c8>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	091b      	lsrs	r3, r3, #4
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	4a0a      	ldr	r2, [pc, #40]	; (800300c <HAL_RCC_ClockConfig+0x1cc>)
 8002fe4:	5cd3      	ldrb	r3, [r2, r3]
 8002fe6:	fa21 f303 	lsr.w	r3, r1, r3
 8002fea:	4a09      	ldr	r2, [pc, #36]	; (8003010 <HAL_RCC_ClockConfig+0x1d0>)
 8002fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fee:	4b09      	ldr	r3, [pc, #36]	; (8003014 <HAL_RCC_ClockConfig+0x1d4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fd ff38 	bl	8000e68 <HAL_InitTick>

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40023c00 	.word	0x40023c00
 8003008:	40023800 	.word	0x40023800
 800300c:	080097e4 	.word	0x080097e4
 8003010:	20000000 	.word	0x20000000
 8003014:	20000004 	.word	0x20000004

08003018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	607b      	str	r3, [r7, #4]
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	2300      	movs	r3, #0
 8003028:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800302e:	4b50      	ldr	r3, [pc, #320]	; (8003170 <HAL_RCC_GetSysClockFreq+0x158>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 030c 	and.w	r3, r3, #12
 8003036:	2b04      	cmp	r3, #4
 8003038:	d007      	beq.n	800304a <HAL_RCC_GetSysClockFreq+0x32>
 800303a:	2b08      	cmp	r3, #8
 800303c:	d008      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0x38>
 800303e:	2b00      	cmp	r3, #0
 8003040:	f040 808d 	bne.w	800315e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003044:	4b4b      	ldr	r3, [pc, #300]	; (8003174 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003046:	60bb      	str	r3, [r7, #8]
      break;
 8003048:	e08c      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800304a:	4b4b      	ldr	r3, [pc, #300]	; (8003178 <HAL_RCC_GetSysClockFreq+0x160>)
 800304c:	60bb      	str	r3, [r7, #8]
      break;
 800304e:	e089      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003050:	4b47      	ldr	r3, [pc, #284]	; (8003170 <HAL_RCC_GetSysClockFreq+0x158>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003058:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800305a:	4b45      	ldr	r3, [pc, #276]	; (8003170 <HAL_RCC_GetSysClockFreq+0x158>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d023      	beq.n	80030ae <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003066:	4b42      	ldr	r3, [pc, #264]	; (8003170 <HAL_RCC_GetSysClockFreq+0x158>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	099b      	lsrs	r3, r3, #6
 800306c:	f04f 0400 	mov.w	r4, #0
 8003070:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	ea03 0501 	and.w	r5, r3, r1
 800307c:	ea04 0602 	and.w	r6, r4, r2
 8003080:	4a3d      	ldr	r2, [pc, #244]	; (8003178 <HAL_RCC_GetSysClockFreq+0x160>)
 8003082:	fb02 f106 	mul.w	r1, r2, r6
 8003086:	2200      	movs	r2, #0
 8003088:	fb02 f205 	mul.w	r2, r2, r5
 800308c:	440a      	add	r2, r1
 800308e:	493a      	ldr	r1, [pc, #232]	; (8003178 <HAL_RCC_GetSysClockFreq+0x160>)
 8003090:	fba5 0101 	umull	r0, r1, r5, r1
 8003094:	1853      	adds	r3, r2, r1
 8003096:	4619      	mov	r1, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f04f 0400 	mov.w	r4, #0
 800309e:	461a      	mov	r2, r3
 80030a0:	4623      	mov	r3, r4
 80030a2:	f7fd f90d 	bl	80002c0 <__aeabi_uldivmod>
 80030a6:	4603      	mov	r3, r0
 80030a8:	460c      	mov	r4, r1
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	e049      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ae:	4b30      	ldr	r3, [pc, #192]	; (8003170 <HAL_RCC_GetSysClockFreq+0x158>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	099b      	lsrs	r3, r3, #6
 80030b4:	f04f 0400 	mov.w	r4, #0
 80030b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	ea03 0501 	and.w	r5, r3, r1
 80030c4:	ea04 0602 	and.w	r6, r4, r2
 80030c8:	4629      	mov	r1, r5
 80030ca:	4632      	mov	r2, r6
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	f04f 0400 	mov.w	r4, #0
 80030d4:	0154      	lsls	r4, r2, #5
 80030d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030da:	014b      	lsls	r3, r1, #5
 80030dc:	4619      	mov	r1, r3
 80030de:	4622      	mov	r2, r4
 80030e0:	1b49      	subs	r1, r1, r5
 80030e2:	eb62 0206 	sbc.w	r2, r2, r6
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	f04f 0400 	mov.w	r4, #0
 80030ee:	0194      	lsls	r4, r2, #6
 80030f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030f4:	018b      	lsls	r3, r1, #6
 80030f6:	1a5b      	subs	r3, r3, r1
 80030f8:	eb64 0402 	sbc.w	r4, r4, r2
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	00e2      	lsls	r2, r4, #3
 8003106:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800310a:	00d9      	lsls	r1, r3, #3
 800310c:	460b      	mov	r3, r1
 800310e:	4614      	mov	r4, r2
 8003110:	195b      	adds	r3, r3, r5
 8003112:	eb44 0406 	adc.w	r4, r4, r6
 8003116:	f04f 0100 	mov.w	r1, #0
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	02a2      	lsls	r2, r4, #10
 8003120:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003124:	0299      	lsls	r1, r3, #10
 8003126:	460b      	mov	r3, r1
 8003128:	4614      	mov	r4, r2
 800312a:	4618      	mov	r0, r3
 800312c:	4621      	mov	r1, r4
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f04f 0400 	mov.w	r4, #0
 8003134:	461a      	mov	r2, r3
 8003136:	4623      	mov	r3, r4
 8003138:	f7fd f8c2 	bl	80002c0 <__aeabi_uldivmod>
 800313c:	4603      	mov	r3, r0
 800313e:	460c      	mov	r4, r1
 8003140:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003142:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <HAL_RCC_GetSysClockFreq+0x158>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	0c1b      	lsrs	r3, r3, #16
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	3301      	adds	r3, #1
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	fbb2 f3f3 	udiv	r3, r2, r3
 800315a:	60bb      	str	r3, [r7, #8]
      break;
 800315c:	e002      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003160:	60bb      	str	r3, [r7, #8]
      break;
 8003162:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003164:	68bb      	ldr	r3, [r7, #8]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800316e:	bf00      	nop
 8003170:	40023800 	.word	0x40023800
 8003174:	00f42400 	.word	0x00f42400
 8003178:	017d7840 	.word	0x017d7840

0800317c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003180:	4b03      	ldr	r3, [pc, #12]	; (8003190 <HAL_RCC_GetHCLKFreq+0x14>)
 8003182:	681b      	ldr	r3, [r3, #0]
}
 8003184:	4618      	mov	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	20000000 	.word	0x20000000

08003194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003198:	f7ff fff0 	bl	800317c <HAL_RCC_GetHCLKFreq>
 800319c:	4601      	mov	r1, r0
 800319e:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	0a9b      	lsrs	r3, r3, #10
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	4a03      	ldr	r2, [pc, #12]	; (80031b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031aa:	5cd3      	ldrb	r3, [r2, r3]
 80031ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40023800 	.word	0x40023800
 80031b8:	080097f4 	.word	0x080097f4

080031bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031c0:	f7ff ffdc 	bl	800317c <HAL_RCC_GetHCLKFreq>
 80031c4:	4601      	mov	r1, r0
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	0b5b      	lsrs	r3, r3, #13
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	4a03      	ldr	r2, [pc, #12]	; (80031e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031d2:	5cd3      	ldrb	r3, [r2, r3]
 80031d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031d8:	4618      	mov	r0, r3
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40023800 	.word	0x40023800
 80031e0:	080097f4 	.word	0x080097f4

080031e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	220f      	movs	r2, #15
 80031f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031f4:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_RCC_GetClockConfig+0x5c>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 0203 	and.w	r2, r3, #3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003200:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <HAL_RCC_GetClockConfig+0x5c>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <HAL_RCC_GetClockConfig+0x5c>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003218:	4b09      	ldr	r3, [pc, #36]	; (8003240 <HAL_RCC_GetClockConfig+0x5c>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	08db      	lsrs	r3, r3, #3
 800321e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003226:	4b07      	ldr	r3, [pc, #28]	; (8003244 <HAL_RCC_GetClockConfig+0x60>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 020f 	and.w	r2, r3, #15
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	601a      	str	r2, [r3, #0]
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40023800 	.word	0x40023800
 8003244:	40023c00 	.word	0x40023c00

08003248 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003254:	2300      	movs	r3, #0
 8003256:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d012      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003270:	4b69      	ldr	r3, [pc, #420]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	4a68      	ldr	r2, [pc, #416]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003276:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800327a:	6093      	str	r3, [r2, #8]
 800327c:	4b66      	ldr	r3, [pc, #408]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003284:	4964      	ldr	r1, [pc, #400]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003292:	2301      	movs	r3, #1
 8003294:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d017      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032a2:	4b5d      	ldr	r3, [pc, #372]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b0:	4959      	ldr	r1, [pc, #356]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032c0:	d101      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80032c2:	2301      	movs	r3, #1
 80032c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80032ce:	2301      	movs	r3, #1
 80032d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d017      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032de:	4b4e      	ldr	r3, [pc, #312]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	494a      	ldr	r1, [pc, #296]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032fc:	d101      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80032fe:	2301      	movs	r3, #1
 8003300:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800330a:	2301      	movs	r3, #1
 800330c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800331a:	2301      	movs	r3, #1
 800331c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 808b 	beq.w	8003442 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800332c:	4b3a      	ldr	r3, [pc, #232]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	4a39      	ldr	r2, [pc, #228]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003336:	6413      	str	r3, [r2, #64]	; 0x40
 8003338:	4b37      	ldr	r3, [pc, #220]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003344:	4b35      	ldr	r3, [pc, #212]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a34      	ldr	r2, [pc, #208]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800334a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003350:	f7fd feb8 	bl	80010c4 <HAL_GetTick>
 8003354:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003356:	e008      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003358:	f7fd feb4 	bl	80010c4 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b64      	cmp	r3, #100	; 0x64
 8003364:	d901      	bls.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e355      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800336a:	4b2c      	ldr	r3, [pc, #176]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003376:	4b28      	ldr	r3, [pc, #160]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800337e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d035      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	429a      	cmp	r2, r3
 8003392:	d02e      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003394:	4b20      	ldr	r3, [pc, #128]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800339c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800339e:	4b1e      	ldr	r3, [pc, #120]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a2:	4a1d      	ldr	r2, [pc, #116]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033aa:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ae:	4a1a      	ldr	r2, [pc, #104]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80033b6:	4a18      	ldr	r2, [pc, #96]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033bc:	4b16      	ldr	r3, [pc, #88]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d114      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fd fe7c 	bl	80010c4 <HAL_GetTick>
 80033cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ce:	e00a      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d0:	f7fd fe78 	bl	80010c4 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	; 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e317      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e6:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0ee      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033fe:	d111      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003400:	4b05      	ldr	r3, [pc, #20]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800340c:	4b04      	ldr	r3, [pc, #16]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800340e:	400b      	ands	r3, r1
 8003410:	4901      	ldr	r1, [pc, #4]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003412:	4313      	orrs	r3, r2
 8003414:	608b      	str	r3, [r1, #8]
 8003416:	e00b      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003418:	40023800 	.word	0x40023800
 800341c:	40007000 	.word	0x40007000
 8003420:	0ffffcff 	.word	0x0ffffcff
 8003424:	4bb0      	ldr	r3, [pc, #704]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4aaf      	ldr	r2, [pc, #700]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800342a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800342e:	6093      	str	r3, [r2, #8]
 8003430:	4bad      	ldr	r3, [pc, #692]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003432:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343c:	49aa      	ldr	r1, [pc, #680]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800343e:	4313      	orrs	r3, r2
 8003440:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0310 	and.w	r3, r3, #16
 800344a:	2b00      	cmp	r3, #0
 800344c:	d010      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800344e:	4ba6      	ldr	r3, [pc, #664]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003454:	4aa4      	ldr	r2, [pc, #656]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800345a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800345e:	4ba2      	ldr	r3, [pc, #648]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003460:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003468:	499f      	ldr	r1, [pc, #636]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800347c:	4b9a      	ldr	r3, [pc, #616]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003482:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800348a:	4997      	ldr	r1, [pc, #604]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800349e:	4b92      	ldr	r3, [pc, #584]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ac:	498e      	ldr	r1, [pc, #568]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034c0:	4b89      	ldr	r3, [pc, #548]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ce:	4986      	ldr	r1, [pc, #536]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034e2:	4b81      	ldr	r3, [pc, #516]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f0:	497d      	ldr	r1, [pc, #500]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003504:	4b78      	ldr	r3, [pc, #480]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350a:	f023 0203 	bic.w	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	4975      	ldr	r1, [pc, #468]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003526:	4b70      	ldr	r3, [pc, #448]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352c:	f023 020c 	bic.w	r2, r3, #12
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003534:	496c      	ldr	r1, [pc, #432]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003548:	4b67      	ldr	r3, [pc, #412]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003556:	4964      	ldr	r1, [pc, #400]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003558:	4313      	orrs	r3, r2
 800355a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800356a:	4b5f      	ldr	r3, [pc, #380]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800356c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003570:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003578:	495b      	ldr	r1, [pc, #364]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800358c:	4b56      	ldr	r3, [pc, #344]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800358e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003592:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359a:	4953      	ldr	r1, [pc, #332]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80035ae:	4b4e      	ldr	r3, [pc, #312]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035bc:	494a      	ldr	r1, [pc, #296]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80035d0:	4b45      	ldr	r3, [pc, #276]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035de:	4942      	ldr	r1, [pc, #264]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80035f2:	4b3d      	ldr	r3, [pc, #244]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003600:	4939      	ldr	r1, [pc, #228]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003614:	4b34      	ldr	r3, [pc, #208]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003622:	4931      	ldr	r1, [pc, #196]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d011      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003636:	4b2c      	ldr	r3, [pc, #176]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003644:	4928      	ldr	r1, [pc, #160]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003650:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003654:	d101      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003656:	2301      	movs	r3, #1
 8003658:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003666:	2301      	movs	r3, #1
 8003668:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003676:	4b1c      	ldr	r3, [pc, #112]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003684:	4918      	ldr	r1, [pc, #96]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00b      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003698:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036a8:	490f      	ldr	r1, [pc, #60]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d005      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036be:	f040 80d8 	bne.w	8003872 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036c2:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a08      	ldr	r2, [pc, #32]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80036c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ce:	f7fd fcf9 	bl	80010c4 <HAL_GetTick>
 80036d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036d4:	e00a      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036d6:	f7fd fcf5 	bl	80010c4 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b64      	cmp	r3, #100	; 0x64
 80036e2:	d903      	bls.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e196      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80036e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036ec:	4b6c      	ldr	r3, [pc, #432]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1ee      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d021      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003708:	2b00      	cmp	r3, #0
 800370a:	d11d      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800370c:	4b64      	ldr	r3, [pc, #400]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800370e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003712:	0c1b      	lsrs	r3, r3, #16
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800371a:	4b61      	ldr	r3, [pc, #388]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800371c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003720:	0e1b      	lsrs	r3, r3, #24
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	019a      	lsls	r2, r3, #6
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	041b      	lsls	r3, r3, #16
 8003732:	431a      	orrs	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	061b      	lsls	r3, r3, #24
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	071b      	lsls	r3, r3, #28
 8003740:	4957      	ldr	r1, [pc, #348]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d004      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800375c:	d00a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003766:	2b00      	cmp	r3, #0
 8003768:	d02e      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003772:	d129      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003774:	4b4a      	ldr	r3, [pc, #296]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800377a:	0c1b      	lsrs	r3, r3, #16
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003782:	4b47      	ldr	r3, [pc, #284]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003788:	0f1b      	lsrs	r3, r3, #28
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	019a      	lsls	r2, r3, #6
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	041b      	lsls	r3, r3, #16
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	061b      	lsls	r3, r3, #24
 80037a2:	431a      	orrs	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	071b      	lsls	r3, r3, #28
 80037a8:	493d      	ldr	r1, [pc, #244]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037b0:	4b3b      	ldr	r3, [pc, #236]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037b6:	f023 021f 	bic.w	r2, r3, #31
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	3b01      	subs	r3, #1
 80037c0:	4937      	ldr	r1, [pc, #220]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01d      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037d4:	4b32      	ldr	r3, [pc, #200]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037da:	0e1b      	lsrs	r3, r3, #24
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037e2:	4b2f      	ldr	r3, [pc, #188]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e8:	0f1b      	lsrs	r3, r3, #28
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	019a      	lsls	r2, r3, #6
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	041b      	lsls	r3, r3, #16
 80037fc:	431a      	orrs	r2, r3
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	061b      	lsls	r3, r3, #24
 8003802:	431a      	orrs	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	071b      	lsls	r3, r3, #28
 8003808:	4925      	ldr	r1, [pc, #148]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d011      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	019a      	lsls	r2, r3, #6
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	041b      	lsls	r3, r3, #16
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	061b      	lsls	r3, r3, #24
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	071b      	lsls	r3, r3, #28
 8003838:	4919      	ldr	r1, [pc, #100]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003840:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a16      	ldr	r2, [pc, #88]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003846:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800384a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800384c:	f7fd fc3a 	bl	80010c4 <HAL_GetTick>
 8003850:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003854:	f7fd fc36 	bl	80010c4 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	; 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e0d7      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003866:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	2b01      	cmp	r3, #1
 8003876:	f040 80cd 	bne.w	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800387a:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a08      	ldr	r2, [pc, #32]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003884:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003886:	f7fd fc1d 	bl	80010c4 <HAL_GetTick>
 800388a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800388c:	e00a      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800388e:	f7fd fc19 	bl	80010c4 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b64      	cmp	r3, #100	; 0x64
 800389a:	d903      	bls.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e0ba      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80038a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038a4:	4b5e      	ldr	r3, [pc, #376]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038b0:	d0ed      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d02e      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d12a      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038da:	4b51      	ldr	r3, [pc, #324]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038e8:	4b4d      	ldr	r3, [pc, #308]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ee:	0f1b      	lsrs	r3, r3, #28
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	019a      	lsls	r2, r3, #6
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	041b      	lsls	r3, r3, #16
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	061b      	lsls	r3, r3, #24
 8003908:	431a      	orrs	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	071b      	lsls	r3, r3, #28
 800390e:	4944      	ldr	r1, [pc, #272]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003916:	4b42      	ldr	r3, [pc, #264]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800391c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	3b01      	subs	r3, #1
 8003926:	021b      	lsls	r3, r3, #8
 8003928:	493d      	ldr	r1, [pc, #244]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d022      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003940:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003944:	d11d      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003946:	4b36      	ldr	r3, [pc, #216]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394c:	0e1b      	lsrs	r3, r3, #24
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003954:	4b32      	ldr	r3, [pc, #200]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395a:	0f1b      	lsrs	r3, r3, #28
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	019a      	lsls	r2, r3, #6
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	041b      	lsls	r3, r3, #16
 800396e:	431a      	orrs	r2, r3
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	061b      	lsls	r3, r3, #24
 8003974:	431a      	orrs	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	071b      	lsls	r3, r3, #28
 800397a:	4929      	ldr	r1, [pc, #164]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d028      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800398e:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003994:	0e1b      	lsrs	r3, r3, #24
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800399c:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	0c1b      	lsrs	r3, r3, #16
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	019a      	lsls	r2, r3, #6
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	041b      	lsls	r3, r3, #16
 80039b4:	431a      	orrs	r2, r3
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	061b      	lsls	r3, r3, #24
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	071b      	lsls	r3, r3, #28
 80039c2:	4917      	ldr	r1, [pc, #92]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80039ca:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	4911      	ldr	r1, [pc, #68]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039e0:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a0e      	ldr	r2, [pc, #56]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80039e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ec:	f7fd fb6a 	bl	80010c4 <HAL_GetTick>
 80039f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039f4:	f7fd fb66 	bl	80010c4 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	; 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e007      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a06:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a12:	d1ef      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3720      	adds	r7, #32
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800

08003a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e01d      	b.n	8003a72 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fd f962 	bl	8000d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	4619      	mov	r1, r3
 8003a62:	4610      	mov	r0, r2
 8003a64:	f000 fa36 	bl	8003ed4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0201 	orr.w	r2, r2, #1
 8003a92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	4b0c      	ldr	r3, [pc, #48]	; (8003acc <HAL_TIM_Base_Start_IT+0x50>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b06      	cmp	r3, #6
 8003aa4:	d00b      	beq.n	8003abe <HAL_TIM_Base_Start_IT+0x42>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aac:	d007      	beq.n	8003abe <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0201 	orr.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	00010007 	.word	0x00010007

08003ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d122      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d11b      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0202 	mvn.w	r2, #2
 8003afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f9c0 	bl	8003e98 <HAL_TIM_IC_CaptureCallback>
 8003b18:	e005      	b.n	8003b26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f9b2 	bl	8003e84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f9c3 	bl	8003eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d122      	bne.n	8003b80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d11b      	bne.n	8003b80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0204 	mvn.w	r2, #4
 8003b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2202      	movs	r2, #2
 8003b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f996 	bl	8003e98 <HAL_TIM_IC_CaptureCallback>
 8003b6c:	e005      	b.n	8003b7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f988 	bl	8003e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f999 	bl	8003eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d122      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d11b      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0208 	mvn.w	r2, #8
 8003ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2204      	movs	r2, #4
 8003baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f96c 	bl	8003e98 <HAL_TIM_IC_CaptureCallback>
 8003bc0:	e005      	b.n	8003bce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f95e 	bl	8003e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f96f 	bl	8003eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b10      	cmp	r3, #16
 8003be0:	d122      	bne.n	8003c28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b10      	cmp	r3, #16
 8003bee:	d11b      	bne.n	8003c28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0210 	mvn.w	r2, #16
 8003bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2208      	movs	r2, #8
 8003bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f942 	bl	8003e98 <HAL_TIM_IC_CaptureCallback>
 8003c14:	e005      	b.n	8003c22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f934 	bl	8003e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f945 	bl	8003eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d10e      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d107      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0201 	mvn.w	r2, #1
 8003c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fc ff70 	bl	8000b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5e:	2b80      	cmp	r3, #128	; 0x80
 8003c60:	d10e      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6c:	2b80      	cmp	r3, #128	; 0x80
 8003c6e:	d107      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fafc 	bl	8004278 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c8e:	d10e      	bne.n	8003cae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9a:	2b80      	cmp	r3, #128	; 0x80
 8003c9c:	d107      	bne.n	8003cae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 faef 	bl	800428c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb8:	2b40      	cmp	r3, #64	; 0x40
 8003cba:	d10e      	bne.n	8003cda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc6:	2b40      	cmp	r3, #64	; 0x40
 8003cc8:	d107      	bne.n	8003cda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f8f3 	bl	8003ec0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d10e      	bne.n	8003d06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	f003 0320 	and.w	r3, r3, #32
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	d107      	bne.n	8003d06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f06f 0220 	mvn.w	r2, #32
 8003cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 faaf 	bl	8004264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_TIM_ConfigClockSource+0x18>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e0a6      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x166>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4b4f      	ldr	r3, [pc, #316]	; (8003e80 <HAL_TIM_ConfigClockSource+0x170>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b40      	cmp	r3, #64	; 0x40
 8003d5e:	d067      	beq.n	8003e30 <HAL_TIM_ConfigClockSource+0x120>
 8003d60:	2b40      	cmp	r3, #64	; 0x40
 8003d62:	d80b      	bhi.n	8003d7c <HAL_TIM_ConfigClockSource+0x6c>
 8003d64:	2b10      	cmp	r3, #16
 8003d66:	d073      	beq.n	8003e50 <HAL_TIM_ConfigClockSource+0x140>
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d802      	bhi.n	8003d72 <HAL_TIM_ConfigClockSource+0x62>
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d06f      	beq.n	8003e50 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d70:	e078      	b.n	8003e64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d72:	2b20      	cmp	r3, #32
 8003d74:	d06c      	beq.n	8003e50 <HAL_TIM_ConfigClockSource+0x140>
 8003d76:	2b30      	cmp	r3, #48	; 0x30
 8003d78:	d06a      	beq.n	8003e50 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d7a:	e073      	b.n	8003e64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d7c:	2b70      	cmp	r3, #112	; 0x70
 8003d7e:	d00d      	beq.n	8003d9c <HAL_TIM_ConfigClockSource+0x8c>
 8003d80:	2b70      	cmp	r3, #112	; 0x70
 8003d82:	d804      	bhi.n	8003d8e <HAL_TIM_ConfigClockSource+0x7e>
 8003d84:	2b50      	cmp	r3, #80	; 0x50
 8003d86:	d033      	beq.n	8003df0 <HAL_TIM_ConfigClockSource+0xe0>
 8003d88:	2b60      	cmp	r3, #96	; 0x60
 8003d8a:	d041      	beq.n	8003e10 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d8c:	e06a      	b.n	8003e64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d92:	d066      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x152>
 8003d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d98:	d017      	beq.n	8003dca <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d9a:	e063      	b.n	8003e64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	6899      	ldr	r1, [r3, #8]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f000 f9ac 	bl	8004108 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dbe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	609a      	str	r2, [r3, #8]
      break;
 8003dc8:	e04c      	b.n	8003e64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	6899      	ldr	r1, [r3, #8]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f000 f995 	bl	8004108 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dec:	609a      	str	r2, [r3, #8]
      break;
 8003dee:	e039      	b.n	8003e64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	6859      	ldr	r1, [r3, #4]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	f000 f909 	bl	8004014 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2150      	movs	r1, #80	; 0x50
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 f962 	bl	80040d2 <TIM_ITRx_SetConfig>
      break;
 8003e0e:	e029      	b.n	8003e64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	6859      	ldr	r1, [r3, #4]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f000 f928 	bl	8004072 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2160      	movs	r1, #96	; 0x60
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 f952 	bl	80040d2 <TIM_ITRx_SetConfig>
      break;
 8003e2e:	e019      	b.n	8003e64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	6859      	ldr	r1, [r3, #4]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f000 f8e9 	bl	8004014 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2140      	movs	r1, #64	; 0x40
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 f942 	bl	80040d2 <TIM_ITRx_SetConfig>
      break;
 8003e4e:	e009      	b.n	8003e64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	f000 f939 	bl	80040d2 <TIM_ITRx_SetConfig>
      break;
 8003e60:	e000      	b.n	8003e64 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	fffeff88 	.word	0xfffeff88

08003e84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a40      	ldr	r2, [pc, #256]	; (8003fe8 <TIM_Base_SetConfig+0x114>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d013      	beq.n	8003f14 <TIM_Base_SetConfig+0x40>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef2:	d00f      	beq.n	8003f14 <TIM_Base_SetConfig+0x40>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a3d      	ldr	r2, [pc, #244]	; (8003fec <TIM_Base_SetConfig+0x118>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00b      	beq.n	8003f14 <TIM_Base_SetConfig+0x40>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a3c      	ldr	r2, [pc, #240]	; (8003ff0 <TIM_Base_SetConfig+0x11c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d007      	beq.n	8003f14 <TIM_Base_SetConfig+0x40>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a3b      	ldr	r2, [pc, #236]	; (8003ff4 <TIM_Base_SetConfig+0x120>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d003      	beq.n	8003f14 <TIM_Base_SetConfig+0x40>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a3a      	ldr	r2, [pc, #232]	; (8003ff8 <TIM_Base_SetConfig+0x124>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d108      	bne.n	8003f26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a2f      	ldr	r2, [pc, #188]	; (8003fe8 <TIM_Base_SetConfig+0x114>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d02b      	beq.n	8003f86 <TIM_Base_SetConfig+0xb2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f34:	d027      	beq.n	8003f86 <TIM_Base_SetConfig+0xb2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a2c      	ldr	r2, [pc, #176]	; (8003fec <TIM_Base_SetConfig+0x118>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d023      	beq.n	8003f86 <TIM_Base_SetConfig+0xb2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a2b      	ldr	r2, [pc, #172]	; (8003ff0 <TIM_Base_SetConfig+0x11c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d01f      	beq.n	8003f86 <TIM_Base_SetConfig+0xb2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a2a      	ldr	r2, [pc, #168]	; (8003ff4 <TIM_Base_SetConfig+0x120>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d01b      	beq.n	8003f86 <TIM_Base_SetConfig+0xb2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a29      	ldr	r2, [pc, #164]	; (8003ff8 <TIM_Base_SetConfig+0x124>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d017      	beq.n	8003f86 <TIM_Base_SetConfig+0xb2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a28      	ldr	r2, [pc, #160]	; (8003ffc <TIM_Base_SetConfig+0x128>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d013      	beq.n	8003f86 <TIM_Base_SetConfig+0xb2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a27      	ldr	r2, [pc, #156]	; (8004000 <TIM_Base_SetConfig+0x12c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d00f      	beq.n	8003f86 <TIM_Base_SetConfig+0xb2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a26      	ldr	r2, [pc, #152]	; (8004004 <TIM_Base_SetConfig+0x130>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00b      	beq.n	8003f86 <TIM_Base_SetConfig+0xb2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a25      	ldr	r2, [pc, #148]	; (8004008 <TIM_Base_SetConfig+0x134>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d007      	beq.n	8003f86 <TIM_Base_SetConfig+0xb2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a24      	ldr	r2, [pc, #144]	; (800400c <TIM_Base_SetConfig+0x138>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d003      	beq.n	8003f86 <TIM_Base_SetConfig+0xb2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a23      	ldr	r2, [pc, #140]	; (8004010 <TIM_Base_SetConfig+0x13c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d108      	bne.n	8003f98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a0a      	ldr	r2, [pc, #40]	; (8003fe8 <TIM_Base_SetConfig+0x114>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d003      	beq.n	8003fcc <TIM_Base_SetConfig+0xf8>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a0c      	ldr	r2, [pc, #48]	; (8003ff8 <TIM_Base_SetConfig+0x124>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d103      	bne.n	8003fd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	615a      	str	r2, [r3, #20]
}
 8003fda:	bf00      	nop
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40010000 	.word	0x40010000
 8003fec:	40000400 	.word	0x40000400
 8003ff0:	40000800 	.word	0x40000800
 8003ff4:	40000c00 	.word	0x40000c00
 8003ff8:	40010400 	.word	0x40010400
 8003ffc:	40014000 	.word	0x40014000
 8004000:	40014400 	.word	0x40014400
 8004004:	40014800 	.word	0x40014800
 8004008:	40001800 	.word	0x40001800
 800400c:	40001c00 	.word	0x40001c00
 8004010:	40002000 	.word	0x40002000

08004014 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	f023 0201 	bic.w	r2, r3, #1
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800403e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f023 030a 	bic.w	r3, r3, #10
 8004050:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	4313      	orrs	r3, r2
 8004058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	621a      	str	r2, [r3, #32]
}
 8004066:	bf00      	nop
 8004068:	371c      	adds	r7, #28
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004072:	b480      	push	{r7}
 8004074:	b087      	sub	sp, #28
 8004076:	af00      	add	r7, sp, #0
 8004078:	60f8      	str	r0, [r7, #12]
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	f023 0210 	bic.w	r2, r3, #16
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800409c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	031b      	lsls	r3, r3, #12
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	621a      	str	r2, [r3, #32]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b085      	sub	sp, #20
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f043 0307 	orr.w	r3, r3, #7
 80040f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	609a      	str	r2, [r3, #8]
}
 80040fc:	bf00      	nop
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004122:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	021a      	lsls	r2, r3, #8
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	431a      	orrs	r2, r3
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4313      	orrs	r3, r2
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4313      	orrs	r3, r2
 8004134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	609a      	str	r2, [r3, #8]
}
 800413c:	bf00      	nop
 800413e:	371c      	adds	r7, #28
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800415c:	2302      	movs	r3, #2
 800415e:	e06d      	b.n	800423c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a30      	ldr	r2, [pc, #192]	; (8004248 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d004      	beq.n	8004194 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a2f      	ldr	r2, [pc, #188]	; (800424c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d108      	bne.n	80041a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800419a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a20      	ldr	r2, [pc, #128]	; (8004248 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d022      	beq.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d2:	d01d      	beq.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1d      	ldr	r2, [pc, #116]	; (8004250 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d018      	beq.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1c      	ldr	r2, [pc, #112]	; (8004254 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d013      	beq.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1a      	ldr	r2, [pc, #104]	; (8004258 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00e      	beq.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a15      	ldr	r2, [pc, #84]	; (800424c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d009      	beq.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a16      	ldr	r2, [pc, #88]	; (800425c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d004      	beq.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a15      	ldr	r2, [pc, #84]	; (8004260 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d10c      	bne.n	800422a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004216:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	4313      	orrs	r3, r2
 8004220:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	40010000 	.word	0x40010000
 800424c:	40010400 	.word	0x40010400
 8004250:	40000400 	.word	0x40000400
 8004254:	40000800 	.word	0x40000800
 8004258:	40000c00 	.word	0x40000c00
 800425c:	40014000 	.word	0x40014000
 8004260:	40001800 	.word	0x40001800

08004264 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e040      	b.n	8004334 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7fc fd4a 	bl	8000d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2224      	movs	r2, #36	; 0x24
 80042cc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0201 	bic.w	r2, r2, #1
 80042dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fa04 	bl	80046ec <UART_SetConfig>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d101      	bne.n	80042ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e022      	b.n	8004334 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d002      	beq.n	80042fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fca2 	bl	8004c40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800430a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800431a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fd29 	bl	8004d84 <UART_CheckIdleState>
 8004332:	4603      	mov	r3, r0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08a      	sub	sp, #40	; 0x28
 8004340:	af02      	add	r7, sp, #8
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	4613      	mov	r3, r2
 800434a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004350:	2b20      	cmp	r3, #32
 8004352:	d17f      	bne.n	8004454 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <HAL_UART_Transmit+0x24>
 800435a:	88fb      	ldrh	r3, [r7, #6]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e078      	b.n	8004456 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_UART_Transmit+0x36>
 800436e:	2302      	movs	r3, #2
 8004370:	e071      	b.n	8004456 <HAL_UART_Transmit+0x11a>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2221      	movs	r2, #33	; 0x21
 8004384:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004386:	f7fc fe9d 	bl	80010c4 <HAL_GetTick>
 800438a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	88fa      	ldrh	r2, [r7, #6]
 8004390:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	88fa      	ldrh	r2, [r7, #6]
 8004398:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a4:	d108      	bne.n	80043b8 <HAL_UART_Transmit+0x7c>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d104      	bne.n	80043b8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	61bb      	str	r3, [r7, #24]
 80043b6:	e003      	b.n	80043c0 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80043c8:	e02c      	b.n	8004424 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2200      	movs	r2, #0
 80043d2:	2180      	movs	r1, #128	; 0x80
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 fd04 	bl	8004de2 <UART_WaitOnFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e038      	b.n	8004456 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10b      	bne.n	8004402 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	3302      	adds	r3, #2
 80043fe:	61bb      	str	r3, [r7, #24]
 8004400:	e007      	b.n	8004412 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	781a      	ldrb	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	3301      	adds	r3, #1
 8004410:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1cc      	bne.n	80043ca <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	2200      	movs	r2, #0
 8004438:	2140      	movs	r1, #64	; 0x40
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 fcd1 	bl	8004de2 <UART_WaitOnFlagUntilTimeout>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e005      	b.n	8004456 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2220      	movs	r2, #32
 800444e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	e000      	b.n	8004456 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004454:	2302      	movs	r3, #2
  }
}
 8004456:	4618      	mov	r0, r3
 8004458:	3720      	adds	r7, #32
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004480:	69fa      	ldr	r2, [r7, #28]
 8004482:	f640 030f 	movw	r3, #2063	; 0x80f
 8004486:	4013      	ands	r3, r2
 8004488:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d113      	bne.n	80044b8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00e      	beq.n	80044b8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d009      	beq.n	80044b8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 8100 	beq.w	80046ae <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	4798      	blx	r3
      }
      return;
 80044b6:	e0fa      	b.n	80046ae <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 80d5 	beq.w	800466a <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d105      	bne.n	80044d6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 80ca 	beq.w	800466a <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00e      	beq.n	80044fe <HAL_UART_IRQHandler+0x9e>
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d009      	beq.n	80044fe <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2201      	movs	r2, #1
 80044f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044f6:	f043 0201 	orr.w	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00e      	beq.n	8004526 <HAL_UART_IRQHandler+0xc6>
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d009      	beq.n	8004526 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2202      	movs	r2, #2
 8004518:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800451e:	f043 0204 	orr.w	r2, r3, #4
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00e      	beq.n	800454e <HAL_UART_IRQHandler+0xee>
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d009      	beq.n	800454e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2204      	movs	r2, #4
 8004540:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004546:	f043 0202 	orr.w	r2, r3, #2
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d013      	beq.n	8004580 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	f003 0320 	and.w	r3, r3, #32
 800455e:	2b00      	cmp	r3, #0
 8004560:	d104      	bne.n	800456c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004568:	2b00      	cmp	r3, #0
 800456a:	d009      	beq.n	8004580 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2208      	movs	r2, #8
 8004572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004578:	f043 0208 	orr.w	r2, r3, #8
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00f      	beq.n	80045aa <HAL_UART_IRQHandler+0x14a>
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800459c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045a2:	f043 0220 	orr.w	r2, r3, #32
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d07f      	beq.n	80046b2 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00c      	beq.n	80045d6 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	f003 0320 	and.w	r3, r3, #32
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d007      	beq.n	80045d6 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045da:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e6:	2b40      	cmp	r3, #64	; 0x40
 80045e8:	d004      	beq.n	80045f4 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d031      	beq.n	8004658 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 fc6f 	bl	8004ed8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004604:	2b40      	cmp	r3, #64	; 0x40
 8004606:	d123      	bne.n	8004650 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004616:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800461c:	2b00      	cmp	r3, #0
 800461e:	d013      	beq.n	8004648 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004624:	4a26      	ldr	r2, [pc, #152]	; (80046c0 <HAL_UART_IRQHandler+0x260>)
 8004626:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800462c:	4618      	mov	r0, r3
 800462e:	f7fd fa97 	bl	8001b60 <HAL_DMA_Abort_IT>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d016      	beq.n	8004666 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800463c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004642:	4610      	mov	r0, r2
 8004644:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004646:	e00e      	b.n	8004666 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f845 	bl	80046d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800464e:	e00a      	b.n	8004666 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f841 	bl	80046d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004656:	e006      	b.n	8004666 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f83d 	bl	80046d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004664:	e025      	b.n	80046b2 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004666:	bf00      	nop
    return;
 8004668:	e023      	b.n	80046b2 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00d      	beq.n	8004690 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467a:	2b00      	cmp	r3, #0
 800467c:	d008      	beq.n	8004690 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004682:	2b00      	cmp	r3, #0
 8004684:	d017      	beq.n	80046b6 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	4798      	blx	r3
    }
    return;
 800468e:	e012      	b.n	80046b6 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00e      	beq.n	80046b8 <HAL_UART_IRQHandler+0x258>
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d009      	beq.n	80046b8 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 fc4d 	bl	8004f44 <UART_EndTransmit_IT>
    return;
 80046aa:	bf00      	nop
 80046ac:	e004      	b.n	80046b8 <HAL_UART_IRQHandler+0x258>
      return;
 80046ae:	bf00      	nop
 80046b0:	e002      	b.n	80046b8 <HAL_UART_IRQHandler+0x258>
    return;
 80046b2:	bf00      	nop
 80046b4:	e000      	b.n	80046b8 <HAL_UART_IRQHandler+0x258>
    return;
 80046b6:	bf00      	nop
  }

}
 80046b8:	3720      	adds	r7, #32
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	08004f19 	.word	0x08004f19

080046c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	4313      	orrs	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	4bb1      	ldr	r3, [pc, #708]	; (80049e0 <UART_SetConfig+0x2f4>)
 800471c:	4013      	ands	r3, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6812      	ldr	r2, [r2, #0]
 8004722:	6939      	ldr	r1, [r7, #16]
 8004724:	430b      	orrs	r3, r1
 8004726:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	430a      	orrs	r2, r1
 8004760:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a9f      	ldr	r2, [pc, #636]	; (80049e4 <UART_SetConfig+0x2f8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d121      	bne.n	80047b0 <UART_SetConfig+0xc4>
 800476c:	4b9e      	ldr	r3, [pc, #632]	; (80049e8 <UART_SetConfig+0x2fc>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	2b03      	cmp	r3, #3
 8004778:	d816      	bhi.n	80047a8 <UART_SetConfig+0xbc>
 800477a:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <UART_SetConfig+0x94>)
 800477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004780:	08004791 	.word	0x08004791
 8004784:	0800479d 	.word	0x0800479d
 8004788:	08004797 	.word	0x08004797
 800478c:	080047a3 	.word	0x080047a3
 8004790:	2301      	movs	r3, #1
 8004792:	77fb      	strb	r3, [r7, #31]
 8004794:	e151      	b.n	8004a3a <UART_SetConfig+0x34e>
 8004796:	2302      	movs	r3, #2
 8004798:	77fb      	strb	r3, [r7, #31]
 800479a:	e14e      	b.n	8004a3a <UART_SetConfig+0x34e>
 800479c:	2304      	movs	r3, #4
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	e14b      	b.n	8004a3a <UART_SetConfig+0x34e>
 80047a2:	2308      	movs	r3, #8
 80047a4:	77fb      	strb	r3, [r7, #31]
 80047a6:	e148      	b.n	8004a3a <UART_SetConfig+0x34e>
 80047a8:	2310      	movs	r3, #16
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	bf00      	nop
 80047ae:	e144      	b.n	8004a3a <UART_SetConfig+0x34e>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a8d      	ldr	r2, [pc, #564]	; (80049ec <UART_SetConfig+0x300>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d134      	bne.n	8004824 <UART_SetConfig+0x138>
 80047ba:	4b8b      	ldr	r3, [pc, #556]	; (80049e8 <UART_SetConfig+0x2fc>)
 80047bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c0:	f003 030c 	and.w	r3, r3, #12
 80047c4:	2b0c      	cmp	r3, #12
 80047c6:	d829      	bhi.n	800481c <UART_SetConfig+0x130>
 80047c8:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <UART_SetConfig+0xe4>)
 80047ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ce:	bf00      	nop
 80047d0:	08004805 	.word	0x08004805
 80047d4:	0800481d 	.word	0x0800481d
 80047d8:	0800481d 	.word	0x0800481d
 80047dc:	0800481d 	.word	0x0800481d
 80047e0:	08004811 	.word	0x08004811
 80047e4:	0800481d 	.word	0x0800481d
 80047e8:	0800481d 	.word	0x0800481d
 80047ec:	0800481d 	.word	0x0800481d
 80047f0:	0800480b 	.word	0x0800480b
 80047f4:	0800481d 	.word	0x0800481d
 80047f8:	0800481d 	.word	0x0800481d
 80047fc:	0800481d 	.word	0x0800481d
 8004800:	08004817 	.word	0x08004817
 8004804:	2300      	movs	r3, #0
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e117      	b.n	8004a3a <UART_SetConfig+0x34e>
 800480a:	2302      	movs	r3, #2
 800480c:	77fb      	strb	r3, [r7, #31]
 800480e:	e114      	b.n	8004a3a <UART_SetConfig+0x34e>
 8004810:	2304      	movs	r3, #4
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e111      	b.n	8004a3a <UART_SetConfig+0x34e>
 8004816:	2308      	movs	r3, #8
 8004818:	77fb      	strb	r3, [r7, #31]
 800481a:	e10e      	b.n	8004a3a <UART_SetConfig+0x34e>
 800481c:	2310      	movs	r3, #16
 800481e:	77fb      	strb	r3, [r7, #31]
 8004820:	bf00      	nop
 8004822:	e10a      	b.n	8004a3a <UART_SetConfig+0x34e>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a71      	ldr	r2, [pc, #452]	; (80049f0 <UART_SetConfig+0x304>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d120      	bne.n	8004870 <UART_SetConfig+0x184>
 800482e:	4b6e      	ldr	r3, [pc, #440]	; (80049e8 <UART_SetConfig+0x2fc>)
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004834:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004838:	2b10      	cmp	r3, #16
 800483a:	d00f      	beq.n	800485c <UART_SetConfig+0x170>
 800483c:	2b10      	cmp	r3, #16
 800483e:	d802      	bhi.n	8004846 <UART_SetConfig+0x15a>
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <UART_SetConfig+0x164>
 8004844:	e010      	b.n	8004868 <UART_SetConfig+0x17c>
 8004846:	2b20      	cmp	r3, #32
 8004848:	d005      	beq.n	8004856 <UART_SetConfig+0x16a>
 800484a:	2b30      	cmp	r3, #48	; 0x30
 800484c:	d009      	beq.n	8004862 <UART_SetConfig+0x176>
 800484e:	e00b      	b.n	8004868 <UART_SetConfig+0x17c>
 8004850:	2300      	movs	r3, #0
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e0f1      	b.n	8004a3a <UART_SetConfig+0x34e>
 8004856:	2302      	movs	r3, #2
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	e0ee      	b.n	8004a3a <UART_SetConfig+0x34e>
 800485c:	2304      	movs	r3, #4
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e0eb      	b.n	8004a3a <UART_SetConfig+0x34e>
 8004862:	2308      	movs	r3, #8
 8004864:	77fb      	strb	r3, [r7, #31]
 8004866:	e0e8      	b.n	8004a3a <UART_SetConfig+0x34e>
 8004868:	2310      	movs	r3, #16
 800486a:	77fb      	strb	r3, [r7, #31]
 800486c:	bf00      	nop
 800486e:	e0e4      	b.n	8004a3a <UART_SetConfig+0x34e>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a5f      	ldr	r2, [pc, #380]	; (80049f4 <UART_SetConfig+0x308>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d120      	bne.n	80048bc <UART_SetConfig+0x1d0>
 800487a:	4b5b      	ldr	r3, [pc, #364]	; (80049e8 <UART_SetConfig+0x2fc>)
 800487c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004880:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004884:	2b40      	cmp	r3, #64	; 0x40
 8004886:	d00f      	beq.n	80048a8 <UART_SetConfig+0x1bc>
 8004888:	2b40      	cmp	r3, #64	; 0x40
 800488a:	d802      	bhi.n	8004892 <UART_SetConfig+0x1a6>
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <UART_SetConfig+0x1b0>
 8004890:	e010      	b.n	80048b4 <UART_SetConfig+0x1c8>
 8004892:	2b80      	cmp	r3, #128	; 0x80
 8004894:	d005      	beq.n	80048a2 <UART_SetConfig+0x1b6>
 8004896:	2bc0      	cmp	r3, #192	; 0xc0
 8004898:	d009      	beq.n	80048ae <UART_SetConfig+0x1c2>
 800489a:	e00b      	b.n	80048b4 <UART_SetConfig+0x1c8>
 800489c:	2300      	movs	r3, #0
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e0cb      	b.n	8004a3a <UART_SetConfig+0x34e>
 80048a2:	2302      	movs	r3, #2
 80048a4:	77fb      	strb	r3, [r7, #31]
 80048a6:	e0c8      	b.n	8004a3a <UART_SetConfig+0x34e>
 80048a8:	2304      	movs	r3, #4
 80048aa:	77fb      	strb	r3, [r7, #31]
 80048ac:	e0c5      	b.n	8004a3a <UART_SetConfig+0x34e>
 80048ae:	2308      	movs	r3, #8
 80048b0:	77fb      	strb	r3, [r7, #31]
 80048b2:	e0c2      	b.n	8004a3a <UART_SetConfig+0x34e>
 80048b4:	2310      	movs	r3, #16
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	bf00      	nop
 80048ba:	e0be      	b.n	8004a3a <UART_SetConfig+0x34e>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a4d      	ldr	r2, [pc, #308]	; (80049f8 <UART_SetConfig+0x30c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d124      	bne.n	8004910 <UART_SetConfig+0x224>
 80048c6:	4b48      	ldr	r3, [pc, #288]	; (80049e8 <UART_SetConfig+0x2fc>)
 80048c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d4:	d012      	beq.n	80048fc <UART_SetConfig+0x210>
 80048d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048da:	d802      	bhi.n	80048e2 <UART_SetConfig+0x1f6>
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d007      	beq.n	80048f0 <UART_SetConfig+0x204>
 80048e0:	e012      	b.n	8004908 <UART_SetConfig+0x21c>
 80048e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e6:	d006      	beq.n	80048f6 <UART_SetConfig+0x20a>
 80048e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ec:	d009      	beq.n	8004902 <UART_SetConfig+0x216>
 80048ee:	e00b      	b.n	8004908 <UART_SetConfig+0x21c>
 80048f0:	2300      	movs	r3, #0
 80048f2:	77fb      	strb	r3, [r7, #31]
 80048f4:	e0a1      	b.n	8004a3a <UART_SetConfig+0x34e>
 80048f6:	2302      	movs	r3, #2
 80048f8:	77fb      	strb	r3, [r7, #31]
 80048fa:	e09e      	b.n	8004a3a <UART_SetConfig+0x34e>
 80048fc:	2304      	movs	r3, #4
 80048fe:	77fb      	strb	r3, [r7, #31]
 8004900:	e09b      	b.n	8004a3a <UART_SetConfig+0x34e>
 8004902:	2308      	movs	r3, #8
 8004904:	77fb      	strb	r3, [r7, #31]
 8004906:	e098      	b.n	8004a3a <UART_SetConfig+0x34e>
 8004908:	2310      	movs	r3, #16
 800490a:	77fb      	strb	r3, [r7, #31]
 800490c:	bf00      	nop
 800490e:	e094      	b.n	8004a3a <UART_SetConfig+0x34e>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a39      	ldr	r2, [pc, #228]	; (80049fc <UART_SetConfig+0x310>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d124      	bne.n	8004964 <UART_SetConfig+0x278>
 800491a:	4b33      	ldr	r3, [pc, #204]	; (80049e8 <UART_SetConfig+0x2fc>)
 800491c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004920:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004928:	d012      	beq.n	8004950 <UART_SetConfig+0x264>
 800492a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800492e:	d802      	bhi.n	8004936 <UART_SetConfig+0x24a>
 8004930:	2b00      	cmp	r3, #0
 8004932:	d007      	beq.n	8004944 <UART_SetConfig+0x258>
 8004934:	e012      	b.n	800495c <UART_SetConfig+0x270>
 8004936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800493a:	d006      	beq.n	800494a <UART_SetConfig+0x25e>
 800493c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004940:	d009      	beq.n	8004956 <UART_SetConfig+0x26a>
 8004942:	e00b      	b.n	800495c <UART_SetConfig+0x270>
 8004944:	2301      	movs	r3, #1
 8004946:	77fb      	strb	r3, [r7, #31]
 8004948:	e077      	b.n	8004a3a <UART_SetConfig+0x34e>
 800494a:	2302      	movs	r3, #2
 800494c:	77fb      	strb	r3, [r7, #31]
 800494e:	e074      	b.n	8004a3a <UART_SetConfig+0x34e>
 8004950:	2304      	movs	r3, #4
 8004952:	77fb      	strb	r3, [r7, #31]
 8004954:	e071      	b.n	8004a3a <UART_SetConfig+0x34e>
 8004956:	2308      	movs	r3, #8
 8004958:	77fb      	strb	r3, [r7, #31]
 800495a:	e06e      	b.n	8004a3a <UART_SetConfig+0x34e>
 800495c:	2310      	movs	r3, #16
 800495e:	77fb      	strb	r3, [r7, #31]
 8004960:	bf00      	nop
 8004962:	e06a      	b.n	8004a3a <UART_SetConfig+0x34e>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a25      	ldr	r2, [pc, #148]	; (8004a00 <UART_SetConfig+0x314>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d124      	bne.n	80049b8 <UART_SetConfig+0x2cc>
 800496e:	4b1e      	ldr	r3, [pc, #120]	; (80049e8 <UART_SetConfig+0x2fc>)
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004974:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800497c:	d012      	beq.n	80049a4 <UART_SetConfig+0x2b8>
 800497e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004982:	d802      	bhi.n	800498a <UART_SetConfig+0x29e>
 8004984:	2b00      	cmp	r3, #0
 8004986:	d007      	beq.n	8004998 <UART_SetConfig+0x2ac>
 8004988:	e012      	b.n	80049b0 <UART_SetConfig+0x2c4>
 800498a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800498e:	d006      	beq.n	800499e <UART_SetConfig+0x2b2>
 8004990:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004994:	d009      	beq.n	80049aa <UART_SetConfig+0x2be>
 8004996:	e00b      	b.n	80049b0 <UART_SetConfig+0x2c4>
 8004998:	2300      	movs	r3, #0
 800499a:	77fb      	strb	r3, [r7, #31]
 800499c:	e04d      	b.n	8004a3a <UART_SetConfig+0x34e>
 800499e:	2302      	movs	r3, #2
 80049a0:	77fb      	strb	r3, [r7, #31]
 80049a2:	e04a      	b.n	8004a3a <UART_SetConfig+0x34e>
 80049a4:	2304      	movs	r3, #4
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e047      	b.n	8004a3a <UART_SetConfig+0x34e>
 80049aa:	2308      	movs	r3, #8
 80049ac:	77fb      	strb	r3, [r7, #31]
 80049ae:	e044      	b.n	8004a3a <UART_SetConfig+0x34e>
 80049b0:	2310      	movs	r3, #16
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	bf00      	nop
 80049b6:	e040      	b.n	8004a3a <UART_SetConfig+0x34e>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a11      	ldr	r2, [pc, #68]	; (8004a04 <UART_SetConfig+0x318>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d139      	bne.n	8004a36 <UART_SetConfig+0x34a>
 80049c2:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <UART_SetConfig+0x2fc>)
 80049c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80049cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049d0:	d027      	beq.n	8004a22 <UART_SetConfig+0x336>
 80049d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049d6:	d817      	bhi.n	8004a08 <UART_SetConfig+0x31c>
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d01c      	beq.n	8004a16 <UART_SetConfig+0x32a>
 80049dc:	e027      	b.n	8004a2e <UART_SetConfig+0x342>
 80049de:	bf00      	nop
 80049e0:	efff69f3 	.word	0xefff69f3
 80049e4:	40011000 	.word	0x40011000
 80049e8:	40023800 	.word	0x40023800
 80049ec:	40004400 	.word	0x40004400
 80049f0:	40004800 	.word	0x40004800
 80049f4:	40004c00 	.word	0x40004c00
 80049f8:	40005000 	.word	0x40005000
 80049fc:	40011400 	.word	0x40011400
 8004a00:	40007800 	.word	0x40007800
 8004a04:	40007c00 	.word	0x40007c00
 8004a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a0c:	d006      	beq.n	8004a1c <UART_SetConfig+0x330>
 8004a0e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a12:	d009      	beq.n	8004a28 <UART_SetConfig+0x33c>
 8004a14:	e00b      	b.n	8004a2e <UART_SetConfig+0x342>
 8004a16:	2300      	movs	r3, #0
 8004a18:	77fb      	strb	r3, [r7, #31]
 8004a1a:	e00e      	b.n	8004a3a <UART_SetConfig+0x34e>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	77fb      	strb	r3, [r7, #31]
 8004a20:	e00b      	b.n	8004a3a <UART_SetConfig+0x34e>
 8004a22:	2304      	movs	r3, #4
 8004a24:	77fb      	strb	r3, [r7, #31]
 8004a26:	e008      	b.n	8004a3a <UART_SetConfig+0x34e>
 8004a28:	2308      	movs	r3, #8
 8004a2a:	77fb      	strb	r3, [r7, #31]
 8004a2c:	e005      	b.n	8004a3a <UART_SetConfig+0x34e>
 8004a2e:	2310      	movs	r3, #16
 8004a30:	77fb      	strb	r3, [r7, #31]
 8004a32:	bf00      	nop
 8004a34:	e001      	b.n	8004a3a <UART_SetConfig+0x34e>
 8004a36:	2310      	movs	r3, #16
 8004a38:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a42:	d17f      	bne.n	8004b44 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004a44:	7ffb      	ldrb	r3, [r7, #31]
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d85c      	bhi.n	8004b04 <UART_SetConfig+0x418>
 8004a4a:	a201      	add	r2, pc, #4	; (adr r2, 8004a50 <UART_SetConfig+0x364>)
 8004a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a50:	08004a75 	.word	0x08004a75
 8004a54:	08004a95 	.word	0x08004a95
 8004a58:	08004ab5 	.word	0x08004ab5
 8004a5c:	08004b05 	.word	0x08004b05
 8004a60:	08004acd 	.word	0x08004acd
 8004a64:	08004b05 	.word	0x08004b05
 8004a68:	08004b05 	.word	0x08004b05
 8004a6c:	08004b05 	.word	0x08004b05
 8004a70:	08004aed 	.word	0x08004aed
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a74:	f7fe fb8e 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 8004a78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	005a      	lsls	r2, r3, #1
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	085b      	lsrs	r3, r3, #1
 8004a84:	441a      	add	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	61bb      	str	r3, [r7, #24]
        break;
 8004a92:	e03a      	b.n	8004b0a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a94:	f7fe fb92 	bl	80031bc <HAL_RCC_GetPCLK2Freq>
 8004a98:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	005a      	lsls	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	085b      	lsrs	r3, r3, #1
 8004aa4:	441a      	add	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	61bb      	str	r3, [r7, #24]
        break;
 8004ab2:	e02a      	b.n	8004b0a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	085a      	lsrs	r2, r3, #1
 8004aba:	4b5f      	ldr	r3, [pc, #380]	; (8004c38 <UART_SetConfig+0x54c>)
 8004abc:	4413      	add	r3, r2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6852      	ldr	r2, [r2, #4]
 8004ac2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	61bb      	str	r3, [r7, #24]
        break;
 8004aca:	e01e      	b.n	8004b0a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004acc:	f7fe faa4 	bl	8003018 <HAL_RCC_GetSysClockFreq>
 8004ad0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	005a      	lsls	r2, r3, #1
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	085b      	lsrs	r3, r3, #1
 8004adc:	441a      	add	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	61bb      	str	r3, [r7, #24]
        break;
 8004aea:	e00e      	b.n	8004b0a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	085b      	lsrs	r3, r3, #1
 8004af2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	61bb      	str	r3, [r7, #24]
        break;
 8004b02:	e002      	b.n	8004b0a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	75fb      	strb	r3, [r7, #23]
        break;
 8004b08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b0f      	cmp	r3, #15
 8004b0e:	d916      	bls.n	8004b3e <UART_SetConfig+0x452>
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b16:	d212      	bcs.n	8004b3e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	f023 030f 	bic.w	r3, r3, #15
 8004b20:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	085b      	lsrs	r3, r3, #1
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	897b      	ldrh	r3, [r7, #10]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	897a      	ldrh	r2, [r7, #10]
 8004b3a:	60da      	str	r2, [r3, #12]
 8004b3c:	e070      	b.n	8004c20 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	75fb      	strb	r3, [r7, #23]
 8004b42:	e06d      	b.n	8004c20 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8004b44:	7ffb      	ldrb	r3, [r7, #31]
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d859      	bhi.n	8004bfe <UART_SetConfig+0x512>
 8004b4a:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <UART_SetConfig+0x464>)
 8004b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b50:	08004b75 	.word	0x08004b75
 8004b54:	08004b93 	.word	0x08004b93
 8004b58:	08004bb1 	.word	0x08004bb1
 8004b5c:	08004bff 	.word	0x08004bff
 8004b60:	08004bc9 	.word	0x08004bc9
 8004b64:	08004bff 	.word	0x08004bff
 8004b68:	08004bff 	.word	0x08004bff
 8004b6c:	08004bff 	.word	0x08004bff
 8004b70:	08004be7 	.word	0x08004be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b74:	f7fe fb0e 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 8004b78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	085a      	lsrs	r2, r3, #1
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	441a      	add	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	61bb      	str	r3, [r7, #24]
        break;
 8004b90:	e038      	b.n	8004c04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b92:	f7fe fb13 	bl	80031bc <HAL_RCC_GetPCLK2Freq>
 8004b96:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	085a      	lsrs	r2, r3, #1
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	441a      	add	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	61bb      	str	r3, [r7, #24]
        break;
 8004bae:	e029      	b.n	8004c04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	085a      	lsrs	r2, r3, #1
 8004bb6:	4b21      	ldr	r3, [pc, #132]	; (8004c3c <UART_SetConfig+0x550>)
 8004bb8:	4413      	add	r3, r2
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6852      	ldr	r2, [r2, #4]
 8004bbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	61bb      	str	r3, [r7, #24]
        break;
 8004bc6:	e01d      	b.n	8004c04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bc8:	f7fe fa26 	bl	8003018 <HAL_RCC_GetSysClockFreq>
 8004bcc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	085a      	lsrs	r2, r3, #1
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	441a      	add	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	61bb      	str	r3, [r7, #24]
        break;
 8004be4:	e00e      	b.n	8004c04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	085b      	lsrs	r3, r3, #1
 8004bec:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	61bb      	str	r3, [r7, #24]
        break;
 8004bfc:	e002      	b.n	8004c04 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	75fb      	strb	r3, [r7, #23]
        break;
 8004c02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	2b0f      	cmp	r3, #15
 8004c08:	d908      	bls.n	8004c1c <UART_SetConfig+0x530>
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c10:	d204      	bcs.n	8004c1c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	60da      	str	r2, [r3, #12]
 8004c1a:	e001      	b.n	8004c20 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3720      	adds	r7, #32
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	01e84800 	.word	0x01e84800
 8004c3c:	00f42400 	.word	0x00f42400

08004c40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	f003 0310 	and.w	r3, r3, #16
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	f003 0320 	and.w	r3, r3, #32
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01a      	beq.n	8004d56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d3e:	d10a      	bne.n	8004d56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	605a      	str	r2, [r3, #4]
  }
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af02      	add	r7, sp, #8
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004d92:	f7fc f997 	bl	80010c4 <HAL_GetTick>
 8004d96:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b08      	cmp	r3, #8
 8004da4:	d10e      	bne.n	8004dc4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004da6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f814 	bl	8004de2 <UART_WaitOnFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e00a      	b.n	8004dda <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	60f8      	str	r0, [r7, #12]
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	603b      	str	r3, [r7, #0]
 8004dee:	4613      	mov	r3, r2
 8004df0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df2:	e05d      	b.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfa:	d059      	beq.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfc:	f7fc f962 	bl	80010c4 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d302      	bcc.n	8004e12 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d11b      	bne.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e20:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0201 	bic.w	r2, r2, #1
 8004e30:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2220      	movs	r2, #32
 8004e36:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e042      	b.n	8004ed0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d02b      	beq.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e66:	d123      	bne.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e70:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e80:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0201 	bic.w	r2, r2, #1
 8004e90:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2220      	movs	r2, #32
 8004e96:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e00f      	b.n	8004ed0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	69da      	ldr	r2, [r3, #28]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	bf0c      	ite	eq
 8004ec0:	2301      	moveq	r3, #1
 8004ec2:	2300      	movne	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d092      	beq.n	8004df4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004eee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0201 	bic.w	r2, r2, #1
 8004efe:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2220      	movs	r2, #32
 8004f04:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f7ff fbce 	bl	80046d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f3c:	bf00      	nop
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f5a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff fbab 	bl	80046c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f6e:	bf00      	nop
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4a07      	ldr	r2, [pc, #28]	; (8004fa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	4a06      	ldr	r2, [pc, #24]	; (8004fa8 <vApplicationGetIdleTaskMemory+0x30>)
 8004f8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2280      	movs	r2, #128	; 0x80
 8004f94:	601a      	str	r2, [r3, #0]
}
 8004f96:	bf00      	nop
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	20000098 	.word	0x20000098
 8004fa8:	200000f4 	.word	0x200000f4

08004fac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4a07      	ldr	r2, [pc, #28]	; (8004fd8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004fbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	4a06      	ldr	r2, [pc, #24]	; (8004fdc <vApplicationGetTimerTaskMemory+0x30>)
 8004fc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fca:	601a      	str	r2, [r3, #0]
}
 8004fcc:	bf00      	nop
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	200002f4 	.word	0x200002f4
 8004fdc:	20000350 	.word	0x20000350

08004fe0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f103 0208 	add.w	r2, r3, #8
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f103 0208 	add.w	r2, r3, #8
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f103 0208 	add.w	r2, r3, #8
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800503a:	b480      	push	{r7}
 800503c:	b085      	sub	sp, #20
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	601a      	str	r2, [r3, #0]
}
 8005076:	bf00      	nop
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005082:	b480      	push	{r7}
 8005084:	b085      	sub	sp, #20
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005098:	d103      	bne.n	80050a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	e00c      	b.n	80050bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	3308      	adds	r3, #8
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	e002      	b.n	80050b0 <vListInsert+0x2e>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d2f6      	bcs.n	80050aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	601a      	str	r2, [r3, #0]
}
 80050e8:	bf00      	nop
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6892      	ldr	r2, [r2, #8]
 800510a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6852      	ldr	r2, [r2, #4]
 8005114:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	429a      	cmp	r2, r3
 800511e:	d103      	bne.n	8005128 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	1e5a      	subs	r2, r3, #1
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10b      	bne.n	8005174 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005160:	b672      	cpsid	i
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	b662      	cpsie	i
 8005170:	60bb      	str	r3, [r7, #8]
 8005172:	e7fe      	b.n	8005172 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8005174:	f002 f888 	bl	8007288 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005180:	68f9      	ldr	r1, [r7, #12]
 8005182:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005184:	fb01 f303 	mul.w	r3, r1, r3
 8005188:	441a      	add	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a4:	3b01      	subs	r3, #1
 80051a6:	68f9      	ldr	r1, [r7, #12]
 80051a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051aa:	fb01 f303 	mul.w	r3, r1, r3
 80051ae:	441a      	add	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	22ff      	movs	r2, #255	; 0xff
 80051b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	22ff      	movs	r2, #255	; 0xff
 80051c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d114      	bne.n	80051f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d01a      	beq.n	8005208 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3310      	adds	r3, #16
 80051d6:	4618      	mov	r0, r3
 80051d8:	f001 f958 	bl	800648c <xTaskRemoveFromEventList>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d012      	beq.n	8005208 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051e2:	4b0d      	ldr	r3, [pc, #52]	; (8005218 <xQueueGenericReset+0xd0>)
 80051e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	e009      	b.n	8005208 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	3310      	adds	r3, #16
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff fef1 	bl	8004fe0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3324      	adds	r3, #36	; 0x24
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff feec 	bl	8004fe0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005208:	f002 f870 	bl	80072ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800520c:	2301      	movs	r3, #1
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	e000ed04 	.word	0xe000ed04

0800521c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08e      	sub	sp, #56	; 0x38
 8005220:	af02      	add	r7, sp, #8
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
 8005228:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10b      	bne.n	8005248 <xQueueGenericCreateStatic+0x2c>
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	b672      	cpsid	i
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	b662      	cpsie	i
 8005244:	62bb      	str	r3, [r7, #40]	; 0x28
 8005246:	e7fe      	b.n	8005246 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10b      	bne.n	8005266 <xQueueGenericCreateStatic+0x4a>
 800524e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005252:	b672      	cpsid	i
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	b662      	cpsie	i
 8005262:	627b      	str	r3, [r7, #36]	; 0x24
 8005264:	e7fe      	b.n	8005264 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <xQueueGenericCreateStatic+0x56>
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <xQueueGenericCreateStatic+0x5a>
 8005272:	2301      	movs	r3, #1
 8005274:	e000      	b.n	8005278 <xQueueGenericCreateStatic+0x5c>
 8005276:	2300      	movs	r3, #0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10b      	bne.n	8005294 <xQueueGenericCreateStatic+0x78>
 800527c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005280:	b672      	cpsid	i
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	b662      	cpsie	i
 8005290:	623b      	str	r3, [r7, #32]
 8005292:	e7fe      	b.n	8005292 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d102      	bne.n	80052a0 <xQueueGenericCreateStatic+0x84>
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <xQueueGenericCreateStatic+0x88>
 80052a0:	2301      	movs	r3, #1
 80052a2:	e000      	b.n	80052a6 <xQueueGenericCreateStatic+0x8a>
 80052a4:	2300      	movs	r3, #0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10b      	bne.n	80052c2 <xQueueGenericCreateStatic+0xa6>
 80052aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ae:	b672      	cpsid	i
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	b662      	cpsie	i
 80052be:	61fb      	str	r3, [r7, #28]
 80052c0:	e7fe      	b.n	80052c0 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80052c2:	2350      	movs	r3, #80	; 0x50
 80052c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2b50      	cmp	r3, #80	; 0x50
 80052ca:	d00b      	beq.n	80052e4 <xQueueGenericCreateStatic+0xc8>
 80052cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d0:	b672      	cpsid	i
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	b662      	cpsie	i
 80052e0:	61bb      	str	r3, [r7, #24]
 80052e2:	e7fe      	b.n	80052e2 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80052ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00d      	beq.n	800530c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052f8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80052fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	4613      	mov	r3, r2
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	68b9      	ldr	r1, [r7, #8]
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f000 f846 	bl	8005398 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800530c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800530e:	4618      	mov	r0, r3
 8005310:	3730      	adds	r7, #48	; 0x30
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005316:	b580      	push	{r7, lr}
 8005318:	b08a      	sub	sp, #40	; 0x28
 800531a:	af02      	add	r7, sp, #8
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	4613      	mov	r3, r2
 8005322:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10b      	bne.n	8005342 <xQueueGenericCreate+0x2c>
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	b672      	cpsid	i
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	b662      	cpsie	i
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	e7fe      	b.n	8005340 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d102      	bne.n	800534e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005348:	2300      	movs	r3, #0
 800534a:	61fb      	str	r3, [r7, #28]
 800534c:	e004      	b.n	8005358 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	fb02 f303 	mul.w	r3, r2, r3
 8005356:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	3350      	adds	r3, #80	; 0x50
 800535c:	4618      	mov	r0, r3
 800535e:	f002 f8b5 	bl	80074cc <pvPortMalloc>
 8005362:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d011      	beq.n	800538e <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	3350      	adds	r3, #80	; 0x50
 8005372:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800537c:	79fa      	ldrb	r2, [r7, #7]
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	4613      	mov	r3, r2
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 f805 	bl	8005398 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800538e:	69bb      	ldr	r3, [r7, #24]
	}
 8005390:	4618      	mov	r0, r3
 8005392:	3720      	adds	r7, #32
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d103      	bne.n	80053b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	e002      	b.n	80053ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053c6:	2101      	movs	r1, #1
 80053c8:	69b8      	ldr	r0, [r7, #24]
 80053ca:	f7ff febd 	bl	8005148 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	78fa      	ldrb	r2, [r7, #3]
 80053d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053d6:	bf00      	nop
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08e      	sub	sp, #56	; 0x38
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
 80053ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80053ee:	2300      	movs	r3, #0
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10b      	bne.n	8005414 <xQueueGenericSend+0x34>
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	b672      	cpsid	i
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	b662      	cpsie	i
 8005410:	62bb      	str	r3, [r7, #40]	; 0x28
 8005412:	e7fe      	b.n	8005412 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d103      	bne.n	8005422 <xQueueGenericSend+0x42>
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <xQueueGenericSend+0x46>
 8005422:	2301      	movs	r3, #1
 8005424:	e000      	b.n	8005428 <xQueueGenericSend+0x48>
 8005426:	2300      	movs	r3, #0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10b      	bne.n	8005444 <xQueueGenericSend+0x64>
 800542c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005430:	b672      	cpsid	i
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	b662      	cpsie	i
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
 8005442:	e7fe      	b.n	8005442 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	2b02      	cmp	r3, #2
 8005448:	d103      	bne.n	8005452 <xQueueGenericSend+0x72>
 800544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <xQueueGenericSend+0x76>
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <xQueueGenericSend+0x78>
 8005456:	2300      	movs	r3, #0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10b      	bne.n	8005474 <xQueueGenericSend+0x94>
 800545c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005460:	b672      	cpsid	i
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	b662      	cpsie	i
 8005470:	623b      	str	r3, [r7, #32]
 8005472:	e7fe      	b.n	8005472 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005474:	f001 f9c8 	bl	8006808 <xTaskGetSchedulerState>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d102      	bne.n	8005484 <xQueueGenericSend+0xa4>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <xQueueGenericSend+0xa8>
 8005484:	2301      	movs	r3, #1
 8005486:	e000      	b.n	800548a <xQueueGenericSend+0xaa>
 8005488:	2300      	movs	r3, #0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10b      	bne.n	80054a6 <xQueueGenericSend+0xc6>
 800548e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005492:	b672      	cpsid	i
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	b662      	cpsie	i
 80054a2:	61fb      	str	r3, [r7, #28]
 80054a4:	e7fe      	b.n	80054a4 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054a6:	f001 feef 	bl	8007288 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d302      	bcc.n	80054bc <xQueueGenericSend+0xdc>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d129      	bne.n	8005510 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054c2:	f000 fa0d 	bl	80058e0 <prvCopyDataToQueue>
 80054c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d010      	beq.n	80054f2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d2:	3324      	adds	r3, #36	; 0x24
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 ffd9 	bl	800648c <xTaskRemoveFromEventList>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d013      	beq.n	8005508 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054e0:	4b3f      	ldr	r3, [pc, #252]	; (80055e0 <xQueueGenericSend+0x200>)
 80054e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	e00a      	b.n	8005508 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80054f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d007      	beq.n	8005508 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80054f8:	4b39      	ldr	r3, [pc, #228]	; (80055e0 <xQueueGenericSend+0x200>)
 80054fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054fe:	601a      	str	r2, [r3, #0]
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005508:	f001 fef0 	bl	80072ec <vPortExitCritical>
				return pdPASS;
 800550c:	2301      	movs	r3, #1
 800550e:	e063      	b.n	80055d8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d103      	bne.n	800551e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005516:	f001 fee9 	bl	80072ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800551a:	2300      	movs	r3, #0
 800551c:	e05c      	b.n	80055d8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800551e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005520:	2b00      	cmp	r3, #0
 8005522:	d106      	bne.n	8005532 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005524:	f107 0314 	add.w	r3, r7, #20
 8005528:	4618      	mov	r0, r3
 800552a:	f001 f813 	bl	8006554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800552e:	2301      	movs	r3, #1
 8005530:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005532:	f001 fedb 	bl	80072ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005536:	f000 fd83 	bl	8006040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800553a:	f001 fea5 	bl	8007288 <vPortEnterCritical>
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005544:	b25b      	sxtb	r3, r3
 8005546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554a:	d103      	bne.n	8005554 <xQueueGenericSend+0x174>
 800554c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005556:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800555a:	b25b      	sxtb	r3, r3
 800555c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005560:	d103      	bne.n	800556a <xQueueGenericSend+0x18a>
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800556a:	f001 febf 	bl	80072ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800556e:	1d3a      	adds	r2, r7, #4
 8005570:	f107 0314 	add.w	r3, r7, #20
 8005574:	4611      	mov	r1, r2
 8005576:	4618      	mov	r0, r3
 8005578:	f001 f802 	bl	8006580 <xTaskCheckForTimeOut>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d124      	bne.n	80055cc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005582:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005584:	f000 faa4 	bl	8005ad0 <prvIsQueueFull>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d018      	beq.n	80055c0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	3310      	adds	r3, #16
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	4611      	mov	r1, r2
 8005596:	4618      	mov	r0, r3
 8005598:	f000 ff26 	bl	80063e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800559c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800559e:	f000 fa2f 	bl	8005a00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80055a2:	f000 fd5b 	bl	800605c <xTaskResumeAll>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f47f af7c 	bne.w	80054a6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80055ae:	4b0c      	ldr	r3, [pc, #48]	; (80055e0 <xQueueGenericSend+0x200>)
 80055b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	e772      	b.n	80054a6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80055c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055c2:	f000 fa1d 	bl	8005a00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055c6:	f000 fd49 	bl	800605c <xTaskResumeAll>
 80055ca:	e76c      	b.n	80054a6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80055cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055ce:	f000 fa17 	bl	8005a00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055d2:	f000 fd43 	bl	800605c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80055d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3738      	adds	r7, #56	; 0x38
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	e000ed04 	.word	0xe000ed04

080055e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b08e      	sub	sp, #56	; 0x38
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
 80055f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10b      	bne.n	8005614 <xQueueGenericSendFromISR+0x30>
 80055fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005600:	b672      	cpsid	i
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	b662      	cpsie	i
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
 8005612:	e7fe      	b.n	8005612 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d103      	bne.n	8005622 <xQueueGenericSendFromISR+0x3e>
 800561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <xQueueGenericSendFromISR+0x42>
 8005622:	2301      	movs	r3, #1
 8005624:	e000      	b.n	8005628 <xQueueGenericSendFromISR+0x44>
 8005626:	2300      	movs	r3, #0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10b      	bne.n	8005644 <xQueueGenericSendFromISR+0x60>
 800562c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005630:	b672      	cpsid	i
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	b662      	cpsie	i
 8005640:	623b      	str	r3, [r7, #32]
 8005642:	e7fe      	b.n	8005642 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	2b02      	cmp	r3, #2
 8005648:	d103      	bne.n	8005652 <xQueueGenericSendFromISR+0x6e>
 800564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <xQueueGenericSendFromISR+0x72>
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <xQueueGenericSendFromISR+0x74>
 8005656:	2300      	movs	r3, #0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10b      	bne.n	8005674 <xQueueGenericSendFromISR+0x90>
 800565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005660:	b672      	cpsid	i
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	b662      	cpsie	i
 8005670:	61fb      	str	r3, [r7, #28]
 8005672:	e7fe      	b.n	8005672 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005674:	f001 fee8 	bl	8007448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005678:	f3ef 8211 	mrs	r2, BASEPRI
 800567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005680:	b672      	cpsid	i
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	b662      	cpsie	i
 8005690:	61ba      	str	r2, [r7, #24]
 8005692:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005694:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005696:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800569c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d302      	bcc.n	80056aa <xQueueGenericSendFromISR+0xc6>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d12c      	bne.n	8005704 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	68b9      	ldr	r1, [r7, #8]
 80056b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056ba:	f000 f911 	bl	80058e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056be:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80056c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c6:	d112      	bne.n	80056ee <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d016      	beq.n	80056fe <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	3324      	adds	r3, #36	; 0x24
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fed9 	bl	800648c <xTaskRemoveFromEventList>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00e      	beq.n	80056fe <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00b      	beq.n	80056fe <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	e007      	b.n	80056fe <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80056ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056f2:	3301      	adds	r3, #1
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	b25a      	sxtb	r2, r3
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80056fe:	2301      	movs	r3, #1
 8005700:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005702:	e001      	b.n	8005708 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005704:	2300      	movs	r3, #0
 8005706:	637b      	str	r3, [r7, #52]	; 0x34
 8005708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005714:	4618      	mov	r0, r3
 8005716:	3738      	adds	r7, #56	; 0x38
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08c      	sub	sp, #48	; 0x30
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005728:	2300      	movs	r3, #0
 800572a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10b      	bne.n	800574e <xQueueReceive+0x32>
	__asm volatile
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	b672      	cpsid	i
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	b662      	cpsie	i
 800574a:	623b      	str	r3, [r7, #32]
 800574c:	e7fe      	b.n	800574c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d103      	bne.n	800575c <xQueueReceive+0x40>
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <xQueueReceive+0x44>
 800575c:	2301      	movs	r3, #1
 800575e:	e000      	b.n	8005762 <xQueueReceive+0x46>
 8005760:	2300      	movs	r3, #0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10b      	bne.n	800577e <xQueueReceive+0x62>
 8005766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576a:	b672      	cpsid	i
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	b662      	cpsie	i
 800577a:	61fb      	str	r3, [r7, #28]
 800577c:	e7fe      	b.n	800577c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800577e:	f001 f843 	bl	8006808 <xTaskGetSchedulerState>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d102      	bne.n	800578e <xQueueReceive+0x72>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <xQueueReceive+0x76>
 800578e:	2301      	movs	r3, #1
 8005790:	e000      	b.n	8005794 <xQueueReceive+0x78>
 8005792:	2300      	movs	r3, #0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10b      	bne.n	80057b0 <xQueueReceive+0x94>
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	b672      	cpsid	i
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	b662      	cpsie	i
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	e7fe      	b.n	80057ae <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057b0:	f001 fd6a 	bl	8007288 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d01f      	beq.n	8005800 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057c0:	68b9      	ldr	r1, [r7, #8]
 80057c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057c4:	f000 f8f6 	bl	80059b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	1e5a      	subs	r2, r3, #1
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00f      	beq.n	80057f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057da:	3310      	adds	r3, #16
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 fe55 	bl	800648c <xTaskRemoveFromEventList>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d007      	beq.n	80057f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057e8:	4b3c      	ldr	r3, [pc, #240]	; (80058dc <xQueueReceive+0x1c0>)
 80057ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ee:	601a      	str	r2, [r3, #0]
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057f8:	f001 fd78 	bl	80072ec <vPortExitCritical>
				return pdPASS;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e069      	b.n	80058d4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d103      	bne.n	800580e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005806:	f001 fd71 	bl	80072ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800580a:	2300      	movs	r3, #0
 800580c:	e062      	b.n	80058d4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800580e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005810:	2b00      	cmp	r3, #0
 8005812:	d106      	bne.n	8005822 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005814:	f107 0310 	add.w	r3, r7, #16
 8005818:	4618      	mov	r0, r3
 800581a:	f000 fe9b 	bl	8006554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800581e:	2301      	movs	r3, #1
 8005820:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005822:	f001 fd63 	bl	80072ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005826:	f000 fc0b 	bl	8006040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800582a:	f001 fd2d 	bl	8007288 <vPortEnterCritical>
 800582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005830:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005834:	b25b      	sxtb	r3, r3
 8005836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583a:	d103      	bne.n	8005844 <xQueueReceive+0x128>
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800584a:	b25b      	sxtb	r3, r3
 800584c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005850:	d103      	bne.n	800585a <xQueueReceive+0x13e>
 8005852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800585a:	f001 fd47 	bl	80072ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800585e:	1d3a      	adds	r2, r7, #4
 8005860:	f107 0310 	add.w	r3, r7, #16
 8005864:	4611      	mov	r1, r2
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fe8a 	bl	8006580 <xTaskCheckForTimeOut>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d123      	bne.n	80058ba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005874:	f000 f916 	bl	8005aa4 <prvIsQueueEmpty>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d017      	beq.n	80058ae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800587e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005880:	3324      	adds	r3, #36	; 0x24
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	4611      	mov	r1, r2
 8005886:	4618      	mov	r0, r3
 8005888:	f000 fdae 	bl	80063e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800588c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800588e:	f000 f8b7 	bl	8005a00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005892:	f000 fbe3 	bl	800605c <xTaskResumeAll>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d189      	bne.n	80057b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800589c:	4b0f      	ldr	r3, [pc, #60]	; (80058dc <xQueueReceive+0x1c0>)
 800589e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	e780      	b.n	80057b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80058ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058b0:	f000 f8a6 	bl	8005a00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058b4:	f000 fbd2 	bl	800605c <xTaskResumeAll>
 80058b8:	e77a      	b.n	80057b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80058ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058bc:	f000 f8a0 	bl	8005a00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058c0:	f000 fbcc 	bl	800605c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058c6:	f000 f8ed 	bl	8005aa4 <prvIsQueueEmpty>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f43f af6f 	beq.w	80057b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3730      	adds	r7, #48	; 0x30
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	e000ed04 	.word	0xe000ed04

080058e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80058ec:	2300      	movs	r3, #0
 80058ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10d      	bne.n	800591a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d14d      	bne.n	80059a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	4618      	mov	r0, r3
 800590c:	f000 ff9a 	bl	8006844 <xTaskPriorityDisinherit>
 8005910:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	609a      	str	r2, [r3, #8]
 8005918:	e043      	b.n	80059a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d119      	bne.n	8005954 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6858      	ldr	r0, [r3, #4]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	461a      	mov	r2, r3
 800592a:	68b9      	ldr	r1, [r7, #8]
 800592c:	f003 faca 	bl	8008ec4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	441a      	add	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	429a      	cmp	r2, r3
 8005948:	d32b      	bcc.n	80059a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	605a      	str	r2, [r3, #4]
 8005952:	e026      	b.n	80059a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	68d8      	ldr	r0, [r3, #12]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595c:	461a      	mov	r2, r3
 800595e:	68b9      	ldr	r1, [r7, #8]
 8005960:	f003 fab0 	bl	8008ec4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596c:	425b      	negs	r3, r3
 800596e:	441a      	add	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d207      	bcs.n	8005990 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005988:	425b      	negs	r3, r3
 800598a:	441a      	add	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d105      	bne.n	80059a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	3b01      	subs	r3, #1
 80059a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80059aa:	697b      	ldr	r3, [r7, #20]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d018      	beq.n	80059f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	441a      	add	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d303      	bcc.n	80059e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68d9      	ldr	r1, [r3, #12]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f0:	461a      	mov	r2, r3
 80059f2:	6838      	ldr	r0, [r7, #0]
 80059f4:	f003 fa66 	bl	8008ec4 <memcpy>
	}
}
 80059f8:	bf00      	nop
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a08:	f001 fc3e 	bl	8007288 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a14:	e011      	b.n	8005a3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d012      	beq.n	8005a44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	3324      	adds	r3, #36	; 0x24
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 fd32 	bl	800648c <xTaskRemoveFromEventList>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a2e:	f000 fe0b 	bl	8006648 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	dce9      	bgt.n	8005a16 <prvUnlockQueue+0x16>
 8005a42:	e000      	b.n	8005a46 <prvUnlockQueue+0x46>
					break;
 8005a44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	22ff      	movs	r2, #255	; 0xff
 8005a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a4e:	f001 fc4d 	bl	80072ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a52:	f001 fc19 	bl	8007288 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a5e:	e011      	b.n	8005a84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d012      	beq.n	8005a8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3310      	adds	r3, #16
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 fd0d 	bl	800648c <xTaskRemoveFromEventList>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a78:	f000 fde6 	bl	8006648 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a7c:	7bbb      	ldrb	r3, [r7, #14]
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	dce9      	bgt.n	8005a60 <prvUnlockQueue+0x60>
 8005a8c:	e000      	b.n	8005a90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005a8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	22ff      	movs	r2, #255	; 0xff
 8005a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005a98:	f001 fc28 	bl	80072ec <vPortExitCritical>
}
 8005a9c:	bf00      	nop
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005aac:	f001 fbec 	bl	8007288 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d102      	bne.n	8005abe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	e001      	b.n	8005ac2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ac2:	f001 fc13 	bl	80072ec <vPortExitCritical>

	return xReturn;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ad8:	f001 fbd6 	bl	8007288 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d102      	bne.n	8005aee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	e001      	b.n	8005af2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005aee:	2300      	movs	r3, #0
 8005af0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005af2:	f001 fbfb 	bl	80072ec <vPortExitCritical>

	return xReturn;
 8005af6:	68fb      	ldr	r3, [r7, #12]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	e014      	b.n	8005b3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b10:	4a0e      	ldr	r2, [pc, #56]	; (8005b4c <vQueueAddToRegistry+0x4c>)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10b      	bne.n	8005b34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b1c:	490b      	ldr	r1, [pc, #44]	; (8005b4c <vQueueAddToRegistry+0x4c>)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b26:	4a09      	ldr	r2, [pc, #36]	; (8005b4c <vQueueAddToRegistry+0x4c>)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	4413      	add	r3, r2
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b32:	e005      	b.n	8005b40 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	3301      	adds	r3, #1
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b07      	cmp	r3, #7
 8005b3e:	d9e7      	bls.n	8005b10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b40:	bf00      	nop
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	20004c54 	.word	0x20004c54

08005b50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005b60:	f001 fb92 	bl	8007288 <vPortEnterCritical>
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b6a:	b25b      	sxtb	r3, r3
 8005b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b70:	d103      	bne.n	8005b7a <vQueueWaitForMessageRestricted+0x2a>
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b80:	b25b      	sxtb	r3, r3
 8005b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b86:	d103      	bne.n	8005b90 <vQueueWaitForMessageRestricted+0x40>
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b90:	f001 fbac 	bl	80072ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d106      	bne.n	8005baa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	3324      	adds	r3, #36	; 0x24
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	68b9      	ldr	r1, [r7, #8]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 fc45 	bl	8006434 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005baa:	6978      	ldr	r0, [r7, #20]
 8005bac:	f7ff ff28 	bl	8005a00 <prvUnlockQueue>
	}
 8005bb0:	bf00      	nop
 8005bb2:	3718      	adds	r7, #24
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b08e      	sub	sp, #56	; 0x38
 8005bbc:	af04      	add	r7, sp, #16
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
 8005bc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10b      	bne.n	8005be4 <xTaskCreateStatic+0x2c>
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	b672      	cpsid	i
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	b662      	cpsie	i
 8005be0:	623b      	str	r3, [r7, #32]
 8005be2:	e7fe      	b.n	8005be2 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8005be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10b      	bne.n	8005c02 <xTaskCreateStatic+0x4a>
 8005bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bee:	b672      	cpsid	i
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	b662      	cpsie	i
 8005bfe:	61fb      	str	r3, [r7, #28]
 8005c00:	e7fe      	b.n	8005c00 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c02:	235c      	movs	r3, #92	; 0x5c
 8005c04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	2b5c      	cmp	r3, #92	; 0x5c
 8005c0a:	d00b      	beq.n	8005c24 <xTaskCreateStatic+0x6c>
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	b672      	cpsid	i
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	b662      	cpsie	i
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	e7fe      	b.n	8005c22 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d01e      	beq.n	8005c6a <xTaskCreateStatic+0xb2>
 8005c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d01b      	beq.n	8005c6a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c34:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c3a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c44:	2300      	movs	r3, #0
 8005c46:	9303      	str	r3, [sp, #12]
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	9302      	str	r3, [sp, #8]
 8005c4c:	f107 0314 	add.w	r3, r7, #20
 8005c50:	9301      	str	r3, [sp, #4]
 8005c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	68b9      	ldr	r1, [r7, #8]
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 f850 	bl	8005d02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c64:	f000 f8de 	bl	8005e24 <prvAddNewTaskToReadyList>
 8005c68:	e001      	b.n	8005c6e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c6e:	697b      	ldr	r3, [r7, #20]
	}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3728      	adds	r7, #40	; 0x28
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08c      	sub	sp, #48	; 0x30
 8005c7c:	af04      	add	r7, sp, #16
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	4613      	mov	r3, r2
 8005c86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005c88:	88fb      	ldrh	r3, [r7, #6]
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f001 fc1d 	bl	80074cc <pvPortMalloc>
 8005c92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00e      	beq.n	8005cb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c9a:	205c      	movs	r0, #92	; 0x5c
 8005c9c:	f001 fc16 	bl	80074cc <pvPortMalloc>
 8005ca0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d003      	beq.n	8005cb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	631a      	str	r2, [r3, #48]	; 0x30
 8005cae:	e005      	b.n	8005cbc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005cb0:	6978      	ldr	r0, [r7, #20]
 8005cb2:	f001 fcd3 	bl	800765c <vPortFree>
 8005cb6:	e001      	b.n	8005cbc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d017      	beq.n	8005cf2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005cca:	88fa      	ldrh	r2, [r7, #6]
 8005ccc:	2300      	movs	r3, #0
 8005cce:	9303      	str	r3, [sp, #12]
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	9302      	str	r3, [sp, #8]
 8005cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd6:	9301      	str	r3, [sp, #4]
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	68b9      	ldr	r1, [r7, #8]
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f80e 	bl	8005d02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ce6:	69f8      	ldr	r0, [r7, #28]
 8005ce8:	f000 f89c 	bl	8005e24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005cec:	2301      	movs	r3, #1
 8005cee:	61bb      	str	r3, [r7, #24]
 8005cf0:	e002      	b.n	8005cf8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005cf8:	69bb      	ldr	r3, [r7, #24]
	}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3720      	adds	r7, #32
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b088      	sub	sp, #32
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	607a      	str	r2, [r7, #4]
 8005d0e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	461a      	mov	r2, r3
 8005d1a:	21a5      	movs	r1, #165	; 0xa5
 8005d1c:	f003 f8dd 	bl	8008eda <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d24:	6879      	ldr	r1, [r7, #4]
 8005d26:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005d2a:	440b      	add	r3, r1
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	f023 0307 	bic.w	r3, r3, #7
 8005d38:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	f003 0307 	and.w	r3, r3, #7
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00b      	beq.n	8005d5c <prvInitialiseNewTask+0x5a>
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	b672      	cpsid	i
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	b662      	cpsie	i
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	e7fe      	b.n	8005d5a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d01f      	beq.n	8005da2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d62:	2300      	movs	r3, #0
 8005d64:	61fb      	str	r3, [r7, #28]
 8005d66:	e012      	b.n	8005d8e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	7819      	ldrb	r1, [r3, #0]
 8005d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	4413      	add	r3, r2
 8005d76:	3334      	adds	r3, #52	; 0x34
 8005d78:	460a      	mov	r2, r1
 8005d7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	4413      	add	r3, r2
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d006      	beq.n	8005d96 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	61fb      	str	r3, [r7, #28]
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	2b0f      	cmp	r3, #15
 8005d92:	d9e9      	bls.n	8005d68 <prvInitialiseNewTask+0x66>
 8005d94:	e000      	b.n	8005d98 <prvInitialiseNewTask+0x96>
			{
				break;
 8005d96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005da0:	e003      	b.n	8005daa <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dac:	2b37      	cmp	r3, #55	; 0x37
 8005dae:	d901      	bls.n	8005db4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005db0:	2337      	movs	r3, #55	; 0x37
 8005db2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005db8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dbe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc8:	3304      	adds	r3, #4
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff f928 	bl	8005020 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd2:	3318      	adds	r3, #24
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7ff f923 	bl	8005020 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df2:	2200      	movs	r2, #0
 8005df4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	68f9      	ldr	r1, [r7, #12]
 8005e02:	69b8      	ldr	r0, [r7, #24]
 8005e04:	f001 f936 	bl	8007074 <pxPortInitialiseStack>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d002      	beq.n	8005e1a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e1a:	bf00      	nop
 8005e1c:	3720      	adds	r7, #32
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
	...

08005e24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e2c:	f001 fa2c 	bl	8007288 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e30:	4b2d      	ldr	r3, [pc, #180]	; (8005ee8 <prvAddNewTaskToReadyList+0xc4>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3301      	adds	r3, #1
 8005e36:	4a2c      	ldr	r2, [pc, #176]	; (8005ee8 <prvAddNewTaskToReadyList+0xc4>)
 8005e38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e3a:	4b2c      	ldr	r3, [pc, #176]	; (8005eec <prvAddNewTaskToReadyList+0xc8>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d109      	bne.n	8005e56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e42:	4a2a      	ldr	r2, [pc, #168]	; (8005eec <prvAddNewTaskToReadyList+0xc8>)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e48:	4b27      	ldr	r3, [pc, #156]	; (8005ee8 <prvAddNewTaskToReadyList+0xc4>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d110      	bne.n	8005e72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e50:	f000 fc1e 	bl	8006690 <prvInitialiseTaskLists>
 8005e54:	e00d      	b.n	8005e72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e56:	4b26      	ldr	r3, [pc, #152]	; (8005ef0 <prvAddNewTaskToReadyList+0xcc>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d109      	bne.n	8005e72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e5e:	4b23      	ldr	r3, [pc, #140]	; (8005eec <prvAddNewTaskToReadyList+0xc8>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d802      	bhi.n	8005e72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e6c:	4a1f      	ldr	r2, [pc, #124]	; (8005eec <prvAddNewTaskToReadyList+0xc8>)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e72:	4b20      	ldr	r3, [pc, #128]	; (8005ef4 <prvAddNewTaskToReadyList+0xd0>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3301      	adds	r3, #1
 8005e78:	4a1e      	ldr	r2, [pc, #120]	; (8005ef4 <prvAddNewTaskToReadyList+0xd0>)
 8005e7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e7c:	4b1d      	ldr	r3, [pc, #116]	; (8005ef4 <prvAddNewTaskToReadyList+0xd0>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e88:	4b1b      	ldr	r3, [pc, #108]	; (8005ef8 <prvAddNewTaskToReadyList+0xd4>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d903      	bls.n	8005e98 <prvAddNewTaskToReadyList+0x74>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e94:	4a18      	ldr	r2, [pc, #96]	; (8005ef8 <prvAddNewTaskToReadyList+0xd4>)
 8005e96:	6013      	str	r3, [r2, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4a15      	ldr	r2, [pc, #84]	; (8005efc <prvAddNewTaskToReadyList+0xd8>)
 8005ea6:	441a      	add	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3304      	adds	r3, #4
 8005eac:	4619      	mov	r1, r3
 8005eae:	4610      	mov	r0, r2
 8005eb0:	f7ff f8c3 	bl	800503a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005eb4:	f001 fa1a 	bl	80072ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005eb8:	4b0d      	ldr	r3, [pc, #52]	; (8005ef0 <prvAddNewTaskToReadyList+0xcc>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00e      	beq.n	8005ede <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ec0:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <prvAddNewTaskToReadyList+0xc8>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d207      	bcs.n	8005ede <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ece:	4b0c      	ldr	r3, [pc, #48]	; (8005f00 <prvAddNewTaskToReadyList+0xdc>)
 8005ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ede:	bf00      	nop
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	20000c24 	.word	0x20000c24
 8005eec:	20000750 	.word	0x20000750
 8005ef0:	20000c30 	.word	0x20000c30
 8005ef4:	20000c40 	.word	0x20000c40
 8005ef8:	20000c2c 	.word	0x20000c2c
 8005efc:	20000754 	.word	0x20000754
 8005f00:	e000ed04 	.word	0xe000ed04

08005f04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d018      	beq.n	8005f48 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f16:	4b14      	ldr	r3, [pc, #80]	; (8005f68 <vTaskDelay+0x64>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00b      	beq.n	8005f36 <vTaskDelay+0x32>
 8005f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f22:	b672      	cpsid	i
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	b662      	cpsie	i
 8005f32:	60bb      	str	r3, [r7, #8]
 8005f34:	e7fe      	b.n	8005f34 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8005f36:	f000 f883 	bl	8006040 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fcf1 	bl	8006924 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f42:	f000 f88b 	bl	800605c <xTaskResumeAll>
 8005f46:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d107      	bne.n	8005f5e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005f4e:	4b07      	ldr	r3, [pc, #28]	; (8005f6c <vTaskDelay+0x68>)
 8005f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f5e:	bf00      	nop
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20000c4c 	.word	0x20000c4c
 8005f6c:	e000ed04 	.word	0xe000ed04

08005f70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08a      	sub	sp, #40	; 0x28
 8005f74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f7e:	463a      	mov	r2, r7
 8005f80:	1d39      	adds	r1, r7, #4
 8005f82:	f107 0308 	add.w	r3, r7, #8
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fe fff6 	bl	8004f78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f8c:	6839      	ldr	r1, [r7, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	9202      	str	r2, [sp, #8]
 8005f94:	9301      	str	r3, [sp, #4]
 8005f96:	2300      	movs	r3, #0
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	460a      	mov	r2, r1
 8005f9e:	4922      	ldr	r1, [pc, #136]	; (8006028 <vTaskStartScheduler+0xb8>)
 8005fa0:	4822      	ldr	r0, [pc, #136]	; (800602c <vTaskStartScheduler+0xbc>)
 8005fa2:	f7ff fe09 	bl	8005bb8 <xTaskCreateStatic>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	4b21      	ldr	r3, [pc, #132]	; (8006030 <vTaskStartScheduler+0xc0>)
 8005faa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005fac:	4b20      	ldr	r3, [pc, #128]	; (8006030 <vTaskStartScheduler+0xc0>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	e001      	b.n	8005fbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d102      	bne.n	8005fca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005fc4:	f000 fd02 	bl	80069cc <xTimerCreateTimerTask>
 8005fc8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d117      	bne.n	8006000 <vTaskStartScheduler+0x90>
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	b672      	cpsid	i
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	b662      	cpsie	i
 8005fe4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005fe6:	4b13      	ldr	r3, [pc, #76]	; (8006034 <vTaskStartScheduler+0xc4>)
 8005fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005fee:	4b12      	ldr	r3, [pc, #72]	; (8006038 <vTaskStartScheduler+0xc8>)
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ff4:	4b11      	ldr	r3, [pc, #68]	; (800603c <vTaskStartScheduler+0xcc>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ffa:	f001 f8c9 	bl	8007190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ffe:	e00f      	b.n	8006020 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006006:	d10b      	bne.n	8006020 <vTaskStartScheduler+0xb0>
 8006008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600c:	b672      	cpsid	i
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	b662      	cpsie	i
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	e7fe      	b.n	800601e <vTaskStartScheduler+0xae>
}
 8006020:	bf00      	nop
 8006022:	3718      	adds	r7, #24
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	080096fc 	.word	0x080096fc
 800602c:	08006661 	.word	0x08006661
 8006030:	20000c48 	.word	0x20000c48
 8006034:	20000c44 	.word	0x20000c44
 8006038:	20000c30 	.word	0x20000c30
 800603c:	20000c28 	.word	0x20000c28

08006040 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006040:	b480      	push	{r7}
 8006042:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006044:	4b04      	ldr	r3, [pc, #16]	; (8006058 <vTaskSuspendAll+0x18>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3301      	adds	r3, #1
 800604a:	4a03      	ldr	r2, [pc, #12]	; (8006058 <vTaskSuspendAll+0x18>)
 800604c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800604e:	bf00      	nop
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	20000c4c 	.word	0x20000c4c

0800605c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006062:	2300      	movs	r3, #0
 8006064:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006066:	2300      	movs	r3, #0
 8006068:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800606a:	4b42      	ldr	r3, [pc, #264]	; (8006174 <xTaskResumeAll+0x118>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10b      	bne.n	800608a <xTaskResumeAll+0x2e>
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	b672      	cpsid	i
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	b662      	cpsie	i
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	e7fe      	b.n	8006088 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800608a:	f001 f8fd 	bl	8007288 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800608e:	4b39      	ldr	r3, [pc, #228]	; (8006174 <xTaskResumeAll+0x118>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3b01      	subs	r3, #1
 8006094:	4a37      	ldr	r2, [pc, #220]	; (8006174 <xTaskResumeAll+0x118>)
 8006096:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006098:	4b36      	ldr	r3, [pc, #216]	; (8006174 <xTaskResumeAll+0x118>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d162      	bne.n	8006166 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060a0:	4b35      	ldr	r3, [pc, #212]	; (8006178 <xTaskResumeAll+0x11c>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d05e      	beq.n	8006166 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060a8:	e02f      	b.n	800610a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060aa:	4b34      	ldr	r3, [pc, #208]	; (800617c <xTaskResumeAll+0x120>)
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	3318      	adds	r3, #24
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7ff f81c 	bl	80050f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3304      	adds	r3, #4
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff f817 	bl	80050f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ca:	4b2d      	ldr	r3, [pc, #180]	; (8006180 <xTaskResumeAll+0x124>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d903      	bls.n	80060da <xTaskResumeAll+0x7e>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d6:	4a2a      	ldr	r2, [pc, #168]	; (8006180 <xTaskResumeAll+0x124>)
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060de:	4613      	mov	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4a27      	ldr	r2, [pc, #156]	; (8006184 <xTaskResumeAll+0x128>)
 80060e8:	441a      	add	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3304      	adds	r3, #4
 80060ee:	4619      	mov	r1, r3
 80060f0:	4610      	mov	r0, r2
 80060f2:	f7fe ffa2 	bl	800503a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060fa:	4b23      	ldr	r3, [pc, #140]	; (8006188 <xTaskResumeAll+0x12c>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	429a      	cmp	r2, r3
 8006102:	d302      	bcc.n	800610a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006104:	4b21      	ldr	r3, [pc, #132]	; (800618c <xTaskResumeAll+0x130>)
 8006106:	2201      	movs	r2, #1
 8006108:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800610a:	4b1c      	ldr	r3, [pc, #112]	; (800617c <xTaskResumeAll+0x120>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1cb      	bne.n	80060aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006118:	f000 fb56 	bl	80067c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800611c:	4b1c      	ldr	r3, [pc, #112]	; (8006190 <xTaskResumeAll+0x134>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d010      	beq.n	800614a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006128:	f000 f846 	bl	80061b8 <xTaskIncrementTick>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d002      	beq.n	8006138 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006132:	4b16      	ldr	r3, [pc, #88]	; (800618c <xTaskResumeAll+0x130>)
 8006134:	2201      	movs	r2, #1
 8006136:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3b01      	subs	r3, #1
 800613c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1f1      	bne.n	8006128 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006144:	4b12      	ldr	r3, [pc, #72]	; (8006190 <xTaskResumeAll+0x134>)
 8006146:	2200      	movs	r2, #0
 8006148:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800614a:	4b10      	ldr	r3, [pc, #64]	; (800618c <xTaskResumeAll+0x130>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006152:	2301      	movs	r3, #1
 8006154:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006156:	4b0f      	ldr	r3, [pc, #60]	; (8006194 <xTaskResumeAll+0x138>)
 8006158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006166:	f001 f8c1 	bl	80072ec <vPortExitCritical>

	return xAlreadyYielded;
 800616a:	68bb      	ldr	r3, [r7, #8]
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	20000c4c 	.word	0x20000c4c
 8006178:	20000c24 	.word	0x20000c24
 800617c:	20000be4 	.word	0x20000be4
 8006180:	20000c2c 	.word	0x20000c2c
 8006184:	20000754 	.word	0x20000754
 8006188:	20000750 	.word	0x20000750
 800618c:	20000c38 	.word	0x20000c38
 8006190:	20000c34 	.word	0x20000c34
 8006194:	e000ed04 	.word	0xe000ed04

08006198 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800619e:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <xTaskGetTickCount+0x1c>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80061a4:	687b      	ldr	r3, [r7, #4]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	20000c28 	.word	0x20000c28

080061b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80061be:	2300      	movs	r3, #0
 80061c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061c2:	4b4f      	ldr	r3, [pc, #316]	; (8006300 <xTaskIncrementTick+0x148>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f040 808a 	bne.w	80062e0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061cc:	4b4d      	ldr	r3, [pc, #308]	; (8006304 <xTaskIncrementTick+0x14c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3301      	adds	r3, #1
 80061d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80061d4:	4a4b      	ldr	r2, [pc, #300]	; (8006304 <xTaskIncrementTick+0x14c>)
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d121      	bne.n	8006224 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80061e0:	4b49      	ldr	r3, [pc, #292]	; (8006308 <xTaskIncrementTick+0x150>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00b      	beq.n	8006202 <xTaskIncrementTick+0x4a>
 80061ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ee:	b672      	cpsid	i
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	b662      	cpsie	i
 80061fe:	603b      	str	r3, [r7, #0]
 8006200:	e7fe      	b.n	8006200 <xTaskIncrementTick+0x48>
 8006202:	4b41      	ldr	r3, [pc, #260]	; (8006308 <xTaskIncrementTick+0x150>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	4b40      	ldr	r3, [pc, #256]	; (800630c <xTaskIncrementTick+0x154>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a3e      	ldr	r2, [pc, #248]	; (8006308 <xTaskIncrementTick+0x150>)
 800620e:	6013      	str	r3, [r2, #0]
 8006210:	4a3e      	ldr	r2, [pc, #248]	; (800630c <xTaskIncrementTick+0x154>)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	4b3e      	ldr	r3, [pc, #248]	; (8006310 <xTaskIncrementTick+0x158>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3301      	adds	r3, #1
 800621c:	4a3c      	ldr	r2, [pc, #240]	; (8006310 <xTaskIncrementTick+0x158>)
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	f000 fad2 	bl	80067c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006224:	4b3b      	ldr	r3, [pc, #236]	; (8006314 <xTaskIncrementTick+0x15c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	429a      	cmp	r2, r3
 800622c:	d349      	bcc.n	80062c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800622e:	4b36      	ldr	r3, [pc, #216]	; (8006308 <xTaskIncrementTick+0x150>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d104      	bne.n	8006242 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006238:	4b36      	ldr	r3, [pc, #216]	; (8006314 <xTaskIncrementTick+0x15c>)
 800623a:	f04f 32ff 	mov.w	r2, #4294967295
 800623e:	601a      	str	r2, [r3, #0]
					break;
 8006240:	e03f      	b.n	80062c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006242:	4b31      	ldr	r3, [pc, #196]	; (8006308 <xTaskIncrementTick+0x150>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	429a      	cmp	r2, r3
 8006258:	d203      	bcs.n	8006262 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800625a:	4a2e      	ldr	r2, [pc, #184]	; (8006314 <xTaskIncrementTick+0x15c>)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006260:	e02f      	b.n	80062c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	3304      	adds	r3, #4
 8006266:	4618      	mov	r0, r3
 8006268:	f7fe ff44 	bl	80050f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006270:	2b00      	cmp	r3, #0
 8006272:	d004      	beq.n	800627e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	3318      	adds	r3, #24
 8006278:	4618      	mov	r0, r3
 800627a:	f7fe ff3b 	bl	80050f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006282:	4b25      	ldr	r3, [pc, #148]	; (8006318 <xTaskIncrementTick+0x160>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	429a      	cmp	r2, r3
 8006288:	d903      	bls.n	8006292 <xTaskIncrementTick+0xda>
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628e:	4a22      	ldr	r2, [pc, #136]	; (8006318 <xTaskIncrementTick+0x160>)
 8006290:	6013      	str	r3, [r2, #0]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006296:	4613      	mov	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4a1f      	ldr	r2, [pc, #124]	; (800631c <xTaskIncrementTick+0x164>)
 80062a0:	441a      	add	r2, r3
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	3304      	adds	r3, #4
 80062a6:	4619      	mov	r1, r3
 80062a8:	4610      	mov	r0, r2
 80062aa:	f7fe fec6 	bl	800503a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b2:	4b1b      	ldr	r3, [pc, #108]	; (8006320 <xTaskIncrementTick+0x168>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d3b8      	bcc.n	800622e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80062bc:	2301      	movs	r3, #1
 80062be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062c0:	e7b5      	b.n	800622e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80062c2:	4b17      	ldr	r3, [pc, #92]	; (8006320 <xTaskIncrementTick+0x168>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c8:	4914      	ldr	r1, [pc, #80]	; (800631c <xTaskIncrementTick+0x164>)
 80062ca:	4613      	mov	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	440b      	add	r3, r1
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d907      	bls.n	80062ea <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80062da:	2301      	movs	r3, #1
 80062dc:	617b      	str	r3, [r7, #20]
 80062de:	e004      	b.n	80062ea <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80062e0:	4b10      	ldr	r3, [pc, #64]	; (8006324 <xTaskIncrementTick+0x16c>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3301      	adds	r3, #1
 80062e6:	4a0f      	ldr	r2, [pc, #60]	; (8006324 <xTaskIncrementTick+0x16c>)
 80062e8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80062ea:	4b0f      	ldr	r3, [pc, #60]	; (8006328 <xTaskIncrementTick+0x170>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80062f2:	2301      	movs	r3, #1
 80062f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80062f6:	697b      	ldr	r3, [r7, #20]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3718      	adds	r7, #24
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	20000c4c 	.word	0x20000c4c
 8006304:	20000c28 	.word	0x20000c28
 8006308:	20000bdc 	.word	0x20000bdc
 800630c:	20000be0 	.word	0x20000be0
 8006310:	20000c3c 	.word	0x20000c3c
 8006314:	20000c44 	.word	0x20000c44
 8006318:	20000c2c 	.word	0x20000c2c
 800631c:	20000754 	.word	0x20000754
 8006320:	20000750 	.word	0x20000750
 8006324:	20000c34 	.word	0x20000c34
 8006328:	20000c38 	.word	0x20000c38

0800632c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006332:	4b28      	ldr	r3, [pc, #160]	; (80063d4 <vTaskSwitchContext+0xa8>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800633a:	4b27      	ldr	r3, [pc, #156]	; (80063d8 <vTaskSwitchContext+0xac>)
 800633c:	2201      	movs	r2, #1
 800633e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006340:	e042      	b.n	80063c8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006342:	4b25      	ldr	r3, [pc, #148]	; (80063d8 <vTaskSwitchContext+0xac>)
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006348:	4b24      	ldr	r3, [pc, #144]	; (80063dc <vTaskSwitchContext+0xb0>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	60fb      	str	r3, [r7, #12]
 800634e:	e011      	b.n	8006374 <vTaskSwitchContext+0x48>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10b      	bne.n	800636e <vTaskSwitchContext+0x42>
 8006356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635a:	b672      	cpsid	i
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	b662      	cpsie	i
 800636a:	607b      	str	r3, [r7, #4]
 800636c:	e7fe      	b.n	800636c <vTaskSwitchContext+0x40>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3b01      	subs	r3, #1
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	491a      	ldr	r1, [pc, #104]	; (80063e0 <vTaskSwitchContext+0xb4>)
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	4613      	mov	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	440b      	add	r3, r1
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d0e3      	beq.n	8006350 <vTaskSwitchContext+0x24>
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	4613      	mov	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4a13      	ldr	r2, [pc, #76]	; (80063e0 <vTaskSwitchContext+0xb4>)
 8006394:	4413      	add	r3, r2
 8006396:	60bb      	str	r3, [r7, #8]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	605a      	str	r2, [r3, #4]
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	3308      	adds	r3, #8
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d104      	bne.n	80063b8 <vTaskSwitchContext+0x8c>
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	605a      	str	r2, [r3, #4]
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	4a09      	ldr	r2, [pc, #36]	; (80063e4 <vTaskSwitchContext+0xb8>)
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	4a06      	ldr	r2, [pc, #24]	; (80063dc <vTaskSwitchContext+0xb0>)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6013      	str	r3, [r2, #0]
}
 80063c8:	bf00      	nop
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	20000c4c 	.word	0x20000c4c
 80063d8:	20000c38 	.word	0x20000c38
 80063dc:	20000c2c 	.word	0x20000c2c
 80063e0:	20000754 	.word	0x20000754
 80063e4:	20000750 	.word	0x20000750

080063e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10b      	bne.n	8006410 <vTaskPlaceOnEventList+0x28>
 80063f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fc:	b672      	cpsid	i
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	b662      	cpsie	i
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	e7fe      	b.n	800640e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006410:	4b07      	ldr	r3, [pc, #28]	; (8006430 <vTaskPlaceOnEventList+0x48>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3318      	adds	r3, #24
 8006416:	4619      	mov	r1, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7fe fe32 	bl	8005082 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800641e:	2101      	movs	r1, #1
 8006420:	6838      	ldr	r0, [r7, #0]
 8006422:	f000 fa7f 	bl	8006924 <prvAddCurrentTaskToDelayedList>
}
 8006426:	bf00      	nop
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	20000750 	.word	0x20000750

08006434 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10b      	bne.n	800645e <vTaskPlaceOnEventListRestricted+0x2a>
 8006446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644a:	b672      	cpsid	i
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	b662      	cpsie	i
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	e7fe      	b.n	800645c <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800645e:	4b0a      	ldr	r3, [pc, #40]	; (8006488 <vTaskPlaceOnEventListRestricted+0x54>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3318      	adds	r3, #24
 8006464:	4619      	mov	r1, r3
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f7fe fde7 	bl	800503a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006472:	f04f 33ff 	mov.w	r3, #4294967295
 8006476:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006478:	6879      	ldr	r1, [r7, #4]
 800647a:	68b8      	ldr	r0, [r7, #8]
 800647c:	f000 fa52 	bl	8006924 <prvAddCurrentTaskToDelayedList>
	}
 8006480:	bf00      	nop
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20000750 	.word	0x20000750

0800648c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10b      	bne.n	80064ba <xTaskRemoveFromEventList+0x2e>
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	b672      	cpsid	i
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	b662      	cpsie	i
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	e7fe      	b.n	80064b8 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	3318      	adds	r3, #24
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fe fe18 	bl	80050f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064c4:	4b1d      	ldr	r3, [pc, #116]	; (800653c <xTaskRemoveFromEventList+0xb0>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d11d      	bne.n	8006508 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	3304      	adds	r3, #4
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7fe fe0f 	bl	80050f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064da:	4b19      	ldr	r3, [pc, #100]	; (8006540 <xTaskRemoveFromEventList+0xb4>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d903      	bls.n	80064ea <xTaskRemoveFromEventList+0x5e>
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e6:	4a16      	ldr	r2, [pc, #88]	; (8006540 <xTaskRemoveFromEventList+0xb4>)
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ee:	4613      	mov	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4a13      	ldr	r2, [pc, #76]	; (8006544 <xTaskRemoveFromEventList+0xb8>)
 80064f8:	441a      	add	r2, r3
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	3304      	adds	r3, #4
 80064fe:	4619      	mov	r1, r3
 8006500:	4610      	mov	r0, r2
 8006502:	f7fe fd9a 	bl	800503a <vListInsertEnd>
 8006506:	e005      	b.n	8006514 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	3318      	adds	r3, #24
 800650c:	4619      	mov	r1, r3
 800650e:	480e      	ldr	r0, [pc, #56]	; (8006548 <xTaskRemoveFromEventList+0xbc>)
 8006510:	f7fe fd93 	bl	800503a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006518:	4b0c      	ldr	r3, [pc, #48]	; (800654c <xTaskRemoveFromEventList+0xc0>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651e:	429a      	cmp	r2, r3
 8006520:	d905      	bls.n	800652e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006522:	2301      	movs	r3, #1
 8006524:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006526:	4b0a      	ldr	r3, [pc, #40]	; (8006550 <xTaskRemoveFromEventList+0xc4>)
 8006528:	2201      	movs	r2, #1
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	e001      	b.n	8006532 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800652e:	2300      	movs	r3, #0
 8006530:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006532:	697b      	ldr	r3, [r7, #20]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3718      	adds	r7, #24
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	20000c4c 	.word	0x20000c4c
 8006540:	20000c2c 	.word	0x20000c2c
 8006544:	20000754 	.word	0x20000754
 8006548:	20000be4 	.word	0x20000be4
 800654c:	20000750 	.word	0x20000750
 8006550:	20000c38 	.word	0x20000c38

08006554 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800655c:	4b06      	ldr	r3, [pc, #24]	; (8006578 <vTaskInternalSetTimeOutState+0x24>)
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006564:	4b05      	ldr	r3, [pc, #20]	; (800657c <vTaskInternalSetTimeOutState+0x28>)
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	605a      	str	r2, [r3, #4]
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	20000c3c 	.word	0x20000c3c
 800657c:	20000c28 	.word	0x20000c28

08006580 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b088      	sub	sp, #32
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10b      	bne.n	80065a8 <xTaskCheckForTimeOut+0x28>
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	b672      	cpsid	i
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	b662      	cpsie	i
 80065a4:	613b      	str	r3, [r7, #16]
 80065a6:	e7fe      	b.n	80065a6 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10b      	bne.n	80065c6 <xTaskCheckForTimeOut+0x46>
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	b672      	cpsid	i
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	b662      	cpsie	i
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	e7fe      	b.n	80065c4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80065c6:	f000 fe5f 	bl	8007288 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80065ca:	4b1d      	ldr	r3, [pc, #116]	; (8006640 <xTaskCheckForTimeOut+0xc0>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e2:	d102      	bne.n	80065ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80065e4:	2300      	movs	r3, #0
 80065e6:	61fb      	str	r3, [r7, #28]
 80065e8:	e023      	b.n	8006632 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	4b15      	ldr	r3, [pc, #84]	; (8006644 <xTaskCheckForTimeOut+0xc4>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d007      	beq.n	8006606 <xTaskCheckForTimeOut+0x86>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d302      	bcc.n	8006606 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006600:	2301      	movs	r3, #1
 8006602:	61fb      	str	r3, [r7, #28]
 8006604:	e015      	b.n	8006632 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	429a      	cmp	r2, r3
 800660e:	d20b      	bcs.n	8006628 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	1ad2      	subs	r2, r2, r3
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff ff99 	bl	8006554 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006622:	2300      	movs	r3, #0
 8006624:	61fb      	str	r3, [r7, #28]
 8006626:	e004      	b.n	8006632 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800662e:	2301      	movs	r3, #1
 8006630:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006632:	f000 fe5b 	bl	80072ec <vPortExitCritical>

	return xReturn;
 8006636:	69fb      	ldr	r3, [r7, #28]
}
 8006638:	4618      	mov	r0, r3
 800663a:	3720      	adds	r7, #32
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	20000c28 	.word	0x20000c28
 8006644:	20000c3c 	.word	0x20000c3c

08006648 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006648:	b480      	push	{r7}
 800664a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800664c:	4b03      	ldr	r3, [pc, #12]	; (800665c <vTaskMissedYield+0x14>)
 800664e:	2201      	movs	r2, #1
 8006650:	601a      	str	r2, [r3, #0]
}
 8006652:	bf00      	nop
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	20000c38 	.word	0x20000c38

08006660 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006668:	f000 f852 	bl	8006710 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800666c:	4b06      	ldr	r3, [pc, #24]	; (8006688 <prvIdleTask+0x28>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d9f9      	bls.n	8006668 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006674:	4b05      	ldr	r3, [pc, #20]	; (800668c <prvIdleTask+0x2c>)
 8006676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006684:	e7f0      	b.n	8006668 <prvIdleTask+0x8>
 8006686:	bf00      	nop
 8006688:	20000754 	.word	0x20000754
 800668c:	e000ed04 	.word	0xe000ed04

08006690 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006696:	2300      	movs	r3, #0
 8006698:	607b      	str	r3, [r7, #4]
 800669a:	e00c      	b.n	80066b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	4613      	mov	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4a12      	ldr	r2, [pc, #72]	; (80066f0 <prvInitialiseTaskLists+0x60>)
 80066a8:	4413      	add	r3, r2
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fe fc98 	bl	8004fe0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3301      	adds	r3, #1
 80066b4:	607b      	str	r3, [r7, #4]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b37      	cmp	r3, #55	; 0x37
 80066ba:	d9ef      	bls.n	800669c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80066bc:	480d      	ldr	r0, [pc, #52]	; (80066f4 <prvInitialiseTaskLists+0x64>)
 80066be:	f7fe fc8f 	bl	8004fe0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066c2:	480d      	ldr	r0, [pc, #52]	; (80066f8 <prvInitialiseTaskLists+0x68>)
 80066c4:	f7fe fc8c 	bl	8004fe0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066c8:	480c      	ldr	r0, [pc, #48]	; (80066fc <prvInitialiseTaskLists+0x6c>)
 80066ca:	f7fe fc89 	bl	8004fe0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80066ce:	480c      	ldr	r0, [pc, #48]	; (8006700 <prvInitialiseTaskLists+0x70>)
 80066d0:	f7fe fc86 	bl	8004fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80066d4:	480b      	ldr	r0, [pc, #44]	; (8006704 <prvInitialiseTaskLists+0x74>)
 80066d6:	f7fe fc83 	bl	8004fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80066da:	4b0b      	ldr	r3, [pc, #44]	; (8006708 <prvInitialiseTaskLists+0x78>)
 80066dc:	4a05      	ldr	r2, [pc, #20]	; (80066f4 <prvInitialiseTaskLists+0x64>)
 80066de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80066e0:	4b0a      	ldr	r3, [pc, #40]	; (800670c <prvInitialiseTaskLists+0x7c>)
 80066e2:	4a05      	ldr	r2, [pc, #20]	; (80066f8 <prvInitialiseTaskLists+0x68>)
 80066e4:	601a      	str	r2, [r3, #0]
}
 80066e6:	bf00      	nop
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	20000754 	.word	0x20000754
 80066f4:	20000bb4 	.word	0x20000bb4
 80066f8:	20000bc8 	.word	0x20000bc8
 80066fc:	20000be4 	.word	0x20000be4
 8006700:	20000bf8 	.word	0x20000bf8
 8006704:	20000c10 	.word	0x20000c10
 8006708:	20000bdc 	.word	0x20000bdc
 800670c:	20000be0 	.word	0x20000be0

08006710 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006716:	e019      	b.n	800674c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006718:	f000 fdb6 	bl	8007288 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800671c:	4b0f      	ldr	r3, [pc, #60]	; (800675c <prvCheckTasksWaitingTermination+0x4c>)
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3304      	adds	r3, #4
 8006728:	4618      	mov	r0, r3
 800672a:	f7fe fce3 	bl	80050f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800672e:	4b0c      	ldr	r3, [pc, #48]	; (8006760 <prvCheckTasksWaitingTermination+0x50>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3b01      	subs	r3, #1
 8006734:	4a0a      	ldr	r2, [pc, #40]	; (8006760 <prvCheckTasksWaitingTermination+0x50>)
 8006736:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006738:	4b0a      	ldr	r3, [pc, #40]	; (8006764 <prvCheckTasksWaitingTermination+0x54>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3b01      	subs	r3, #1
 800673e:	4a09      	ldr	r2, [pc, #36]	; (8006764 <prvCheckTasksWaitingTermination+0x54>)
 8006740:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006742:	f000 fdd3 	bl	80072ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f80e 	bl	8006768 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800674c:	4b05      	ldr	r3, [pc, #20]	; (8006764 <prvCheckTasksWaitingTermination+0x54>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1e1      	bne.n	8006718 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006754:	bf00      	nop
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	20000bf8 	.word	0x20000bf8
 8006760:	20000c24 	.word	0x20000c24
 8006764:	20000c0c 	.word	0x20000c0c

08006768 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006776:	2b00      	cmp	r3, #0
 8006778:	d108      	bne.n	800678c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677e:	4618      	mov	r0, r3
 8006780:	f000 ff6c 	bl	800765c <vPortFree>
				vPortFree( pxTCB );
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 ff69 	bl	800765c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800678a:	e019      	b.n	80067c0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006792:	2b01      	cmp	r3, #1
 8006794:	d103      	bne.n	800679e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 ff60 	bl	800765c <vPortFree>
	}
 800679c:	e010      	b.n	80067c0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d00b      	beq.n	80067c0 <prvDeleteTCB+0x58>
 80067a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ac:	b672      	cpsid	i
 80067ae:	f383 8811 	msr	BASEPRI, r3
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	b662      	cpsie	i
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	e7fe      	b.n	80067be <prvDeleteTCB+0x56>
	}
 80067c0:	bf00      	nop
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067ce:	4b0c      	ldr	r3, [pc, #48]	; (8006800 <prvResetNextTaskUnblockTime+0x38>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d104      	bne.n	80067e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80067d8:	4b0a      	ldr	r3, [pc, #40]	; (8006804 <prvResetNextTaskUnblockTime+0x3c>)
 80067da:	f04f 32ff 	mov.w	r2, #4294967295
 80067de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80067e0:	e008      	b.n	80067f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067e2:	4b07      	ldr	r3, [pc, #28]	; (8006800 <prvResetNextTaskUnblockTime+0x38>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	4a04      	ldr	r2, [pc, #16]	; (8006804 <prvResetNextTaskUnblockTime+0x3c>)
 80067f2:	6013      	str	r3, [r2, #0]
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	20000bdc 	.word	0x20000bdc
 8006804:	20000c44 	.word	0x20000c44

08006808 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800680e:	4b0b      	ldr	r3, [pc, #44]	; (800683c <xTaskGetSchedulerState+0x34>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d102      	bne.n	800681c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006816:	2301      	movs	r3, #1
 8006818:	607b      	str	r3, [r7, #4]
 800681a:	e008      	b.n	800682e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800681c:	4b08      	ldr	r3, [pc, #32]	; (8006840 <xTaskGetSchedulerState+0x38>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d102      	bne.n	800682a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006824:	2302      	movs	r3, #2
 8006826:	607b      	str	r3, [r7, #4]
 8006828:	e001      	b.n	800682e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800682a:	2300      	movs	r3, #0
 800682c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800682e:	687b      	ldr	r3, [r7, #4]
	}
 8006830:	4618      	mov	r0, r3
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	20000c30 	.word	0x20000c30
 8006840:	20000c4c 	.word	0x20000c4c

08006844 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006850:	2300      	movs	r3, #0
 8006852:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d058      	beq.n	800690c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800685a:	4b2f      	ldr	r3, [pc, #188]	; (8006918 <xTaskPriorityDisinherit+0xd4>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	429a      	cmp	r2, r3
 8006862:	d00b      	beq.n	800687c <xTaskPriorityDisinherit+0x38>
 8006864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006868:	b672      	cpsid	i
 800686a:	f383 8811 	msr	BASEPRI, r3
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	b662      	cpsie	i
 8006878:	60fb      	str	r3, [r7, #12]
 800687a:	e7fe      	b.n	800687a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10b      	bne.n	800689c <xTaskPriorityDisinherit+0x58>
 8006884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006888:	b672      	cpsid	i
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	b662      	cpsie	i
 8006898:	60bb      	str	r3, [r7, #8]
 800689a:	e7fe      	b.n	800689a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a0:	1e5a      	subs	r2, r3, #1
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d02c      	beq.n	800690c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d128      	bne.n	800690c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	3304      	adds	r3, #4
 80068be:	4618      	mov	r0, r3
 80068c0:	f7fe fc18 	bl	80050f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068dc:	4b0f      	ldr	r3, [pc, #60]	; (800691c <xTaskPriorityDisinherit+0xd8>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d903      	bls.n	80068ec <xTaskPriorityDisinherit+0xa8>
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e8:	4a0c      	ldr	r2, [pc, #48]	; (800691c <xTaskPriorityDisinherit+0xd8>)
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f0:	4613      	mov	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4a09      	ldr	r2, [pc, #36]	; (8006920 <xTaskPriorityDisinherit+0xdc>)
 80068fa:	441a      	add	r2, r3
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	3304      	adds	r3, #4
 8006900:	4619      	mov	r1, r3
 8006902:	4610      	mov	r0, r2
 8006904:	f7fe fb99 	bl	800503a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006908:	2301      	movs	r3, #1
 800690a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800690c:	697b      	ldr	r3, [r7, #20]
	}
 800690e:	4618      	mov	r0, r3
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	20000750 	.word	0x20000750
 800691c:	20000c2c 	.word	0x20000c2c
 8006920:	20000754 	.word	0x20000754

08006924 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800692e:	4b21      	ldr	r3, [pc, #132]	; (80069b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006934:	4b20      	ldr	r3, [pc, #128]	; (80069b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3304      	adds	r3, #4
 800693a:	4618      	mov	r0, r3
 800693c:	f7fe fbda 	bl	80050f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006946:	d10a      	bne.n	800695e <prvAddCurrentTaskToDelayedList+0x3a>
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d007      	beq.n	800695e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800694e:	4b1a      	ldr	r3, [pc, #104]	; (80069b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3304      	adds	r3, #4
 8006954:	4619      	mov	r1, r3
 8006956:	4819      	ldr	r0, [pc, #100]	; (80069bc <prvAddCurrentTaskToDelayedList+0x98>)
 8006958:	f7fe fb6f 	bl	800503a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800695c:	e026      	b.n	80069ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4413      	add	r3, r2
 8006964:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006966:	4b14      	ldr	r3, [pc, #80]	; (80069b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	429a      	cmp	r2, r3
 8006974:	d209      	bcs.n	800698a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006976:	4b12      	ldr	r3, [pc, #72]	; (80069c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	4b0f      	ldr	r3, [pc, #60]	; (80069b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3304      	adds	r3, #4
 8006980:	4619      	mov	r1, r3
 8006982:	4610      	mov	r0, r2
 8006984:	f7fe fb7d 	bl	8005082 <vListInsert>
}
 8006988:	e010      	b.n	80069ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800698a:	4b0e      	ldr	r3, [pc, #56]	; (80069c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	4b0a      	ldr	r3, [pc, #40]	; (80069b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3304      	adds	r3, #4
 8006994:	4619      	mov	r1, r3
 8006996:	4610      	mov	r0, r2
 8006998:	f7fe fb73 	bl	8005082 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800699c:	4b0a      	ldr	r3, [pc, #40]	; (80069c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d202      	bcs.n	80069ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80069a6:	4a08      	ldr	r2, [pc, #32]	; (80069c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	6013      	str	r3, [r2, #0]
}
 80069ac:	bf00      	nop
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	20000c28 	.word	0x20000c28
 80069b8:	20000750 	.word	0x20000750
 80069bc:	20000c10 	.word	0x20000c10
 80069c0:	20000be0 	.word	0x20000be0
 80069c4:	20000bdc 	.word	0x20000bdc
 80069c8:	20000c44 	.word	0x20000c44

080069cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08a      	sub	sp, #40	; 0x28
 80069d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80069d2:	2300      	movs	r3, #0
 80069d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80069d6:	f000 fb0d 	bl	8006ff4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80069da:	4b1d      	ldr	r3, [pc, #116]	; (8006a50 <xTimerCreateTimerTask+0x84>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d021      	beq.n	8006a26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80069e2:	2300      	movs	r3, #0
 80069e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80069e6:	2300      	movs	r3, #0
 80069e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80069ea:	1d3a      	adds	r2, r7, #4
 80069ec:	f107 0108 	add.w	r1, r7, #8
 80069f0:	f107 030c 	add.w	r3, r7, #12
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe fad9 	bl	8004fac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80069fa:	6879      	ldr	r1, [r7, #4]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	9202      	str	r2, [sp, #8]
 8006a02:	9301      	str	r3, [sp, #4]
 8006a04:	2302      	movs	r3, #2
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	2300      	movs	r3, #0
 8006a0a:	460a      	mov	r2, r1
 8006a0c:	4911      	ldr	r1, [pc, #68]	; (8006a54 <xTimerCreateTimerTask+0x88>)
 8006a0e:	4812      	ldr	r0, [pc, #72]	; (8006a58 <xTimerCreateTimerTask+0x8c>)
 8006a10:	f7ff f8d2 	bl	8005bb8 <xTaskCreateStatic>
 8006a14:	4602      	mov	r2, r0
 8006a16:	4b11      	ldr	r3, [pc, #68]	; (8006a5c <xTimerCreateTimerTask+0x90>)
 8006a18:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006a1a:	4b10      	ldr	r3, [pc, #64]	; (8006a5c <xTimerCreateTimerTask+0x90>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006a22:	2301      	movs	r3, #1
 8006a24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10b      	bne.n	8006a44 <xTimerCreateTimerTask+0x78>
 8006a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a30:	b672      	cpsid	i
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	b662      	cpsie	i
 8006a40:	613b      	str	r3, [r7, #16]
 8006a42:	e7fe      	b.n	8006a42 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8006a44:	697b      	ldr	r3, [r7, #20]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	20000c80 	.word	0x20000c80
 8006a54:	08009704 	.word	0x08009704
 8006a58:	08006b99 	.word	0x08006b99
 8006a5c:	20000c84 	.word	0x20000c84

08006a60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b08a      	sub	sp, #40	; 0x28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
 8006a6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10b      	bne.n	8006a90 <xTimerGenericCommand+0x30>
 8006a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7c:	b672      	cpsid	i
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	b662      	cpsie	i
 8006a8c:	623b      	str	r3, [r7, #32]
 8006a8e:	e7fe      	b.n	8006a8e <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006a90:	4b19      	ldr	r3, [pc, #100]	; (8006af8 <xTimerGenericCommand+0x98>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d02a      	beq.n	8006aee <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2b05      	cmp	r3, #5
 8006aa8:	dc18      	bgt.n	8006adc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006aaa:	f7ff fead 	bl	8006808 <xTaskGetSchedulerState>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d109      	bne.n	8006ac8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ab4:	4b10      	ldr	r3, [pc, #64]	; (8006af8 <xTimerGenericCommand+0x98>)
 8006ab6:	6818      	ldr	r0, [r3, #0]
 8006ab8:	f107 0110 	add.w	r1, r7, #16
 8006abc:	2300      	movs	r3, #0
 8006abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ac0:	f7fe fc8e 	bl	80053e0 <xQueueGenericSend>
 8006ac4:	6278      	str	r0, [r7, #36]	; 0x24
 8006ac6:	e012      	b.n	8006aee <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ac8:	4b0b      	ldr	r3, [pc, #44]	; (8006af8 <xTimerGenericCommand+0x98>)
 8006aca:	6818      	ldr	r0, [r3, #0]
 8006acc:	f107 0110 	add.w	r1, r7, #16
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f7fe fc84 	bl	80053e0 <xQueueGenericSend>
 8006ad8:	6278      	str	r0, [r7, #36]	; 0x24
 8006ada:	e008      	b.n	8006aee <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006adc:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <xTimerGenericCommand+0x98>)
 8006ade:	6818      	ldr	r0, [r3, #0]
 8006ae0:	f107 0110 	add.w	r1, r7, #16
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	f7fe fd7c 	bl	80055e4 <xQueueGenericSendFromISR>
 8006aec:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3728      	adds	r7, #40	; 0x28
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	20000c80 	.word	0x20000c80

08006afc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b088      	sub	sp, #32
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b06:	4b23      	ldr	r3, [pc, #140]	; (8006b94 <prvProcessExpiredTimer+0x98>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	3304      	adds	r3, #4
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7fe faed 	bl	80050f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b20:	f003 0304 	and.w	r3, r3, #4
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d023      	beq.n	8006b70 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	699a      	ldr	r2, [r3, #24]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	18d1      	adds	r1, r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	6978      	ldr	r0, [r7, #20]
 8006b36:	f000 f8d3 	bl	8006ce0 <prvInsertTimerInActiveList>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d020      	beq.n	8006b82 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b40:	2300      	movs	r3, #0
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	2300      	movs	r3, #0
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	2100      	movs	r1, #0
 8006b4a:	6978      	ldr	r0, [r7, #20]
 8006b4c:	f7ff ff88 	bl	8006a60 <xTimerGenericCommand>
 8006b50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d114      	bne.n	8006b82 <prvProcessExpiredTimer+0x86>
 8006b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5c:	b672      	cpsid	i
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	b662      	cpsie	i
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	e7fe      	b.n	8006b6e <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b76:	f023 0301 	bic.w	r3, r3, #1
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	6978      	ldr	r0, [r7, #20]
 8006b88:	4798      	blx	r3
}
 8006b8a:	bf00      	nop
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20000c78 	.word	0x20000c78

08006b98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ba0:	f107 0308 	add.w	r3, r7, #8
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 f857 	bl	8006c58 <prvGetNextExpireTime>
 8006baa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	4619      	mov	r1, r3
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 f803 	bl	8006bbc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006bb6:	f000 f8d5 	bl	8006d64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006bba:	e7f1      	b.n	8006ba0 <prvTimerTask+0x8>

08006bbc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006bc6:	f7ff fa3b 	bl	8006040 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bca:	f107 0308 	add.w	r3, r7, #8
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 f866 	bl	8006ca0 <prvSampleTimeNow>
 8006bd4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d130      	bne.n	8006c3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10a      	bne.n	8006bf8 <prvProcessTimerOrBlockTask+0x3c>
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d806      	bhi.n	8006bf8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006bea:	f7ff fa37 	bl	800605c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006bee:	68f9      	ldr	r1, [r7, #12]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f7ff ff83 	bl	8006afc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006bf6:	e024      	b.n	8006c42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d008      	beq.n	8006c10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006bfe:	4b13      	ldr	r3, [pc, #76]	; (8006c4c <prvProcessTimerOrBlockTask+0x90>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <prvProcessTimerOrBlockTask+0x50>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e000      	b.n	8006c0e <prvProcessTimerOrBlockTask+0x52>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c10:	4b0f      	ldr	r3, [pc, #60]	; (8006c50 <prvProcessTimerOrBlockTask+0x94>)
 8006c12:	6818      	ldr	r0, [r3, #0]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	f7fe ff97 	bl	8005b50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c22:	f7ff fa1b 	bl	800605c <xTaskResumeAll>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10a      	bne.n	8006c42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c2c:	4b09      	ldr	r3, [pc, #36]	; (8006c54 <prvProcessTimerOrBlockTask+0x98>)
 8006c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	f3bf 8f6f 	isb	sy
}
 8006c3c:	e001      	b.n	8006c42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006c3e:	f7ff fa0d 	bl	800605c <xTaskResumeAll>
}
 8006c42:	bf00      	nop
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20000c7c 	.word	0x20000c7c
 8006c50:	20000c80 	.word	0x20000c80
 8006c54:	e000ed04 	.word	0xe000ed04

08006c58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c60:	4b0e      	ldr	r3, [pc, #56]	; (8006c9c <prvGetNextExpireTime+0x44>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d101      	bne.n	8006c6e <prvGetNextExpireTime+0x16>
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	e000      	b.n	8006c70 <prvGetNextExpireTime+0x18>
 8006c6e:	2200      	movs	r2, #0
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d105      	bne.n	8006c88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c7c:	4b07      	ldr	r3, [pc, #28]	; (8006c9c <prvGetNextExpireTime+0x44>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	60fb      	str	r3, [r7, #12]
 8006c86:	e001      	b.n	8006c8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	20000c78 	.word	0x20000c78

08006ca0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ca8:	f7ff fa76 	bl	8006198 <xTaskGetTickCount>
 8006cac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006cae:	4b0b      	ldr	r3, [pc, #44]	; (8006cdc <prvSampleTimeNow+0x3c>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d205      	bcs.n	8006cc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006cb8:	f000 f936 	bl	8006f28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	e002      	b.n	8006cca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006cca:	4a04      	ldr	r2, [pc, #16]	; (8006cdc <prvSampleTimeNow+0x3c>)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20000c88 	.word	0x20000c88

08006ce0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
 8006cec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d812      	bhi.n	8006d2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	1ad2      	subs	r2, r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d302      	bcc.n	8006d1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d14:	2301      	movs	r3, #1
 8006d16:	617b      	str	r3, [r7, #20]
 8006d18:	e01b      	b.n	8006d52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d1a:	4b10      	ldr	r3, [pc, #64]	; (8006d5c <prvInsertTimerInActiveList+0x7c>)
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	3304      	adds	r3, #4
 8006d22:	4619      	mov	r1, r3
 8006d24:	4610      	mov	r0, r2
 8006d26:	f7fe f9ac 	bl	8005082 <vListInsert>
 8006d2a:	e012      	b.n	8006d52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d206      	bcs.n	8006d42 <prvInsertTimerInActiveList+0x62>
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d302      	bcc.n	8006d42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	617b      	str	r3, [r7, #20]
 8006d40:	e007      	b.n	8006d52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d42:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <prvInsertTimerInActiveList+0x80>)
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	3304      	adds	r3, #4
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	f7fe f998 	bl	8005082 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006d52:	697b      	ldr	r3, [r7, #20]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3718      	adds	r7, #24
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	20000c7c 	.word	0x20000c7c
 8006d60:	20000c78 	.word	0x20000c78

08006d64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b08e      	sub	sp, #56	; 0x38
 8006d68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d6a:	e0cc      	b.n	8006f06 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	da19      	bge.n	8006da6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006d72:	1d3b      	adds	r3, r7, #4
 8006d74:	3304      	adds	r3, #4
 8006d76:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10b      	bne.n	8006d96 <prvProcessReceivedCommands+0x32>
 8006d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d82:	b672      	cpsid	i
 8006d84:	f383 8811 	msr	BASEPRI, r3
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	b662      	cpsie	i
 8006d92:	61fb      	str	r3, [r7, #28]
 8006d94:	e7fe      	b.n	8006d94 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d9c:	6850      	ldr	r0, [r2, #4]
 8006d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006da0:	6892      	ldr	r2, [r2, #8]
 8006da2:	4611      	mov	r1, r2
 8006da4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f2c0 80ab 	blt.w	8006f04 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d004      	beq.n	8006dc4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fe f998 	bl	80050f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006dc4:	463b      	mov	r3, r7
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7ff ff6a 	bl	8006ca0 <prvSampleTimeNow>
 8006dcc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b09      	cmp	r3, #9
 8006dd2:	f200 8098 	bhi.w	8006f06 <prvProcessReceivedCommands+0x1a2>
 8006dd6:	a201      	add	r2, pc, #4	; (adr r2, 8006ddc <prvProcessReceivedCommands+0x78>)
 8006dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ddc:	08006e05 	.word	0x08006e05
 8006de0:	08006e05 	.word	0x08006e05
 8006de4:	08006e05 	.word	0x08006e05
 8006de8:	08006e7b 	.word	0x08006e7b
 8006dec:	08006e8f 	.word	0x08006e8f
 8006df0:	08006edb 	.word	0x08006edb
 8006df4:	08006e05 	.word	0x08006e05
 8006df8:	08006e05 	.word	0x08006e05
 8006dfc:	08006e7b 	.word	0x08006e7b
 8006e00:	08006e8f 	.word	0x08006e8f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e0a:	f043 0301 	orr.w	r3, r3, #1
 8006e0e:	b2da      	uxtb	r2, r3
 8006e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	18d1      	adds	r1, r2, r3
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e24:	f7ff ff5c 	bl	8006ce0 <prvInsertTimerInActiveList>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d06b      	beq.n	8006f06 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e3c:	f003 0304 	and.w	r3, r3, #4
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d060      	beq.n	8006f06 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	441a      	add	r2, r3
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	2300      	movs	r3, #0
 8006e52:	2100      	movs	r1, #0
 8006e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e56:	f7ff fe03 	bl	8006a60 <xTimerGenericCommand>
 8006e5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d151      	bne.n	8006f06 <prvProcessReceivedCommands+0x1a2>
 8006e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e66:	b672      	cpsid	i
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	b662      	cpsie	i
 8006e76:	61bb      	str	r3, [r7, #24]
 8006e78:	e7fe      	b.n	8006e78 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e80:	f023 0301 	bic.w	r3, r3, #1
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006e8c:	e03b      	b.n	8006f06 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e94:	f043 0301 	orr.w	r3, r3, #1
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10b      	bne.n	8006ec6 <prvProcessReceivedCommands+0x162>
 8006eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb2:	b672      	cpsid	i
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	b662      	cpsie	i
 8006ec2:	617b      	str	r3, [r7, #20]
 8006ec4:	e7fe      	b.n	8006ec4 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec8:	699a      	ldr	r2, [r3, #24]
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	18d1      	adds	r1, r2, r3
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ed4:	f7ff ff04 	bl	8006ce0 <prvInsertTimerInActiveList>
					break;
 8006ed8:	e015      	b.n	8006f06 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006edc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d103      	bne.n	8006ef0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eea:	f000 fbb7 	bl	800765c <vPortFree>
 8006eee:	e00a      	b.n	8006f06 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ef6:	f023 0301 	bic.w	r3, r3, #1
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006f02:	e000      	b.n	8006f06 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006f04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f06:	4b07      	ldr	r3, [pc, #28]	; (8006f24 <prvProcessReceivedCommands+0x1c0>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	1d39      	adds	r1, r7, #4
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fe fc04 	bl	800571c <xQueueReceive>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f47f af28 	bne.w	8006d6c <prvProcessReceivedCommands+0x8>
	}
}
 8006f1c:	bf00      	nop
 8006f1e:	3730      	adds	r7, #48	; 0x30
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	20000c80 	.word	0x20000c80

08006f28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f2e:	e049      	b.n	8006fc4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f30:	4b2e      	ldr	r3, [pc, #184]	; (8006fec <prvSwitchTimerLists+0xc4>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f3a:	4b2c      	ldr	r3, [pc, #176]	; (8006fec <prvSwitchTimerLists+0xc4>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	3304      	adds	r3, #4
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fe f8d3 	bl	80050f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f5c:	f003 0304 	and.w	r3, r3, #4
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d02f      	beq.n	8006fc4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d90e      	bls.n	8006f94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f82:	4b1a      	ldr	r3, [pc, #104]	; (8006fec <prvSwitchTimerLists+0xc4>)
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	3304      	adds	r3, #4
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	f7fe f878 	bl	8005082 <vListInsert>
 8006f92:	e017      	b.n	8006fc4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f94:	2300      	movs	r3, #0
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	2300      	movs	r3, #0
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f7ff fd5e 	bl	8006a60 <xTimerGenericCommand>
 8006fa4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10b      	bne.n	8006fc4 <prvSwitchTimerLists+0x9c>
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	b672      	cpsid	i
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	b662      	cpsie	i
 8006fc0:	603b      	str	r3, [r7, #0]
 8006fc2:	e7fe      	b.n	8006fc2 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fc4:	4b09      	ldr	r3, [pc, #36]	; (8006fec <prvSwitchTimerLists+0xc4>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1b0      	bne.n	8006f30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006fce:	4b07      	ldr	r3, [pc, #28]	; (8006fec <prvSwitchTimerLists+0xc4>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006fd4:	4b06      	ldr	r3, [pc, #24]	; (8006ff0 <prvSwitchTimerLists+0xc8>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a04      	ldr	r2, [pc, #16]	; (8006fec <prvSwitchTimerLists+0xc4>)
 8006fda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006fdc:	4a04      	ldr	r2, [pc, #16]	; (8006ff0 <prvSwitchTimerLists+0xc8>)
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	6013      	str	r3, [r2, #0]
}
 8006fe2:	bf00      	nop
 8006fe4:	3718      	adds	r7, #24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	20000c78 	.word	0x20000c78
 8006ff0:	20000c7c 	.word	0x20000c7c

08006ff4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006ffa:	f000 f945 	bl	8007288 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006ffe:	4b15      	ldr	r3, [pc, #84]	; (8007054 <prvCheckForValidListAndQueue+0x60>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d120      	bne.n	8007048 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007006:	4814      	ldr	r0, [pc, #80]	; (8007058 <prvCheckForValidListAndQueue+0x64>)
 8007008:	f7fd ffea 	bl	8004fe0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800700c:	4813      	ldr	r0, [pc, #76]	; (800705c <prvCheckForValidListAndQueue+0x68>)
 800700e:	f7fd ffe7 	bl	8004fe0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007012:	4b13      	ldr	r3, [pc, #76]	; (8007060 <prvCheckForValidListAndQueue+0x6c>)
 8007014:	4a10      	ldr	r2, [pc, #64]	; (8007058 <prvCheckForValidListAndQueue+0x64>)
 8007016:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007018:	4b12      	ldr	r3, [pc, #72]	; (8007064 <prvCheckForValidListAndQueue+0x70>)
 800701a:	4a10      	ldr	r2, [pc, #64]	; (800705c <prvCheckForValidListAndQueue+0x68>)
 800701c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800701e:	2300      	movs	r3, #0
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	4b11      	ldr	r3, [pc, #68]	; (8007068 <prvCheckForValidListAndQueue+0x74>)
 8007024:	4a11      	ldr	r2, [pc, #68]	; (800706c <prvCheckForValidListAndQueue+0x78>)
 8007026:	2110      	movs	r1, #16
 8007028:	200a      	movs	r0, #10
 800702a:	f7fe f8f7 	bl	800521c <xQueueGenericCreateStatic>
 800702e:	4602      	mov	r2, r0
 8007030:	4b08      	ldr	r3, [pc, #32]	; (8007054 <prvCheckForValidListAndQueue+0x60>)
 8007032:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007034:	4b07      	ldr	r3, [pc, #28]	; (8007054 <prvCheckForValidListAndQueue+0x60>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d005      	beq.n	8007048 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800703c:	4b05      	ldr	r3, [pc, #20]	; (8007054 <prvCheckForValidListAndQueue+0x60>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	490b      	ldr	r1, [pc, #44]	; (8007070 <prvCheckForValidListAndQueue+0x7c>)
 8007042:	4618      	mov	r0, r3
 8007044:	f7fe fd5c 	bl	8005b00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007048:	f000 f950 	bl	80072ec <vPortExitCritical>
}
 800704c:	bf00      	nop
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20000c80 	.word	0x20000c80
 8007058:	20000c50 	.word	0x20000c50
 800705c:	20000c64 	.word	0x20000c64
 8007060:	20000c78 	.word	0x20000c78
 8007064:	20000c7c 	.word	0x20000c7c
 8007068:	20000d2c 	.word	0x20000d2c
 800706c:	20000c8c 	.word	0x20000c8c
 8007070:	0800970c 	.word	0x0800970c

08007074 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	3b04      	subs	r3, #4
 8007084:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800708c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	3b04      	subs	r3, #4
 8007092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	f023 0201 	bic.w	r2, r3, #1
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	3b04      	subs	r3, #4
 80070a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070a4:	4a0c      	ldr	r2, [pc, #48]	; (80070d8 <pxPortInitialiseStack+0x64>)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3b14      	subs	r3, #20
 80070ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	3b04      	subs	r3, #4
 80070ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f06f 0202 	mvn.w	r2, #2
 80070c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	3b20      	subs	r3, #32
 80070c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80070ca:	68fb      	ldr	r3, [r7, #12]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	080070dd 	.word	0x080070dd

080070dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80070e2:	2300      	movs	r3, #0
 80070e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80070e6:	4b13      	ldr	r3, [pc, #76]	; (8007134 <prvTaskExitError+0x58>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ee:	d00b      	beq.n	8007108 <prvTaskExitError+0x2c>
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	b672      	cpsid	i
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	b662      	cpsie	i
 8007104:	60fb      	str	r3, [r7, #12]
 8007106:	e7fe      	b.n	8007106 <prvTaskExitError+0x2a>
 8007108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710c:	b672      	cpsid	i
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	b662      	cpsie	i
 800711c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800711e:	bf00      	nop
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0fc      	beq.n	8007120 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007126:	bf00      	nop
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	2000000c 	.word	0x2000000c
	...

08007140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007140:	4b07      	ldr	r3, [pc, #28]	; (8007160 <pxCurrentTCBConst2>)
 8007142:	6819      	ldr	r1, [r3, #0]
 8007144:	6808      	ldr	r0, [r1, #0]
 8007146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714a:	f380 8809 	msr	PSP, r0
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	f04f 0000 	mov.w	r0, #0
 8007156:	f380 8811 	msr	BASEPRI, r0
 800715a:	4770      	bx	lr
 800715c:	f3af 8000 	nop.w

08007160 <pxCurrentTCBConst2>:
 8007160:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007164:	bf00      	nop
 8007166:	bf00      	nop

08007168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007168:	4808      	ldr	r0, [pc, #32]	; (800718c <prvPortStartFirstTask+0x24>)
 800716a:	6800      	ldr	r0, [r0, #0]
 800716c:	6800      	ldr	r0, [r0, #0]
 800716e:	f380 8808 	msr	MSP, r0
 8007172:	f04f 0000 	mov.w	r0, #0
 8007176:	f380 8814 	msr	CONTROL, r0
 800717a:	b662      	cpsie	i
 800717c:	b661      	cpsie	f
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	df00      	svc	0
 8007188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800718a:	bf00      	nop
 800718c:	e000ed08 	.word	0xe000ed08

08007190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007196:	4b36      	ldr	r3, [pc, #216]	; (8007270 <xPortStartScheduler+0xe0>)
 8007198:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	22ff      	movs	r2, #255	; 0xff
 80071a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80071b0:	78fb      	ldrb	r3, [r7, #3]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	4b2e      	ldr	r3, [pc, #184]	; (8007274 <xPortStartScheduler+0xe4>)
 80071bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80071be:	4b2e      	ldr	r3, [pc, #184]	; (8007278 <xPortStartScheduler+0xe8>)
 80071c0:	2207      	movs	r2, #7
 80071c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071c4:	e009      	b.n	80071da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80071c6:	4b2c      	ldr	r3, [pc, #176]	; (8007278 <xPortStartScheduler+0xe8>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	4a2a      	ldr	r2, [pc, #168]	; (8007278 <xPortStartScheduler+0xe8>)
 80071ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071da:	78fb      	ldrb	r3, [r7, #3]
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e2:	2b80      	cmp	r3, #128	; 0x80
 80071e4:	d0ef      	beq.n	80071c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80071e6:	4b24      	ldr	r3, [pc, #144]	; (8007278 <xPortStartScheduler+0xe8>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f1c3 0307 	rsb	r3, r3, #7
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	d00b      	beq.n	800720a <xPortStartScheduler+0x7a>
 80071f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f6:	b672      	cpsid	i
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	b662      	cpsie	i
 8007206:	60bb      	str	r3, [r7, #8]
 8007208:	e7fe      	b.n	8007208 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800720a:	4b1b      	ldr	r3, [pc, #108]	; (8007278 <xPortStartScheduler+0xe8>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	021b      	lsls	r3, r3, #8
 8007210:	4a19      	ldr	r2, [pc, #100]	; (8007278 <xPortStartScheduler+0xe8>)
 8007212:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007214:	4b18      	ldr	r3, [pc, #96]	; (8007278 <xPortStartScheduler+0xe8>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800721c:	4a16      	ldr	r2, [pc, #88]	; (8007278 <xPortStartScheduler+0xe8>)
 800721e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	b2da      	uxtb	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007228:	4b14      	ldr	r3, [pc, #80]	; (800727c <xPortStartScheduler+0xec>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a13      	ldr	r2, [pc, #76]	; (800727c <xPortStartScheduler+0xec>)
 800722e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007232:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007234:	4b11      	ldr	r3, [pc, #68]	; (800727c <xPortStartScheduler+0xec>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a10      	ldr	r2, [pc, #64]	; (800727c <xPortStartScheduler+0xec>)
 800723a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800723e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007240:	f000 f8d4 	bl	80073ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007244:	4b0e      	ldr	r3, [pc, #56]	; (8007280 <xPortStartScheduler+0xf0>)
 8007246:	2200      	movs	r2, #0
 8007248:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800724a:	f000 f8f3 	bl	8007434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800724e:	4b0d      	ldr	r3, [pc, #52]	; (8007284 <xPortStartScheduler+0xf4>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a0c      	ldr	r2, [pc, #48]	; (8007284 <xPortStartScheduler+0xf4>)
 8007254:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007258:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800725a:	f7ff ff85 	bl	8007168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800725e:	f7ff f865 	bl	800632c <vTaskSwitchContext>
	prvTaskExitError();
 8007262:	f7ff ff3b 	bl	80070dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	e000e400 	.word	0xe000e400
 8007274:	20000d7c 	.word	0x20000d7c
 8007278:	20000d80 	.word	0x20000d80
 800727c:	e000ed20 	.word	0xe000ed20
 8007280:	2000000c 	.word	0x2000000c
 8007284:	e000ef34 	.word	0xe000ef34

08007288 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	b672      	cpsid	i
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	b662      	cpsie	i
 80072a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80072a4:	4b0f      	ldr	r3, [pc, #60]	; (80072e4 <vPortEnterCritical+0x5c>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	3301      	adds	r3, #1
 80072aa:	4a0e      	ldr	r2, [pc, #56]	; (80072e4 <vPortEnterCritical+0x5c>)
 80072ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80072ae:	4b0d      	ldr	r3, [pc, #52]	; (80072e4 <vPortEnterCritical+0x5c>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d110      	bne.n	80072d8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80072b6:	4b0c      	ldr	r3, [pc, #48]	; (80072e8 <vPortEnterCritical+0x60>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00b      	beq.n	80072d8 <vPortEnterCritical+0x50>
 80072c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c4:	b672      	cpsid	i
 80072c6:	f383 8811 	msr	BASEPRI, r3
 80072ca:	f3bf 8f6f 	isb	sy
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	b662      	cpsie	i
 80072d4:	603b      	str	r3, [r7, #0]
 80072d6:	e7fe      	b.n	80072d6 <vPortEnterCritical+0x4e>
	}
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	2000000c 	.word	0x2000000c
 80072e8:	e000ed04 	.word	0xe000ed04

080072ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80072f2:	4b12      	ldr	r3, [pc, #72]	; (800733c <vPortExitCritical+0x50>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10b      	bne.n	8007312 <vPortExitCritical+0x26>
 80072fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fe:	b672      	cpsid	i
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	b662      	cpsie	i
 800730e:	607b      	str	r3, [r7, #4]
 8007310:	e7fe      	b.n	8007310 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8007312:	4b0a      	ldr	r3, [pc, #40]	; (800733c <vPortExitCritical+0x50>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3b01      	subs	r3, #1
 8007318:	4a08      	ldr	r2, [pc, #32]	; (800733c <vPortExitCritical+0x50>)
 800731a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800731c:	4b07      	ldr	r3, [pc, #28]	; (800733c <vPortExitCritical+0x50>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d104      	bne.n	800732e <vPortExitCritical+0x42>
 8007324:	2300      	movs	r3, #0
 8007326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800732e:	bf00      	nop
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	2000000c 	.word	0x2000000c

08007340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007340:	f3ef 8009 	mrs	r0, PSP
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	4b15      	ldr	r3, [pc, #84]	; (80073a0 <pxCurrentTCBConst>)
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	f01e 0f10 	tst.w	lr, #16
 8007350:	bf08      	it	eq
 8007352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800735a:	6010      	str	r0, [r2, #0]
 800735c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007364:	b672      	cpsid	i
 8007366:	f380 8811 	msr	BASEPRI, r0
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	b662      	cpsie	i
 8007374:	f7fe ffda 	bl	800632c <vTaskSwitchContext>
 8007378:	f04f 0000 	mov.w	r0, #0
 800737c:	f380 8811 	msr	BASEPRI, r0
 8007380:	bc09      	pop	{r0, r3}
 8007382:	6819      	ldr	r1, [r3, #0]
 8007384:	6808      	ldr	r0, [r1, #0]
 8007386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738a:	f01e 0f10 	tst.w	lr, #16
 800738e:	bf08      	it	eq
 8007390:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007394:	f380 8809 	msr	PSP, r0
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop

080073a0 <pxCurrentTCBConst>:
 80073a0:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80073a4:	bf00      	nop
 80073a6:	bf00      	nop

080073a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	b672      	cpsid	i
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	b662      	cpsie	i
 80073c2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80073c4:	f7fe fef8 	bl	80061b8 <xTaskIncrementTick>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d003      	beq.n	80073d6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80073ce:	4b06      	ldr	r3, [pc, #24]	; (80073e8 <SysTick_Handler+0x40>)
 80073d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	2300      	movs	r3, #0
 80073d8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80073e0:	bf00      	nop
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	e000ed04 	.word	0xe000ed04

080073ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80073ec:	b480      	push	{r7}
 80073ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80073f0:	4b0b      	ldr	r3, [pc, #44]	; (8007420 <vPortSetupTimerInterrupt+0x34>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073f6:	4b0b      	ldr	r3, [pc, #44]	; (8007424 <vPortSetupTimerInterrupt+0x38>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073fc:	4b0a      	ldr	r3, [pc, #40]	; (8007428 <vPortSetupTimerInterrupt+0x3c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a0a      	ldr	r2, [pc, #40]	; (800742c <vPortSetupTimerInterrupt+0x40>)
 8007402:	fba2 2303 	umull	r2, r3, r2, r3
 8007406:	099b      	lsrs	r3, r3, #6
 8007408:	4a09      	ldr	r2, [pc, #36]	; (8007430 <vPortSetupTimerInterrupt+0x44>)
 800740a:	3b01      	subs	r3, #1
 800740c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800740e:	4b04      	ldr	r3, [pc, #16]	; (8007420 <vPortSetupTimerInterrupt+0x34>)
 8007410:	2207      	movs	r2, #7
 8007412:	601a      	str	r2, [r3, #0]
}
 8007414:	bf00      	nop
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	e000e010 	.word	0xe000e010
 8007424:	e000e018 	.word	0xe000e018
 8007428:	20000000 	.word	0x20000000
 800742c:	10624dd3 	.word	0x10624dd3
 8007430:	e000e014 	.word	0xe000e014

08007434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007444 <vPortEnableVFP+0x10>
 8007438:	6801      	ldr	r1, [r0, #0]
 800743a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800743e:	6001      	str	r1, [r0, #0]
 8007440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007442:	bf00      	nop
 8007444:	e000ed88 	.word	0xe000ed88

08007448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800744e:	f3ef 8305 	mrs	r3, IPSR
 8007452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2b0f      	cmp	r3, #15
 8007458:	d915      	bls.n	8007486 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800745a:	4a18      	ldr	r2, [pc, #96]	; (80074bc <vPortValidateInterruptPriority+0x74>)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4413      	add	r3, r2
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007464:	4b16      	ldr	r3, [pc, #88]	; (80074c0 <vPortValidateInterruptPriority+0x78>)
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	7afa      	ldrb	r2, [r7, #11]
 800746a:	429a      	cmp	r2, r3
 800746c:	d20b      	bcs.n	8007486 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	b672      	cpsid	i
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	b662      	cpsie	i
 8007482:	607b      	str	r3, [r7, #4]
 8007484:	e7fe      	b.n	8007484 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007486:	4b0f      	ldr	r3, [pc, #60]	; (80074c4 <vPortValidateInterruptPriority+0x7c>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800748e:	4b0e      	ldr	r3, [pc, #56]	; (80074c8 <vPortValidateInterruptPriority+0x80>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	429a      	cmp	r2, r3
 8007494:	d90b      	bls.n	80074ae <vPortValidateInterruptPriority+0x66>
 8007496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749a:	b672      	cpsid	i
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	b662      	cpsie	i
 80074aa:	603b      	str	r3, [r7, #0]
 80074ac:	e7fe      	b.n	80074ac <vPortValidateInterruptPriority+0x64>
	}
 80074ae:	bf00      	nop
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	e000e3f0 	.word	0xe000e3f0
 80074c0:	20000d7c 	.word	0x20000d7c
 80074c4:	e000ed0c 	.word	0xe000ed0c
 80074c8:	20000d80 	.word	0x20000d80

080074cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b08a      	sub	sp, #40	; 0x28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80074d4:	2300      	movs	r3, #0
 80074d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80074d8:	f7fe fdb2 	bl	8006040 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80074dc:	4b5a      	ldr	r3, [pc, #360]	; (8007648 <pvPortMalloc+0x17c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80074e4:	f000 f916 	bl	8007714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074e8:	4b58      	ldr	r3, [pc, #352]	; (800764c <pvPortMalloc+0x180>)
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4013      	ands	r3, r2
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f040 8090 	bne.w	8007616 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d01e      	beq.n	800753a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80074fc:	2208      	movs	r2, #8
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4413      	add	r3, r2
 8007502:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f003 0307 	and.w	r3, r3, #7
 800750a:	2b00      	cmp	r3, #0
 800750c:	d015      	beq.n	800753a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f023 0307 	bic.w	r3, r3, #7
 8007514:	3308      	adds	r3, #8
 8007516:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f003 0307 	and.w	r3, r3, #7
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00b      	beq.n	800753a <pvPortMalloc+0x6e>
 8007522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007526:	b672      	cpsid	i
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	b662      	cpsie	i
 8007536:	617b      	str	r3, [r7, #20]
 8007538:	e7fe      	b.n	8007538 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d06a      	beq.n	8007616 <pvPortMalloc+0x14a>
 8007540:	4b43      	ldr	r3, [pc, #268]	; (8007650 <pvPortMalloc+0x184>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	429a      	cmp	r2, r3
 8007548:	d865      	bhi.n	8007616 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800754a:	4b42      	ldr	r3, [pc, #264]	; (8007654 <pvPortMalloc+0x188>)
 800754c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800754e:	4b41      	ldr	r3, [pc, #260]	; (8007654 <pvPortMalloc+0x188>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007554:	e004      	b.n	8007560 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	429a      	cmp	r2, r3
 8007568:	d903      	bls.n	8007572 <pvPortMalloc+0xa6>
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1f1      	bne.n	8007556 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007572:	4b35      	ldr	r3, [pc, #212]	; (8007648 <pvPortMalloc+0x17c>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007578:	429a      	cmp	r2, r3
 800757a:	d04c      	beq.n	8007616 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800757c:	6a3b      	ldr	r3, [r7, #32]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2208      	movs	r2, #8
 8007582:	4413      	add	r3, r2
 8007584:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	1ad2      	subs	r2, r2, r3
 8007596:	2308      	movs	r3, #8
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	429a      	cmp	r2, r3
 800759c:	d920      	bls.n	80075e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800759e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4413      	add	r3, r2
 80075a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	f003 0307 	and.w	r3, r3, #7
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00b      	beq.n	80075c8 <pvPortMalloc+0xfc>
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	b672      	cpsid	i
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	b662      	cpsie	i
 80075c4:	613b      	str	r3, [r7, #16]
 80075c6:	e7fe      	b.n	80075c6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	1ad2      	subs	r2, r2, r3
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075da:	69b8      	ldr	r0, [r7, #24]
 80075dc:	f000 f8fc 	bl	80077d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075e0:	4b1b      	ldr	r3, [pc, #108]	; (8007650 <pvPortMalloc+0x184>)
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	4a19      	ldr	r2, [pc, #100]	; (8007650 <pvPortMalloc+0x184>)
 80075ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075ee:	4b18      	ldr	r3, [pc, #96]	; (8007650 <pvPortMalloc+0x184>)
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	4b19      	ldr	r3, [pc, #100]	; (8007658 <pvPortMalloc+0x18c>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d203      	bcs.n	8007602 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075fa:	4b15      	ldr	r3, [pc, #84]	; (8007650 <pvPortMalloc+0x184>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a16      	ldr	r2, [pc, #88]	; (8007658 <pvPortMalloc+0x18c>)
 8007600:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	4b11      	ldr	r3, [pc, #68]	; (800764c <pvPortMalloc+0x180>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	431a      	orrs	r2, r3
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007616:	f7fe fd21 	bl	800605c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	f003 0307 	and.w	r3, r3, #7
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00b      	beq.n	800763c <pvPortMalloc+0x170>
 8007624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007628:	b672      	cpsid	i
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	b662      	cpsie	i
 8007638:	60fb      	str	r3, [r7, #12]
 800763a:	e7fe      	b.n	800763a <pvPortMalloc+0x16e>
	return pvReturn;
 800763c:	69fb      	ldr	r3, [r7, #28]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3728      	adds	r7, #40	; 0x28
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	2000498c 	.word	0x2000498c
 800764c:	20004998 	.word	0x20004998
 8007650:	20004990 	.word	0x20004990
 8007654:	20004984 	.word	0x20004984
 8007658:	20004994 	.word	0x20004994

0800765c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d04a      	beq.n	8007704 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800766e:	2308      	movs	r3, #8
 8007670:	425b      	negs	r3, r3
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	4413      	add	r3, r2
 8007676:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	4b22      	ldr	r3, [pc, #136]	; (800770c <vPortFree+0xb0>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4013      	ands	r3, r2
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10b      	bne.n	80076a2 <vPortFree+0x46>
 800768a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768e:	b672      	cpsid	i
 8007690:	f383 8811 	msr	BASEPRI, r3
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	b662      	cpsie	i
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	e7fe      	b.n	80076a0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00b      	beq.n	80076c2 <vPortFree+0x66>
 80076aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ae:	b672      	cpsid	i
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	b662      	cpsie	i
 80076be:	60bb      	str	r3, [r7, #8]
 80076c0:	e7fe      	b.n	80076c0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	4b11      	ldr	r3, [pc, #68]	; (800770c <vPortFree+0xb0>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4013      	ands	r3, r2
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d019      	beq.n	8007704 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d115      	bne.n	8007704 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	4b0b      	ldr	r3, [pc, #44]	; (800770c <vPortFree+0xb0>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	43db      	mvns	r3, r3
 80076e2:	401a      	ands	r2, r3
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80076e8:	f7fe fcaa 	bl	8006040 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	4b07      	ldr	r3, [pc, #28]	; (8007710 <vPortFree+0xb4>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4413      	add	r3, r2
 80076f6:	4a06      	ldr	r2, [pc, #24]	; (8007710 <vPortFree+0xb4>)
 80076f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076fa:	6938      	ldr	r0, [r7, #16]
 80076fc:	f000 f86c 	bl	80077d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007700:	f7fe fcac 	bl	800605c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007704:	bf00      	nop
 8007706:	3718      	adds	r7, #24
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	20004998 	.word	0x20004998
 8007710:	20004990 	.word	0x20004990

08007714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800771a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800771e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007720:	4b27      	ldr	r3, [pc, #156]	; (80077c0 <prvHeapInit+0xac>)
 8007722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f003 0307 	and.w	r3, r3, #7
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00c      	beq.n	8007748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	3307      	adds	r3, #7
 8007732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f023 0307 	bic.w	r3, r3, #7
 800773a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	4a1f      	ldr	r2, [pc, #124]	; (80077c0 <prvHeapInit+0xac>)
 8007744:	4413      	add	r3, r2
 8007746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800774c:	4a1d      	ldr	r2, [pc, #116]	; (80077c4 <prvHeapInit+0xb0>)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007752:	4b1c      	ldr	r3, [pc, #112]	; (80077c4 <prvHeapInit+0xb0>)
 8007754:	2200      	movs	r2, #0
 8007756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	4413      	add	r3, r2
 800775e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007760:	2208      	movs	r2, #8
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	1a9b      	subs	r3, r3, r2
 8007766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f023 0307 	bic.w	r3, r3, #7
 800776e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4a15      	ldr	r2, [pc, #84]	; (80077c8 <prvHeapInit+0xb4>)
 8007774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007776:	4b14      	ldr	r3, [pc, #80]	; (80077c8 <prvHeapInit+0xb4>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2200      	movs	r2, #0
 800777c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800777e:	4b12      	ldr	r3, [pc, #72]	; (80077c8 <prvHeapInit+0xb4>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2200      	movs	r2, #0
 8007784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	1ad2      	subs	r2, r2, r3
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007794:	4b0c      	ldr	r3, [pc, #48]	; (80077c8 <prvHeapInit+0xb4>)
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	4a0a      	ldr	r2, [pc, #40]	; (80077cc <prvHeapInit+0xb8>)
 80077a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	4a09      	ldr	r2, [pc, #36]	; (80077d0 <prvHeapInit+0xbc>)
 80077aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077ac:	4b09      	ldr	r3, [pc, #36]	; (80077d4 <prvHeapInit+0xc0>)
 80077ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80077b2:	601a      	str	r2, [r3, #0]
}
 80077b4:	bf00      	nop
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	20000d84 	.word	0x20000d84
 80077c4:	20004984 	.word	0x20004984
 80077c8:	2000498c 	.word	0x2000498c
 80077cc:	20004994 	.word	0x20004994
 80077d0:	20004990 	.word	0x20004990
 80077d4:	20004998 	.word	0x20004998

080077d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077e0:	4b28      	ldr	r3, [pc, #160]	; (8007884 <prvInsertBlockIntoFreeList+0xac>)
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	e002      	b.n	80077ec <prvInsertBlockIntoFreeList+0x14>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d8f7      	bhi.n	80077e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	4413      	add	r3, r2
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	429a      	cmp	r2, r3
 8007806:	d108      	bne.n	800781a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	441a      	add	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	441a      	add	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	429a      	cmp	r2, r3
 800782c:	d118      	bne.n	8007860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	4b15      	ldr	r3, [pc, #84]	; (8007888 <prvInsertBlockIntoFreeList+0xb0>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	429a      	cmp	r2, r3
 8007838:	d00d      	beq.n	8007856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	441a      	add	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	e008      	b.n	8007868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007856:	4b0c      	ldr	r3, [pc, #48]	; (8007888 <prvInsertBlockIntoFreeList+0xb0>)
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	601a      	str	r2, [r3, #0]
 800785e:	e003      	b.n	8007868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	429a      	cmp	r2, r3
 800786e:	d002      	beq.n	8007876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007876:	bf00      	nop
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	20004984 	.word	0x20004984
 8007888:	2000498c 	.word	0x2000498c

0800788c <readAnalog2Values>:
}
uint16_t getAnalogValue1(void){return analogValue1;}
#elif ANALOGINPUTVAL==2
uint16_t analogValue1;
uint16_t analogValue2;
void readAnalog2Values(ADC_HandleTypeDef *adc1,ADC_HandleTypeDef *adc2){
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
	static uint32_t filter1=0,filter2=0;
	  HAL_ADC_Start(adc1);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7f9 fc86 	bl	80011a8 <HAL_ADC_Start>

	  for(int c=0;c<10;c++){
 800789c:	2300      	movs	r3, #0
 800789e:	60fb      	str	r3, [r7, #12]
 80078a0:	e00f      	b.n	80078c2 <readAnalog2Values+0x36>
		  HAL_ADC_PollForConversion(adc1, ADCTIMEOUT);
 80078a2:	2105      	movs	r1, #5
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f7f9 fd73 	bl	8001390 <HAL_ADC_PollForConversion>
		  filter1+=HAL_ADC_GetValue(adc1);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7f9 fdf4 	bl	8001498 <HAL_ADC_GetValue>
 80078b0:	4602      	mov	r2, r0
 80078b2:	4b23      	ldr	r3, [pc, #140]	; (8007940 <readAnalog2Values+0xb4>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4413      	add	r3, r2
 80078b8:	4a21      	ldr	r2, [pc, #132]	; (8007940 <readAnalog2Values+0xb4>)
 80078ba:	6013      	str	r3, [r2, #0]
	  for(int c=0;c<10;c++){
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	3301      	adds	r3, #1
 80078c0:	60fb      	str	r3, [r7, #12]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2b09      	cmp	r3, #9
 80078c6:	ddec      	ble.n	80078a2 <readAnalog2Values+0x16>
	  }
	  analogValue1=(uint16_t)(filter1/10);
 80078c8:	4b1d      	ldr	r3, [pc, #116]	; (8007940 <readAnalog2Values+0xb4>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a1d      	ldr	r2, [pc, #116]	; (8007944 <readAnalog2Values+0xb8>)
 80078ce:	fba2 2303 	umull	r2, r3, r2, r3
 80078d2:	08db      	lsrs	r3, r3, #3
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	4b1c      	ldr	r3, [pc, #112]	; (8007948 <readAnalog2Values+0xbc>)
 80078d8:	801a      	strh	r2, [r3, #0]
	  filter1=0;
 80078da:	4b19      	ldr	r3, [pc, #100]	; (8007940 <readAnalog2Values+0xb4>)
 80078dc:	2200      	movs	r2, #0
 80078de:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop (adc1);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7f9 fd21 	bl	8001328 <HAL_ADC_Stop>
	  HAL_ADC_Start(adc2);
 80078e6:	6838      	ldr	r0, [r7, #0]
 80078e8:	f7f9 fc5e 	bl	80011a8 <HAL_ADC_Start>
	  for(int c=0;c<10;c++){
 80078ec:	2300      	movs	r3, #0
 80078ee:	60bb      	str	r3, [r7, #8]
 80078f0:	e00f      	b.n	8007912 <readAnalog2Values+0x86>
		  HAL_ADC_PollForConversion(adc2, ADCTIMEOUT);
 80078f2:	2105      	movs	r1, #5
 80078f4:	6838      	ldr	r0, [r7, #0]
 80078f6:	f7f9 fd4b 	bl	8001390 <HAL_ADC_PollForConversion>
		  filter2+=HAL_ADC_GetValue(adc2);
 80078fa:	6838      	ldr	r0, [r7, #0]
 80078fc:	f7f9 fdcc 	bl	8001498 <HAL_ADC_GetValue>
 8007900:	4602      	mov	r2, r0
 8007902:	4b12      	ldr	r3, [pc, #72]	; (800794c <readAnalog2Values+0xc0>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4413      	add	r3, r2
 8007908:	4a10      	ldr	r2, [pc, #64]	; (800794c <readAnalog2Values+0xc0>)
 800790a:	6013      	str	r3, [r2, #0]
	  for(int c=0;c<10;c++){
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	3301      	adds	r3, #1
 8007910:	60bb      	str	r3, [r7, #8]
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	2b09      	cmp	r3, #9
 8007916:	ddec      	ble.n	80078f2 <readAnalog2Values+0x66>
	  }
	  analogValue2=(uint16_t)(filter2/10);
 8007918:	4b0c      	ldr	r3, [pc, #48]	; (800794c <readAnalog2Values+0xc0>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a09      	ldr	r2, [pc, #36]	; (8007944 <readAnalog2Values+0xb8>)
 800791e:	fba2 2303 	umull	r2, r3, r2, r3
 8007922:	08db      	lsrs	r3, r3, #3
 8007924:	b29a      	uxth	r2, r3
 8007926:	4b0a      	ldr	r3, [pc, #40]	; (8007950 <readAnalog2Values+0xc4>)
 8007928:	801a      	strh	r2, [r3, #0]
	  filter2=0;
 800792a:	4b08      	ldr	r3, [pc, #32]	; (800794c <readAnalog2Values+0xc0>)
 800792c:	2200      	movs	r2, #0
 800792e:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop (adc2);
 8007930:	6838      	ldr	r0, [r7, #0]
 8007932:	f7f9 fcf9 	bl	8001328 <HAL_ADC_Stop>
}
 8007936:	bf00      	nop
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	2000499c 	.word	0x2000499c
 8007944:	cccccccd 	.word	0xcccccccd
 8007948:	20004c96 	.word	0x20004c96
 800794c:	200049a0 	.word	0x200049a0
 8007950:	20004c94 	.word	0x20004c94

08007954 <getAnalogValue1>:
uint16_t getAnalogValue1(void){return analogValue1;}
 8007954:	b480      	push	{r7}
 8007956:	af00      	add	r7, sp, #0
 8007958:	4b03      	ldr	r3, [pc, #12]	; (8007968 <getAnalogValue1+0x14>)
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	4618      	mov	r0, r3
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	20004c96 	.word	0x20004c96

0800796c <getAnalogValue2>:
uint16_t getAnalogValue2(void){return analogValue2;}
 800796c:	b480      	push	{r7}
 800796e:	af00      	add	r7, sp, #0
 8007970:	4b03      	ldr	r3, [pc, #12]	; (8007980 <getAnalogValue2+0x14>)
 8007972:	881b      	ldrh	r3, [r3, #0]
 8007974:	4618      	mov	r0, r3
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	20004c94 	.word	0x20004c94

08007984 <valuesMap>:
 * @param inMax -> input interval maximum value
 * @param outMin -> output interval minumum value
 * @param outMax -> output interval maximum value
 * @return output value
 */
uint16_t valuesMap(uint16_t inValue, uint16_t inMin, uint16_t inMax, uint16_t outMin, uint16_t outMax) {
 8007984:	b490      	push	{r4, r7}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	4604      	mov	r4, r0
 800798c:	4608      	mov	r0, r1
 800798e:	4611      	mov	r1, r2
 8007990:	461a      	mov	r2, r3
 8007992:	4623      	mov	r3, r4
 8007994:	80fb      	strh	r3, [r7, #6]
 8007996:	4603      	mov	r3, r0
 8007998:	80bb      	strh	r3, [r7, #4]
 800799a:	460b      	mov	r3, r1
 800799c:	807b      	strh	r3, [r7, #2]
 800799e:	4613      	mov	r3, r2
 80079a0:	803b      	strh	r3, [r7, #0]
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
 80079a2:	88fa      	ldrh	r2, [r7, #6]
 80079a4:	88bb      	ldrh	r3, [r7, #4]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	8a39      	ldrh	r1, [r7, #16]
 80079aa:	883a      	ldrh	r2, [r7, #0]
 80079ac:	1a8a      	subs	r2, r1, r2
 80079ae:	fb02 f203 	mul.w	r2, r2, r3
 80079b2:	8879      	ldrh	r1, [r7, #2]
 80079b4:	88bb      	ldrh	r3, [r7, #4]
 80079b6:	1acb      	subs	r3, r1, r3
 80079b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80079bc:	b29a      	uxth	r2, r3
 80079be:	883b      	ldrh	r3, [r7, #0]
 80079c0:	4413      	add	r3, r2
 80079c2:	b29b      	uxth	r3, r3
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bc90      	pop	{r4, r7}
 80079cc:	4770      	bx	lr
	...

080079d0 <buttonCounterIncrease>:
uint8_t selectedLcd=0,selectedLcdItem=0;
/* @brief count pressed button use in tim interrupt
 * @param none
 * @return none
 * */
void buttonCounterIncrease(void){
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
	if(!READ_SELECT_BTN)selectbtncounter++;
 80079d4:	2102      	movs	r1, #2
 80079d6:	4816      	ldr	r0, [pc, #88]	; (8007a30 <buttonCounterIncrease+0x60>)
 80079d8:	f7fa fa8e 	bl	8001ef8 <HAL_GPIO_ReadPin>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d106      	bne.n	80079f0 <buttonCounterIncrease+0x20>
 80079e2:	4b14      	ldr	r3, [pc, #80]	; (8007a34 <buttonCounterIncrease+0x64>)
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	3301      	adds	r3, #1
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	4b12      	ldr	r3, [pc, #72]	; (8007a34 <buttonCounterIncrease+0x64>)
 80079ec:	801a      	strh	r2, [r3, #0]
	else if(!READ_PLUS_BTN)plusbtncounter++;
	else if(!READ_MINUS_BTN)minusbtncounter++;
}
 80079ee:	e01c      	b.n	8007a2a <buttonCounterIncrease+0x5a>
	else if(!READ_PLUS_BTN)plusbtncounter++;
 80079f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80079f4:	4810      	ldr	r0, [pc, #64]	; (8007a38 <buttonCounterIncrease+0x68>)
 80079f6:	f7fa fa7f 	bl	8001ef8 <HAL_GPIO_ReadPin>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d106      	bne.n	8007a0e <buttonCounterIncrease+0x3e>
 8007a00:	4b0e      	ldr	r3, [pc, #56]	; (8007a3c <buttonCounterIncrease+0x6c>)
 8007a02:	881b      	ldrh	r3, [r3, #0]
 8007a04:	3301      	adds	r3, #1
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	4b0c      	ldr	r3, [pc, #48]	; (8007a3c <buttonCounterIncrease+0x6c>)
 8007a0a:	801a      	strh	r2, [r3, #0]
}
 8007a0c:	e00d      	b.n	8007a2a <buttonCounterIncrease+0x5a>
	else if(!READ_MINUS_BTN)minusbtncounter++;
 8007a0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a12:	4809      	ldr	r0, [pc, #36]	; (8007a38 <buttonCounterIncrease+0x68>)
 8007a14:	f7fa fa70 	bl	8001ef8 <HAL_GPIO_ReadPin>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d105      	bne.n	8007a2a <buttonCounterIncrease+0x5a>
 8007a1e:	4b08      	ldr	r3, [pc, #32]	; (8007a40 <buttonCounterIncrease+0x70>)
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	3301      	adds	r3, #1
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	4b06      	ldr	r3, [pc, #24]	; (8007a40 <buttonCounterIncrease+0x70>)
 8007a28:	801a      	strh	r2, [r3, #0]
}
 8007a2a:	bf00      	nop
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	40022000 	.word	0x40022000
 8007a34:	200049a4 	.word	0x200049a4
 8007a38:	40020400 	.word	0x40020400
 8007a3c:	200049a6 	.word	0x200049a6
 8007a40:	200049a8 	.word	0x200049a8

08007a44 <selectButton_Listenner_For_MenuControl>:
 * @param none
 * @return 0 -> didnt press
 * @return 1 -> short pressed
 * @return 2 -> long pressed
 * */
uint8_t selectButton_Listenner_For_MenuControl(void) {
 8007a44:	b580      	push	{r7, lr}
 8007a46:	af00      	add	r7, sp, #0
	if(READ_SELECT_BTN){
 8007a48:	2102      	movs	r1, #2
 8007a4a:	480f      	ldr	r0, [pc, #60]	; (8007a88 <selectButton_Listenner_For_MenuControl+0x44>)
 8007a4c:	f7fa fa54 	bl	8001ef8 <HAL_GPIO_ReadPin>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d015      	beq.n	8007a82 <selectButton_Listenner_For_MenuControl+0x3e>
		if(selectbtncounter>=BTN_LONG_PRESS_TIME){ selectbtncounter=0;return 2;}
 8007a56:	4b0d      	ldr	r3, [pc, #52]	; (8007a8c <selectButton_Listenner_For_MenuControl+0x48>)
 8007a58:	881b      	ldrh	r3, [r3, #0]
 8007a5a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007a5e:	d304      	bcc.n	8007a6a <selectButton_Listenner_For_MenuControl+0x26>
 8007a60:	4b0a      	ldr	r3, [pc, #40]	; (8007a8c <selectButton_Listenner_For_MenuControl+0x48>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	801a      	strh	r2, [r3, #0]
 8007a66:	2302      	movs	r3, #2
 8007a68:	e00c      	b.n	8007a84 <selectButton_Listenner_For_MenuControl+0x40>
		if(selectbtncounter>=BTN_SHORT_PRESS_TIME){ selectbtncounter=0;return 1;}
 8007a6a:	4b08      	ldr	r3, [pc, #32]	; (8007a8c <selectButton_Listenner_For_MenuControl+0x48>)
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	2b09      	cmp	r3, #9
 8007a70:	d904      	bls.n	8007a7c <selectButton_Listenner_For_MenuControl+0x38>
 8007a72:	4b06      	ldr	r3, [pc, #24]	; (8007a8c <selectButton_Listenner_For_MenuControl+0x48>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	801a      	strh	r2, [r3, #0]
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e003      	b.n	8007a84 <selectButton_Listenner_For_MenuControl+0x40>
		selectbtncounter=0;
 8007a7c:	4b03      	ldr	r3, [pc, #12]	; (8007a8c <selectButton_Listenner_For_MenuControl+0x48>)
 8007a7e:	2200      	movs	r2, #0
 8007a80:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	40022000 	.word	0x40022000
 8007a8c:	200049a4 	.word	0x200049a4

08007a90 <plusButton_Listenner_For_MenuControl>:
 * @param none
 * @return 0 -> didnt press
 * @return 1 -> short pressed
 * @return 2 -> long pressed
 * */
uint8_t plusButton_Listenner_For_MenuControl(void) {
 8007a90:	b580      	push	{r7, lr}
 8007a92:	af00      	add	r7, sp, #0

	if(READ_PLUS_BTN){
 8007a94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007a98:	480f      	ldr	r0, [pc, #60]	; (8007ad8 <plusButton_Listenner_For_MenuControl+0x48>)
 8007a9a:	f7fa fa2d 	bl	8001ef8 <HAL_GPIO_ReadPin>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d015      	beq.n	8007ad0 <plusButton_Listenner_For_MenuControl+0x40>
		if(plusbtncounter>=BTN_LONG_PRESS_TIME){ plusbtncounter=0;return 2;}
 8007aa4:	4b0d      	ldr	r3, [pc, #52]	; (8007adc <plusButton_Listenner_For_MenuControl+0x4c>)
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007aac:	d304      	bcc.n	8007ab8 <plusButton_Listenner_For_MenuControl+0x28>
 8007aae:	4b0b      	ldr	r3, [pc, #44]	; (8007adc <plusButton_Listenner_For_MenuControl+0x4c>)
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	801a      	strh	r2, [r3, #0]
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	e00c      	b.n	8007ad2 <plusButton_Listenner_For_MenuControl+0x42>
		if(plusbtncounter>=BTN_SHORT_PRESS_TIME){ plusbtncounter=0;return 1;}
 8007ab8:	4b08      	ldr	r3, [pc, #32]	; (8007adc <plusButton_Listenner_For_MenuControl+0x4c>)
 8007aba:	881b      	ldrh	r3, [r3, #0]
 8007abc:	2b09      	cmp	r3, #9
 8007abe:	d904      	bls.n	8007aca <plusButton_Listenner_For_MenuControl+0x3a>
 8007ac0:	4b06      	ldr	r3, [pc, #24]	; (8007adc <plusButton_Listenner_For_MenuControl+0x4c>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	801a      	strh	r2, [r3, #0]
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e003      	b.n	8007ad2 <plusButton_Listenner_For_MenuControl+0x42>
		plusbtncounter=0;
 8007aca:	4b04      	ldr	r3, [pc, #16]	; (8007adc <plusButton_Listenner_For_MenuControl+0x4c>)
 8007acc:	2200      	movs	r2, #0
 8007ace:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	40020400 	.word	0x40020400
 8007adc:	200049a6 	.word	0x200049a6

08007ae0 <minusButton_Listenner_For_MenuControl>:
 * @param none
 * @return 0 -> didnt press
 * @return 1 -> short pressed
 * @return 2 -> long pressed
 * */
uint8_t minusButton_Listenner_For_MenuControl(void) {
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	af00      	add	r7, sp, #0
	if(READ_MINUS_BTN){
 8007ae4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ae8:	480f      	ldr	r0, [pc, #60]	; (8007b28 <minusButton_Listenner_For_MenuControl+0x48>)
 8007aea:	f7fa fa05 	bl	8001ef8 <HAL_GPIO_ReadPin>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d015      	beq.n	8007b20 <minusButton_Listenner_For_MenuControl+0x40>
		if(minusbtncounter>=BTN_LONG_PRESS_TIME){ minusbtncounter=0;return 2;}
 8007af4:	4b0d      	ldr	r3, [pc, #52]	; (8007b2c <minusButton_Listenner_For_MenuControl+0x4c>)
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007afc:	d304      	bcc.n	8007b08 <minusButton_Listenner_For_MenuControl+0x28>
 8007afe:	4b0b      	ldr	r3, [pc, #44]	; (8007b2c <minusButton_Listenner_For_MenuControl+0x4c>)
 8007b00:	2200      	movs	r2, #0
 8007b02:	801a      	strh	r2, [r3, #0]
 8007b04:	2302      	movs	r3, #2
 8007b06:	e00c      	b.n	8007b22 <minusButton_Listenner_For_MenuControl+0x42>
		if(minusbtncounter>=BTN_SHORT_PRESS_TIME){ minusbtncounter=0;return 1;}
 8007b08:	4b08      	ldr	r3, [pc, #32]	; (8007b2c <minusButton_Listenner_For_MenuControl+0x4c>)
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	2b09      	cmp	r3, #9
 8007b0e:	d904      	bls.n	8007b1a <minusButton_Listenner_For_MenuControl+0x3a>
 8007b10:	4b06      	ldr	r3, [pc, #24]	; (8007b2c <minusButton_Listenner_For_MenuControl+0x4c>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	801a      	strh	r2, [r3, #0]
 8007b16:	2301      	movs	r3, #1
 8007b18:	e003      	b.n	8007b22 <minusButton_Listenner_For_MenuControl+0x42>
		minusbtncounter=0;
 8007b1a:	4b04      	ldr	r3, [pc, #16]	; (8007b2c <minusButton_Listenner_For_MenuControl+0x4c>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	40020400 	.word	0x40020400
 8007b2c:	200049a8 	.word	0x200049a8

08007b30 <btnParameterInit>:
/* @brief drivers parameter values initalize
 * @param none
 * @return none
 * */
void btnParameterInit(void){
 8007b30:	b580      	push	{r7, lr}
 8007b32:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&BTNCOUNTER);
 8007b34:	4811      	ldr	r0, [pc, #68]	; (8007b7c <btnParameterInit+0x4c>)
 8007b36:	f7fb ffa1 	bl	8003a7c <HAL_TIM_Base_Start_IT>
	drv1.angle=0;
 8007b3a:	4b11      	ldr	r3, [pc, #68]	; (8007b80 <btnParameterInit+0x50>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	809a      	strh	r2, [r3, #4]
	drv1.pid_kd=0;
 8007b40:	4b0f      	ldr	r3, [pc, #60]	; (8007b80 <btnParameterInit+0x50>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	701a      	strb	r2, [r3, #0]
	drv1.pid_ki=0;
 8007b46:	4b0e      	ldr	r3, [pc, #56]	; (8007b80 <btnParameterInit+0x50>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	705a      	strb	r2, [r3, #1]
	drv1.pid_kp=0;
 8007b4c:	4b0c      	ldr	r3, [pc, #48]	; (8007b80 <btnParameterInit+0x50>)
 8007b4e:	2200      	movs	r2, #0
 8007b50:	709a      	strb	r2, [r3, #2]
	drv1.factor=0;
 8007b52:	4b0b      	ldr	r3, [pc, #44]	; (8007b80 <btnParameterInit+0x50>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	70da      	strb	r2, [r3, #3]
	drv2.angle=0;
 8007b58:	4b0a      	ldr	r3, [pc, #40]	; (8007b84 <btnParameterInit+0x54>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	809a      	strh	r2, [r3, #4]
	drv2.pid_kd=1;
 8007b5e:	4b09      	ldr	r3, [pc, #36]	; (8007b84 <btnParameterInit+0x54>)
 8007b60:	2201      	movs	r2, #1
 8007b62:	701a      	strb	r2, [r3, #0]
	drv2.pid_ki=1;
 8007b64:	4b07      	ldr	r3, [pc, #28]	; (8007b84 <btnParameterInit+0x54>)
 8007b66:	2201      	movs	r2, #1
 8007b68:	705a      	strb	r2, [r3, #1]
	drv2.pid_kp=10;
 8007b6a:	4b06      	ldr	r3, [pc, #24]	; (8007b84 <btnParameterInit+0x54>)
 8007b6c:	220a      	movs	r2, #10
 8007b6e:	709a      	strb	r2, [r3, #2]
	drv2.factor=5;
 8007b70:	4b04      	ldr	r3, [pc, #16]	; (8007b84 <btnParameterInit+0x54>)
 8007b72:	2205      	movs	r2, #5
 8007b74:	70da      	strb	r2, [r3, #3]
}
 8007b76:	bf00      	nop
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20004bd0 	.word	0x20004bd0
 8007b80:	20004c98 	.word	0x20004c98
 8007b84:	20004ca0 	.word	0x20004ca0

08007b88 <setDriver1AngleValue>:
/* @brief set the angle to motor driver 1 interface
 * @param angle -> driver angle value
 * @return none
 * */
void setDriver1AngleValue(uint16_t angle){
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	80fb      	strh	r3, [r7, #6]
	drv1.angle=angle;
 8007b92:	4a04      	ldr	r2, [pc, #16]	; (8007ba4 <setDriver1AngleValue+0x1c>)
 8007b94:	88fb      	ldrh	r3, [r7, #6]
 8007b96:	8093      	strh	r3, [r2, #4]
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr
 8007ba4:	20004c98 	.word	0x20004c98

08007ba8 <setDriver2AngleValue>:
/* @brief set the angle to motor driver 2 interface
 * @param angle -> driver angle value
 * @return none
 * */
void setDriver2AngleValue(uint16_t angle){
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	4603      	mov	r3, r0
 8007bb0:	80fb      	strh	r3, [r7, #6]
	drv2.angle=angle;
 8007bb2:	4a04      	ldr	r2, [pc, #16]	; (8007bc4 <setDriver2AngleValue+0x1c>)
 8007bb4:	88fb      	ldrh	r3, [r7, #6]
 8007bb6:	8093      	strh	r3, [r2, #4]
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	20004ca0 	.word	0x20004ca0

08007bc8 <buttonController>:
/* @brief controlling and sending values of drivers
 * @param none
 * @return none
 * */
void buttonController(void){
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	af00      	add	r7, sp, #0
	static bool selectedMDI=true; //selected motor driver interface
	static uint8_t selectBtnListenner=0,plusBtnListenner=0,minusBtnListenner=0;
	static item=0;
	if(selectedMDI){
 8007bcc:	4b98      	ldr	r3, [pc, #608]	; (8007e30 <buttonController+0x268>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 80be 	beq.w	8007d52 <buttonController+0x18a>
		if(2==selectBtnListenner){ selectedMDI=false; selectedLcd=1; item=0;}
 8007bd6:	4b97      	ldr	r3, [pc, #604]	; (8007e34 <buttonController+0x26c>)
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d108      	bne.n	8007bf0 <buttonController+0x28>
 8007bde:	4b94      	ldr	r3, [pc, #592]	; (8007e30 <buttonController+0x268>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	701a      	strb	r2, [r3, #0]
 8007be4:	4b94      	ldr	r3, [pc, #592]	; (8007e38 <buttonController+0x270>)
 8007be6:	2201      	movs	r2, #1
 8007be8:	701a      	strb	r2, [r3, #0]
 8007bea:	4b94      	ldr	r3, [pc, #592]	; (8007e3c <buttonController+0x274>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	601a      	str	r2, [r3, #0]
		if(1==selectBtnListenner){
 8007bf0:	4b90      	ldr	r3, [pc, #576]	; (8007e34 <buttonController+0x26c>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d110      	bne.n	8007c1a <buttonController+0x52>
			if(item<ITEM_MAX)item++;
 8007bf8:	4b90      	ldr	r3, [pc, #576]	; (8007e3c <buttonController+0x274>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	dc05      	bgt.n	8007c0c <buttonController+0x44>
 8007c00:	4b8e      	ldr	r3, [pc, #568]	; (8007e3c <buttonController+0x274>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	3301      	adds	r3, #1
 8007c06:	4a8d      	ldr	r2, [pc, #564]	; (8007e3c <buttonController+0x274>)
 8007c08:	6013      	str	r3, [r2, #0]
 8007c0a:	e006      	b.n	8007c1a <buttonController+0x52>
			else if(item==ITEM_MAX)item=0;
 8007c0c:	4b8b      	ldr	r3, [pc, #556]	; (8007e3c <buttonController+0x274>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b03      	cmp	r3, #3
 8007c12:	d102      	bne.n	8007c1a <buttonController+0x52>
 8007c14:	4b89      	ldr	r3, [pc, #548]	; (8007e3c <buttonController+0x274>)
 8007c16:	2200      	movs	r2, #0
 8007c18:	601a      	str	r2, [r3, #0]
		}
		if(2==plusBtnListenner)selectedLcdItem=0;
 8007c1a:	4b89      	ldr	r3, [pc, #548]	; (8007e40 <buttonController+0x278>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d102      	bne.n	8007c28 <buttonController+0x60>
 8007c22:	4b88      	ldr	r3, [pc, #544]	; (8007e44 <buttonController+0x27c>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	701a      	strb	r2, [r3, #0]
		if(1==plusBtnListenner){
 8007c28:	4b85      	ldr	r3, [pc, #532]	; (8007e40 <buttonController+0x278>)
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d142      	bne.n	8007cb6 <buttonController+0xee>
			switch(item){
 8007c30:	4b82      	ldr	r3, [pc, #520]	; (8007e3c <buttonController+0x274>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b03      	cmp	r3, #3
 8007c36:	d83e      	bhi.n	8007cb6 <buttonController+0xee>
 8007c38:	a201      	add	r2, pc, #4	; (adr r2, 8007c40 <buttonController+0x78>)
 8007c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3e:	bf00      	nop
 8007c40:	08007c51 	.word	0x08007c51
 8007c44:	08007c67 	.word	0x08007c67
 8007c48:	08007c7d 	.word	0x08007c7d
 8007c4c:	08007c93 	.word	0x08007c93
			case 0: if(drv1.pid_kd<255) drv1.pid_kp++; break;
 8007c50:	4b7d      	ldr	r3, [pc, #500]	; (8007e48 <buttonController+0x280>)
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	2bff      	cmp	r3, #255	; 0xff
 8007c56:	d027      	beq.n	8007ca8 <buttonController+0xe0>
 8007c58:	4b7b      	ldr	r3, [pc, #492]	; (8007e48 <buttonController+0x280>)
 8007c5a:	789b      	ldrb	r3, [r3, #2]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	4b79      	ldr	r3, [pc, #484]	; (8007e48 <buttonController+0x280>)
 8007c62:	709a      	strb	r2, [r3, #2]
 8007c64:	e020      	b.n	8007ca8 <buttonController+0xe0>
			case 1: if(drv1.pid_ki<255) drv1.pid_ki++; break;
 8007c66:	4b78      	ldr	r3, [pc, #480]	; (8007e48 <buttonController+0x280>)
 8007c68:	785b      	ldrb	r3, [r3, #1]
 8007c6a:	2bff      	cmp	r3, #255	; 0xff
 8007c6c:	d01e      	beq.n	8007cac <buttonController+0xe4>
 8007c6e:	4b76      	ldr	r3, [pc, #472]	; (8007e48 <buttonController+0x280>)
 8007c70:	785b      	ldrb	r3, [r3, #1]
 8007c72:	3301      	adds	r3, #1
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	4b74      	ldr	r3, [pc, #464]	; (8007e48 <buttonController+0x280>)
 8007c78:	705a      	strb	r2, [r3, #1]
 8007c7a:	e017      	b.n	8007cac <buttonController+0xe4>
			case 2: if(drv1.pid_kp<255) drv1.pid_kd++; break;
 8007c7c:	4b72      	ldr	r3, [pc, #456]	; (8007e48 <buttonController+0x280>)
 8007c7e:	789b      	ldrb	r3, [r3, #2]
 8007c80:	2bff      	cmp	r3, #255	; 0xff
 8007c82:	d015      	beq.n	8007cb0 <buttonController+0xe8>
 8007c84:	4b70      	ldr	r3, [pc, #448]	; (8007e48 <buttonController+0x280>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	4b6e      	ldr	r3, [pc, #440]	; (8007e48 <buttonController+0x280>)
 8007c8e:	701a      	strb	r2, [r3, #0]
 8007c90:	e00e      	b.n	8007cb0 <buttonController+0xe8>
			case 3: if(drv1.factor<255) drv1.factor++; break;
 8007c92:	4b6d      	ldr	r3, [pc, #436]	; (8007e48 <buttonController+0x280>)
 8007c94:	78db      	ldrb	r3, [r3, #3]
 8007c96:	2bff      	cmp	r3, #255	; 0xff
 8007c98:	d00c      	beq.n	8007cb4 <buttonController+0xec>
 8007c9a:	4b6b      	ldr	r3, [pc, #428]	; (8007e48 <buttonController+0x280>)
 8007c9c:	78db      	ldrb	r3, [r3, #3]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	4b69      	ldr	r3, [pc, #420]	; (8007e48 <buttonController+0x280>)
 8007ca4:	70da      	strb	r2, [r3, #3]
 8007ca6:	e005      	b.n	8007cb4 <buttonController+0xec>
			case 0: if(drv1.pid_kd<255) drv1.pid_kp++; break;
 8007ca8:	bf00      	nop
 8007caa:	e004      	b.n	8007cb6 <buttonController+0xee>
			case 1: if(drv1.pid_ki<255) drv1.pid_ki++; break;
 8007cac:	bf00      	nop
 8007cae:	e002      	b.n	8007cb6 <buttonController+0xee>
			case 2: if(drv1.pid_kp<255) drv1.pid_kd++; break;
 8007cb0:	bf00      	nop
 8007cb2:	e000      	b.n	8007cb6 <buttonController+0xee>
			case 3: if(drv1.factor<255) drv1.factor++; break;
 8007cb4:	bf00      	nop
			}
		}
		if(2==minusBtnListenner)selectedLcdItem=1;
 8007cb6:	4b65      	ldr	r3, [pc, #404]	; (8007e4c <buttonController+0x284>)
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d102      	bne.n	8007cc4 <buttonController+0xfc>
 8007cbe:	4b61      	ldr	r3, [pc, #388]	; (8007e44 <buttonController+0x27c>)
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	701a      	strb	r2, [r3, #0]
		if(1==minusBtnListenner){
 8007cc4:	4b61      	ldr	r3, [pc, #388]	; (8007e4c <buttonController+0x284>)
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	f040 811a 	bne.w	8007f02 <buttonController+0x33a>
			switch(item){
 8007cce:	4b5b      	ldr	r3, [pc, #364]	; (8007e3c <buttonController+0x274>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	f200 8115 	bhi.w	8007f02 <buttonController+0x33a>
 8007cd8:	a201      	add	r2, pc, #4	; (adr r2, 8007ce0 <buttonController+0x118>)
 8007cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cde:	bf00      	nop
 8007ce0:	08007cf1 	.word	0x08007cf1
 8007ce4:	08007d09 	.word	0x08007d09
 8007ce8:	08007d21 	.word	0x08007d21
 8007cec:	08007d39 	.word	0x08007d39
			case 0: if(drv1.pid_kd>0) drv1.pid_kp--; break;
 8007cf0:	4b55      	ldr	r3, [pc, #340]	; (8007e48 <buttonController+0x280>)
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f000 80f5 	beq.w	8007ee4 <buttonController+0x31c>
 8007cfa:	4b53      	ldr	r3, [pc, #332]	; (8007e48 <buttonController+0x280>)
 8007cfc:	789b      	ldrb	r3, [r3, #2]
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	4b51      	ldr	r3, [pc, #324]	; (8007e48 <buttonController+0x280>)
 8007d04:	709a      	strb	r2, [r3, #2]
 8007d06:	e0ed      	b.n	8007ee4 <buttonController+0x31c>
			case 1: if(drv1.pid_ki>0) drv1.pid_ki--; break;
 8007d08:	4b4f      	ldr	r3, [pc, #316]	; (8007e48 <buttonController+0x280>)
 8007d0a:	785b      	ldrb	r3, [r3, #1]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 80eb 	beq.w	8007ee8 <buttonController+0x320>
 8007d12:	4b4d      	ldr	r3, [pc, #308]	; (8007e48 <buttonController+0x280>)
 8007d14:	785b      	ldrb	r3, [r3, #1]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	4b4b      	ldr	r3, [pc, #300]	; (8007e48 <buttonController+0x280>)
 8007d1c:	705a      	strb	r2, [r3, #1]
 8007d1e:	e0e3      	b.n	8007ee8 <buttonController+0x320>
			case 2: if(drv1.pid_kp>0) drv1.pid_kd--; break;
 8007d20:	4b49      	ldr	r3, [pc, #292]	; (8007e48 <buttonController+0x280>)
 8007d22:	789b      	ldrb	r3, [r3, #2]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 80e1 	beq.w	8007eec <buttonController+0x324>
 8007d2a:	4b47      	ldr	r3, [pc, #284]	; (8007e48 <buttonController+0x280>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	4b45      	ldr	r3, [pc, #276]	; (8007e48 <buttonController+0x280>)
 8007d34:	701a      	strb	r2, [r3, #0]
 8007d36:	e0d9      	b.n	8007eec <buttonController+0x324>
			case 3: if(drv1.factor>0) drv1.factor--; break;
 8007d38:	4b43      	ldr	r3, [pc, #268]	; (8007e48 <buttonController+0x280>)
 8007d3a:	78db      	ldrb	r3, [r3, #3]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 80d7 	beq.w	8007ef0 <buttonController+0x328>
 8007d42:	4b41      	ldr	r3, [pc, #260]	; (8007e48 <buttonController+0x280>)
 8007d44:	78db      	ldrb	r3, [r3, #3]
 8007d46:	3b01      	subs	r3, #1
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	4b3f      	ldr	r3, [pc, #252]	; (8007e48 <buttonController+0x280>)
 8007d4c:	70da      	strb	r2, [r3, #3]
 8007d4e:	bf00      	nop
 8007d50:	e0ce      	b.n	8007ef0 <buttonController+0x328>
			}
		}
	}
	else{
		if(2==selectBtnListenner){ selectedMDI=true; selectedLcd=0; item=0;}
 8007d52:	4b38      	ldr	r3, [pc, #224]	; (8007e34 <buttonController+0x26c>)
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d108      	bne.n	8007d6c <buttonController+0x1a4>
 8007d5a:	4b35      	ldr	r3, [pc, #212]	; (8007e30 <buttonController+0x268>)
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	701a      	strb	r2, [r3, #0]
 8007d60:	4b35      	ldr	r3, [pc, #212]	; (8007e38 <buttonController+0x270>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	701a      	strb	r2, [r3, #0]
 8007d66:	4b35      	ldr	r3, [pc, #212]	; (8007e3c <buttonController+0x274>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	601a      	str	r2, [r3, #0]
		if(1==selectBtnListenner){
 8007d6c:	4b31      	ldr	r3, [pc, #196]	; (8007e34 <buttonController+0x26c>)
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d110      	bne.n	8007d96 <buttonController+0x1ce>
			if(item<ITEM_MAX)item++;
 8007d74:	4b31      	ldr	r3, [pc, #196]	; (8007e3c <buttonController+0x274>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	dc05      	bgt.n	8007d88 <buttonController+0x1c0>
 8007d7c:	4b2f      	ldr	r3, [pc, #188]	; (8007e3c <buttonController+0x274>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3301      	adds	r3, #1
 8007d82:	4a2e      	ldr	r2, [pc, #184]	; (8007e3c <buttonController+0x274>)
 8007d84:	6013      	str	r3, [r2, #0]
 8007d86:	e006      	b.n	8007d96 <buttonController+0x1ce>
			else if(item==ITEM_MAX)item=0;
 8007d88:	4b2c      	ldr	r3, [pc, #176]	; (8007e3c <buttonController+0x274>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b03      	cmp	r3, #3
 8007d8e:	d102      	bne.n	8007d96 <buttonController+0x1ce>
 8007d90:	4b2a      	ldr	r3, [pc, #168]	; (8007e3c <buttonController+0x274>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	601a      	str	r2, [r3, #0]
		}
		if(2==plusBtnListenner)selectedLcdItem=0;
 8007d96:	4b2a      	ldr	r3, [pc, #168]	; (8007e40 <buttonController+0x278>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d102      	bne.n	8007da4 <buttonController+0x1dc>
 8007d9e:	4b29      	ldr	r3, [pc, #164]	; (8007e44 <buttonController+0x27c>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	701a      	strb	r2, [r3, #0]
		if(1==plusBtnListenner){
 8007da4:	4b26      	ldr	r3, [pc, #152]	; (8007e40 <buttonController+0x278>)
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d154      	bne.n	8007e56 <buttonController+0x28e>
			switch(item){
 8007dac:	4b23      	ldr	r3, [pc, #140]	; (8007e3c <buttonController+0x274>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2b03      	cmp	r3, #3
 8007db2:	d850      	bhi.n	8007e56 <buttonController+0x28e>
 8007db4:	a201      	add	r2, pc, #4	; (adr r2, 8007dbc <buttonController+0x1f4>)
 8007db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dba:	bf00      	nop
 8007dbc:	08007dcd 	.word	0x08007dcd
 8007dc0:	08007de3 	.word	0x08007de3
 8007dc4:	08007df9 	.word	0x08007df9
 8007dc8:	08007e0f 	.word	0x08007e0f
			case 0: if(drv2.pid_kd<255) drv2.pid_kp++; break;
 8007dcc:	4b20      	ldr	r3, [pc, #128]	; (8007e50 <buttonController+0x288>)
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	2bff      	cmp	r3, #255	; 0xff
 8007dd2:	d027      	beq.n	8007e24 <buttonController+0x25c>
 8007dd4:	4b1e      	ldr	r3, [pc, #120]	; (8007e50 <buttonController+0x288>)
 8007dd6:	789b      	ldrb	r3, [r3, #2]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	4b1c      	ldr	r3, [pc, #112]	; (8007e50 <buttonController+0x288>)
 8007dde:	709a      	strb	r2, [r3, #2]
 8007de0:	e020      	b.n	8007e24 <buttonController+0x25c>
			case 1: if(drv2.pid_ki<255) drv2.pid_ki++; break;
 8007de2:	4b1b      	ldr	r3, [pc, #108]	; (8007e50 <buttonController+0x288>)
 8007de4:	785b      	ldrb	r3, [r3, #1]
 8007de6:	2bff      	cmp	r3, #255	; 0xff
 8007de8:	d01e      	beq.n	8007e28 <buttonController+0x260>
 8007dea:	4b19      	ldr	r3, [pc, #100]	; (8007e50 <buttonController+0x288>)
 8007dec:	785b      	ldrb	r3, [r3, #1]
 8007dee:	3301      	adds	r3, #1
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	4b17      	ldr	r3, [pc, #92]	; (8007e50 <buttonController+0x288>)
 8007df4:	705a      	strb	r2, [r3, #1]
 8007df6:	e017      	b.n	8007e28 <buttonController+0x260>
			case 2: if(drv2.pid_kp<255) drv2.pid_kd++; break;
 8007df8:	4b15      	ldr	r3, [pc, #84]	; (8007e50 <buttonController+0x288>)
 8007dfa:	789b      	ldrb	r3, [r3, #2]
 8007dfc:	2bff      	cmp	r3, #255	; 0xff
 8007dfe:	d015      	beq.n	8007e2c <buttonController+0x264>
 8007e00:	4b13      	ldr	r3, [pc, #76]	; (8007e50 <buttonController+0x288>)
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	3301      	adds	r3, #1
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	4b11      	ldr	r3, [pc, #68]	; (8007e50 <buttonController+0x288>)
 8007e0a:	701a      	strb	r2, [r3, #0]
 8007e0c:	e00e      	b.n	8007e2c <buttonController+0x264>
			case 3: if(drv2.factor<255) drv2.factor++; break;
 8007e0e:	4b10      	ldr	r3, [pc, #64]	; (8007e50 <buttonController+0x288>)
 8007e10:	78db      	ldrb	r3, [r3, #3]
 8007e12:	2bff      	cmp	r3, #255	; 0xff
 8007e14:	d01e      	beq.n	8007e54 <buttonController+0x28c>
 8007e16:	4b0e      	ldr	r3, [pc, #56]	; (8007e50 <buttonController+0x288>)
 8007e18:	78db      	ldrb	r3, [r3, #3]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	4b0c      	ldr	r3, [pc, #48]	; (8007e50 <buttonController+0x288>)
 8007e20:	70da      	strb	r2, [r3, #3]
 8007e22:	e017      	b.n	8007e54 <buttonController+0x28c>
			case 0: if(drv2.pid_kd<255) drv2.pid_kp++; break;
 8007e24:	bf00      	nop
 8007e26:	e016      	b.n	8007e56 <buttonController+0x28e>
			case 1: if(drv2.pid_ki<255) drv2.pid_ki++; break;
 8007e28:	bf00      	nop
 8007e2a:	e014      	b.n	8007e56 <buttonController+0x28e>
			case 2: if(drv2.pid_kp<255) drv2.pid_kd++; break;
 8007e2c:	bf00      	nop
 8007e2e:	e012      	b.n	8007e56 <buttonController+0x28e>
 8007e30:	20000010 	.word	0x20000010
 8007e34:	200049ac 	.word	0x200049ac
 8007e38:	200049aa 	.word	0x200049aa
 8007e3c:	200049b0 	.word	0x200049b0
 8007e40:	200049b4 	.word	0x200049b4
 8007e44:	200049ab 	.word	0x200049ab
 8007e48:	20004c98 	.word	0x20004c98
 8007e4c:	200049b5 	.word	0x200049b5
 8007e50:	20004ca0 	.word	0x20004ca0
			case 3: if(drv2.factor<255) drv2.factor++; break;
 8007e54:	bf00      	nop
			}
		}
		if(2==minusBtnListenner)selectedLcdItem=1;
 8007e56:	4b35      	ldr	r3, [pc, #212]	; (8007f2c <buttonController+0x364>)
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	d102      	bne.n	8007e64 <buttonController+0x29c>
 8007e5e:	4b34      	ldr	r3, [pc, #208]	; (8007f30 <buttonController+0x368>)
 8007e60:	2201      	movs	r2, #1
 8007e62:	701a      	strb	r2, [r3, #0]
		if(1==minusBtnListenner){
 8007e64:	4b31      	ldr	r3, [pc, #196]	; (8007f2c <buttonController+0x364>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d14a      	bne.n	8007f02 <buttonController+0x33a>
			switch(item){
 8007e6c:	4b31      	ldr	r3, [pc, #196]	; (8007f34 <buttonController+0x36c>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b03      	cmp	r3, #3
 8007e72:	d846      	bhi.n	8007f02 <buttonController+0x33a>
 8007e74:	a201      	add	r2, pc, #4	; (adr r2, 8007e7c <buttonController+0x2b4>)
 8007e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7a:	bf00      	nop
 8007e7c:	08007e8d 	.word	0x08007e8d
 8007e80:	08007ea3 	.word	0x08007ea3
 8007e84:	08007eb9 	.word	0x08007eb9
 8007e88:	08007ecf 	.word	0x08007ecf
			case 0: if(drv2.pid_kd>0) drv2.pid_kp--; break;
 8007e8c:	4b2a      	ldr	r3, [pc, #168]	; (8007f38 <buttonController+0x370>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d02f      	beq.n	8007ef4 <buttonController+0x32c>
 8007e94:	4b28      	ldr	r3, [pc, #160]	; (8007f38 <buttonController+0x370>)
 8007e96:	789b      	ldrb	r3, [r3, #2]
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	4b26      	ldr	r3, [pc, #152]	; (8007f38 <buttonController+0x370>)
 8007e9e:	709a      	strb	r2, [r3, #2]
 8007ea0:	e028      	b.n	8007ef4 <buttonController+0x32c>
			case 1: if(drv2.pid_ki>0) drv2.pid_ki--; break;
 8007ea2:	4b25      	ldr	r3, [pc, #148]	; (8007f38 <buttonController+0x370>)
 8007ea4:	785b      	ldrb	r3, [r3, #1]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d026      	beq.n	8007ef8 <buttonController+0x330>
 8007eaa:	4b23      	ldr	r3, [pc, #140]	; (8007f38 <buttonController+0x370>)
 8007eac:	785b      	ldrb	r3, [r3, #1]
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	b2da      	uxtb	r2, r3
 8007eb2:	4b21      	ldr	r3, [pc, #132]	; (8007f38 <buttonController+0x370>)
 8007eb4:	705a      	strb	r2, [r3, #1]
 8007eb6:	e01f      	b.n	8007ef8 <buttonController+0x330>
			case 2: if(drv2.pid_kp>0) drv2.pid_kd--; break;
 8007eb8:	4b1f      	ldr	r3, [pc, #124]	; (8007f38 <buttonController+0x370>)
 8007eba:	789b      	ldrb	r3, [r3, #2]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d01d      	beq.n	8007efc <buttonController+0x334>
 8007ec0:	4b1d      	ldr	r3, [pc, #116]	; (8007f38 <buttonController+0x370>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	4b1b      	ldr	r3, [pc, #108]	; (8007f38 <buttonController+0x370>)
 8007eca:	701a      	strb	r2, [r3, #0]
 8007ecc:	e016      	b.n	8007efc <buttonController+0x334>
			case 3: if(drv2.factor>0) drv2.factor--; break;
 8007ece:	4b1a      	ldr	r3, [pc, #104]	; (8007f38 <buttonController+0x370>)
 8007ed0:	78db      	ldrb	r3, [r3, #3]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d014      	beq.n	8007f00 <buttonController+0x338>
 8007ed6:	4b18      	ldr	r3, [pc, #96]	; (8007f38 <buttonController+0x370>)
 8007ed8:	78db      	ldrb	r3, [r3, #3]
 8007eda:	3b01      	subs	r3, #1
 8007edc:	b2da      	uxtb	r2, r3
 8007ede:	4b16      	ldr	r3, [pc, #88]	; (8007f38 <buttonController+0x370>)
 8007ee0:	70da      	strb	r2, [r3, #3]
 8007ee2:	e00d      	b.n	8007f00 <buttonController+0x338>
			case 0: if(drv1.pid_kd>0) drv1.pid_kp--; break;
 8007ee4:	bf00      	nop
 8007ee6:	e00c      	b.n	8007f02 <buttonController+0x33a>
			case 1: if(drv1.pid_ki>0) drv1.pid_ki--; break;
 8007ee8:	bf00      	nop
 8007eea:	e00a      	b.n	8007f02 <buttonController+0x33a>
			case 2: if(drv1.pid_kp>0) drv1.pid_kd--; break;
 8007eec:	bf00      	nop
 8007eee:	e008      	b.n	8007f02 <buttonController+0x33a>
			case 3: if(drv1.factor>0) drv1.factor--; break;
 8007ef0:	bf00      	nop
 8007ef2:	e006      	b.n	8007f02 <buttonController+0x33a>
			case 0: if(drv2.pid_kd>0) drv2.pid_kp--; break;
 8007ef4:	bf00      	nop
 8007ef6:	e004      	b.n	8007f02 <buttonController+0x33a>
			case 1: if(drv2.pid_ki>0) drv2.pid_ki--; break;
 8007ef8:	bf00      	nop
 8007efa:	e002      	b.n	8007f02 <buttonController+0x33a>
			case 2: if(drv2.pid_kp>0) drv2.pid_kd--; break;
 8007efc:	bf00      	nop
 8007efe:	e000      	b.n	8007f02 <buttonController+0x33a>
			case 3: if(drv2.factor>0) drv2.factor--; break;
 8007f00:	bf00      	nop
			}
		}
	}

	selectBtnListenner=selectButton_Listenner_For_MenuControl();
 8007f02:	f7ff fd9f 	bl	8007a44 <selectButton_Listenner_For_MenuControl>
 8007f06:	4603      	mov	r3, r0
 8007f08:	461a      	mov	r2, r3
 8007f0a:	4b0c      	ldr	r3, [pc, #48]	; (8007f3c <buttonController+0x374>)
 8007f0c:	701a      	strb	r2, [r3, #0]
	plusBtnListenner=plusButton_Listenner_For_MenuControl();
 8007f0e:	f7ff fdbf 	bl	8007a90 <plusButton_Listenner_For_MenuControl>
 8007f12:	4603      	mov	r3, r0
 8007f14:	461a      	mov	r2, r3
 8007f16:	4b0a      	ldr	r3, [pc, #40]	; (8007f40 <buttonController+0x378>)
 8007f18:	701a      	strb	r2, [r3, #0]
	minusBtnListenner=minusButton_Listenner_For_MenuControl();
 8007f1a:	f7ff fde1 	bl	8007ae0 <minusButton_Listenner_For_MenuControl>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	461a      	mov	r2, r3
 8007f22:	4b02      	ldr	r3, [pc, #8]	; (8007f2c <buttonController+0x364>)
 8007f24:	701a      	strb	r2, [r3, #0]
	//"drv1= %x - %x - %x - %x\n",drv1.pid_kd,drv1.pid_ki,drv1.pid_kp,drv1.factor
	//"drv2= %x - %x - %x - %x\n",drv2.pid_kd,drv2.pid_ki,drv2.pid_kp,drv2.factor

}
 8007f26:	bf00      	nop
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	200049b5 	.word	0x200049b5
 8007f30:	200049ab 	.word	0x200049ab
 8007f34:	200049b0 	.word	0x200049b0
 8007f38:	20004ca0 	.word	0x20004ca0
 8007f3c:	200049ac 	.word	0x200049ac
 8007f40:	200049b4 	.word	0x200049b4

08007f44 <transmissionDriver1>:
void transmissionDriver1(void){
 8007f44:	b590      	push	{r4, r7, lr}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af02      	add	r7, sp, #8
	MDI_sendDataChannel1Ver2(drv1.angle,drv1.pid_kp,drv1.pid_ki,drv1.pid_kd,drv1.factor);
 8007f4a:	4b09      	ldr	r3, [pc, #36]	; (8007f70 <transmissionDriver1+0x2c>)
 8007f4c:	8898      	ldrh	r0, [r3, #4]
 8007f4e:	4b08      	ldr	r3, [pc, #32]	; (8007f70 <transmissionDriver1+0x2c>)
 8007f50:	7899      	ldrb	r1, [r3, #2]
 8007f52:	4b07      	ldr	r3, [pc, #28]	; (8007f70 <transmissionDriver1+0x2c>)
 8007f54:	785a      	ldrb	r2, [r3, #1]
 8007f56:	4b06      	ldr	r3, [pc, #24]	; (8007f70 <transmissionDriver1+0x2c>)
 8007f58:	781c      	ldrb	r4, [r3, #0]
 8007f5a:	4b05      	ldr	r3, [pc, #20]	; (8007f70 <transmissionDriver1+0x2c>)
 8007f5c:	78db      	ldrb	r3, [r3, #3]
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	4623      	mov	r3, r4
 8007f62:	f000 fc27 	bl	80087b4 <MDI_sendDataChannel1Ver2>
}
 8007f66:	bf00      	nop
 8007f68:	3704      	adds	r7, #4
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd90      	pop	{r4, r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	20004c98 	.word	0x20004c98

08007f74 <transmissionDriver2>:
void transmissionDriver2(void){
 8007f74:	b590      	push	{r4, r7, lr}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af02      	add	r7, sp, #8
	MDI_sendDataChannel2Ver2(drv2.angle,drv2.pid_kp,drv2.pid_ki,drv2.pid_kd,drv2.factor);
 8007f7a:	4b09      	ldr	r3, [pc, #36]	; (8007fa0 <transmissionDriver2+0x2c>)
 8007f7c:	8898      	ldrh	r0, [r3, #4]
 8007f7e:	4b08      	ldr	r3, [pc, #32]	; (8007fa0 <transmissionDriver2+0x2c>)
 8007f80:	7899      	ldrb	r1, [r3, #2]
 8007f82:	4b07      	ldr	r3, [pc, #28]	; (8007fa0 <transmissionDriver2+0x2c>)
 8007f84:	785a      	ldrb	r2, [r3, #1]
 8007f86:	4b06      	ldr	r3, [pc, #24]	; (8007fa0 <transmissionDriver2+0x2c>)
 8007f88:	781c      	ldrb	r4, [r3, #0]
 8007f8a:	4b05      	ldr	r3, [pc, #20]	; (8007fa0 <transmissionDriver2+0x2c>)
 8007f8c:	78db      	ldrb	r3, [r3, #3]
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	4623      	mov	r3, r4
 8007f92:	f000 fd23 	bl	80089dc <MDI_sendDataChannel2Ver2>
}
 8007f96:	bf00      	nop
 8007f98:	3704      	adds	r7, #4
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd90      	pop	{r4, r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	20004ca0 	.word	0x20004ca0

08007fa4 <getDriver1TransmitVal>:
mD_interface getDriver1TransmitVal(void){
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
	return drv1;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a05      	ldr	r2, [pc, #20]	; (8007fc4 <getDriver1TransmitVal+0x20>)
 8007fb0:	6811      	ldr	r1, [r2, #0]
 8007fb2:	6019      	str	r1, [r3, #0]
 8007fb4:	8892      	ldrh	r2, [r2, #4]
 8007fb6:	809a      	strh	r2, [r3, #4]
}
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	20004c98 	.word	0x20004c98

08007fc8 <getDriver2TransmitVal>:
mD_interface getDriver2TransmitVal(void){
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
	return drv2;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a05      	ldr	r2, [pc, #20]	; (8007fe8 <getDriver2TransmitVal+0x20>)
 8007fd4:	6811      	ldr	r1, [r2, #0]
 8007fd6:	6019      	str	r1, [r3, #0]
 8007fd8:	8892      	ldrh	r2, [r2, #4]
 8007fda:	809a      	strh	r2, [r3, #4]
}
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr
 8007fe8:	20004ca0 	.word	0x20004ca0

08007fec <getSelectedLcdVal>:
uint8_t getSelectedLcdVal(void){return selectedLcd;}
 8007fec:	b480      	push	{r7}
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	4b03      	ldr	r3, [pc, #12]	; (8008000 <getSelectedLcdVal+0x14>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	200049aa 	.word	0x200049aa

08008004 <getSelectedLcdItemVal>:
uint8_t getSelectedLcdItemVal(void){return selectedLcdItem;}
 8008004:	b480      	push	{r7}
 8008006:	af00      	add	r7, sp, #0
 8008008:	4b03      	ldr	r3, [pc, #12]	; (8008018 <getSelectedLcdItemVal+0x14>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	4618      	mov	r0, r3
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	200049ab 	.word	0x200049ab

0800801c <lcd_Init>:

/* @brief lcd module initalize
 * @param none
 * @return none
 * */
void lcd_Init(void){
 800801c:	b580      	push	{r7, lr}
 800801e:	af00      	add	r7, sp, #0
	LCD_i2cDeviceCheck();
 8008020:	f000 f958 	bl	80082d4 <LCD_i2cDeviceCheck>
	LCD_Init();
 8008024:	f000 fb92 	bl	800874c <LCD_Init>
	LCD_BackLight(LCD_BL_ON);
 8008028:	2008      	movs	r0, #8
 800802a:	f000 fb71 	bl	8008710 <LCD_BackLight>
	LCD_SetCursor(0,0);
 800802e:	2100      	movs	r1, #0
 8008030:	2000      	movs	r0, #0
 8008032:	f000 fa3b 	bl	80084ac <LCD_SetCursor>

	LCD_Send_String("TEST",STR_NOSLIDE);
 8008036:	2100      	movs	r1, #0
 8008038:	4802      	ldr	r0, [pc, #8]	; (8008044 <lcd_Init+0x28>)
 800803a:	f000 fa67 	bl	800850c <LCD_Send_String>
}
 800803e:	bf00      	nop
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	08009714 	.word	0x08009714

08008048 <printToLcdDrv1Receive>:
void printToLcdDrv1Receive(mD_interface gets){
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af02      	add	r7, sp, #8
 800804e:	463b      	mov	r3, r7
 8008050:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SetCursor(1,1);
 8008054:	2101      	movs	r1, #1
 8008056:	2001      	movs	r0, #1
 8008058:	f000 fa28 	bl	80084ac <LCD_SetCursor>
	sprintf(lcdBuff,"Gln1:a:%04d p:%02x",gets.angle,gets.pid_kp);
 800805c:	88bb      	ldrh	r3, [r7, #4]
 800805e:	461a      	mov	r2, r3
 8008060:	78bb      	ldrb	r3, [r7, #2]
 8008062:	490f      	ldr	r1, [pc, #60]	; (80080a0 <printToLcdDrv1Receive+0x58>)
 8008064:	480f      	ldr	r0, [pc, #60]	; (80080a4 <printToLcdDrv1Receive+0x5c>)
 8008066:	f000 ff41 	bl	8008eec <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 800806a:	2100      	movs	r1, #0
 800806c:	480d      	ldr	r0, [pc, #52]	; (80080a4 <printToLcdDrv1Receive+0x5c>)
 800806e:	f000 fa4d 	bl	800850c <LCD_Send_String>
	LCD_SetCursor(2,1);
 8008072:	2101      	movs	r1, #1
 8008074:	2002      	movs	r0, #2
 8008076:	f000 fa19 	bl	80084ac <LCD_SetCursor>
	sprintf(lcdBuff,"i:%02x d:%02x f:%02x",gets.pid_ki,gets.pid_kd,gets.factor);
 800807a:	787b      	ldrb	r3, [r7, #1]
 800807c:	461a      	mov	r2, r3
 800807e:	783b      	ldrb	r3, [r7, #0]
 8008080:	4619      	mov	r1, r3
 8008082:	78fb      	ldrb	r3, [r7, #3]
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	460b      	mov	r3, r1
 8008088:	4907      	ldr	r1, [pc, #28]	; (80080a8 <printToLcdDrv1Receive+0x60>)
 800808a:	4806      	ldr	r0, [pc, #24]	; (80080a4 <printToLcdDrv1Receive+0x5c>)
 800808c:	f000 ff2e 	bl	8008eec <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 8008090:	2100      	movs	r1, #0
 8008092:	4804      	ldr	r0, [pc, #16]	; (80080a4 <printToLcdDrv1Receive+0x5c>)
 8008094:	f000 fa3a 	bl	800850c <LCD_Send_String>
}
 8008098:	bf00      	nop
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	0800971c 	.word	0x0800971c
 80080a4:	20004ca8 	.word	0x20004ca8
 80080a8:	08009730 	.word	0x08009730

080080ac <printToLcdDrv1Transmit>:
void printToLcdDrv1Transmit(mD_interface sends){
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af02      	add	r7, sp, #8
 80080b2:	463b      	mov	r3, r7
 80080b4:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SetCursor(1,1);
 80080b8:	2101      	movs	r1, #1
 80080ba:	2001      	movs	r0, #1
 80080bc:	f000 f9f6 	bl	80084ac <LCD_SetCursor>
	sprintf(lcdBuff,"Gdn1:a:%04d p:%02x",sends.angle,sends.pid_kp);
 80080c0:	88bb      	ldrh	r3, [r7, #4]
 80080c2:	461a      	mov	r2, r3
 80080c4:	78bb      	ldrb	r3, [r7, #2]
 80080c6:	490f      	ldr	r1, [pc, #60]	; (8008104 <printToLcdDrv1Transmit+0x58>)
 80080c8:	480f      	ldr	r0, [pc, #60]	; (8008108 <printToLcdDrv1Transmit+0x5c>)
 80080ca:	f000 ff0f 	bl	8008eec <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 80080ce:	2100      	movs	r1, #0
 80080d0:	480d      	ldr	r0, [pc, #52]	; (8008108 <printToLcdDrv1Transmit+0x5c>)
 80080d2:	f000 fa1b 	bl	800850c <LCD_Send_String>
	LCD_SetCursor(2,1);
 80080d6:	2101      	movs	r1, #1
 80080d8:	2002      	movs	r0, #2
 80080da:	f000 f9e7 	bl	80084ac <LCD_SetCursor>
	sprintf(lcdBuff,"i:%02x d:%02x f:%02x",sends.pid_ki,sends.pid_kd,sends.factor);
 80080de:	787b      	ldrb	r3, [r7, #1]
 80080e0:	461a      	mov	r2, r3
 80080e2:	783b      	ldrb	r3, [r7, #0]
 80080e4:	4619      	mov	r1, r3
 80080e6:	78fb      	ldrb	r3, [r7, #3]
 80080e8:	9300      	str	r3, [sp, #0]
 80080ea:	460b      	mov	r3, r1
 80080ec:	4907      	ldr	r1, [pc, #28]	; (800810c <printToLcdDrv1Transmit+0x60>)
 80080ee:	4806      	ldr	r0, [pc, #24]	; (8008108 <printToLcdDrv1Transmit+0x5c>)
 80080f0:	f000 fefc 	bl	8008eec <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 80080f4:	2100      	movs	r1, #0
 80080f6:	4804      	ldr	r0, [pc, #16]	; (8008108 <printToLcdDrv1Transmit+0x5c>)
 80080f8:	f000 fa08 	bl	800850c <LCD_Send_String>
}
 80080fc:	bf00      	nop
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	08009748 	.word	0x08009748
 8008108:	20004ca8 	.word	0x20004ca8
 800810c:	08009730 	.word	0x08009730

08008110 <printToLcdDrv2Receive>:
void printToLcdDrv2Receive(mD_interface gets){
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af02      	add	r7, sp, #8
 8008116:	463b      	mov	r3, r7
 8008118:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SetCursor(1,1);
 800811c:	2101      	movs	r1, #1
 800811e:	2001      	movs	r0, #1
 8008120:	f000 f9c4 	bl	80084ac <LCD_SetCursor>
	sprintf(lcdBuff,"Gln2:a:%04d p:%02x",gets.angle,gets.pid_kp);
 8008124:	88bb      	ldrh	r3, [r7, #4]
 8008126:	461a      	mov	r2, r3
 8008128:	78bb      	ldrb	r3, [r7, #2]
 800812a:	490f      	ldr	r1, [pc, #60]	; (8008168 <printToLcdDrv2Receive+0x58>)
 800812c:	480f      	ldr	r0, [pc, #60]	; (800816c <printToLcdDrv2Receive+0x5c>)
 800812e:	f000 fedd 	bl	8008eec <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 8008132:	2100      	movs	r1, #0
 8008134:	480d      	ldr	r0, [pc, #52]	; (800816c <printToLcdDrv2Receive+0x5c>)
 8008136:	f000 f9e9 	bl	800850c <LCD_Send_String>
	LCD_SetCursor(2,1);
 800813a:	2101      	movs	r1, #1
 800813c:	2002      	movs	r0, #2
 800813e:	f000 f9b5 	bl	80084ac <LCD_SetCursor>
	sprintf(lcdBuff,"i:%02x d:%02x f:%02x",gets.pid_ki,gets.pid_kd,gets.factor);
 8008142:	787b      	ldrb	r3, [r7, #1]
 8008144:	461a      	mov	r2, r3
 8008146:	783b      	ldrb	r3, [r7, #0]
 8008148:	4619      	mov	r1, r3
 800814a:	78fb      	ldrb	r3, [r7, #3]
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	460b      	mov	r3, r1
 8008150:	4907      	ldr	r1, [pc, #28]	; (8008170 <printToLcdDrv2Receive+0x60>)
 8008152:	4806      	ldr	r0, [pc, #24]	; (800816c <printToLcdDrv2Receive+0x5c>)
 8008154:	f000 feca 	bl	8008eec <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 8008158:	2100      	movs	r1, #0
 800815a:	4804      	ldr	r0, [pc, #16]	; (800816c <printToLcdDrv2Receive+0x5c>)
 800815c:	f000 f9d6 	bl	800850c <LCD_Send_String>
}
 8008160:	bf00      	nop
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	0800975c 	.word	0x0800975c
 800816c:	20004ca8 	.word	0x20004ca8
 8008170:	08009730 	.word	0x08009730

08008174 <printToLcdDrv2Transmit>:
void printToLcdDrv2Transmit(mD_interface sends){
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af02      	add	r7, sp, #8
 800817a:	463b      	mov	r3, r7
 800817c:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SetCursor(1,1);
 8008180:	2101      	movs	r1, #1
 8008182:	2001      	movs	r0, #1
 8008184:	f000 f992 	bl	80084ac <LCD_SetCursor>
	sprintf(lcdBuff,"Gdn2:a:%04d p:%02x",sends.angle,sends.pid_kp);
 8008188:	88bb      	ldrh	r3, [r7, #4]
 800818a:	461a      	mov	r2, r3
 800818c:	78bb      	ldrb	r3, [r7, #2]
 800818e:	490f      	ldr	r1, [pc, #60]	; (80081cc <printToLcdDrv2Transmit+0x58>)
 8008190:	480f      	ldr	r0, [pc, #60]	; (80081d0 <printToLcdDrv2Transmit+0x5c>)
 8008192:	f000 feab 	bl	8008eec <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 8008196:	2100      	movs	r1, #0
 8008198:	480d      	ldr	r0, [pc, #52]	; (80081d0 <printToLcdDrv2Transmit+0x5c>)
 800819a:	f000 f9b7 	bl	800850c <LCD_Send_String>
	LCD_SetCursor(2,1);
 800819e:	2101      	movs	r1, #1
 80081a0:	2002      	movs	r0, #2
 80081a2:	f000 f983 	bl	80084ac <LCD_SetCursor>
	sprintf(lcdBuff,"i:%02x d:%02x f:%02x",sends.pid_ki,sends.pid_kd,sends.factor);
 80081a6:	787b      	ldrb	r3, [r7, #1]
 80081a8:	461a      	mov	r2, r3
 80081aa:	783b      	ldrb	r3, [r7, #0]
 80081ac:	4619      	mov	r1, r3
 80081ae:	78fb      	ldrb	r3, [r7, #3]
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	460b      	mov	r3, r1
 80081b4:	4907      	ldr	r1, [pc, #28]	; (80081d4 <printToLcdDrv2Transmit+0x60>)
 80081b6:	4806      	ldr	r0, [pc, #24]	; (80081d0 <printToLcdDrv2Transmit+0x5c>)
 80081b8:	f000 fe98 	bl	8008eec <siprintf>
	LCD_Send_String(lcdBuff,STR_NOSLIDE);
 80081bc:	2100      	movs	r1, #0
 80081be:	4804      	ldr	r0, [pc, #16]	; (80081d0 <printToLcdDrv2Transmit+0x5c>)
 80081c0:	f000 f9a4 	bl	800850c <LCD_Send_String>
}
 80081c4:	bf00      	nop
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	08009770 	.word	0x08009770
 80081d0:	20004ca8 	.word	0x20004ca8
 80081d4:	08009730 	.word	0x08009730

080081d8 <cleanTheLcd>:
void cleanTheLcd(void){
 80081d8:	b580      	push	{r7, lr}
 80081da:	af00      	add	r7, sp, #0
	LCD_Clear();
 80081dc:	f000 f952 	bl	8008484 <LCD_Clear>
}
 80081e0:	bf00      	nop
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <lcdController>:
void lcdController(void){
 80081e4:	b590      	push	{r4, r7, lr}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
	static mD_interface temp;
	static uint8_t itemVal=0,statuVal=0;
	if(0==statuVal){
 80081ea:	4b2f      	ldr	r3, [pc, #188]	; (80082a8 <lcdController+0xc4>)
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d125      	bne.n	800823e <lcdController+0x5a>
		if(0==itemVal){
 80081f2:	4b2e      	ldr	r3, [pc, #184]	; (80082ac <lcdController+0xc8>)
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d110      	bne.n	800821c <lcdController+0x38>
			temp=getDriver1TransmitVal();
 80081fa:	4c2d      	ldr	r4, [pc, #180]	; (80082b0 <lcdController+0xcc>)
 80081fc:	463b      	mov	r3, r7
 80081fe:	4618      	mov	r0, r3
 8008200:	f7ff fed0 	bl	8007fa4 <getDriver1TransmitVal>
 8008204:	4622      	mov	r2, r4
 8008206:	463b      	mov	r3, r7
 8008208:	6818      	ldr	r0, [r3, #0]
 800820a:	6010      	str	r0, [r2, #0]
 800820c:	889b      	ldrh	r3, [r3, #4]
 800820e:	8093      	strh	r3, [r2, #4]
			printToLcdDrv1Transmit(temp);
 8008210:	4b27      	ldr	r3, [pc, #156]	; (80082b0 <lcdController+0xcc>)
 8008212:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008216:	f7ff ff49 	bl	80080ac <printToLcdDrv1Transmit>
 800821a:	e035      	b.n	8008288 <lcdController+0xa4>

		}else{
			temp=getDriver1ReceiveVal();
 800821c:	4c24      	ldr	r4, [pc, #144]	; (80082b0 <lcdController+0xcc>)
 800821e:	463b      	mov	r3, r7
 8008220:	4618      	mov	r0, r3
 8008222:	f000 fcef 	bl	8008c04 <getDriver1ReceiveVal>
 8008226:	4622      	mov	r2, r4
 8008228:	463b      	mov	r3, r7
 800822a:	6818      	ldr	r0, [r3, #0]
 800822c:	6010      	str	r0, [r2, #0]
 800822e:	889b      	ldrh	r3, [r3, #4]
 8008230:	8093      	strh	r3, [r2, #4]
			printToLcdDrv1Receive(temp);
 8008232:	4b1f      	ldr	r3, [pc, #124]	; (80082b0 <lcdController+0xcc>)
 8008234:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008238:	f7ff ff06 	bl	8008048 <printToLcdDrv1Receive>
 800823c:	e024      	b.n	8008288 <lcdController+0xa4>
		}
	}
	else{
		if(0==itemVal){
 800823e:	4b1b      	ldr	r3, [pc, #108]	; (80082ac <lcdController+0xc8>)
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d110      	bne.n	8008268 <lcdController+0x84>
			temp=getDriver2TransmitVal();
 8008246:	4c1a      	ldr	r4, [pc, #104]	; (80082b0 <lcdController+0xcc>)
 8008248:	463b      	mov	r3, r7
 800824a:	4618      	mov	r0, r3
 800824c:	f7ff febc 	bl	8007fc8 <getDriver2TransmitVal>
 8008250:	4622      	mov	r2, r4
 8008252:	463b      	mov	r3, r7
 8008254:	6818      	ldr	r0, [r3, #0]
 8008256:	6010      	str	r0, [r2, #0]
 8008258:	889b      	ldrh	r3, [r3, #4]
 800825a:	8093      	strh	r3, [r2, #4]
			printToLcdDrv2Transmit(temp);
 800825c:	4b14      	ldr	r3, [pc, #80]	; (80082b0 <lcdController+0xcc>)
 800825e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008262:	f7ff ff87 	bl	8008174 <printToLcdDrv2Transmit>
 8008266:	e00f      	b.n	8008288 <lcdController+0xa4>

		}else{
			temp=getDriver2ReceiveVal();
 8008268:	4c11      	ldr	r4, [pc, #68]	; (80082b0 <lcdController+0xcc>)
 800826a:	463b      	mov	r3, r7
 800826c:	4618      	mov	r0, r3
 800826e:	f000 fcdb 	bl	8008c28 <getDriver2ReceiveVal>
 8008272:	4622      	mov	r2, r4
 8008274:	463b      	mov	r3, r7
 8008276:	6818      	ldr	r0, [r3, #0]
 8008278:	6010      	str	r0, [r2, #0]
 800827a:	889b      	ldrh	r3, [r3, #4]
 800827c:	8093      	strh	r3, [r2, #4]
			printToLcdDrv2Receive(temp);
 800827e:	4b0c      	ldr	r3, [pc, #48]	; (80082b0 <lcdController+0xcc>)
 8008280:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008284:	f7ff ff44 	bl	8008110 <printToLcdDrv2Receive>
		}
	}
	statuVal=getSelectedLcdVal();
 8008288:	f7ff feb0 	bl	8007fec <getSelectedLcdVal>
 800828c:	4603      	mov	r3, r0
 800828e:	461a      	mov	r2, r3
 8008290:	4b05      	ldr	r3, [pc, #20]	; (80082a8 <lcdController+0xc4>)
 8008292:	701a      	strb	r2, [r3, #0]
	itemVal=getSelectedLcdItemVal();
 8008294:	f7ff feb6 	bl	8008004 <getSelectedLcdItemVal>
 8008298:	4603      	mov	r3, r0
 800829a:	461a      	mov	r2, r3
 800829c:	4b03      	ldr	r3, [pc, #12]	; (80082ac <lcdController+0xc8>)
 800829e:	701a      	strb	r2, [r3, #0]
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd90      	pop	{r4, r7, pc}
 80082a8:	200049b6 	.word	0x200049b6
 80082ac:	200049b7 	.word	0x200049b7
 80082b0:	200049b8 	.word	0x200049b8

080082b4 <hi2cx_define>:
*/
I2C_HandleTypeDef hi2cx;
extern I2C_HandleTypeDef hi2c1; //* Change "hi2c1" like hi2c2, hi2c3... according to which i2c type(i2c1,i2c2...) you use, default is hi2c1.
                                //That I2C_HandleTypeDef hi2c1 comes from main.c*.
static void hi2cx_define(void)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
	hi2cx = hi2c1;	//* Change "hi2c1" like hi2c2, hi2c3... according to which i2c type you use, default is hi2c1.
 80082b8:	4a04      	ldr	r2, [pc, #16]	; (80082cc <hi2cx_define+0x18>)
 80082ba:	4b05      	ldr	r3, [pc, #20]	; (80082d0 <hi2cx_define+0x1c>)
 80082bc:	4610      	mov	r0, r2
 80082be:	4619      	mov	r1, r3
 80082c0:	234c      	movs	r3, #76	; 0x4c
 80082c2:	461a      	mov	r2, r3
 80082c4:	f000 fdfe 	bl	8008ec4 <memcpy>
}
 80082c8:	bf00      	nop
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	20004cbc 	.word	0x20004cbc
 80082d0:	20004a74 	.word	0x20004a74

080082d4 <LCD_i2cDeviceCheck>:
/**
*@brief: Lcd i2c device check.
*@retval: none
*/
void LCD_i2cDeviceCheck(void)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	af00      	add	r7, sp, #0
	/* Checks if target device is ready for communication. */
	/* 3 is number of trials, 1000ms is timeout */
	HAL_Delay(50);
 80082d8:	2032      	movs	r0, #50	; 0x32
 80082da:	f7f8 feff 	bl	80010dc <HAL_Delay>
	hi2cx_define();
 80082de:	f7ff ffe9 	bl	80082b4 <hi2cx_define>
	while (HAL_I2C_IsDeviceReady(&hi2cx, i2cDeviceAddr, 3, 1000) != HAL_OK) 
 80082e2:	bf00      	nop
 80082e4:	4b06      	ldr	r3, [pc, #24]	; (8008300 <LCD_i2cDeviceCheck+0x2c>)
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	b299      	uxth	r1, r3
 80082ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80082ee:	2203      	movs	r2, #3
 80082f0:	4804      	ldr	r0, [pc, #16]	; (8008304 <LCD_i2cDeviceCheck+0x30>)
 80082f2:	f7f9 ff9d 	bl	8002230 <HAL_I2C_IsDeviceReady>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1f3      	bne.n	80082e4 <LCD_i2cDeviceCheck+0x10>
	{	
		
	}
}
 80082fc:	bf00      	nop
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	20000011 	.word	0x20000011
 8008304:	20004cbc 	.word	0x20004cbc

08008308 <LCD_Set_Command>:
/**
*@brief: Send commands to lcd.
*@retval: none
*/
void LCD_Set_Command(uint8_t cmd)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af02      	add	r7, sp, #8
 800830e:	4603      	mov	r3, r0
 8008310:	71fb      	strb	r3, [r7, #7]
	data_M = cmd & Mask_Data;        //Most significant bit
 8008312:	4b24      	ldr	r3, [pc, #144]	; (80083a4 <LCD_Set_Command+0x9c>)
 8008314:	781a      	ldrb	r2, [r3, #0]
 8008316:	79fb      	ldrb	r3, [r7, #7]
 8008318:	4013      	ands	r3, r2
 800831a:	b2da      	uxtb	r2, r3
 800831c:	4b22      	ldr	r3, [pc, #136]	; (80083a8 <LCD_Set_Command+0xa0>)
 800831e:	701a      	strb	r2, [r3, #0]
	data_L = (cmd << 4) & Mask_Data; //Least significant bit
 8008320:	79fb      	ldrb	r3, [r7, #7]
 8008322:	011b      	lsls	r3, r3, #4
 8008324:	b25a      	sxtb	r2, r3
 8008326:	4b1f      	ldr	r3, [pc, #124]	; (80083a4 <LCD_Set_Command+0x9c>)
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	b25b      	sxtb	r3, r3
 800832c:	4013      	ands	r3, r2
 800832e:	b25b      	sxtb	r3, r3
 8008330:	b2da      	uxtb	r2, r3
 8008332:	4b1e      	ldr	r3, [pc, #120]	; (80083ac <LCD_Set_Command+0xa4>)
 8008334:	701a      	strb	r2, [r3, #0]
	
	//For backlight On/off
	data_M |= data_BL;
 8008336:	4b1c      	ldr	r3, [pc, #112]	; (80083a8 <LCD_Set_Command+0xa0>)
 8008338:	781a      	ldrb	r2, [r3, #0]
 800833a:	4b1d      	ldr	r3, [pc, #116]	; (80083b0 <LCD_Set_Command+0xa8>)
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	4313      	orrs	r3, r2
 8008340:	b2da      	uxtb	r2, r3
 8008342:	4b19      	ldr	r3, [pc, #100]	; (80083a8 <LCD_Set_Command+0xa0>)
 8008344:	701a      	strb	r2, [r3, #0]
	data_L |= data_BL;
 8008346:	4b19      	ldr	r3, [pc, #100]	; (80083ac <LCD_Set_Command+0xa4>)
 8008348:	781a      	ldrb	r2, [r3, #0]
 800834a:	4b19      	ldr	r3, [pc, #100]	; (80083b0 <LCD_Set_Command+0xa8>)
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	4313      	orrs	r3, r2
 8008350:	b2da      	uxtb	r2, r3
 8008352:	4b16      	ldr	r3, [pc, #88]	; (80083ac <LCD_Set_Command+0xa4>)
 8008354:	701a      	strb	r2, [r3, #0]
	
	data[0] = data_M | LCD_E;  //Enable E pin, RS=0
 8008356:	4b14      	ldr	r3, [pc, #80]	; (80083a8 <LCD_Set_Command+0xa0>)
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	f043 0304 	orr.w	r3, r3, #4
 800835e:	b2da      	uxtb	r2, r3
 8008360:	4b14      	ldr	r3, [pc, #80]	; (80083b4 <LCD_Set_Command+0xac>)
 8008362:	701a      	strb	r2, [r3, #0]
	data[1] = data_M;          //Disable E pin, RS=0
 8008364:	4b10      	ldr	r3, [pc, #64]	; (80083a8 <LCD_Set_Command+0xa0>)
 8008366:	781a      	ldrb	r2, [r3, #0]
 8008368:	4b12      	ldr	r3, [pc, #72]	; (80083b4 <LCD_Set_Command+0xac>)
 800836a:	705a      	strb	r2, [r3, #1]
	data[2] = data_L | LCD_E;
 800836c:	4b0f      	ldr	r3, [pc, #60]	; (80083ac <LCD_Set_Command+0xa4>)
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	f043 0304 	orr.w	r3, r3, #4
 8008374:	b2da      	uxtb	r2, r3
 8008376:	4b0f      	ldr	r3, [pc, #60]	; (80083b4 <LCD_Set_Command+0xac>)
 8008378:	709a      	strb	r2, [r3, #2]
  data[3] = data_L;
 800837a:	4b0c      	ldr	r3, [pc, #48]	; (80083ac <LCD_Set_Command+0xa4>)
 800837c:	781a      	ldrb	r2, [r3, #0]
 800837e:	4b0d      	ldr	r3, [pc, #52]	; (80083b4 <LCD_Set_Command+0xac>)
 8008380:	70da      	strb	r2, [r3, #3]
	
	hi2cx_define();	
 8008382:	f7ff ff97 	bl	80082b4 <hi2cx_define>
	HAL_I2C_Master_Transmit(&hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 8008386:	4b0c      	ldr	r3, [pc, #48]	; (80083b8 <LCD_Set_Command+0xb0>)
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	b299      	uxth	r1, r3
 800838c:	23c8      	movs	r3, #200	; 0xc8
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	2304      	movs	r3, #4
 8008392:	4a08      	ldr	r2, [pc, #32]	; (80083b4 <LCD_Set_Command+0xac>)
 8008394:	4809      	ldr	r0, [pc, #36]	; (80083bc <LCD_Set_Command+0xb4>)
 8008396:	f7f9 fe57 	bl	8002048 <HAL_I2C_Master_Transmit>
}
 800839a:	bf00      	nop
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	20000012 	.word	0x20000012
 80083a8:	200049c4 	.word	0x200049c4
 80083ac:	200049c5 	.word	0x200049c5
 80083b0:	200049c6 	.word	0x200049c6
 80083b4:	200049c0 	.word	0x200049c0
 80083b8:	20000011 	.word	0x20000011
 80083bc:	20004cbc 	.word	0x20004cbc

080083c0 <LCD_Write_Data>:
/**
*@brief: Write data to lcd.
*@retval: none
*/
void LCD_Write_Data(uint8_t datax)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af02      	add	r7, sp, #8
 80083c6:	4603      	mov	r3, r0
 80083c8:	71fb      	strb	r3, [r7, #7]
	data_M = datax & Mask_Data;        //Most significant bit
 80083ca:	4b27      	ldr	r3, [pc, #156]	; (8008468 <LCD_Write_Data+0xa8>)
 80083cc:	781a      	ldrb	r2, [r3, #0]
 80083ce:	79fb      	ldrb	r3, [r7, #7]
 80083d0:	4013      	ands	r3, r2
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	4b25      	ldr	r3, [pc, #148]	; (800846c <LCD_Write_Data+0xac>)
 80083d6:	701a      	strb	r2, [r3, #0]
	data_L = (datax << 4) & Mask_Data; //Least significant bit
 80083d8:	79fb      	ldrb	r3, [r7, #7]
 80083da:	011b      	lsls	r3, r3, #4
 80083dc:	b25a      	sxtb	r2, r3
 80083de:	4b22      	ldr	r3, [pc, #136]	; (8008468 <LCD_Write_Data+0xa8>)
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	b25b      	sxtb	r3, r3
 80083e4:	4013      	ands	r3, r2
 80083e6:	b25b      	sxtb	r3, r3
 80083e8:	b2da      	uxtb	r2, r3
 80083ea:	4b21      	ldr	r3, [pc, #132]	; (8008470 <LCD_Write_Data+0xb0>)
 80083ec:	701a      	strb	r2, [r3, #0]
	
	//For backlight On/off
	data_M |= data_BL;
 80083ee:	4b1f      	ldr	r3, [pc, #124]	; (800846c <LCD_Write_Data+0xac>)
 80083f0:	781a      	ldrb	r2, [r3, #0]
 80083f2:	4b20      	ldr	r3, [pc, #128]	; (8008474 <LCD_Write_Data+0xb4>)
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	b2da      	uxtb	r2, r3
 80083fa:	4b1c      	ldr	r3, [pc, #112]	; (800846c <LCD_Write_Data+0xac>)
 80083fc:	701a      	strb	r2, [r3, #0]
	data_L |= data_BL;
 80083fe:	4b1c      	ldr	r3, [pc, #112]	; (8008470 <LCD_Write_Data+0xb0>)
 8008400:	781a      	ldrb	r2, [r3, #0]
 8008402:	4b1c      	ldr	r3, [pc, #112]	; (8008474 <LCD_Write_Data+0xb4>)
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	4313      	orrs	r3, r2
 8008408:	b2da      	uxtb	r2, r3
 800840a:	4b19      	ldr	r3, [pc, #100]	; (8008470 <LCD_Write_Data+0xb0>)
 800840c:	701a      	strb	r2, [r3, #0]
	 	
	data[0] = data_M | LCD_E|LCD_RS;  //Enable E pin, RS=1
 800840e:	4b17      	ldr	r3, [pc, #92]	; (800846c <LCD_Write_Data+0xac>)
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	f043 0305 	orr.w	r3, r3, #5
 8008416:	b2da      	uxtb	r2, r3
 8008418:	4b17      	ldr	r3, [pc, #92]	; (8008478 <LCD_Write_Data+0xb8>)
 800841a:	701a      	strb	r2, [r3, #0]
	data[1] = data_M | LCD_RS;        //Disable E pin, RS=1
 800841c:	4b13      	ldr	r3, [pc, #76]	; (800846c <LCD_Write_Data+0xac>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	f043 0301 	orr.w	r3, r3, #1
 8008424:	b2da      	uxtb	r2, r3
 8008426:	4b14      	ldr	r3, [pc, #80]	; (8008478 <LCD_Write_Data+0xb8>)
 8008428:	705a      	strb	r2, [r3, #1]
	data[2] = data_L | LCD_E|LCD_RS;
 800842a:	4b11      	ldr	r3, [pc, #68]	; (8008470 <LCD_Write_Data+0xb0>)
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	f043 0305 	orr.w	r3, r3, #5
 8008432:	b2da      	uxtb	r2, r3
 8008434:	4b10      	ldr	r3, [pc, #64]	; (8008478 <LCD_Write_Data+0xb8>)
 8008436:	709a      	strb	r2, [r3, #2]
  data[3] = data_L | LCD_RS;  
 8008438:	4b0d      	ldr	r3, [pc, #52]	; (8008470 <LCD_Write_Data+0xb0>)
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	f043 0301 	orr.w	r3, r3, #1
 8008440:	b2da      	uxtb	r2, r3
 8008442:	4b0d      	ldr	r3, [pc, #52]	; (8008478 <LCD_Write_Data+0xb8>)
 8008444:	70da      	strb	r2, [r3, #3]
	
	hi2cx_define();
 8008446:	f7ff ff35 	bl	80082b4 <hi2cx_define>
	HAL_I2C_Master_Transmit(&hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 800844a:	4b0c      	ldr	r3, [pc, #48]	; (800847c <LCD_Write_Data+0xbc>)
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	b299      	uxth	r1, r3
 8008450:	23c8      	movs	r3, #200	; 0xc8
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	2304      	movs	r3, #4
 8008456:	4a08      	ldr	r2, [pc, #32]	; (8008478 <LCD_Write_Data+0xb8>)
 8008458:	4809      	ldr	r0, [pc, #36]	; (8008480 <LCD_Write_Data+0xc0>)
 800845a:	f7f9 fdf5 	bl	8002048 <HAL_I2C_Master_Transmit>
}
 800845e:	bf00      	nop
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	20000012 	.word	0x20000012
 800846c:	200049c4 	.word	0x200049c4
 8008470:	200049c5 	.word	0x200049c5
 8008474:	200049c6 	.word	0x200049c6
 8008478:	200049c0 	.word	0x200049c0
 800847c:	20000011 	.word	0x20000011
 8008480:	20004cbc 	.word	0x20004cbc

08008484 <LCD_Clear>:
/**
*@brief: Clear lcd display.
*@retval: none
*/
void LCD_Clear(void)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	af00      	add	r7, sp, #0
	LCD_Set_Command(LCD_CLEAR_DISPLAY);
 8008488:	2001      	movs	r0, #1
 800848a:	f7ff ff3d 	bl	8008308 <LCD_Set_Command>
	HAL_Delay(10);
 800848e:	200a      	movs	r0, #10
 8008490:	f7f8 fe24 	bl	80010dc <HAL_Delay>
	str_len = 0;
 8008494:	4b03      	ldr	r3, [pc, #12]	; (80084a4 <LCD_Clear+0x20>)
 8008496:	2200      	movs	r2, #0
 8008498:	701a      	strb	r2, [r3, #0]
	line_pos = 1;
 800849a:	4b03      	ldr	r3, [pc, #12]	; (80084a8 <LCD_Clear+0x24>)
 800849c:	2201      	movs	r2, #1
 800849e:	701a      	strb	r2, [r3, #0]
}
 80084a0:	bf00      	nop
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	200049c7 	.word	0x200049c7
 80084a8:	20000013 	.word	0x20000013

080084ac <LCD_SetCursor>:
*@brief: Set lcd cursor position.
*@param: line_x: line no, chr_x: character no.
*@retval: none
*/
void LCD_SetCursor(int line_x, int chr_x)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  line_pos = line_x; //hold line position.	
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	4b12      	ldr	r3, [pc, #72]	; (8008504 <LCD_SetCursor+0x58>)
 80084bc:	701a      	strb	r2, [r3, #0]
	
	if(((line_x >=1 && line_x <= line_MAX) && (chr_x >=1 && chr_x <= chr_MAX)))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	dd1b      	ble.n	80084fc <LCD_SetCursor+0x50>
 80084c4:	2302      	movs	r3, #2
 80084c6:	461a      	mov	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4293      	cmp	r3, r2
 80084cc:	dc16      	bgt.n	80084fc <LCD_SetCursor+0x50>
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	dd13      	ble.n	80084fc <LCD_SetCursor+0x50>
 80084d4:	2310      	movs	r3, #16
 80084d6:	461a      	mov	r2, r3
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	4293      	cmp	r3, r2
 80084dc:	dc0e      	bgt.n	80084fc <LCD_SetCursor+0x50>
	{		
		LCD_Set_Command(LCD_SET_DDRAMADDR | Cursor_Data[line_x - 1][chr_x - 1]);		
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	1e5a      	subs	r2, r3, #1
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	3b01      	subs	r3, #1
 80084e6:	4908      	ldr	r1, [pc, #32]	; (8008508 <LCD_SetCursor+0x5c>)
 80084e8:	0112      	lsls	r2, r2, #4
 80084ea:	440a      	add	r2, r1
 80084ec:	4413      	add	r3, r2
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7ff ff06 	bl	8008308 <LCD_Set_Command>
	}
}
 80084fc:	bf00      	nop
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	20000013 	.word	0x20000013
 8008508:	080097fc 	.word	0x080097fc

0800850c <LCD_Send_String>:
*@brief: Send string data to lcd.
*@param: str[]: string array, mode: str slide/noslide.
*@retval: none
*/
void LCD_Send_String(char str[], uint8_t mode)
{	 
 800850c:	b5b0      	push	{r4, r5, r7, lr}
 800850e:	b08a      	sub	sp, #40	; 0x28
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	460b      	mov	r3, r1
 8008516:	70fb      	strb	r3, [r7, #3]
 8008518:	466b      	mov	r3, sp
 800851a:	461d      	mov	r5, r3
	char *buffer[BFR_MAX];
 800851c:	2364      	movs	r3, #100	; 0x64
 800851e:	3b01      	subs	r3, #1
 8008520:	61fb      	str	r3, [r7, #28]
 8008522:	2364      	movs	r3, #100	; 0x64
 8008524:	b2d9      	uxtb	r1, r3
 8008526:	f04f 0200 	mov.w	r2, #0
 800852a:	f04f 0300 	mov.w	r3, #0
 800852e:	f04f 0400 	mov.w	r4, #0
 8008532:	0154      	lsls	r4, r2, #5
 8008534:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008538:	014b      	lsls	r3, r1, #5
 800853a:	2364      	movs	r3, #100	; 0x64
 800853c:	b2d9      	uxtb	r1, r3
 800853e:	f04f 0200 	mov.w	r2, #0
 8008542:	f04f 0300 	mov.w	r3, #0
 8008546:	f04f 0400 	mov.w	r4, #0
 800854a:	0154      	lsls	r4, r2, #5
 800854c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008550:	014b      	lsls	r3, r1, #5
 8008552:	2364      	movs	r3, #100	; 0x64
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	3303      	adds	r3, #3
 8008558:	3307      	adds	r3, #7
 800855a:	08db      	lsrs	r3, r3, #3
 800855c:	00db      	lsls	r3, r3, #3
 800855e:	ebad 0d03 	sub.w	sp, sp, r3
 8008562:	466b      	mov	r3, sp
 8008564:	3303      	adds	r3, #3
 8008566:	089b      	lsrs	r3, r3, #2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	61bb      	str	r3, [r7, #24]
	uint8_t i[4] = {chr_MAX,chr_MAX,chr_MAX,chr_MAX}; //i follows the ch position while sliding.
 800856c:	2310      	movs	r3, #16
 800856e:	743b      	strb	r3, [r7, #16]
 8008570:	2310      	movs	r3, #16
 8008572:	747b      	strb	r3, [r7, #17]
 8008574:	2310      	movs	r3, #16
 8008576:	74bb      	strb	r3, [r7, #18]
 8008578:	2310      	movs	r3, #16
 800857a:	74fb      	strb	r3, [r7, #19]
   uint8_t c[4] = {0, 0, 0, 0}; //c follows the each ch of the str buffer while sliding.
 800857c:	2300      	movs	r3, #0
 800857e:	60fb      	str	r3, [r7, #12]
   uint8_t ch_len = 0; //follow the string lenght.
 8008580:	2300      	movs	r3, #0
 8008582:	75fb      	strb	r3, [r7, #23]
  str_len = 0;
 8008584:	4b60      	ldr	r3, [pc, #384]	; (8008708 <LCD_Send_String+0x1fc>)
 8008586:	2200      	movs	r2, #0
 8008588:	701a      	strb	r2, [r3, #0]
	

	switch(mode)
 800858a:	78fb      	ldrb	r3, [r7, #3]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d01e      	beq.n	80085ce <LCD_Send_String+0xc2>
 8008590:	2b01      	cmp	r3, #1
 8008592:	d021      	beq.n	80085d8 <LCD_Send_String+0xcc>
 8008594:	e0b2      	b.n	80086fc <LCD_Send_String+0x1f0>
	{			
		case STR_NOSLIDE:
			
			while (*str) 
			{
				LCD_Write_Data (*str++);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	1c5a      	adds	r2, r3, #1
 800859a:	607a      	str	r2, [r7, #4]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	4618      	mov	r0, r3
 80085a0:	f7ff ff0e 	bl	80083c0 <LCD_Write_Data>
				str_len++;
 80085a4:	4b58      	ldr	r3, [pc, #352]	; (8008708 <LCD_Send_String+0x1fc>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	3301      	adds	r3, #1
 80085aa:	b2da      	uxtb	r2, r3
 80085ac:	4b56      	ldr	r3, [pc, #344]	; (8008708 <LCD_Send_String+0x1fc>)
 80085ae:	701a      	strb	r2, [r3, #0]
				if(str_len == chr_MAX)
 80085b0:	4b55      	ldr	r3, [pc, #340]	; (8008708 <LCD_Send_String+0x1fc>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	2210      	movs	r2, #16
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d109      	bne.n	80085ce <LCD_Send_String+0xc2>
				{
					LCD_SetCursor(line_pos + 1, 1);
 80085ba:	4b54      	ldr	r3, [pc, #336]	; (800870c <LCD_Send_String+0x200>)
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	3301      	adds	r3, #1
 80085c0:	2101      	movs	r1, #1
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7ff ff72 	bl	80084ac <LCD_SetCursor>
					str_len = 0;
 80085c8:	4b4f      	ldr	r3, [pc, #316]	; (8008708 <LCD_Send_String+0x1fc>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	701a      	strb	r2, [r3, #0]
			while (*str) 
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1df      	bne.n	8008596 <LCD_Send_String+0x8a>
				}			
			}	
			
			break;
 80085d6:	e091      	b.n	80086fc <LCD_Send_String+0x1f0>
		
		case STR_SLIDE:
		
		  for(int a = 0; a < BFR_MAX; a++)
 80085d8:	2300      	movs	r3, #0
 80085da:	623b      	str	r3, [r7, #32]
 80085dc:	e009      	b.n	80085f2 <LCD_Send_String+0xe6>
		  buffer[a]=str++;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	1c5a      	adds	r2, r3, #1
 80085e2:	607a      	str	r2, [r7, #4]
 80085e4:	69ba      	ldr	r2, [r7, #24]
 80085e6:	6a39      	ldr	r1, [r7, #32]
 80085e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		  for(int a = 0; a < BFR_MAX; a++)
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	3301      	adds	r3, #1
 80085f0:	623b      	str	r3, [r7, #32]
 80085f2:	2364      	movs	r3, #100	; 0x64
 80085f4:	461a      	mov	r2, r3
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	4293      	cmp	r3, r2
 80085fa:	dbf0      	blt.n	80085de <LCD_Send_String+0xd2>
						
			ch_len = strlen(*buffer);
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4618      	mov	r0, r3
 8008602:	f7f7 fe05 	bl	8000210 <strlen>
 8008606:	4603      	mov	r3, r0
 8008608:	75fb      	strb	r3, [r7, #23]
				 		
			LCD_SetCursor(line_pos, i[line_pos - 1]);	
 800860a:	4b40      	ldr	r3, [pc, #256]	; (800870c <LCD_Send_String+0x200>)
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	461a      	mov	r2, r3
 8008610:	4b3e      	ldr	r3, [pc, #248]	; (800870c <LCD_Send_String+0x200>)
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	3b01      	subs	r3, #1
 8008616:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800861a:	440b      	add	r3, r1
 800861c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8008620:	4619      	mov	r1, r3
 8008622:	4610      	mov	r0, r2
 8008624:	f7ff ff42 	bl	80084ac <LCD_SetCursor>
				  			
			for(int k = c[line_pos - 1];k < ch_len; k++) 
 8008628:	4b38      	ldr	r3, [pc, #224]	; (800870c <LCD_Send_String+0x200>)
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	3b01      	subs	r3, #1
 800862e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008632:	4413      	add	r3, r2
 8008634:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8008638:	627b      	str	r3, [r7, #36]	; 0x24
 800863a:	e00a      	b.n	8008652 <LCD_Send_String+0x146>
			LCD_Write_Data (*buffer[k]);
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	4618      	mov	r0, r3
 8008648:	f7ff feba 	bl	80083c0 <LCD_Write_Data>
			for(int k = c[line_pos - 1];k < ch_len; k++) 
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	3301      	adds	r3, #1
 8008650:	627b      	str	r3, [r7, #36]	; 0x24
 8008652:	7dfb      	ldrb	r3, [r7, #23]
 8008654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008656:	429a      	cmp	r2, r3
 8008658:	dbf0      	blt.n	800863c <LCD_Send_String+0x130>
								
			i[line_pos - 1]--;
 800865a:	4b2c      	ldr	r3, [pc, #176]	; (800870c <LCD_Send_String+0x200>)
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	3b01      	subs	r3, #1
 8008660:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008664:	441a      	add	r2, r3
 8008666:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800866a:	3a01      	subs	r2, #1
 800866c:	b2d2      	uxtb	r2, r2
 800866e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008672:	440b      	add	r3, r1
 8008674:	f803 2c18 	strb.w	r2, [r3, #-24]
      
			if(i[line_pos -1] == 0)
 8008678:	4b24      	ldr	r3, [pc, #144]	; (800870c <LCD_Send_String+0x200>)
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	3b01      	subs	r3, #1
 800867e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008682:	4413      	add	r3, r2
 8008684:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d136      	bne.n	80086fa <LCD_Send_String+0x1ee>
			{
				i[line_pos - 1] = 1;
 800868c:	4b1f      	ldr	r3, [pc, #124]	; (800870c <LCD_Send_String+0x200>)
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	3b01      	subs	r3, #1
 8008692:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008696:	4413      	add	r3, r2
 8008698:	2201      	movs	r2, #1
 800869a:	f803 2c18 	strb.w	r2, [r3, #-24]
				c[line_pos - 1]++;
 800869e:	4b1b      	ldr	r3, [pc, #108]	; (800870c <LCD_Send_String+0x200>)
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	3b01      	subs	r3, #1
 80086a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80086a8:	441a      	add	r2, r3
 80086aa:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80086ae:	3201      	adds	r2, #1
 80086b0:	b2d2      	uxtb	r2, r2
 80086b2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80086b6:	440b      	add	r3, r1
 80086b8:	f803 2c1c 	strb.w	r2, [r3, #-28]
        if(c[line_pos - 1] == ch_len)
 80086bc:	4b13      	ldr	r3, [pc, #76]	; (800870c <LCD_Send_String+0x200>)
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	3b01      	subs	r3, #1
 80086c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80086c6:	4413      	add	r3, r2
 80086c8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80086cc:	7dfa      	ldrb	r2, [r7, #23]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d113      	bne.n	80086fa <LCD_Send_String+0x1ee>
					{					
						i[line_pos - 1] = chr_MAX;
 80086d2:	4b0e      	ldr	r3, [pc, #56]	; (800870c <LCD_Send_String+0x200>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	3b01      	subs	r3, #1
 80086d8:	2210      	movs	r2, #16
 80086da:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80086de:	440b      	add	r3, r1
 80086e0:	f803 2c18 	strb.w	r2, [r3, #-24]
						c[line_pos - 1] = 0;
 80086e4:	4b09      	ldr	r3, [pc, #36]	; (800870c <LCD_Send_String+0x200>)
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	3b01      	subs	r3, #1
 80086ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80086ee:	4413      	add	r3, r2
 80086f0:	2200      	movs	r2, #0
 80086f2:	f803 2c1c 	strb.w	r2, [r3, #-28]
						ch_len = 0;						
 80086f6:	2300      	movs	r3, #0
 80086f8:	75fb      	strb	r3, [r7, #23]
					}												
			}
		 			
			break;	 
 80086fa:	bf00      	nop
 80086fc:	46ad      	mov	sp, r5
	}	
}
 80086fe:	bf00      	nop
 8008700:	3728      	adds	r7, #40	; 0x28
 8008702:	46bd      	mov	sp, r7
 8008704:	bdb0      	pop	{r4, r5, r7, pc}
 8008706:	bf00      	nop
 8008708:	200049c7 	.word	0x200049c7
 800870c:	20000013 	.word	0x20000013

08008710 <LCD_BackLight>:
*@brief: Backlight control
*@param: light_state: BL on/off
*@retval: none
*/
void LCD_BackLight(uint8_t light_state)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	4603      	mov	r3, r0
 8008718:	71fb      	strb	r3, [r7, #7]
	if(light_state == LCD_BL_ON)
 800871a:	79fb      	ldrb	r3, [r7, #7]
 800871c:	2b08      	cmp	r3, #8
 800871e:	d106      	bne.n	800872e <LCD_BackLight+0x1e>
	{
    data_BL = LCD_BL_ON;		
 8008720:	4b09      	ldr	r3, [pc, #36]	; (8008748 <LCD_BackLight+0x38>)
 8008722:	2208      	movs	r2, #8
 8008724:	701a      	strb	r2, [r3, #0]
		LCD_Write_Data(0x20); //Empty character
 8008726:	2020      	movs	r0, #32
 8008728:	f7ff fe4a 	bl	80083c0 <LCD_Write_Data>
	else if (light_state == LCD_BL_OFF)
	{
		data_BL = LCD_BL_OFF;
		LCD_Write_Data(0x20);
	}
}
 800872c:	e008      	b.n	8008740 <LCD_BackLight+0x30>
	else if (light_state == LCD_BL_OFF)
 800872e:	79fb      	ldrb	r3, [r7, #7]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d105      	bne.n	8008740 <LCD_BackLight+0x30>
		data_BL = LCD_BL_OFF;
 8008734:	4b04      	ldr	r3, [pc, #16]	; (8008748 <LCD_BackLight+0x38>)
 8008736:	2200      	movs	r2, #0
 8008738:	701a      	strb	r2, [r3, #0]
		LCD_Write_Data(0x20);
 800873a:	2020      	movs	r0, #32
 800873c:	f7ff fe40 	bl	80083c0 <LCD_Write_Data>
}
 8008740:	bf00      	nop
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	200049c6 	.word	0x200049c6

0800874c <LCD_Init>:
/**
*@brief: Lcd initiliazing settings.
*@retval: none
*/
void LCD_Init(void)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	af00      	add	r7, sp, #0
	LCD_Set_Command(LCD_CLEAR_DISPLAY);
 8008750:	2001      	movs	r0, #1
 8008752:	f7ff fdd9 	bl	8008308 <LCD_Set_Command>
	HAL_Delay(1000);
 8008756:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800875a:	f7f8 fcbf 	bl	80010dc <HAL_Delay>
	LCD_Set_Command(LCD_RETURN_HOME);
 800875e:	2002      	movs	r0, #2
 8008760:	f7ff fdd2 	bl	8008308 <LCD_Set_Command>
	HAL_Delay(5);
 8008764:	2005      	movs	r0, #5
 8008766:	f7f8 fcb9 	bl	80010dc <HAL_Delay>
	LCD_Set_Command(LCD_FUNCTION_SET|MODE_4B|MODE_2L|MODE_5X8_DOTS);
 800876a:	2028      	movs	r0, #40	; 0x28
 800876c:	f7ff fdcc 	bl	8008308 <LCD_Set_Command>
	HAL_Delay(5);
 8008770:	2005      	movs	r0, #5
 8008772:	f7f8 fcb3 	bl	80010dc <HAL_Delay>
	LCD_Set_Command(LCD_DISPLAY_CONTROL|DISPLAY_ON|CURSOR_OFF|BLINK_OFF);
 8008776:	200c      	movs	r0, #12
 8008778:	f7ff fdc6 	bl	8008308 <LCD_Set_Command>
	HAL_Delay(5);
 800877c:	2005      	movs	r0, #5
 800877e:	f7f8 fcad 	bl	80010dc <HAL_Delay>
	LCD_Set_Command(LCD_SET_DDRAMADDR);
 8008782:	2080      	movs	r0, #128	; 0x80
 8008784:	f7ff fdc0 	bl	8008308 <LCD_Set_Command>
	HAL_Delay(500);
 8008788:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800878c:	f7f8 fca6 	bl	80010dc <HAL_Delay>
}
 8008790:	bf00      	nop
 8008792:	bd80      	pop	{r7, pc}

08008794 <MDI_writeSmallData>:
 * @brief Write small data to Motor Driver
 * @param uartChannel -> get uart channel
 * @param data -> data to write
 * @return none
 */
static void MDI_writeSmallData(UART_HandleTypeDef *uartChannel, uint8_t data) {
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	460b      	mov	r3, r1
 800879e:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(uartChannel, (uint8_t*) &data, sizeof(data), TIMEOUTVAL);
 80087a0:	1cf9      	adds	r1, r7, #3
 80087a2:	230a      	movs	r3, #10
 80087a4:	2201      	movs	r2, #1
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7fb fdc8 	bl	800433c <HAL_UART_Transmit>
}
 80087ac:	bf00      	nop
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <MDI_sendDataChannel1Ver2>:
 * @param kd -> get Pid kd value
 * @param factor -> get factor of Pid elements
 * @return none
 */
void MDI_sendDataChannel1Ver2(uint16_t angleVal, uint8_t kp, uint8_t ki,
		uint8_t kd, uint8_t factor) {
 80087b4:	b590      	push	{r4, r7, lr}
 80087b6:	b089      	sub	sp, #36	; 0x24
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	4604      	mov	r4, r0
 80087bc:	4608      	mov	r0, r1
 80087be:	4611      	mov	r1, r2
 80087c0:	461a      	mov	r2, r3
 80087c2:	4623      	mov	r3, r4
 80087c4:	80fb      	strh	r3, [r7, #6]
 80087c6:	4603      	mov	r3, r0
 80087c8:	717b      	strb	r3, [r7, #5]
 80087ca:	460b      	mov	r3, r1
 80087cc:	713b      	strb	r3, [r7, #4]
 80087ce:	4613      	mov	r3, r2
 80087d0:	70fb      	strb	r3, [r7, #3]
	uint16_t checksumTmp = 0;
 80087d2:	2300      	movs	r3, #0
 80087d4:	83bb      	strh	r3, [r7, #28]
	uint8_t tmpArr[] = { angleVal >> 8, angleVal & 0xFF };
 80087d6:	88fb      	ldrh	r3, [r7, #6]
 80087d8:	0a1b      	lsrs	r3, r3, #8
 80087da:	b29b      	uxth	r3, r3
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	763b      	strb	r3, [r7, #24]
 80087e0:	88fb      	ldrh	r3, [r7, #6]
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	767b      	strb	r3, [r7, #25]
	checksumTmp += tmpArr[0];
 80087e6:	7e3b      	ldrb	r3, [r7, #24]
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	8bbb      	ldrh	r3, [r7, #28]
 80087ec:	4413      	add	r3, r2
 80087ee:	83bb      	strh	r3, [r7, #28]
	checksumTmp += tmpArr[1];
 80087f0:	7e7b      	ldrb	r3, [r7, #25]
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	8bbb      	ldrh	r3, [r7, #28]
 80087f6:	4413      	add	r3, r2
 80087f8:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kp;
 80087fa:	797b      	ldrb	r3, [r7, #5]
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	8bbb      	ldrh	r3, [r7, #28]
 8008800:	4413      	add	r3, r2
 8008802:	83bb      	strh	r3, [r7, #28]
	checksumTmp += ki;
 8008804:	793b      	ldrb	r3, [r7, #4]
 8008806:	b29a      	uxth	r2, r3
 8008808:	8bbb      	ldrh	r3, [r7, #28]
 800880a:	4413      	add	r3, r2
 800880c:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kd;
 800880e:	78fb      	ldrb	r3, [r7, #3]
 8008810:	b29a      	uxth	r2, r3
 8008812:	8bbb      	ldrh	r3, [r7, #28]
 8008814:	4413      	add	r3, r2
 8008816:	83bb      	strh	r3, [r7, #28]
	checksumTmp += factor;
 8008818:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800881c:	b29a      	uxth	r2, r3
 800881e:	8bbb      	ldrh	r3, [r7, #28]
 8008820:	4413      	add	r3, r2
 8008822:	83bb      	strh	r3, [r7, #28]
	uint8_t tmp = checksumTmp % 256;
 8008824:	8bbb      	ldrh	r3, [r7, #28]
 8008826:	76fb      	strb	r3, [r7, #27]
	uint8_t tmpComp = ~tmp;
 8008828:	7efb      	ldrb	r3, [r7, #27]
 800882a:	43db      	mvns	r3, r3
 800882c:	76bb      	strb	r3, [r7, #26]
	uint8_t sendBuff[10] = { 0XFF, 0XFF, tmpArr[0], tmpArr[1], kp, ki, kd,
 800882e:	23ff      	movs	r3, #255	; 0xff
 8008830:	733b      	strb	r3, [r7, #12]
 8008832:	23ff      	movs	r3, #255	; 0xff
 8008834:	737b      	strb	r3, [r7, #13]
 8008836:	7e3b      	ldrb	r3, [r7, #24]
 8008838:	73bb      	strb	r3, [r7, #14]
 800883a:	7e7b      	ldrb	r3, [r7, #25]
 800883c:	73fb      	strb	r3, [r7, #15]
 800883e:	797b      	ldrb	r3, [r7, #5]
 8008840:	743b      	strb	r3, [r7, #16]
 8008842:	793b      	ldrb	r3, [r7, #4]
 8008844:	747b      	strb	r3, [r7, #17]
 8008846:	78fb      	ldrb	r3, [r7, #3]
 8008848:	74bb      	strb	r3, [r7, #18]
 800884a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800884e:	74fb      	strb	r3, [r7, #19]
 8008850:	7efb      	ldrb	r3, [r7, #27]
 8008852:	753b      	strb	r3, [r7, #20]
 8008854:	7ebb      	ldrb	r3, [r7, #26]
 8008856:	757b      	strb	r3, [r7, #21]
			factor, tmp, tmpComp };
	for (uint8_t counter = 0; counter < 10; counter++) {
 8008858:	2300      	movs	r3, #0
 800885a:	77fb      	strb	r3, [r7, #31]
 800885c:	e00f      	b.n	800887e <MDI_sendDataChannel1Ver2+0xca>
		MDI_writeSmallData(&MDI_channel1, sendBuff[counter]);
 800885e:	7ffb      	ldrb	r3, [r7, #31]
 8008860:	f107 0220 	add.w	r2, r7, #32
 8008864:	4413      	add	r3, r2
 8008866:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800886a:	4619      	mov	r1, r3
 800886c:	4807      	ldr	r0, [pc, #28]	; (800888c <MDI_sendDataChannel1Ver2+0xd8>)
 800886e:	f7ff ff91 	bl	8008794 <MDI_writeSmallData>
		vTaskDelay(50);
 8008872:	2032      	movs	r0, #50	; 0x32
 8008874:	f7fd fb46 	bl	8005f04 <vTaskDelay>
	for (uint8_t counter = 0; counter < 10; counter++) {
 8008878:	7ffb      	ldrb	r3, [r7, #31]
 800887a:	3301      	adds	r3, #1
 800887c:	77fb      	strb	r3, [r7, #31]
 800887e:	7ffb      	ldrb	r3, [r7, #31]
 8008880:	2b09      	cmp	r3, #9
 8008882:	d9ec      	bls.n	800885e <MDI_sendDataChannel1Ver2+0xaa>
	}
}
 8008884:	bf00      	nop
 8008886:	3724      	adds	r7, #36	; 0x24
 8008888:	46bd      	mov	sp, r7
 800888a:	bd90      	pop	{r4, r7, pc}
 800888c:	20004b50 	.word	0x20004b50

08008890 <MDI_getDataChannel1Ver3>:
/**
 * @brief get to Motor Driver 1 values
 * @return none
 */
static uint8_t tmpArr1[10];
void MDI_getDataChannel1Ver3(void) {
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
	volatile UART_HandleTypeDef *tmpHandle;
	tmpHandle= &MDI_channel1;
 8008896:	4b4b      	ldr	r3, [pc, #300]	; (80089c4 <MDI_getDataChannel1Ver3+0x134>)
 8008898:	60bb      	str	r3, [r7, #8]
	static uint8_t counter=0,getTmp=0,getTmpBeff=0;
	if((tmpHandle->Instance->ISR & USART_ISR_RXNE) != 0){
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	69db      	ldr	r3, [r3, #28]
 80088a0:	f003 0320 	and.w	r3, r3, #32
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d07a      	beq.n	800899e <MDI_getDataChannel1Ver3+0x10e>
		getTmp = tmpHandle->Instance->RDR;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ae:	b2da      	uxtb	r2, r3
 80088b0:	4b45      	ldr	r3, [pc, #276]	; (80089c8 <MDI_getDataChannel1Ver3+0x138>)
 80088b2:	701a      	strb	r2, [r3, #0]
		if(0xFF ==getTmp && 0xFF ==getTmpBeff){
 80088b4:	4b44      	ldr	r3, [pc, #272]	; (80089c8 <MDI_getDataChannel1Ver3+0x138>)
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	2bff      	cmp	r3, #255	; 0xff
 80088ba:	d10c      	bne.n	80088d6 <MDI_getDataChannel1Ver3+0x46>
 80088bc:	4b43      	ldr	r3, [pc, #268]	; (80089cc <MDI_getDataChannel1Ver3+0x13c>)
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	2bff      	cmp	r3, #255	; 0xff
 80088c2:	d108      	bne.n	80088d6 <MDI_getDataChannel1Ver3+0x46>
			tmpArr1[0]=0xFF;
 80088c4:	4b42      	ldr	r3, [pc, #264]	; (80089d0 <MDI_getDataChannel1Ver3+0x140>)
 80088c6:	22ff      	movs	r2, #255	; 0xff
 80088c8:	701a      	strb	r2, [r3, #0]
			tmpArr1[1]=0xFF;
 80088ca:	4b41      	ldr	r3, [pc, #260]	; (80089d0 <MDI_getDataChannel1Ver3+0x140>)
 80088cc:	22ff      	movs	r2, #255	; 0xff
 80088ce:	705a      	strb	r2, [r3, #1]
			counter=1;
 80088d0:	4b40      	ldr	r3, [pc, #256]	; (80089d4 <MDI_getDataChannel1Ver3+0x144>)
 80088d2:	2201      	movs	r2, #1
 80088d4:	701a      	strb	r2, [r3, #0]
		}
		tmpArr1[counter]=getTmp;
 80088d6:	4b3f      	ldr	r3, [pc, #252]	; (80089d4 <MDI_getDataChannel1Ver3+0x144>)
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	461a      	mov	r2, r3
 80088dc:	4b3a      	ldr	r3, [pc, #232]	; (80089c8 <MDI_getDataChannel1Ver3+0x138>)
 80088de:	7819      	ldrb	r1, [r3, #0]
 80088e0:	4b3b      	ldr	r3, [pc, #236]	; (80089d0 <MDI_getDataChannel1Ver3+0x140>)
 80088e2:	5499      	strb	r1, [r3, r2]
		getTmpBeff=getTmp;
 80088e4:	4b38      	ldr	r3, [pc, #224]	; (80089c8 <MDI_getDataChannel1Ver3+0x138>)
 80088e6:	781a      	ldrb	r2, [r3, #0]
 80088e8:	4b38      	ldr	r3, [pc, #224]	; (80089cc <MDI_getDataChannel1Ver3+0x13c>)
 80088ea:	701a      	strb	r2, [r3, #0]
		counter++;
 80088ec:	4b39      	ldr	r3, [pc, #228]	; (80089d4 <MDI_getDataChannel1Ver3+0x144>)
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	3301      	adds	r3, #1
 80088f2:	b2da      	uxtb	r2, r3
 80088f4:	4b37      	ldr	r3, [pc, #220]	; (80089d4 <MDI_getDataChannel1Ver3+0x144>)
 80088f6:	701a      	strb	r2, [r3, #0]
		if(counter>9){
 80088f8:	4b36      	ldr	r3, [pc, #216]	; (80089d4 <MDI_getDataChannel1Ver3+0x144>)
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	2b09      	cmp	r3, #9
 80088fe:	d93f      	bls.n	8008980 <MDI_getDataChannel1Ver3+0xf0>
			counter=0;
 8008900:	4b34      	ldr	r3, [pc, #208]	; (80089d4 <MDI_getDataChannel1Ver3+0x144>)
 8008902:	2200      	movs	r2, #0
 8008904:	701a      	strb	r2, [r3, #0]
			 uint16_t checksumTmp = 0;
 8008906:	2300      	movs	r3, #0
 8008908:	81fb      	strh	r3, [r7, #14]
			for (uint8_t c = 2; c < 8; c++)checksumTmp += tmpArr1[c];
 800890a:	2302      	movs	r3, #2
 800890c:	737b      	strb	r3, [r7, #13]
 800890e:	e009      	b.n	8008924 <MDI_getDataChannel1Ver3+0x94>
 8008910:	7b7b      	ldrb	r3, [r7, #13]
 8008912:	4a2f      	ldr	r2, [pc, #188]	; (80089d0 <MDI_getDataChannel1Ver3+0x140>)
 8008914:	5cd3      	ldrb	r3, [r2, r3]
 8008916:	b29a      	uxth	r2, r3
 8008918:	89fb      	ldrh	r3, [r7, #14]
 800891a:	4413      	add	r3, r2
 800891c:	81fb      	strh	r3, [r7, #14]
 800891e:	7b7b      	ldrb	r3, [r7, #13]
 8008920:	3301      	adds	r3, #1
 8008922:	737b      	strb	r3, [r7, #13]
 8008924:	7b7b      	ldrb	r3, [r7, #13]
 8008926:	2b07      	cmp	r3, #7
 8008928:	d9f2      	bls.n	8008910 <MDI_getDataChannel1Ver3+0x80>
			uint8_t tmp = checksumTmp % 256;
 800892a:	89fb      	ldrh	r3, [r7, #14]
 800892c:	71fb      	strb	r3, [r7, #7]
			uint8_t tmpComp = ~tmp;
 800892e:	79fb      	ldrb	r3, [r7, #7]
 8008930:	43db      	mvns	r3, r3
 8008932:	71bb      	strb	r3, [r7, #6]
			if (tmp == tmpArr1[8] && tmpComp == tmpArr1[9]) {
 8008934:	4b26      	ldr	r3, [pc, #152]	; (80089d0 <MDI_getDataChannel1Ver3+0x140>)
 8008936:	7a1b      	ldrb	r3, [r3, #8]
 8008938:	79fa      	ldrb	r2, [r7, #7]
 800893a:	429a      	cmp	r2, r3
 800893c:	d120      	bne.n	8008980 <MDI_getDataChannel1Ver3+0xf0>
 800893e:	4b24      	ldr	r3, [pc, #144]	; (80089d0 <MDI_getDataChannel1Ver3+0x140>)
 8008940:	7a5b      	ldrb	r3, [r3, #9]
 8008942:	79ba      	ldrb	r2, [r7, #6]
 8008944:	429a      	cmp	r2, r3
 8008946:	d11b      	bne.n	8008980 <MDI_getDataChannel1Ver3+0xf0>
			driver1.angle = ((uint16_t) tmpArr1[2] << 8) | tmpArr1[3];
 8008948:	4b21      	ldr	r3, [pc, #132]	; (80089d0 <MDI_getDataChannel1Ver3+0x140>)
 800894a:	789b      	ldrb	r3, [r3, #2]
 800894c:	021b      	lsls	r3, r3, #8
 800894e:	b21a      	sxth	r2, r3
 8008950:	4b1f      	ldr	r3, [pc, #124]	; (80089d0 <MDI_getDataChannel1Ver3+0x140>)
 8008952:	78db      	ldrb	r3, [r3, #3]
 8008954:	b21b      	sxth	r3, r3
 8008956:	4313      	orrs	r3, r2
 8008958:	b21b      	sxth	r3, r3
 800895a:	b29a      	uxth	r2, r3
 800895c:	4b1e      	ldr	r3, [pc, #120]	; (80089d8 <MDI_getDataChannel1Ver3+0x148>)
 800895e:	809a      	strh	r2, [r3, #4]
			driver1.pid_kp = tmpArr1[4];
 8008960:	4b1b      	ldr	r3, [pc, #108]	; (80089d0 <MDI_getDataChannel1Ver3+0x140>)
 8008962:	791a      	ldrb	r2, [r3, #4]
 8008964:	4b1c      	ldr	r3, [pc, #112]	; (80089d8 <MDI_getDataChannel1Ver3+0x148>)
 8008966:	709a      	strb	r2, [r3, #2]
			driver1.pid_ki = tmpArr1[5];
 8008968:	4b19      	ldr	r3, [pc, #100]	; (80089d0 <MDI_getDataChannel1Ver3+0x140>)
 800896a:	795a      	ldrb	r2, [r3, #5]
 800896c:	4b1a      	ldr	r3, [pc, #104]	; (80089d8 <MDI_getDataChannel1Ver3+0x148>)
 800896e:	705a      	strb	r2, [r3, #1]
			driver1.pid_kd = tmpArr1[6];
 8008970:	4b17      	ldr	r3, [pc, #92]	; (80089d0 <MDI_getDataChannel1Ver3+0x140>)
 8008972:	799a      	ldrb	r2, [r3, #6]
 8008974:	4b18      	ldr	r3, [pc, #96]	; (80089d8 <MDI_getDataChannel1Ver3+0x148>)
 8008976:	701a      	strb	r2, [r3, #0]
			driver1.factor = tmpArr1[7];
 8008978:	4b15      	ldr	r3, [pc, #84]	; (80089d0 <MDI_getDataChannel1Ver3+0x140>)
 800897a:	79da      	ldrb	r2, [r3, #7]
 800897c:	4b16      	ldr	r3, [pc, #88]	; (80089d8 <MDI_getDataChannel1Ver3+0x148>)
 800897e:	70da      	strb	r2, [r3, #3]
		}
		}
		 __HAL_UART_CLEAR_FLAG(tmpHandle, UART_CLEAR_RTOF);
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008988:	621a      	str	r2, [r3, #32]
			tmpHandle->RxState=HAL_UART_STATE_READY;
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	2220      	movs	r2, #32
 800898e:	679a      	str	r2, [r3, #120]	; 0x78
			tmpHandle->ErrorCode = HAL_UART_ERROR_NONE;
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	2200      	movs	r2, #0
 8008994:	67da      	str	r2, [r3, #124]	; 0x7c
			SET_BIT(tmpHandle->Instance->RDR,0);
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800899c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if((tmpHandle->Instance->ISR & USART_ISR_ORE) != 0){
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	69db      	ldr	r3, [r3, #28]
 80089a4:	f003 0308 	and.w	r3, r3, #8
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d005      	beq.n	80089b8 <MDI_getDataChannel1Ver3+0x128>

		 tmpHandle->Instance->ICR |= USART_ICR_ORECF;
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6a1a      	ldr	r2, [r3, #32]
 80089b2:	f042 0208 	orr.w	r2, r2, #8
 80089b6:	621a      	str	r2, [r3, #32]
	}
}
 80089b8:	bf00      	nop
 80089ba:	3714      	adds	r7, #20
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr
 80089c4:	20004b50 	.word	0x20004b50
 80089c8:	200049de 	.word	0x200049de
 80089cc:	200049df 	.word	0x200049df
 80089d0:	200049c8 	.word	0x200049c8
 80089d4:	200049e0 	.word	0x200049e0
 80089d8:	20004d10 	.word	0x20004d10

080089dc <MDI_sendDataChannel2Ver2>:
 * @param kd -> get Pid kd value
 * @param factor -> get factor of Pid elements
 * @return none
 */
void MDI_sendDataChannel2Ver2(uint16_t angleVal, uint8_t kp, uint8_t ki,
		uint8_t kd, uint8_t factor) {
 80089dc:	b590      	push	{r4, r7, lr}
 80089de:	b089      	sub	sp, #36	; 0x24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	4604      	mov	r4, r0
 80089e4:	4608      	mov	r0, r1
 80089e6:	4611      	mov	r1, r2
 80089e8:	461a      	mov	r2, r3
 80089ea:	4623      	mov	r3, r4
 80089ec:	80fb      	strh	r3, [r7, #6]
 80089ee:	4603      	mov	r3, r0
 80089f0:	717b      	strb	r3, [r7, #5]
 80089f2:	460b      	mov	r3, r1
 80089f4:	713b      	strb	r3, [r7, #4]
 80089f6:	4613      	mov	r3, r2
 80089f8:	70fb      	strb	r3, [r7, #3]
	uint16_t checksumTmp = 0;
 80089fa:	2300      	movs	r3, #0
 80089fc:	83bb      	strh	r3, [r7, #28]
	uint8_t tmpArr[] = { angleVal >> 8, angleVal & 0xFF };
 80089fe:	88fb      	ldrh	r3, [r7, #6]
 8008a00:	0a1b      	lsrs	r3, r3, #8
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	763b      	strb	r3, [r7, #24]
 8008a08:	88fb      	ldrh	r3, [r7, #6]
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	767b      	strb	r3, [r7, #25]
	checksumTmp += tmpArr[0];
 8008a0e:	7e3b      	ldrb	r3, [r7, #24]
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	8bbb      	ldrh	r3, [r7, #28]
 8008a14:	4413      	add	r3, r2
 8008a16:	83bb      	strh	r3, [r7, #28]
	checksumTmp += tmpArr[1];
 8008a18:	7e7b      	ldrb	r3, [r7, #25]
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	8bbb      	ldrh	r3, [r7, #28]
 8008a1e:	4413      	add	r3, r2
 8008a20:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kp;
 8008a22:	797b      	ldrb	r3, [r7, #5]
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	8bbb      	ldrh	r3, [r7, #28]
 8008a28:	4413      	add	r3, r2
 8008a2a:	83bb      	strh	r3, [r7, #28]
	checksumTmp += ki;
 8008a2c:	793b      	ldrb	r3, [r7, #4]
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	8bbb      	ldrh	r3, [r7, #28]
 8008a32:	4413      	add	r3, r2
 8008a34:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kd;
 8008a36:	78fb      	ldrb	r3, [r7, #3]
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	8bbb      	ldrh	r3, [r7, #28]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	83bb      	strh	r3, [r7, #28]
	checksumTmp += factor;
 8008a40:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	8bbb      	ldrh	r3, [r7, #28]
 8008a48:	4413      	add	r3, r2
 8008a4a:	83bb      	strh	r3, [r7, #28]
	uint8_t tmp = checksumTmp % 256;
 8008a4c:	8bbb      	ldrh	r3, [r7, #28]
 8008a4e:	76fb      	strb	r3, [r7, #27]
	uint8_t tmpComp = ~tmp;
 8008a50:	7efb      	ldrb	r3, [r7, #27]
 8008a52:	43db      	mvns	r3, r3
 8008a54:	76bb      	strb	r3, [r7, #26]
	uint8_t sendBuff[10] = { 0XFF, 0XFF, tmpArr[0], tmpArr[1], kp, ki, kd,
 8008a56:	23ff      	movs	r3, #255	; 0xff
 8008a58:	733b      	strb	r3, [r7, #12]
 8008a5a:	23ff      	movs	r3, #255	; 0xff
 8008a5c:	737b      	strb	r3, [r7, #13]
 8008a5e:	7e3b      	ldrb	r3, [r7, #24]
 8008a60:	73bb      	strb	r3, [r7, #14]
 8008a62:	7e7b      	ldrb	r3, [r7, #25]
 8008a64:	73fb      	strb	r3, [r7, #15]
 8008a66:	797b      	ldrb	r3, [r7, #5]
 8008a68:	743b      	strb	r3, [r7, #16]
 8008a6a:	793b      	ldrb	r3, [r7, #4]
 8008a6c:	747b      	strb	r3, [r7, #17]
 8008a6e:	78fb      	ldrb	r3, [r7, #3]
 8008a70:	74bb      	strb	r3, [r7, #18]
 8008a72:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008a76:	74fb      	strb	r3, [r7, #19]
 8008a78:	7efb      	ldrb	r3, [r7, #27]
 8008a7a:	753b      	strb	r3, [r7, #20]
 8008a7c:	7ebb      	ldrb	r3, [r7, #26]
 8008a7e:	757b      	strb	r3, [r7, #21]
			factor, tmp, tmpComp };
	for (uint8_t counter = 0; counter < 10; counter++) {
 8008a80:	2300      	movs	r3, #0
 8008a82:	77fb      	strb	r3, [r7, #31]
 8008a84:	e00f      	b.n	8008aa6 <MDI_sendDataChannel2Ver2+0xca>
		MDI_writeSmallData(&MDI_channel2, sendBuff[counter]);
 8008a86:	7ffb      	ldrb	r3, [r7, #31]
 8008a88:	f107 0220 	add.w	r2, r7, #32
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8008a92:	4619      	mov	r1, r3
 8008a94:	4807      	ldr	r0, [pc, #28]	; (8008ab4 <MDI_sendDataChannel2Ver2+0xd8>)
 8008a96:	f7ff fe7d 	bl	8008794 <MDI_writeSmallData>
		vTaskDelay(50);
 8008a9a:	2032      	movs	r0, #50	; 0x32
 8008a9c:	f7fd fa32 	bl	8005f04 <vTaskDelay>
	for (uint8_t counter = 0; counter < 10; counter++) {
 8008aa0:	7ffb      	ldrb	r3, [r7, #31]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	77fb      	strb	r3, [r7, #31]
 8008aa6:	7ffb      	ldrb	r3, [r7, #31]
 8008aa8:	2b09      	cmp	r3, #9
 8008aaa:	d9ec      	bls.n	8008a86 <MDI_sendDataChannel2Ver2+0xaa>
	}
}
 8008aac:	bf00      	nop
 8008aae:	3724      	adds	r7, #36	; 0x24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd90      	pop	{r4, r7, pc}
 8008ab4:	200049f4 	.word	0x200049f4

08008ab8 <MDI_getDataChannel2Ver3>:
/**
 * @brief get to Motor Driver 2 values
 * @return none
 */
static uint8_t tmpArr2[10];
void MDI_getDataChannel2Ver3(void) {
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
	volatile UART_HandleTypeDef *tmpHandle;
	tmpHandle= &MDI_channel2;
 8008abe:	4b4b      	ldr	r3, [pc, #300]	; (8008bec <MDI_getDataChannel2Ver3+0x134>)
 8008ac0:	60bb      	str	r3, [r7, #8]
	static uint8_t counter=0,getTmp=0,getTmpBeff=0;
	if((tmpHandle->Instance->ISR & USART_ISR_RXNE) != 0){
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	69db      	ldr	r3, [r3, #28]
 8008ac8:	f003 0320 	and.w	r3, r3, #32
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d07a      	beq.n	8008bc6 <MDI_getDataChannel2Ver3+0x10e>
		getTmp = tmpHandle->Instance->RDR;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	4b45      	ldr	r3, [pc, #276]	; (8008bf0 <MDI_getDataChannel2Ver3+0x138>)
 8008ada:	701a      	strb	r2, [r3, #0]
		if(0xFF ==getTmp && 0xFF ==getTmpBeff){
 8008adc:	4b44      	ldr	r3, [pc, #272]	; (8008bf0 <MDI_getDataChannel2Ver3+0x138>)
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2bff      	cmp	r3, #255	; 0xff
 8008ae2:	d10c      	bne.n	8008afe <MDI_getDataChannel2Ver3+0x46>
 8008ae4:	4b43      	ldr	r3, [pc, #268]	; (8008bf4 <MDI_getDataChannel2Ver3+0x13c>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	2bff      	cmp	r3, #255	; 0xff
 8008aea:	d108      	bne.n	8008afe <MDI_getDataChannel2Ver3+0x46>
			tmpArr2[0]=0xFF;
 8008aec:	4b42      	ldr	r3, [pc, #264]	; (8008bf8 <MDI_getDataChannel2Ver3+0x140>)
 8008aee:	22ff      	movs	r2, #255	; 0xff
 8008af0:	701a      	strb	r2, [r3, #0]
			tmpArr2[1]=0xFF;
 8008af2:	4b41      	ldr	r3, [pc, #260]	; (8008bf8 <MDI_getDataChannel2Ver3+0x140>)
 8008af4:	22ff      	movs	r2, #255	; 0xff
 8008af6:	705a      	strb	r2, [r3, #1]
			counter=1;
 8008af8:	4b40      	ldr	r3, [pc, #256]	; (8008bfc <MDI_getDataChannel2Ver3+0x144>)
 8008afa:	2201      	movs	r2, #1
 8008afc:	701a      	strb	r2, [r3, #0]
		}
		tmpArr2[counter]=getTmp;
 8008afe:	4b3f      	ldr	r3, [pc, #252]	; (8008bfc <MDI_getDataChannel2Ver3+0x144>)
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	461a      	mov	r2, r3
 8008b04:	4b3a      	ldr	r3, [pc, #232]	; (8008bf0 <MDI_getDataChannel2Ver3+0x138>)
 8008b06:	7819      	ldrb	r1, [r3, #0]
 8008b08:	4b3b      	ldr	r3, [pc, #236]	; (8008bf8 <MDI_getDataChannel2Ver3+0x140>)
 8008b0a:	5499      	strb	r1, [r3, r2]
		getTmpBeff=getTmp;
 8008b0c:	4b38      	ldr	r3, [pc, #224]	; (8008bf0 <MDI_getDataChannel2Ver3+0x138>)
 8008b0e:	781a      	ldrb	r2, [r3, #0]
 8008b10:	4b38      	ldr	r3, [pc, #224]	; (8008bf4 <MDI_getDataChannel2Ver3+0x13c>)
 8008b12:	701a      	strb	r2, [r3, #0]
		counter++;
 8008b14:	4b39      	ldr	r3, [pc, #228]	; (8008bfc <MDI_getDataChannel2Ver3+0x144>)
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	4b37      	ldr	r3, [pc, #220]	; (8008bfc <MDI_getDataChannel2Ver3+0x144>)
 8008b1e:	701a      	strb	r2, [r3, #0]
		if(counter>9){
 8008b20:	4b36      	ldr	r3, [pc, #216]	; (8008bfc <MDI_getDataChannel2Ver3+0x144>)
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	2b09      	cmp	r3, #9
 8008b26:	d93f      	bls.n	8008ba8 <MDI_getDataChannel2Ver3+0xf0>
			counter=0;
 8008b28:	4b34      	ldr	r3, [pc, #208]	; (8008bfc <MDI_getDataChannel2Ver3+0x144>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	701a      	strb	r2, [r3, #0]
			 uint16_t checksumTmp = 0;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	81fb      	strh	r3, [r7, #14]
			for (uint8_t c = 2; c < 8; c++)checksumTmp += tmpArr2[c];
 8008b32:	2302      	movs	r3, #2
 8008b34:	737b      	strb	r3, [r7, #13]
 8008b36:	e009      	b.n	8008b4c <MDI_getDataChannel2Ver3+0x94>
 8008b38:	7b7b      	ldrb	r3, [r7, #13]
 8008b3a:	4a2f      	ldr	r2, [pc, #188]	; (8008bf8 <MDI_getDataChannel2Ver3+0x140>)
 8008b3c:	5cd3      	ldrb	r3, [r2, r3]
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	89fb      	ldrh	r3, [r7, #14]
 8008b42:	4413      	add	r3, r2
 8008b44:	81fb      	strh	r3, [r7, #14]
 8008b46:	7b7b      	ldrb	r3, [r7, #13]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	737b      	strb	r3, [r7, #13]
 8008b4c:	7b7b      	ldrb	r3, [r7, #13]
 8008b4e:	2b07      	cmp	r3, #7
 8008b50:	d9f2      	bls.n	8008b38 <MDI_getDataChannel2Ver3+0x80>
			uint8_t tmp = checksumTmp % 256;
 8008b52:	89fb      	ldrh	r3, [r7, #14]
 8008b54:	71fb      	strb	r3, [r7, #7]
			uint8_t tmpComp = ~tmp;
 8008b56:	79fb      	ldrb	r3, [r7, #7]
 8008b58:	43db      	mvns	r3, r3
 8008b5a:	71bb      	strb	r3, [r7, #6]
			if (tmp == tmpArr2[8] && tmpComp == tmpArr2[9]) {
 8008b5c:	4b26      	ldr	r3, [pc, #152]	; (8008bf8 <MDI_getDataChannel2Ver3+0x140>)
 8008b5e:	7a1b      	ldrb	r3, [r3, #8]
 8008b60:	79fa      	ldrb	r2, [r7, #7]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d120      	bne.n	8008ba8 <MDI_getDataChannel2Ver3+0xf0>
 8008b66:	4b24      	ldr	r3, [pc, #144]	; (8008bf8 <MDI_getDataChannel2Ver3+0x140>)
 8008b68:	7a5b      	ldrb	r3, [r3, #9]
 8008b6a:	79ba      	ldrb	r2, [r7, #6]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d11b      	bne.n	8008ba8 <MDI_getDataChannel2Ver3+0xf0>
			driver2.angle = ((uint16_t) tmpArr2[2] << 8) | tmpArr2[3];
 8008b70:	4b21      	ldr	r3, [pc, #132]	; (8008bf8 <MDI_getDataChannel2Ver3+0x140>)
 8008b72:	789b      	ldrb	r3, [r3, #2]
 8008b74:	021b      	lsls	r3, r3, #8
 8008b76:	b21a      	sxth	r2, r3
 8008b78:	4b1f      	ldr	r3, [pc, #124]	; (8008bf8 <MDI_getDataChannel2Ver3+0x140>)
 8008b7a:	78db      	ldrb	r3, [r3, #3]
 8008b7c:	b21b      	sxth	r3, r3
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	b21b      	sxth	r3, r3
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	4b1e      	ldr	r3, [pc, #120]	; (8008c00 <MDI_getDataChannel2Ver3+0x148>)
 8008b86:	809a      	strh	r2, [r3, #4]
			driver2.pid_kp = tmpArr2[4];
 8008b88:	4b1b      	ldr	r3, [pc, #108]	; (8008bf8 <MDI_getDataChannel2Ver3+0x140>)
 8008b8a:	791a      	ldrb	r2, [r3, #4]
 8008b8c:	4b1c      	ldr	r3, [pc, #112]	; (8008c00 <MDI_getDataChannel2Ver3+0x148>)
 8008b8e:	709a      	strb	r2, [r3, #2]
			driver2.pid_ki = tmpArr2[5];
 8008b90:	4b19      	ldr	r3, [pc, #100]	; (8008bf8 <MDI_getDataChannel2Ver3+0x140>)
 8008b92:	795a      	ldrb	r2, [r3, #5]
 8008b94:	4b1a      	ldr	r3, [pc, #104]	; (8008c00 <MDI_getDataChannel2Ver3+0x148>)
 8008b96:	705a      	strb	r2, [r3, #1]
			driver2.pid_kd = tmpArr2[6];
 8008b98:	4b17      	ldr	r3, [pc, #92]	; (8008bf8 <MDI_getDataChannel2Ver3+0x140>)
 8008b9a:	799a      	ldrb	r2, [r3, #6]
 8008b9c:	4b18      	ldr	r3, [pc, #96]	; (8008c00 <MDI_getDataChannel2Ver3+0x148>)
 8008b9e:	701a      	strb	r2, [r3, #0]
			driver2.factor = tmpArr2[7];
 8008ba0:	4b15      	ldr	r3, [pc, #84]	; (8008bf8 <MDI_getDataChannel2Ver3+0x140>)
 8008ba2:	79da      	ldrb	r2, [r3, #7]
 8008ba4:	4b16      	ldr	r3, [pc, #88]	; (8008c00 <MDI_getDataChannel2Ver3+0x148>)
 8008ba6:	70da      	strb	r2, [r3, #3]
		}
		}

		 SET_BIT(tmpHandle->Instance->RDR,0);
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bae:	625a      	str	r2, [r3, #36]	; 0x24

		 //tmpHandle->Instance->ISR & USART_ISR_RXNE
		 __HAL_UART_CLEAR_FLAG(tmpHandle, UART_CLEAR_RTOF);
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bb8:	621a      	str	r2, [r3, #32]
			tmpHandle->RxState=HAL_UART_STATE_READY;
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	2220      	movs	r2, #32
 8008bbe:	679a      	str	r2, [r3, #120]	; 0x78
			tmpHandle->ErrorCode = HAL_UART_ERROR_NONE;
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	67da      	str	r2, [r3, #124]	; 0x7c

	}
	if((tmpHandle->Instance->ISR & USART_ISR_ORE) != 0) tmpHandle->Instance->ICR |= USART_ICR_ORECF;
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	69db      	ldr	r3, [r3, #28]
 8008bcc:	f003 0308 	and.w	r3, r3, #8
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d005      	beq.n	8008be0 <MDI_getDataChannel2Ver3+0x128>
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6a1a      	ldr	r2, [r3, #32]
 8008bda:	f042 0208 	orr.w	r2, r2, #8
 8008bde:	621a      	str	r2, [r3, #32]
}
 8008be0:	bf00      	nop
 8008be2:	3714      	adds	r7, #20
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr
 8008bec:	200049f4 	.word	0x200049f4
 8008bf0:	200049e1 	.word	0x200049e1
 8008bf4:	200049e2 	.word	0x200049e2
 8008bf8:	200049d4 	.word	0x200049d4
 8008bfc:	200049e3 	.word	0x200049e3
 8008c00:	20004d08 	.word	0x20004d08

08008c04 <getDriver1ReceiveVal>:
}
uint16_t getDriver2angle(void) {
	return driver2.factor;
}

mD_interface getDriver1ReceiveVal(void) {
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
	return driver1;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a05      	ldr	r2, [pc, #20]	; (8008c24 <getDriver1ReceiveVal+0x20>)
 8008c10:	6811      	ldr	r1, [r2, #0]
 8008c12:	6019      	str	r1, [r3, #0]
 8008c14:	8892      	ldrh	r2, [r2, #4]
 8008c16:	809a      	strh	r2, [r3, #4]
}
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr
 8008c24:	20004d10 	.word	0x20004d10

08008c28 <getDriver2ReceiveVal>:
mD_interface getDriver2ReceiveVal(void) {
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
	return driver2;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a05      	ldr	r2, [pc, #20]	; (8008c48 <getDriver2ReceiveVal+0x20>)
 8008c34:	6811      	ldr	r1, [r2, #0]
 8008c36:	6019      	str	r1, [r3, #0]
 8008c38:	8892      	ldrh	r2, [r2, #4]
 8008c3a:	809a      	strh	r2, [r3, #4]
}
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr
 8008c48:	20004d08 	.word	0x20004d08

08008c4c <tasks_init>:


xSemaphoreHandle uart1SemphrHandle=NULL;
xSemaphoreHandle uart2SemphrHandle=NULL;

void tasks_init(void){
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af02      	add	r7, sp, #8
	 * @param usStackDepth-> stack size
	 * @param pvParameters-> function parameters
	 * @param uxPriority -> Priority
	 * @param pxCreatedTask -> handle so id
	 * */
	vSemaphoreCreateBinary(uart1SemphrHandle);
 8008c52:	2203      	movs	r2, #3
 8008c54:	2100      	movs	r1, #0
 8008c56:	2001      	movs	r0, #1
 8008c58:	f7fc fb5d 	bl	8005316 <xQueueGenericCreate>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	4b3a      	ldr	r3, [pc, #232]	; (8008d48 <tasks_init+0xfc>)
 8008c60:	601a      	str	r2, [r3, #0]
 8008c62:	4b39      	ldr	r3, [pc, #228]	; (8008d48 <tasks_init+0xfc>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d006      	beq.n	8008c78 <tasks_init+0x2c>
 8008c6a:	4b37      	ldr	r3, [pc, #220]	; (8008d48 <tasks_init+0xfc>)
 8008c6c:	6818      	ldr	r0, [r3, #0]
 8008c6e:	2300      	movs	r3, #0
 8008c70:	2200      	movs	r2, #0
 8008c72:	2100      	movs	r1, #0
 8008c74:	f7fc fbb4 	bl	80053e0 <xQueueGenericSend>
	vSemaphoreCreateBinary(uart2SemphrHandle);
 8008c78:	2203      	movs	r2, #3
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	2001      	movs	r0, #1
 8008c7e:	f7fc fb4a 	bl	8005316 <xQueueGenericCreate>
 8008c82:	4602      	mov	r2, r0
 8008c84:	4b31      	ldr	r3, [pc, #196]	; (8008d4c <tasks_init+0x100>)
 8008c86:	601a      	str	r2, [r3, #0]
 8008c88:	4b30      	ldr	r3, [pc, #192]	; (8008d4c <tasks_init+0x100>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d006      	beq.n	8008c9e <tasks_init+0x52>
 8008c90:	4b2e      	ldr	r3, [pc, #184]	; (8008d4c <tasks_init+0x100>)
 8008c92:	6818      	ldr	r0, [r3, #0]
 8008c94:	2300      	movs	r3, #0
 8008c96:	2200      	movs	r2, #0
 8008c98:	2100      	movs	r1, #0
 8008c9a:	f7fc fba1 	bl	80053e0 <xQueueGenericSend>
	if(uart1SemphrHandle!=NULL && uart2SemphrHandle!=NULL){
 8008c9e:	4b2a      	ldr	r3, [pc, #168]	; (8008d48 <tasks_init+0xfc>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d04d      	beq.n	8008d42 <tasks_init+0xf6>
 8008ca6:	4b29      	ldr	r3, [pc, #164]	; (8008d4c <tasks_init+0x100>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d049      	beq.n	8008d42 <tasks_init+0xf6>
		xTaskCreate(sendDataUart1Task, "send Uart 1", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 8008cae:	2300      	movs	r3, #0
 8008cb0:	9301      	str	r3, [sp, #4]
 8008cb2:	2337      	movs	r3, #55	; 0x37
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	2280      	movs	r2, #128	; 0x80
 8008cba:	4925      	ldr	r1, [pc, #148]	; (8008d50 <tasks_init+0x104>)
 8008cbc:	4825      	ldr	r0, [pc, #148]	; (8008d54 <tasks_init+0x108>)
 8008cbe:	f7fc ffdb 	bl	8005c78 <xTaskCreate>
		xTaskCreate(sendDataUart2Task, "send Uart 2", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	9301      	str	r3, [sp, #4]
 8008cc6:	2337      	movs	r3, #55	; 0x37
 8008cc8:	9300      	str	r3, [sp, #0]
 8008cca:	2300      	movs	r3, #0
 8008ccc:	2280      	movs	r2, #128	; 0x80
 8008cce:	4922      	ldr	r1, [pc, #136]	; (8008d58 <tasks_init+0x10c>)
 8008cd0:	4822      	ldr	r0, [pc, #136]	; (8008d5c <tasks_init+0x110>)
 8008cd2:	f7fc ffd1 	bl	8005c78 <xTaskCreate>
		xTaskCreate(getDataUart1Task, "get Uart 1", configMINIMAL_STACK_SIZE, NULL,  55, NULL);
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	9301      	str	r3, [sp, #4]
 8008cda:	2337      	movs	r3, #55	; 0x37
 8008cdc:	9300      	str	r3, [sp, #0]
 8008cde:	2300      	movs	r3, #0
 8008ce0:	2280      	movs	r2, #128	; 0x80
 8008ce2:	491f      	ldr	r1, [pc, #124]	; (8008d60 <tasks_init+0x114>)
 8008ce4:	481f      	ldr	r0, [pc, #124]	; (8008d64 <tasks_init+0x118>)
 8008ce6:	f7fc ffc7 	bl	8005c78 <xTaskCreate>
		xTaskCreate(getDataUart2Task, "get Uart 2", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 8008cea:	2300      	movs	r3, #0
 8008cec:	9301      	str	r3, [sp, #4]
 8008cee:	2337      	movs	r3, #55	; 0x37
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	2280      	movs	r2, #128	; 0x80
 8008cf6:	491c      	ldr	r1, [pc, #112]	; (8008d68 <tasks_init+0x11c>)
 8008cf8:	481c      	ldr	r0, [pc, #112]	; (8008d6c <tasks_init+0x120>)
 8008cfa:	f7fc ffbd 	bl	8005c78 <xTaskCreate>
		xTaskCreate(adcReadTask, "adc read", configMINIMAL_STACK_SIZE, NULL,   55, NULL);
 8008cfe:	2300      	movs	r3, #0
 8008d00:	9301      	str	r3, [sp, #4]
 8008d02:	2337      	movs	r3, #55	; 0x37
 8008d04:	9300      	str	r3, [sp, #0]
 8008d06:	2300      	movs	r3, #0
 8008d08:	2280      	movs	r2, #128	; 0x80
 8008d0a:	4919      	ldr	r1, [pc, #100]	; (8008d70 <tasks_init+0x124>)
 8008d0c:	4819      	ldr	r0, [pc, #100]	; (8008d74 <tasks_init+0x128>)
 8008d0e:	f7fc ffb3 	bl	8005c78 <xTaskCreate>
		xTaskCreate(lcdTask, "lcd controller", configMINIMAL_STACK_SIZE*2, NULL,  55 , NULL);
 8008d12:	2300      	movs	r3, #0
 8008d14:	9301      	str	r3, [sp, #4]
 8008d16:	2337      	movs	r3, #55	; 0x37
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d20:	4915      	ldr	r1, [pc, #84]	; (8008d78 <tasks_init+0x12c>)
 8008d22:	4816      	ldr	r0, [pc, #88]	; (8008d7c <tasks_init+0x130>)
 8008d24:	f7fc ffa8 	bl	8005c78 <xTaskCreate>
		xTaskCreate(buttonControlTask, "button controller", configMINIMAL_STACK_SIZE*2, NULL,  55 , NULL);
 8008d28:	2300      	movs	r3, #0
 8008d2a:	9301      	str	r3, [sp, #4]
 8008d2c:	2337      	movs	r3, #55	; 0x37
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	2300      	movs	r3, #0
 8008d32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d36:	4912      	ldr	r1, [pc, #72]	; (8008d80 <tasks_init+0x134>)
 8008d38:	4812      	ldr	r0, [pc, #72]	; (8008d84 <tasks_init+0x138>)
 8008d3a:	f7fc ff9d 	bl	8005c78 <xTaskCreate>


		vTaskStartScheduler();
 8008d3e:	f7fd f917 	bl	8005f70 <vTaskStartScheduler>
	}
}
 8008d42:	bf00      	nop
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	200049e4 	.word	0x200049e4
 8008d4c:	200049e8 	.word	0x200049e8
 8008d50:	08009784 	.word	0x08009784
 8008d54:	08008d89 	.word	0x08008d89
 8008d58:	08009790 	.word	0x08009790
 8008d5c:	08008d97 	.word	0x08008d97
 8008d60:	0800979c 	.word	0x0800979c
 8008d64:	08008da5 	.word	0x08008da5
 8008d68:	080097a8 	.word	0x080097a8
 8008d6c:	08008db3 	.word	0x08008db3
 8008d70:	080097b4 	.word	0x080097b4
 8008d74:	08008dc1 	.word	0x08008dc1
 8008d78:	080097c0 	.word	0x080097c0
 8008d7c:	08008e35 	.word	0x08008e35
 8008d80:	080097d0 	.word	0x080097d0
 8008d84:	08008e57 	.word	0x08008e57

08008d88 <sendDataUart1Task>:


void sendDataUart1Task(void *params){
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
	while(1){
		transmissionDriver1();
 8008d90:	f7ff f8d8 	bl	8007f44 <transmissionDriver1>
 8008d94:	e7fc      	b.n	8008d90 <sendDataUart1Task+0x8>

08008d96 <sendDataUart2Task>:
	}
}
void sendDataUart2Task(void *params){
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b082      	sub	sp, #8
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
	while(1){
		transmissionDriver2();
 8008d9e:	f7ff f8e9 	bl	8007f74 <transmissionDriver2>
 8008da2:	e7fc      	b.n	8008d9e <sendDataUart2Task+0x8>

08008da4 <getDataUart1Task>:
	}
}
void getDataUart1Task(void *params){
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
	while(1){
		MDI_getDataChannel1Ver3();
 8008dac:	f7ff fd70 	bl	8008890 <MDI_getDataChannel1Ver3>
 8008db0:	e7fc      	b.n	8008dac <getDataUart1Task+0x8>

08008db2 <getDataUart2Task>:
	}
}
void getDataUart2Task(void *params){
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b082      	sub	sp, #8
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
	while(1){
		MDI_getDataChannel2Ver3();
 8008dba:	f7ff fe7d 	bl	8008ab8 <MDI_getDataChannel2Ver3>
 8008dbe:	e7fc      	b.n	8008dba <getDataUart2Task+0x8>

08008dc0 <adcReadTask>:
	}
}
void adcReadTask(void *params){
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af02      	add	r7, sp, #8
 8008dc6:	6078      	str	r0, [r7, #4]
	uint16_t val1,val2;
	while(1){
		readAnalog2Values(&ADCREADCH1,&ADCREADCH2);
 8008dc8:	4918      	ldr	r1, [pc, #96]	; (8008e2c <adcReadTask+0x6c>)
 8008dca:	4819      	ldr	r0, [pc, #100]	; (8008e30 <adcReadTask+0x70>)
 8008dcc:	f7fe fd5e 	bl	800788c <readAnalog2Values>
			val1=valuesMap(getAnalogValue1(),0,4095,140,860);
 8008dd0:	f7fe fdc0 	bl	8007954 <getAnalogValue1>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f44f 7357 	mov.w	r3, #860	; 0x35c
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	238c      	movs	r3, #140	; 0x8c
 8008de0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8008de4:	2100      	movs	r1, #0
 8008de6:	f7fe fdcd 	bl	8007984 <valuesMap>
 8008dea:	4603      	mov	r3, r0
 8008dec:	81fb      	strh	r3, [r7, #14]
			setDriver1AngleValue(val1);
 8008dee:	89fb      	ldrh	r3, [r7, #14]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fe fec9 	bl	8007b88 <setDriver1AngleValue>
			vTaskDelay(10);
 8008df6:	200a      	movs	r0, #10
 8008df8:	f7fd f884 	bl	8005f04 <vTaskDelay>
			val2=valuesMap(getAnalogValue2(),0,4095,140,860);
 8008dfc:	f7fe fdb6 	bl	800796c <getAnalogValue2>
 8008e00:	4603      	mov	r3, r0
 8008e02:	4618      	mov	r0, r3
 8008e04:	f44f 7357 	mov.w	r3, #860	; 0x35c
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	238c      	movs	r3, #140	; 0x8c
 8008e0c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8008e10:	2100      	movs	r1, #0
 8008e12:	f7fe fdb7 	bl	8007984 <valuesMap>
 8008e16:	4603      	mov	r3, r0
 8008e18:	81bb      	strh	r3, [r7, #12]
			setDriver2AngleValue(val2);
 8008e1a:	89bb      	ldrh	r3, [r7, #12]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fe fec3 	bl	8007ba8 <setDriver2AngleValue>
			vTaskDelay(10);
 8008e22:	200a      	movs	r0, #10
 8008e24:	f7fd f86e 	bl	8005f04 <vTaskDelay>
		readAnalog2Values(&ADCREADCH1,&ADCREADCH2);
 8008e28:	e7ce      	b.n	8008dc8 <adcReadTask+0x8>
 8008e2a:	bf00      	nop
 8008e2c:	20004b08 	.word	0x20004b08
 8008e30:	20004ac0 	.word	0x20004ac0

08008e34 <lcdTask>:
	}
}
void lcdTask(void *params){
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
	lcd_Init();
 8008e3c:	f7ff f8ee 	bl	800801c <lcd_Init>
	while(1){
	  	lcdController();
 8008e40:	f7ff f9d0 	bl	80081e4 <lcdController>
	  	vTaskDelay(200);
 8008e44:	20c8      	movs	r0, #200	; 0xc8
 8008e46:	f7fd f85d 	bl	8005f04 <vTaskDelay>
	  	cleanTheLcd();
 8008e4a:	f7ff f9c5 	bl	80081d8 <cleanTheLcd>
	  	vTaskDelay(5);
 8008e4e:	2005      	movs	r0, #5
 8008e50:	f7fd f858 	bl	8005f04 <vTaskDelay>
	  	lcdController();
 8008e54:	e7f4      	b.n	8008e40 <lcdTask+0xc>

08008e56 <buttonControlTask>:
	}

}
void buttonControlTask(void *params){
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b082      	sub	sp, #8
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
	btnParameterInit();
 8008e5e:	f7fe fe67 	bl	8007b30 <btnParameterInit>
	while(1){
		buttonController();
 8008e62:	f7fe feb1 	bl	8007bc8 <buttonController>
		vTaskDelay(50);
 8008e66:	2032      	movs	r0, #50	; 0x32
 8008e68:	f7fd f84c 	bl	8005f04 <vTaskDelay>
		buttonController();
 8008e6c:	e7f9      	b.n	8008e62 <buttonControlTask+0xc>
	...

08008e70 <__errno>:
 8008e70:	4b01      	ldr	r3, [pc, #4]	; (8008e78 <__errno+0x8>)
 8008e72:	6818      	ldr	r0, [r3, #0]
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	20000014 	.word	0x20000014

08008e7c <__libc_init_array>:
 8008e7c:	b570      	push	{r4, r5, r6, lr}
 8008e7e:	4e0d      	ldr	r6, [pc, #52]	; (8008eb4 <__libc_init_array+0x38>)
 8008e80:	4c0d      	ldr	r4, [pc, #52]	; (8008eb8 <__libc_init_array+0x3c>)
 8008e82:	1ba4      	subs	r4, r4, r6
 8008e84:	10a4      	asrs	r4, r4, #2
 8008e86:	2500      	movs	r5, #0
 8008e88:	42a5      	cmp	r5, r4
 8008e8a:	d109      	bne.n	8008ea0 <__libc_init_array+0x24>
 8008e8c:	4e0b      	ldr	r6, [pc, #44]	; (8008ebc <__libc_init_array+0x40>)
 8008e8e:	4c0c      	ldr	r4, [pc, #48]	; (8008ec0 <__libc_init_array+0x44>)
 8008e90:	f000 fc28 	bl	80096e4 <_init>
 8008e94:	1ba4      	subs	r4, r4, r6
 8008e96:	10a4      	asrs	r4, r4, #2
 8008e98:	2500      	movs	r5, #0
 8008e9a:	42a5      	cmp	r5, r4
 8008e9c:	d105      	bne.n	8008eaa <__libc_init_array+0x2e>
 8008e9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ea0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ea4:	4798      	blx	r3
 8008ea6:	3501      	adds	r5, #1
 8008ea8:	e7ee      	b.n	8008e88 <__libc_init_array+0xc>
 8008eaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008eae:	4798      	blx	r3
 8008eb0:	3501      	adds	r5, #1
 8008eb2:	e7f2      	b.n	8008e9a <__libc_init_array+0x1e>
 8008eb4:	08009858 	.word	0x08009858
 8008eb8:	08009858 	.word	0x08009858
 8008ebc:	08009858 	.word	0x08009858
 8008ec0:	0800985c 	.word	0x0800985c

08008ec4 <memcpy>:
 8008ec4:	b510      	push	{r4, lr}
 8008ec6:	1e43      	subs	r3, r0, #1
 8008ec8:	440a      	add	r2, r1
 8008eca:	4291      	cmp	r1, r2
 8008ecc:	d100      	bne.n	8008ed0 <memcpy+0xc>
 8008ece:	bd10      	pop	{r4, pc}
 8008ed0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ed4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ed8:	e7f7      	b.n	8008eca <memcpy+0x6>

08008eda <memset>:
 8008eda:	4402      	add	r2, r0
 8008edc:	4603      	mov	r3, r0
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d100      	bne.n	8008ee4 <memset+0xa>
 8008ee2:	4770      	bx	lr
 8008ee4:	f803 1b01 	strb.w	r1, [r3], #1
 8008ee8:	e7f9      	b.n	8008ede <memset+0x4>
	...

08008eec <siprintf>:
 8008eec:	b40e      	push	{r1, r2, r3}
 8008eee:	b500      	push	{lr}
 8008ef0:	b09c      	sub	sp, #112	; 0x70
 8008ef2:	ab1d      	add	r3, sp, #116	; 0x74
 8008ef4:	9002      	str	r0, [sp, #8]
 8008ef6:	9006      	str	r0, [sp, #24]
 8008ef8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008efc:	4809      	ldr	r0, [pc, #36]	; (8008f24 <siprintf+0x38>)
 8008efe:	9107      	str	r1, [sp, #28]
 8008f00:	9104      	str	r1, [sp, #16]
 8008f02:	4909      	ldr	r1, [pc, #36]	; (8008f28 <siprintf+0x3c>)
 8008f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f08:	9105      	str	r1, [sp, #20]
 8008f0a:	6800      	ldr	r0, [r0, #0]
 8008f0c:	9301      	str	r3, [sp, #4]
 8008f0e:	a902      	add	r1, sp, #8
 8008f10:	f000 f866 	bl	8008fe0 <_svfiprintf_r>
 8008f14:	9b02      	ldr	r3, [sp, #8]
 8008f16:	2200      	movs	r2, #0
 8008f18:	701a      	strb	r2, [r3, #0]
 8008f1a:	b01c      	add	sp, #112	; 0x70
 8008f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f20:	b003      	add	sp, #12
 8008f22:	4770      	bx	lr
 8008f24:	20000014 	.word	0x20000014
 8008f28:	ffff0208 	.word	0xffff0208

08008f2c <__ssputs_r>:
 8008f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f30:	688e      	ldr	r6, [r1, #8]
 8008f32:	429e      	cmp	r6, r3
 8008f34:	4682      	mov	sl, r0
 8008f36:	460c      	mov	r4, r1
 8008f38:	4690      	mov	r8, r2
 8008f3a:	4699      	mov	r9, r3
 8008f3c:	d837      	bhi.n	8008fae <__ssputs_r+0x82>
 8008f3e:	898a      	ldrh	r2, [r1, #12]
 8008f40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f44:	d031      	beq.n	8008faa <__ssputs_r+0x7e>
 8008f46:	6825      	ldr	r5, [r4, #0]
 8008f48:	6909      	ldr	r1, [r1, #16]
 8008f4a:	1a6f      	subs	r7, r5, r1
 8008f4c:	6965      	ldr	r5, [r4, #20]
 8008f4e:	2302      	movs	r3, #2
 8008f50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f54:	fb95 f5f3 	sdiv	r5, r5, r3
 8008f58:	f109 0301 	add.w	r3, r9, #1
 8008f5c:	443b      	add	r3, r7
 8008f5e:	429d      	cmp	r5, r3
 8008f60:	bf38      	it	cc
 8008f62:	461d      	movcc	r5, r3
 8008f64:	0553      	lsls	r3, r2, #21
 8008f66:	d530      	bpl.n	8008fca <__ssputs_r+0x9e>
 8008f68:	4629      	mov	r1, r5
 8008f6a:	f000 fb21 	bl	80095b0 <_malloc_r>
 8008f6e:	4606      	mov	r6, r0
 8008f70:	b950      	cbnz	r0, 8008f88 <__ssputs_r+0x5c>
 8008f72:	230c      	movs	r3, #12
 8008f74:	f8ca 3000 	str.w	r3, [sl]
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f7e:	81a3      	strh	r3, [r4, #12]
 8008f80:	f04f 30ff 	mov.w	r0, #4294967295
 8008f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f88:	463a      	mov	r2, r7
 8008f8a:	6921      	ldr	r1, [r4, #16]
 8008f8c:	f7ff ff9a 	bl	8008ec4 <memcpy>
 8008f90:	89a3      	ldrh	r3, [r4, #12]
 8008f92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f9a:	81a3      	strh	r3, [r4, #12]
 8008f9c:	6126      	str	r6, [r4, #16]
 8008f9e:	6165      	str	r5, [r4, #20]
 8008fa0:	443e      	add	r6, r7
 8008fa2:	1bed      	subs	r5, r5, r7
 8008fa4:	6026      	str	r6, [r4, #0]
 8008fa6:	60a5      	str	r5, [r4, #8]
 8008fa8:	464e      	mov	r6, r9
 8008faa:	454e      	cmp	r6, r9
 8008fac:	d900      	bls.n	8008fb0 <__ssputs_r+0x84>
 8008fae:	464e      	mov	r6, r9
 8008fb0:	4632      	mov	r2, r6
 8008fb2:	4641      	mov	r1, r8
 8008fb4:	6820      	ldr	r0, [r4, #0]
 8008fb6:	f000 fa93 	bl	80094e0 <memmove>
 8008fba:	68a3      	ldr	r3, [r4, #8]
 8008fbc:	1b9b      	subs	r3, r3, r6
 8008fbe:	60a3      	str	r3, [r4, #8]
 8008fc0:	6823      	ldr	r3, [r4, #0]
 8008fc2:	441e      	add	r6, r3
 8008fc4:	6026      	str	r6, [r4, #0]
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	e7dc      	b.n	8008f84 <__ssputs_r+0x58>
 8008fca:	462a      	mov	r2, r5
 8008fcc:	f000 fb4a 	bl	8009664 <_realloc_r>
 8008fd0:	4606      	mov	r6, r0
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	d1e2      	bne.n	8008f9c <__ssputs_r+0x70>
 8008fd6:	6921      	ldr	r1, [r4, #16]
 8008fd8:	4650      	mov	r0, sl
 8008fda:	f000 fa9b 	bl	8009514 <_free_r>
 8008fde:	e7c8      	b.n	8008f72 <__ssputs_r+0x46>

08008fe0 <_svfiprintf_r>:
 8008fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe4:	461d      	mov	r5, r3
 8008fe6:	898b      	ldrh	r3, [r1, #12]
 8008fe8:	061f      	lsls	r7, r3, #24
 8008fea:	b09d      	sub	sp, #116	; 0x74
 8008fec:	4680      	mov	r8, r0
 8008fee:	460c      	mov	r4, r1
 8008ff0:	4616      	mov	r6, r2
 8008ff2:	d50f      	bpl.n	8009014 <_svfiprintf_r+0x34>
 8008ff4:	690b      	ldr	r3, [r1, #16]
 8008ff6:	b96b      	cbnz	r3, 8009014 <_svfiprintf_r+0x34>
 8008ff8:	2140      	movs	r1, #64	; 0x40
 8008ffa:	f000 fad9 	bl	80095b0 <_malloc_r>
 8008ffe:	6020      	str	r0, [r4, #0]
 8009000:	6120      	str	r0, [r4, #16]
 8009002:	b928      	cbnz	r0, 8009010 <_svfiprintf_r+0x30>
 8009004:	230c      	movs	r3, #12
 8009006:	f8c8 3000 	str.w	r3, [r8]
 800900a:	f04f 30ff 	mov.w	r0, #4294967295
 800900e:	e0c8      	b.n	80091a2 <_svfiprintf_r+0x1c2>
 8009010:	2340      	movs	r3, #64	; 0x40
 8009012:	6163      	str	r3, [r4, #20]
 8009014:	2300      	movs	r3, #0
 8009016:	9309      	str	r3, [sp, #36]	; 0x24
 8009018:	2320      	movs	r3, #32
 800901a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800901e:	2330      	movs	r3, #48	; 0x30
 8009020:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009024:	9503      	str	r5, [sp, #12]
 8009026:	f04f 0b01 	mov.w	fp, #1
 800902a:	4637      	mov	r7, r6
 800902c:	463d      	mov	r5, r7
 800902e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009032:	b10b      	cbz	r3, 8009038 <_svfiprintf_r+0x58>
 8009034:	2b25      	cmp	r3, #37	; 0x25
 8009036:	d13e      	bne.n	80090b6 <_svfiprintf_r+0xd6>
 8009038:	ebb7 0a06 	subs.w	sl, r7, r6
 800903c:	d00b      	beq.n	8009056 <_svfiprintf_r+0x76>
 800903e:	4653      	mov	r3, sl
 8009040:	4632      	mov	r2, r6
 8009042:	4621      	mov	r1, r4
 8009044:	4640      	mov	r0, r8
 8009046:	f7ff ff71 	bl	8008f2c <__ssputs_r>
 800904a:	3001      	adds	r0, #1
 800904c:	f000 80a4 	beq.w	8009198 <_svfiprintf_r+0x1b8>
 8009050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009052:	4453      	add	r3, sl
 8009054:	9309      	str	r3, [sp, #36]	; 0x24
 8009056:	783b      	ldrb	r3, [r7, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 809d 	beq.w	8009198 <_svfiprintf_r+0x1b8>
 800905e:	2300      	movs	r3, #0
 8009060:	f04f 32ff 	mov.w	r2, #4294967295
 8009064:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009068:	9304      	str	r3, [sp, #16]
 800906a:	9307      	str	r3, [sp, #28]
 800906c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009070:	931a      	str	r3, [sp, #104]	; 0x68
 8009072:	462f      	mov	r7, r5
 8009074:	2205      	movs	r2, #5
 8009076:	f817 1b01 	ldrb.w	r1, [r7], #1
 800907a:	4850      	ldr	r0, [pc, #320]	; (80091bc <_svfiprintf_r+0x1dc>)
 800907c:	f7f7 f8d0 	bl	8000220 <memchr>
 8009080:	9b04      	ldr	r3, [sp, #16]
 8009082:	b9d0      	cbnz	r0, 80090ba <_svfiprintf_r+0xda>
 8009084:	06d9      	lsls	r1, r3, #27
 8009086:	bf44      	itt	mi
 8009088:	2220      	movmi	r2, #32
 800908a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800908e:	071a      	lsls	r2, r3, #28
 8009090:	bf44      	itt	mi
 8009092:	222b      	movmi	r2, #43	; 0x2b
 8009094:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009098:	782a      	ldrb	r2, [r5, #0]
 800909a:	2a2a      	cmp	r2, #42	; 0x2a
 800909c:	d015      	beq.n	80090ca <_svfiprintf_r+0xea>
 800909e:	9a07      	ldr	r2, [sp, #28]
 80090a0:	462f      	mov	r7, r5
 80090a2:	2000      	movs	r0, #0
 80090a4:	250a      	movs	r5, #10
 80090a6:	4639      	mov	r1, r7
 80090a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090ac:	3b30      	subs	r3, #48	; 0x30
 80090ae:	2b09      	cmp	r3, #9
 80090b0:	d94d      	bls.n	800914e <_svfiprintf_r+0x16e>
 80090b2:	b1b8      	cbz	r0, 80090e4 <_svfiprintf_r+0x104>
 80090b4:	e00f      	b.n	80090d6 <_svfiprintf_r+0xf6>
 80090b6:	462f      	mov	r7, r5
 80090b8:	e7b8      	b.n	800902c <_svfiprintf_r+0x4c>
 80090ba:	4a40      	ldr	r2, [pc, #256]	; (80091bc <_svfiprintf_r+0x1dc>)
 80090bc:	1a80      	subs	r0, r0, r2
 80090be:	fa0b f000 	lsl.w	r0, fp, r0
 80090c2:	4318      	orrs	r0, r3
 80090c4:	9004      	str	r0, [sp, #16]
 80090c6:	463d      	mov	r5, r7
 80090c8:	e7d3      	b.n	8009072 <_svfiprintf_r+0x92>
 80090ca:	9a03      	ldr	r2, [sp, #12]
 80090cc:	1d11      	adds	r1, r2, #4
 80090ce:	6812      	ldr	r2, [r2, #0]
 80090d0:	9103      	str	r1, [sp, #12]
 80090d2:	2a00      	cmp	r2, #0
 80090d4:	db01      	blt.n	80090da <_svfiprintf_r+0xfa>
 80090d6:	9207      	str	r2, [sp, #28]
 80090d8:	e004      	b.n	80090e4 <_svfiprintf_r+0x104>
 80090da:	4252      	negs	r2, r2
 80090dc:	f043 0302 	orr.w	r3, r3, #2
 80090e0:	9207      	str	r2, [sp, #28]
 80090e2:	9304      	str	r3, [sp, #16]
 80090e4:	783b      	ldrb	r3, [r7, #0]
 80090e6:	2b2e      	cmp	r3, #46	; 0x2e
 80090e8:	d10c      	bne.n	8009104 <_svfiprintf_r+0x124>
 80090ea:	787b      	ldrb	r3, [r7, #1]
 80090ec:	2b2a      	cmp	r3, #42	; 0x2a
 80090ee:	d133      	bne.n	8009158 <_svfiprintf_r+0x178>
 80090f0:	9b03      	ldr	r3, [sp, #12]
 80090f2:	1d1a      	adds	r2, r3, #4
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	9203      	str	r2, [sp, #12]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	bfb8      	it	lt
 80090fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009100:	3702      	adds	r7, #2
 8009102:	9305      	str	r3, [sp, #20]
 8009104:	4d2e      	ldr	r5, [pc, #184]	; (80091c0 <_svfiprintf_r+0x1e0>)
 8009106:	7839      	ldrb	r1, [r7, #0]
 8009108:	2203      	movs	r2, #3
 800910a:	4628      	mov	r0, r5
 800910c:	f7f7 f888 	bl	8000220 <memchr>
 8009110:	b138      	cbz	r0, 8009122 <_svfiprintf_r+0x142>
 8009112:	2340      	movs	r3, #64	; 0x40
 8009114:	1b40      	subs	r0, r0, r5
 8009116:	fa03 f000 	lsl.w	r0, r3, r0
 800911a:	9b04      	ldr	r3, [sp, #16]
 800911c:	4303      	orrs	r3, r0
 800911e:	3701      	adds	r7, #1
 8009120:	9304      	str	r3, [sp, #16]
 8009122:	7839      	ldrb	r1, [r7, #0]
 8009124:	4827      	ldr	r0, [pc, #156]	; (80091c4 <_svfiprintf_r+0x1e4>)
 8009126:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800912a:	2206      	movs	r2, #6
 800912c:	1c7e      	adds	r6, r7, #1
 800912e:	f7f7 f877 	bl	8000220 <memchr>
 8009132:	2800      	cmp	r0, #0
 8009134:	d038      	beq.n	80091a8 <_svfiprintf_r+0x1c8>
 8009136:	4b24      	ldr	r3, [pc, #144]	; (80091c8 <_svfiprintf_r+0x1e8>)
 8009138:	bb13      	cbnz	r3, 8009180 <_svfiprintf_r+0x1a0>
 800913a:	9b03      	ldr	r3, [sp, #12]
 800913c:	3307      	adds	r3, #7
 800913e:	f023 0307 	bic.w	r3, r3, #7
 8009142:	3308      	adds	r3, #8
 8009144:	9303      	str	r3, [sp, #12]
 8009146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009148:	444b      	add	r3, r9
 800914a:	9309      	str	r3, [sp, #36]	; 0x24
 800914c:	e76d      	b.n	800902a <_svfiprintf_r+0x4a>
 800914e:	fb05 3202 	mla	r2, r5, r2, r3
 8009152:	2001      	movs	r0, #1
 8009154:	460f      	mov	r7, r1
 8009156:	e7a6      	b.n	80090a6 <_svfiprintf_r+0xc6>
 8009158:	2300      	movs	r3, #0
 800915a:	3701      	adds	r7, #1
 800915c:	9305      	str	r3, [sp, #20]
 800915e:	4619      	mov	r1, r3
 8009160:	250a      	movs	r5, #10
 8009162:	4638      	mov	r0, r7
 8009164:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009168:	3a30      	subs	r2, #48	; 0x30
 800916a:	2a09      	cmp	r2, #9
 800916c:	d903      	bls.n	8009176 <_svfiprintf_r+0x196>
 800916e:	2b00      	cmp	r3, #0
 8009170:	d0c8      	beq.n	8009104 <_svfiprintf_r+0x124>
 8009172:	9105      	str	r1, [sp, #20]
 8009174:	e7c6      	b.n	8009104 <_svfiprintf_r+0x124>
 8009176:	fb05 2101 	mla	r1, r5, r1, r2
 800917a:	2301      	movs	r3, #1
 800917c:	4607      	mov	r7, r0
 800917e:	e7f0      	b.n	8009162 <_svfiprintf_r+0x182>
 8009180:	ab03      	add	r3, sp, #12
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	4622      	mov	r2, r4
 8009186:	4b11      	ldr	r3, [pc, #68]	; (80091cc <_svfiprintf_r+0x1ec>)
 8009188:	a904      	add	r1, sp, #16
 800918a:	4640      	mov	r0, r8
 800918c:	f3af 8000 	nop.w
 8009190:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009194:	4681      	mov	r9, r0
 8009196:	d1d6      	bne.n	8009146 <_svfiprintf_r+0x166>
 8009198:	89a3      	ldrh	r3, [r4, #12]
 800919a:	065b      	lsls	r3, r3, #25
 800919c:	f53f af35 	bmi.w	800900a <_svfiprintf_r+0x2a>
 80091a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091a2:	b01d      	add	sp, #116	; 0x74
 80091a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a8:	ab03      	add	r3, sp, #12
 80091aa:	9300      	str	r3, [sp, #0]
 80091ac:	4622      	mov	r2, r4
 80091ae:	4b07      	ldr	r3, [pc, #28]	; (80091cc <_svfiprintf_r+0x1ec>)
 80091b0:	a904      	add	r1, sp, #16
 80091b2:	4640      	mov	r0, r8
 80091b4:	f000 f882 	bl	80092bc <_printf_i>
 80091b8:	e7ea      	b.n	8009190 <_svfiprintf_r+0x1b0>
 80091ba:	bf00      	nop
 80091bc:	0800981c 	.word	0x0800981c
 80091c0:	08009822 	.word	0x08009822
 80091c4:	08009826 	.word	0x08009826
 80091c8:	00000000 	.word	0x00000000
 80091cc:	08008f2d 	.word	0x08008f2d

080091d0 <_printf_common>:
 80091d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091d4:	4691      	mov	r9, r2
 80091d6:	461f      	mov	r7, r3
 80091d8:	688a      	ldr	r2, [r1, #8]
 80091da:	690b      	ldr	r3, [r1, #16]
 80091dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091e0:	4293      	cmp	r3, r2
 80091e2:	bfb8      	it	lt
 80091e4:	4613      	movlt	r3, r2
 80091e6:	f8c9 3000 	str.w	r3, [r9]
 80091ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091ee:	4606      	mov	r6, r0
 80091f0:	460c      	mov	r4, r1
 80091f2:	b112      	cbz	r2, 80091fa <_printf_common+0x2a>
 80091f4:	3301      	adds	r3, #1
 80091f6:	f8c9 3000 	str.w	r3, [r9]
 80091fa:	6823      	ldr	r3, [r4, #0]
 80091fc:	0699      	lsls	r1, r3, #26
 80091fe:	bf42      	ittt	mi
 8009200:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009204:	3302      	addmi	r3, #2
 8009206:	f8c9 3000 	strmi.w	r3, [r9]
 800920a:	6825      	ldr	r5, [r4, #0]
 800920c:	f015 0506 	ands.w	r5, r5, #6
 8009210:	d107      	bne.n	8009222 <_printf_common+0x52>
 8009212:	f104 0a19 	add.w	sl, r4, #25
 8009216:	68e3      	ldr	r3, [r4, #12]
 8009218:	f8d9 2000 	ldr.w	r2, [r9]
 800921c:	1a9b      	subs	r3, r3, r2
 800921e:	42ab      	cmp	r3, r5
 8009220:	dc28      	bgt.n	8009274 <_printf_common+0xa4>
 8009222:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009226:	6822      	ldr	r2, [r4, #0]
 8009228:	3300      	adds	r3, #0
 800922a:	bf18      	it	ne
 800922c:	2301      	movne	r3, #1
 800922e:	0692      	lsls	r2, r2, #26
 8009230:	d42d      	bmi.n	800928e <_printf_common+0xbe>
 8009232:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009236:	4639      	mov	r1, r7
 8009238:	4630      	mov	r0, r6
 800923a:	47c0      	blx	r8
 800923c:	3001      	adds	r0, #1
 800923e:	d020      	beq.n	8009282 <_printf_common+0xb2>
 8009240:	6823      	ldr	r3, [r4, #0]
 8009242:	68e5      	ldr	r5, [r4, #12]
 8009244:	f8d9 2000 	ldr.w	r2, [r9]
 8009248:	f003 0306 	and.w	r3, r3, #6
 800924c:	2b04      	cmp	r3, #4
 800924e:	bf08      	it	eq
 8009250:	1aad      	subeq	r5, r5, r2
 8009252:	68a3      	ldr	r3, [r4, #8]
 8009254:	6922      	ldr	r2, [r4, #16]
 8009256:	bf0c      	ite	eq
 8009258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800925c:	2500      	movne	r5, #0
 800925e:	4293      	cmp	r3, r2
 8009260:	bfc4      	itt	gt
 8009262:	1a9b      	subgt	r3, r3, r2
 8009264:	18ed      	addgt	r5, r5, r3
 8009266:	f04f 0900 	mov.w	r9, #0
 800926a:	341a      	adds	r4, #26
 800926c:	454d      	cmp	r5, r9
 800926e:	d11a      	bne.n	80092a6 <_printf_common+0xd6>
 8009270:	2000      	movs	r0, #0
 8009272:	e008      	b.n	8009286 <_printf_common+0xb6>
 8009274:	2301      	movs	r3, #1
 8009276:	4652      	mov	r2, sl
 8009278:	4639      	mov	r1, r7
 800927a:	4630      	mov	r0, r6
 800927c:	47c0      	blx	r8
 800927e:	3001      	adds	r0, #1
 8009280:	d103      	bne.n	800928a <_printf_common+0xba>
 8009282:	f04f 30ff 	mov.w	r0, #4294967295
 8009286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800928a:	3501      	adds	r5, #1
 800928c:	e7c3      	b.n	8009216 <_printf_common+0x46>
 800928e:	18e1      	adds	r1, r4, r3
 8009290:	1c5a      	adds	r2, r3, #1
 8009292:	2030      	movs	r0, #48	; 0x30
 8009294:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009298:	4422      	add	r2, r4
 800929a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800929e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092a2:	3302      	adds	r3, #2
 80092a4:	e7c5      	b.n	8009232 <_printf_common+0x62>
 80092a6:	2301      	movs	r3, #1
 80092a8:	4622      	mov	r2, r4
 80092aa:	4639      	mov	r1, r7
 80092ac:	4630      	mov	r0, r6
 80092ae:	47c0      	blx	r8
 80092b0:	3001      	adds	r0, #1
 80092b2:	d0e6      	beq.n	8009282 <_printf_common+0xb2>
 80092b4:	f109 0901 	add.w	r9, r9, #1
 80092b8:	e7d8      	b.n	800926c <_printf_common+0x9c>
	...

080092bc <_printf_i>:
 80092bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80092c4:	460c      	mov	r4, r1
 80092c6:	7e09      	ldrb	r1, [r1, #24]
 80092c8:	b085      	sub	sp, #20
 80092ca:	296e      	cmp	r1, #110	; 0x6e
 80092cc:	4617      	mov	r7, r2
 80092ce:	4606      	mov	r6, r0
 80092d0:	4698      	mov	r8, r3
 80092d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092d4:	f000 80b3 	beq.w	800943e <_printf_i+0x182>
 80092d8:	d822      	bhi.n	8009320 <_printf_i+0x64>
 80092da:	2963      	cmp	r1, #99	; 0x63
 80092dc:	d036      	beq.n	800934c <_printf_i+0x90>
 80092de:	d80a      	bhi.n	80092f6 <_printf_i+0x3a>
 80092e0:	2900      	cmp	r1, #0
 80092e2:	f000 80b9 	beq.w	8009458 <_printf_i+0x19c>
 80092e6:	2958      	cmp	r1, #88	; 0x58
 80092e8:	f000 8083 	beq.w	80093f2 <_printf_i+0x136>
 80092ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80092f4:	e032      	b.n	800935c <_printf_i+0xa0>
 80092f6:	2964      	cmp	r1, #100	; 0x64
 80092f8:	d001      	beq.n	80092fe <_printf_i+0x42>
 80092fa:	2969      	cmp	r1, #105	; 0x69
 80092fc:	d1f6      	bne.n	80092ec <_printf_i+0x30>
 80092fe:	6820      	ldr	r0, [r4, #0]
 8009300:	6813      	ldr	r3, [r2, #0]
 8009302:	0605      	lsls	r5, r0, #24
 8009304:	f103 0104 	add.w	r1, r3, #4
 8009308:	d52a      	bpl.n	8009360 <_printf_i+0xa4>
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	6011      	str	r1, [r2, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	da03      	bge.n	800931a <_printf_i+0x5e>
 8009312:	222d      	movs	r2, #45	; 0x2d
 8009314:	425b      	negs	r3, r3
 8009316:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800931a:	486f      	ldr	r0, [pc, #444]	; (80094d8 <_printf_i+0x21c>)
 800931c:	220a      	movs	r2, #10
 800931e:	e039      	b.n	8009394 <_printf_i+0xd8>
 8009320:	2973      	cmp	r1, #115	; 0x73
 8009322:	f000 809d 	beq.w	8009460 <_printf_i+0x1a4>
 8009326:	d808      	bhi.n	800933a <_printf_i+0x7e>
 8009328:	296f      	cmp	r1, #111	; 0x6f
 800932a:	d020      	beq.n	800936e <_printf_i+0xb2>
 800932c:	2970      	cmp	r1, #112	; 0x70
 800932e:	d1dd      	bne.n	80092ec <_printf_i+0x30>
 8009330:	6823      	ldr	r3, [r4, #0]
 8009332:	f043 0320 	orr.w	r3, r3, #32
 8009336:	6023      	str	r3, [r4, #0]
 8009338:	e003      	b.n	8009342 <_printf_i+0x86>
 800933a:	2975      	cmp	r1, #117	; 0x75
 800933c:	d017      	beq.n	800936e <_printf_i+0xb2>
 800933e:	2978      	cmp	r1, #120	; 0x78
 8009340:	d1d4      	bne.n	80092ec <_printf_i+0x30>
 8009342:	2378      	movs	r3, #120	; 0x78
 8009344:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009348:	4864      	ldr	r0, [pc, #400]	; (80094dc <_printf_i+0x220>)
 800934a:	e055      	b.n	80093f8 <_printf_i+0x13c>
 800934c:	6813      	ldr	r3, [r2, #0]
 800934e:	1d19      	adds	r1, r3, #4
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	6011      	str	r1, [r2, #0]
 8009354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009358:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800935c:	2301      	movs	r3, #1
 800935e:	e08c      	b.n	800947a <_printf_i+0x1be>
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	6011      	str	r1, [r2, #0]
 8009364:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009368:	bf18      	it	ne
 800936a:	b21b      	sxthne	r3, r3
 800936c:	e7cf      	b.n	800930e <_printf_i+0x52>
 800936e:	6813      	ldr	r3, [r2, #0]
 8009370:	6825      	ldr	r5, [r4, #0]
 8009372:	1d18      	adds	r0, r3, #4
 8009374:	6010      	str	r0, [r2, #0]
 8009376:	0628      	lsls	r0, r5, #24
 8009378:	d501      	bpl.n	800937e <_printf_i+0xc2>
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	e002      	b.n	8009384 <_printf_i+0xc8>
 800937e:	0668      	lsls	r0, r5, #25
 8009380:	d5fb      	bpl.n	800937a <_printf_i+0xbe>
 8009382:	881b      	ldrh	r3, [r3, #0]
 8009384:	4854      	ldr	r0, [pc, #336]	; (80094d8 <_printf_i+0x21c>)
 8009386:	296f      	cmp	r1, #111	; 0x6f
 8009388:	bf14      	ite	ne
 800938a:	220a      	movne	r2, #10
 800938c:	2208      	moveq	r2, #8
 800938e:	2100      	movs	r1, #0
 8009390:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009394:	6865      	ldr	r5, [r4, #4]
 8009396:	60a5      	str	r5, [r4, #8]
 8009398:	2d00      	cmp	r5, #0
 800939a:	f2c0 8095 	blt.w	80094c8 <_printf_i+0x20c>
 800939e:	6821      	ldr	r1, [r4, #0]
 80093a0:	f021 0104 	bic.w	r1, r1, #4
 80093a4:	6021      	str	r1, [r4, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d13d      	bne.n	8009426 <_printf_i+0x16a>
 80093aa:	2d00      	cmp	r5, #0
 80093ac:	f040 808e 	bne.w	80094cc <_printf_i+0x210>
 80093b0:	4665      	mov	r5, ip
 80093b2:	2a08      	cmp	r2, #8
 80093b4:	d10b      	bne.n	80093ce <_printf_i+0x112>
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	07db      	lsls	r3, r3, #31
 80093ba:	d508      	bpl.n	80093ce <_printf_i+0x112>
 80093bc:	6923      	ldr	r3, [r4, #16]
 80093be:	6862      	ldr	r2, [r4, #4]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	bfde      	ittt	le
 80093c4:	2330      	movle	r3, #48	; 0x30
 80093c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80093ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80093ce:	ebac 0305 	sub.w	r3, ip, r5
 80093d2:	6123      	str	r3, [r4, #16]
 80093d4:	f8cd 8000 	str.w	r8, [sp]
 80093d8:	463b      	mov	r3, r7
 80093da:	aa03      	add	r2, sp, #12
 80093dc:	4621      	mov	r1, r4
 80093de:	4630      	mov	r0, r6
 80093e0:	f7ff fef6 	bl	80091d0 <_printf_common>
 80093e4:	3001      	adds	r0, #1
 80093e6:	d14d      	bne.n	8009484 <_printf_i+0x1c8>
 80093e8:	f04f 30ff 	mov.w	r0, #4294967295
 80093ec:	b005      	add	sp, #20
 80093ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093f2:	4839      	ldr	r0, [pc, #228]	; (80094d8 <_printf_i+0x21c>)
 80093f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80093f8:	6813      	ldr	r3, [r2, #0]
 80093fa:	6821      	ldr	r1, [r4, #0]
 80093fc:	1d1d      	adds	r5, r3, #4
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6015      	str	r5, [r2, #0]
 8009402:	060a      	lsls	r2, r1, #24
 8009404:	d50b      	bpl.n	800941e <_printf_i+0x162>
 8009406:	07ca      	lsls	r2, r1, #31
 8009408:	bf44      	itt	mi
 800940a:	f041 0120 	orrmi.w	r1, r1, #32
 800940e:	6021      	strmi	r1, [r4, #0]
 8009410:	b91b      	cbnz	r3, 800941a <_printf_i+0x15e>
 8009412:	6822      	ldr	r2, [r4, #0]
 8009414:	f022 0220 	bic.w	r2, r2, #32
 8009418:	6022      	str	r2, [r4, #0]
 800941a:	2210      	movs	r2, #16
 800941c:	e7b7      	b.n	800938e <_printf_i+0xd2>
 800941e:	064d      	lsls	r5, r1, #25
 8009420:	bf48      	it	mi
 8009422:	b29b      	uxthmi	r3, r3
 8009424:	e7ef      	b.n	8009406 <_printf_i+0x14a>
 8009426:	4665      	mov	r5, ip
 8009428:	fbb3 f1f2 	udiv	r1, r3, r2
 800942c:	fb02 3311 	mls	r3, r2, r1, r3
 8009430:	5cc3      	ldrb	r3, [r0, r3]
 8009432:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009436:	460b      	mov	r3, r1
 8009438:	2900      	cmp	r1, #0
 800943a:	d1f5      	bne.n	8009428 <_printf_i+0x16c>
 800943c:	e7b9      	b.n	80093b2 <_printf_i+0xf6>
 800943e:	6813      	ldr	r3, [r2, #0]
 8009440:	6825      	ldr	r5, [r4, #0]
 8009442:	6961      	ldr	r1, [r4, #20]
 8009444:	1d18      	adds	r0, r3, #4
 8009446:	6010      	str	r0, [r2, #0]
 8009448:	0628      	lsls	r0, r5, #24
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	d501      	bpl.n	8009452 <_printf_i+0x196>
 800944e:	6019      	str	r1, [r3, #0]
 8009450:	e002      	b.n	8009458 <_printf_i+0x19c>
 8009452:	066a      	lsls	r2, r5, #25
 8009454:	d5fb      	bpl.n	800944e <_printf_i+0x192>
 8009456:	8019      	strh	r1, [r3, #0]
 8009458:	2300      	movs	r3, #0
 800945a:	6123      	str	r3, [r4, #16]
 800945c:	4665      	mov	r5, ip
 800945e:	e7b9      	b.n	80093d4 <_printf_i+0x118>
 8009460:	6813      	ldr	r3, [r2, #0]
 8009462:	1d19      	adds	r1, r3, #4
 8009464:	6011      	str	r1, [r2, #0]
 8009466:	681d      	ldr	r5, [r3, #0]
 8009468:	6862      	ldr	r2, [r4, #4]
 800946a:	2100      	movs	r1, #0
 800946c:	4628      	mov	r0, r5
 800946e:	f7f6 fed7 	bl	8000220 <memchr>
 8009472:	b108      	cbz	r0, 8009478 <_printf_i+0x1bc>
 8009474:	1b40      	subs	r0, r0, r5
 8009476:	6060      	str	r0, [r4, #4]
 8009478:	6863      	ldr	r3, [r4, #4]
 800947a:	6123      	str	r3, [r4, #16]
 800947c:	2300      	movs	r3, #0
 800947e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009482:	e7a7      	b.n	80093d4 <_printf_i+0x118>
 8009484:	6923      	ldr	r3, [r4, #16]
 8009486:	462a      	mov	r2, r5
 8009488:	4639      	mov	r1, r7
 800948a:	4630      	mov	r0, r6
 800948c:	47c0      	blx	r8
 800948e:	3001      	adds	r0, #1
 8009490:	d0aa      	beq.n	80093e8 <_printf_i+0x12c>
 8009492:	6823      	ldr	r3, [r4, #0]
 8009494:	079b      	lsls	r3, r3, #30
 8009496:	d413      	bmi.n	80094c0 <_printf_i+0x204>
 8009498:	68e0      	ldr	r0, [r4, #12]
 800949a:	9b03      	ldr	r3, [sp, #12]
 800949c:	4298      	cmp	r0, r3
 800949e:	bfb8      	it	lt
 80094a0:	4618      	movlt	r0, r3
 80094a2:	e7a3      	b.n	80093ec <_printf_i+0x130>
 80094a4:	2301      	movs	r3, #1
 80094a6:	464a      	mov	r2, r9
 80094a8:	4639      	mov	r1, r7
 80094aa:	4630      	mov	r0, r6
 80094ac:	47c0      	blx	r8
 80094ae:	3001      	adds	r0, #1
 80094b0:	d09a      	beq.n	80093e8 <_printf_i+0x12c>
 80094b2:	3501      	adds	r5, #1
 80094b4:	68e3      	ldr	r3, [r4, #12]
 80094b6:	9a03      	ldr	r2, [sp, #12]
 80094b8:	1a9b      	subs	r3, r3, r2
 80094ba:	42ab      	cmp	r3, r5
 80094bc:	dcf2      	bgt.n	80094a4 <_printf_i+0x1e8>
 80094be:	e7eb      	b.n	8009498 <_printf_i+0x1dc>
 80094c0:	2500      	movs	r5, #0
 80094c2:	f104 0919 	add.w	r9, r4, #25
 80094c6:	e7f5      	b.n	80094b4 <_printf_i+0x1f8>
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1ac      	bne.n	8009426 <_printf_i+0x16a>
 80094cc:	7803      	ldrb	r3, [r0, #0]
 80094ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094d6:	e76c      	b.n	80093b2 <_printf_i+0xf6>
 80094d8:	0800982d 	.word	0x0800982d
 80094dc:	0800983e 	.word	0x0800983e

080094e0 <memmove>:
 80094e0:	4288      	cmp	r0, r1
 80094e2:	b510      	push	{r4, lr}
 80094e4:	eb01 0302 	add.w	r3, r1, r2
 80094e8:	d807      	bhi.n	80094fa <memmove+0x1a>
 80094ea:	1e42      	subs	r2, r0, #1
 80094ec:	4299      	cmp	r1, r3
 80094ee:	d00a      	beq.n	8009506 <memmove+0x26>
 80094f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094f4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80094f8:	e7f8      	b.n	80094ec <memmove+0xc>
 80094fa:	4283      	cmp	r3, r0
 80094fc:	d9f5      	bls.n	80094ea <memmove+0xa>
 80094fe:	1881      	adds	r1, r0, r2
 8009500:	1ad2      	subs	r2, r2, r3
 8009502:	42d3      	cmn	r3, r2
 8009504:	d100      	bne.n	8009508 <memmove+0x28>
 8009506:	bd10      	pop	{r4, pc}
 8009508:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800950c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009510:	e7f7      	b.n	8009502 <memmove+0x22>
	...

08009514 <_free_r>:
 8009514:	b538      	push	{r3, r4, r5, lr}
 8009516:	4605      	mov	r5, r0
 8009518:	2900      	cmp	r1, #0
 800951a:	d045      	beq.n	80095a8 <_free_r+0x94>
 800951c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009520:	1f0c      	subs	r4, r1, #4
 8009522:	2b00      	cmp	r3, #0
 8009524:	bfb8      	it	lt
 8009526:	18e4      	addlt	r4, r4, r3
 8009528:	f000 f8d2 	bl	80096d0 <__malloc_lock>
 800952c:	4a1f      	ldr	r2, [pc, #124]	; (80095ac <_free_r+0x98>)
 800952e:	6813      	ldr	r3, [r2, #0]
 8009530:	4610      	mov	r0, r2
 8009532:	b933      	cbnz	r3, 8009542 <_free_r+0x2e>
 8009534:	6063      	str	r3, [r4, #4]
 8009536:	6014      	str	r4, [r2, #0]
 8009538:	4628      	mov	r0, r5
 800953a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800953e:	f000 b8c8 	b.w	80096d2 <__malloc_unlock>
 8009542:	42a3      	cmp	r3, r4
 8009544:	d90c      	bls.n	8009560 <_free_r+0x4c>
 8009546:	6821      	ldr	r1, [r4, #0]
 8009548:	1862      	adds	r2, r4, r1
 800954a:	4293      	cmp	r3, r2
 800954c:	bf04      	itt	eq
 800954e:	681a      	ldreq	r2, [r3, #0]
 8009550:	685b      	ldreq	r3, [r3, #4]
 8009552:	6063      	str	r3, [r4, #4]
 8009554:	bf04      	itt	eq
 8009556:	1852      	addeq	r2, r2, r1
 8009558:	6022      	streq	r2, [r4, #0]
 800955a:	6004      	str	r4, [r0, #0]
 800955c:	e7ec      	b.n	8009538 <_free_r+0x24>
 800955e:	4613      	mov	r3, r2
 8009560:	685a      	ldr	r2, [r3, #4]
 8009562:	b10a      	cbz	r2, 8009568 <_free_r+0x54>
 8009564:	42a2      	cmp	r2, r4
 8009566:	d9fa      	bls.n	800955e <_free_r+0x4a>
 8009568:	6819      	ldr	r1, [r3, #0]
 800956a:	1858      	adds	r0, r3, r1
 800956c:	42a0      	cmp	r0, r4
 800956e:	d10b      	bne.n	8009588 <_free_r+0x74>
 8009570:	6820      	ldr	r0, [r4, #0]
 8009572:	4401      	add	r1, r0
 8009574:	1858      	adds	r0, r3, r1
 8009576:	4282      	cmp	r2, r0
 8009578:	6019      	str	r1, [r3, #0]
 800957a:	d1dd      	bne.n	8009538 <_free_r+0x24>
 800957c:	6810      	ldr	r0, [r2, #0]
 800957e:	6852      	ldr	r2, [r2, #4]
 8009580:	605a      	str	r2, [r3, #4]
 8009582:	4401      	add	r1, r0
 8009584:	6019      	str	r1, [r3, #0]
 8009586:	e7d7      	b.n	8009538 <_free_r+0x24>
 8009588:	d902      	bls.n	8009590 <_free_r+0x7c>
 800958a:	230c      	movs	r3, #12
 800958c:	602b      	str	r3, [r5, #0]
 800958e:	e7d3      	b.n	8009538 <_free_r+0x24>
 8009590:	6820      	ldr	r0, [r4, #0]
 8009592:	1821      	adds	r1, r4, r0
 8009594:	428a      	cmp	r2, r1
 8009596:	bf04      	itt	eq
 8009598:	6811      	ldreq	r1, [r2, #0]
 800959a:	6852      	ldreq	r2, [r2, #4]
 800959c:	6062      	str	r2, [r4, #4]
 800959e:	bf04      	itt	eq
 80095a0:	1809      	addeq	r1, r1, r0
 80095a2:	6021      	streq	r1, [r4, #0]
 80095a4:	605c      	str	r4, [r3, #4]
 80095a6:	e7c7      	b.n	8009538 <_free_r+0x24>
 80095a8:	bd38      	pop	{r3, r4, r5, pc}
 80095aa:	bf00      	nop
 80095ac:	200049ec 	.word	0x200049ec

080095b0 <_malloc_r>:
 80095b0:	b570      	push	{r4, r5, r6, lr}
 80095b2:	1ccd      	adds	r5, r1, #3
 80095b4:	f025 0503 	bic.w	r5, r5, #3
 80095b8:	3508      	adds	r5, #8
 80095ba:	2d0c      	cmp	r5, #12
 80095bc:	bf38      	it	cc
 80095be:	250c      	movcc	r5, #12
 80095c0:	2d00      	cmp	r5, #0
 80095c2:	4606      	mov	r6, r0
 80095c4:	db01      	blt.n	80095ca <_malloc_r+0x1a>
 80095c6:	42a9      	cmp	r1, r5
 80095c8:	d903      	bls.n	80095d2 <_malloc_r+0x22>
 80095ca:	230c      	movs	r3, #12
 80095cc:	6033      	str	r3, [r6, #0]
 80095ce:	2000      	movs	r0, #0
 80095d0:	bd70      	pop	{r4, r5, r6, pc}
 80095d2:	f000 f87d 	bl	80096d0 <__malloc_lock>
 80095d6:	4a21      	ldr	r2, [pc, #132]	; (800965c <_malloc_r+0xac>)
 80095d8:	6814      	ldr	r4, [r2, #0]
 80095da:	4621      	mov	r1, r4
 80095dc:	b991      	cbnz	r1, 8009604 <_malloc_r+0x54>
 80095de:	4c20      	ldr	r4, [pc, #128]	; (8009660 <_malloc_r+0xb0>)
 80095e0:	6823      	ldr	r3, [r4, #0]
 80095e2:	b91b      	cbnz	r3, 80095ec <_malloc_r+0x3c>
 80095e4:	4630      	mov	r0, r6
 80095e6:	f000 f863 	bl	80096b0 <_sbrk_r>
 80095ea:	6020      	str	r0, [r4, #0]
 80095ec:	4629      	mov	r1, r5
 80095ee:	4630      	mov	r0, r6
 80095f0:	f000 f85e 	bl	80096b0 <_sbrk_r>
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	d124      	bne.n	8009642 <_malloc_r+0x92>
 80095f8:	230c      	movs	r3, #12
 80095fa:	6033      	str	r3, [r6, #0]
 80095fc:	4630      	mov	r0, r6
 80095fe:	f000 f868 	bl	80096d2 <__malloc_unlock>
 8009602:	e7e4      	b.n	80095ce <_malloc_r+0x1e>
 8009604:	680b      	ldr	r3, [r1, #0]
 8009606:	1b5b      	subs	r3, r3, r5
 8009608:	d418      	bmi.n	800963c <_malloc_r+0x8c>
 800960a:	2b0b      	cmp	r3, #11
 800960c:	d90f      	bls.n	800962e <_malloc_r+0x7e>
 800960e:	600b      	str	r3, [r1, #0]
 8009610:	50cd      	str	r5, [r1, r3]
 8009612:	18cc      	adds	r4, r1, r3
 8009614:	4630      	mov	r0, r6
 8009616:	f000 f85c 	bl	80096d2 <__malloc_unlock>
 800961a:	f104 000b 	add.w	r0, r4, #11
 800961e:	1d23      	adds	r3, r4, #4
 8009620:	f020 0007 	bic.w	r0, r0, #7
 8009624:	1ac3      	subs	r3, r0, r3
 8009626:	d0d3      	beq.n	80095d0 <_malloc_r+0x20>
 8009628:	425a      	negs	r2, r3
 800962a:	50e2      	str	r2, [r4, r3]
 800962c:	e7d0      	b.n	80095d0 <_malloc_r+0x20>
 800962e:	428c      	cmp	r4, r1
 8009630:	684b      	ldr	r3, [r1, #4]
 8009632:	bf16      	itet	ne
 8009634:	6063      	strne	r3, [r4, #4]
 8009636:	6013      	streq	r3, [r2, #0]
 8009638:	460c      	movne	r4, r1
 800963a:	e7eb      	b.n	8009614 <_malloc_r+0x64>
 800963c:	460c      	mov	r4, r1
 800963e:	6849      	ldr	r1, [r1, #4]
 8009640:	e7cc      	b.n	80095dc <_malloc_r+0x2c>
 8009642:	1cc4      	adds	r4, r0, #3
 8009644:	f024 0403 	bic.w	r4, r4, #3
 8009648:	42a0      	cmp	r0, r4
 800964a:	d005      	beq.n	8009658 <_malloc_r+0xa8>
 800964c:	1a21      	subs	r1, r4, r0
 800964e:	4630      	mov	r0, r6
 8009650:	f000 f82e 	bl	80096b0 <_sbrk_r>
 8009654:	3001      	adds	r0, #1
 8009656:	d0cf      	beq.n	80095f8 <_malloc_r+0x48>
 8009658:	6025      	str	r5, [r4, #0]
 800965a:	e7db      	b.n	8009614 <_malloc_r+0x64>
 800965c:	200049ec 	.word	0x200049ec
 8009660:	200049f0 	.word	0x200049f0

08009664 <_realloc_r>:
 8009664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009666:	4607      	mov	r7, r0
 8009668:	4614      	mov	r4, r2
 800966a:	460e      	mov	r6, r1
 800966c:	b921      	cbnz	r1, 8009678 <_realloc_r+0x14>
 800966e:	4611      	mov	r1, r2
 8009670:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009674:	f7ff bf9c 	b.w	80095b0 <_malloc_r>
 8009678:	b922      	cbnz	r2, 8009684 <_realloc_r+0x20>
 800967a:	f7ff ff4b 	bl	8009514 <_free_r>
 800967e:	4625      	mov	r5, r4
 8009680:	4628      	mov	r0, r5
 8009682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009684:	f000 f826 	bl	80096d4 <_malloc_usable_size_r>
 8009688:	42a0      	cmp	r0, r4
 800968a:	d20f      	bcs.n	80096ac <_realloc_r+0x48>
 800968c:	4621      	mov	r1, r4
 800968e:	4638      	mov	r0, r7
 8009690:	f7ff ff8e 	bl	80095b0 <_malloc_r>
 8009694:	4605      	mov	r5, r0
 8009696:	2800      	cmp	r0, #0
 8009698:	d0f2      	beq.n	8009680 <_realloc_r+0x1c>
 800969a:	4631      	mov	r1, r6
 800969c:	4622      	mov	r2, r4
 800969e:	f7ff fc11 	bl	8008ec4 <memcpy>
 80096a2:	4631      	mov	r1, r6
 80096a4:	4638      	mov	r0, r7
 80096a6:	f7ff ff35 	bl	8009514 <_free_r>
 80096aa:	e7e9      	b.n	8009680 <_realloc_r+0x1c>
 80096ac:	4635      	mov	r5, r6
 80096ae:	e7e7      	b.n	8009680 <_realloc_r+0x1c>

080096b0 <_sbrk_r>:
 80096b0:	b538      	push	{r3, r4, r5, lr}
 80096b2:	4c06      	ldr	r4, [pc, #24]	; (80096cc <_sbrk_r+0x1c>)
 80096b4:	2300      	movs	r3, #0
 80096b6:	4605      	mov	r5, r0
 80096b8:	4608      	mov	r0, r1
 80096ba:	6023      	str	r3, [r4, #0]
 80096bc:	f7f7 fc6c 	bl	8000f98 <_sbrk>
 80096c0:	1c43      	adds	r3, r0, #1
 80096c2:	d102      	bne.n	80096ca <_sbrk_r+0x1a>
 80096c4:	6823      	ldr	r3, [r4, #0]
 80096c6:	b103      	cbz	r3, 80096ca <_sbrk_r+0x1a>
 80096c8:	602b      	str	r3, [r5, #0]
 80096ca:	bd38      	pop	{r3, r4, r5, pc}
 80096cc:	20004d48 	.word	0x20004d48

080096d0 <__malloc_lock>:
 80096d0:	4770      	bx	lr

080096d2 <__malloc_unlock>:
 80096d2:	4770      	bx	lr

080096d4 <_malloc_usable_size_r>:
 80096d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096d8:	1f18      	subs	r0, r3, #4
 80096da:	2b00      	cmp	r3, #0
 80096dc:	bfbc      	itt	lt
 80096de:	580b      	ldrlt	r3, [r1, r0]
 80096e0:	18c0      	addlt	r0, r0, r3
 80096e2:	4770      	bx	lr

080096e4 <_init>:
 80096e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e6:	bf00      	nop
 80096e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ea:	bc08      	pop	{r3}
 80096ec:	469e      	mov	lr, r3
 80096ee:	4770      	bx	lr

080096f0 <_fini>:
 80096f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f2:	bf00      	nop
 80096f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096f6:	bc08      	pop	{r3}
 80096f8:	469e      	mov	lr, r3
 80096fa:	4770      	bx	lr
